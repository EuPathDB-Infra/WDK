package org.gusdb.wdk.model.query.param;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.Logger;

/**
 * This class encapsulates a vocabulary and default value for an
 * AbstractEnumParam based on a set of context values.  It is generated by
 * subclasses of AbstractEnumParam but is used by EnumParamBean to hold
 * dependent param info for the life of a request (since it can be expensive
 * to generate).
 * 
 * History: When it was created, we were maintaining context state in
 * AbstractEnumParam itself, which violated the idea that Model components were
 * stateless.  Since a lot of information must be retrieved and stored in
 * EnumParamBean, this class was created to hold it all for a single context.
 * EnumParamBean will create a new cache if its context values change.
 * 
 * @author rdoherty
 */
public class FilterParamNewInstance {
	
	private static Logger logger = Logger.getLogger(FilterParamNewInstance.class);
	
	// param this cache was created by
	// context values used to create this cache
	private Map<String, String> _dependedParamValues;
	// default value based on vocabulary and select mode (or maybe "hard-coded" (in XML) default)
	private String _defaultValue;
		
	public FilterParamNewInstance(Map<String, String> dependedParamValues) {
		_dependedParamValues = dependedParamValues;
	}
	
	public String getDefaultValue() {
	  return _defaultValue;
	}
	
	public void setDefaultValue(String defaultValue) {
		_defaultValue = defaultValue;
	}

	/**
	 * Determines and returns the sanity default for this param in the
	 * following way: if sanitySelectMode is not null, use it to choose
	 * params; if it is, use default (i.e. however param normally gets default)
	 * 
	 * @param sanitySelectMode select mode form model (ParamValuesSet)
	 * @return default value for this param, based on cached vocab values
	 */
	public String getSanityDefaultValue(SelectMode sanitySelectMode, boolean isMultiPick, String sanityDefaultNoSelectMode) {
	  logger.info("Getting sanity default value with passed mode: " + sanitySelectMode);
	  if (sanitySelectMode != null) {
	    return AbstractEnumParam.getDefaultWithSelectMode(
	        getTerms(), sanitySelectMode, isMultiPick,
	        getTermTreeListRef().isEmpty() ? null : getTermTreeListRef().get(0));
	  }
	  String defaultVal;
	  logger.info("Sanity select mode is null; using sanity default (" + sanityDefaultNoSelectMode +
	      ") or default (" + getDefaultValue() + ")");
	  return (((defaultVal = sanityDefaultNoSelectMode) != null) ?
	    defaultVal : getDefaultValue());
	  }

	
	
	public String[] getDisplays() {
        String[] displays = new String[_termDisplayMap.size()];
        _termDisplayMap.values().toArray(displays);
        return displays;
	}


	public Map<String, String> getDependedValues() {
		return _dependedParamValues;
	}
	
}
