#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use FileHandle;

my ($model, $loadNewDatabase, $createNewExpected, $outputDir, $commandListFile, $verbose);

&GetOptions('loadNewDatabase!' => \$loadNewDatabase,
	    'createNewExpectedResult!' => \$createNewExpected,
	    'outputDirectory=s' => \$outputDir,
	    'model=s' =>\$model,
            'commandListFile=s' => \$commandListFile,
	    'verbose!' => \$verbose,
	    );

&usage() unless ($commandListFile && $model && $outputDir);

if ($loadNewDatabase){
    
    my $dbCmd = "wdkTestDb -drop -create -model $model"; 
    print STDERR "Performing database management with command $dbCmd\n\n" if $verbose;
    system($dbCmd) && exit(1);
}

my $commandFh = FileHandle->new("<" . $commandListFile);

die "could not open $commandListFile" unless $commandFh;

my ($name, $testCmd, $criticalString, $critical);
my $failed = 0;

my $globalArgs = " -model $model ";

while (<$commandFh>){
    chomp;
    my $nameLine = $_;
    if ($nameLine =~ /^name="(.*)"/){
	$name = $1;
    }
    else {
	&commandFileUsage($commandListFile, $nameLine);
    }
    my $cmdLine = <$commandFh>;
    if ($cmdLine =~ /^command="(.*)"/){
	
	$testCmd = $1 . $globalArgs;
    }
    else {
	&commandFileUsage($commandListFile, $cmdLine);
    }
    my $criticalLine = <$commandFh>;
    if ($criticalLine =~ /^critical=(\S+)/){
	$criticalString = $1;
	if ($criticalString eq "true"){
	    $critical = 1;
	}
	if ($criticalString eq "false"){
	    $critical = 0;
	}
	if ($criticalString ne "true" && $criticalString ne "false"){
	    &commandFileUsage($commandListFile, $criticalLine);
	}
    }
    else {
	&commandFileUsage($commandListFile, $criticalLine);
    }
    
    my $tempFailed = &runTest($name, $testCmd, $critical);
    $failed = $tempFailed if $failed == 0;
}

if ($failed){ exit(1);}


sub runTest{

    my ($name, $cmd, $critical) = @_;

    my $fullCmd = $cmd . " >  $outputDir/$name.test" . ".out 2> $outputDir/$name.test" . ".err";

    my $testFailed = 0;
 
    print STDERR "running regression test $name\n\n";
    print STDERR "running command $fullCmd\n\n" if $verbose;

    system($fullCmd);
    
     if ($createNewExpected){
	my $existing = "$outputDir/$name" . ".out";
	my $fh = FileHandle->new("<$existing");
	if ($fh){ #expected result exists already
	    my $backupCmd = "cp --reply=yes $outputDir/$name" . ".out $outputDir/$name" . ".out.save";
	    print STDERR "copying existing expected result to $outputDir/$name" . ".out.save\n\n" if $verbose;
	    system($backupCmd);
	}

	my $copyCmd = "cp --reply=yes $outputDir/$name.test" . ".out $outputDir/$name" . ".out";
	print STDERR "running $copyCmd\n\n" if $verbose;
	system($copyCmd);
    }
    else {  #this means things will die if user does not have current expected and has not selected --createNewExpectedResult
	my $compareCmd = "diff -q $outputDir/$name.test" . ".out $outputDir/$name" . ".out";
	print STDERR "running $compareCmd\n\n" if $verbose;
	my $diffResults = system($compareCmd); 
	if ($diffResults){
	    $testFailed = 1;
	    my $errStr = "Error!  Test $name failed!\n";
	    $errStr .= "The observed result of the test was different than the expected result of a test previously run.\n";
	    $errStr .= "To see the difference, run diff $outputDir/$name.test" . ".out $outputDir/$name" . ".out\n";
	    print STDERR "\n$errStr\n";
	    if ($critical){
		die ("Received error in critical test $name.  Ending regression test");
	    }
	}
	else{
	    print STDERR "Test $name passed!\n\n";
	}
	
    }
    return $testFailed;
}

sub usage{
    #usage formatting all done manually; could possibly use clean third-party application to help out with this (want result to look like other wdk command usage)
    print STDERR "\nusage:  wdkRegressionTest -outputDirectory directory_name -model model_name -commandListFile file_name -createNewExpectedResult! -loadNewDatabase! -verbose!\n\nRuns wdk executables from provided file and compares output to an expected result for testing purposes. Options:\n-createNewExpectedResult!\toverwrite existing regression test expected result\n-model\t\t\t\tname of model that will be used in the test\n-outputDirectory\t\tall results of test including error files will be placed in this directory\n-commandListFile\t\tfile that contains lists of commands to run in test\n-verbose\t\t\tprints out names of shell commands being executed\n-loadNewDatabase!\t\tflag to create database from provided test flat files; set this flag when running\n\t\t\t\tthe regression test for the first time and when data in the files have changed\n";
    exit(1);

}

sub commandFileUsage{

    my ($commandListFile, $errorLine) = @_;
    my $errStr = "The file $commandListFile needs to conform\n to the following input specifications for each test provided in the file:\n";
    $errStr .= "name=\"[name of test]\"\n";
    $errStr .= "command=\"[command to run with any parameters necessary for the command]\"\n";
    $errStr .= "critical=\"[true/false depending on whether wdkRegressionTest should die if the test fails]\"\n";
    $errStr .= "\nThe line that fails this input requirement is the following: $errorLine\n";
    if ($errorLine =~ /\s*/){
	$errStr .= "(If this failure line is blank, you may be missing a line at the end of the command file)\n";
    }
    die ($errStr);
}
