<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<sim-project version="5.92" multi-file="no">
  <meta>
    <name>WDK Model</name>
    <authors> </authors>
    <description />
  </meta>
  <management>
    <persons>
      <person id="P897e71d533484074936d1bb2154fee57">
        <first-name />
        <last-name />
        <role />
        <e-mail />
        <phone-number />
        <description />
        <color>#00000000</color>
      </person>
    </persons>
    <tasks />
    <requirements />
    <issues />
    <to-dos />
  </management>
  <glossary />
  <types>
    <type-sets>
      <type-set file="UmlTypes.xml" />
    </type-sets>
    <custom-types>
      <type id="RecordClass" name="RecordClass" description="" />
      <type id="AnswerFilterInstance" name="AnswerFilterInstance" description="" />
      <type id="Map&lt;String, AnswerFilterInstance&gt;" name="Map&lt;String, AnswerFilterInstance&gt;" description="" />
      <type id="WdkModel" name="WdkModel" description="" />
      <type id="boolean" name="boolean" description="" />
      <type id="SqlQuery" name="SqlQuery" description="" />
      <type id="AnswerParam" name="AnswerParam" description="" />
      <type id="WdkModelText" name="WdkModelText" description="" />
      <type id="Map&lt;String, Object&gt;" name="Map&lt;String, Object&gt;" description="" />
      <type id="AnswerFilterInstanceReference" name="AnswerFilterInstanceReference" description="" />
      <type id="AnswerFilterInstance[]" name="AnswerFilterInstance[]" description="" />
      <type id="User" name="User" description="" />
      <type id="Answer" name="Answer" description="" />
      <type id="ResultFactory" name="ResultFactory" description="" />
      <type id="Question" name="Question" description="" />
      <type id="QueryInstance" name="QueryInstance" description="" />
      <type id="int" name="int" description="" />
      <type id="Map&lt;PrimaryKeyAttributeValue, RecordInstance&gt;" name="Map&lt;PrimaryKeyAttributeValue, RecordInstance&gt;" description="" />
      <type id="Map&lt;String, Integer&gt;" name="Map&lt;String, Integer&gt;" description="" />
      <type id="Map&lt;String, Boolean&gt;" name="Map&lt;String, Boolean&gt;" description="" />
      <type id="AnswerValue" name="AnswerValue" description="" />
      <type id="Map&lt;String, String&gt;" name="Map&lt;String, String&gt;" description="" />
      <type id="RecordInstance[]" name="RecordInstance[]" description="" />
      <type id="RecordInstance" name="RecordInstance" description="" />
      <type id="PrimaryKeyAttributeValue" name="PrimaryKeyAttributeValue" description="" />
      <type id="Reporter" name="Reporter" description="" />
      <type id="Map" name="Map" description="" />
      <type id="Iterable&lt;AnswerValue&gt;" name="Iterable&lt;AnswerValue&gt;" description="" />
      <type id="Query" name="Query" description="" />
      <type id="TableField" name="TableField" description="" />
      <type id="Collection" name="Collection" description="" />
      <type id="List&lt;AttributeField&gt;" name="List&lt;AttributeField&gt;" description="" />
      <type id="Map&lt;String, AttributeField&gt;" name="Map&lt;String, AttributeField&gt;" description="" />
      <type id="TreeNode" name="TreeNode" description="" />
      <type id="AttributeCategoryTree" name="AttributeCategoryTree" description="" />
      <type id="List&lt;String[]&gt;" name="List&lt;String[]&gt;" description="" />
      <type id="AttributeCategory" name="AttributeCategory" description="" />
      <type id="List&lt;AttributeCategory&gt;" name="List&lt;AttributeCategory&gt;" description="" />
      <type id="AttributeField" name="AttributeField" description="" />
      <type id="List" name="List" description="" />
      <type id="FieldScope" name="FieldScope" description="" />
      <type id="StringBuilder" name="StringBuilder" description="" />
      <type id="Collection&lt;AttributeField&gt;" name="Collection&lt;AttributeField&gt;" description="" />
      <type id="AttributeFieldContainer" name="AttributeFieldContainer" description="" />
      <type id="AttributePluginReference" name="AttributePluginReference" description="" />
      <type id="Map&lt;String, AttributePluginReference&gt;" name="Map&lt;String, AttributePluginReference&gt;" description="" />
      <type id="Map&lt;String, ColumnAttributeField&gt;" name="Map&lt;String, ColumnAttributeField&gt;" description="" />
      <type id="Stack" name="Stack" description="" />
      <type id="String[]" name="String[]" description="" />
      <type id="AttributeField[]" name="AttributeField[]" description="" />
      <type id="Object" name="Object" description="" />
      <type id="AttributeValue" name="AttributeValue" description="" />
      <type id="Column" name="Column" description="" />
      <type id="ColumnAttributeField" name="ColumnAttributeField" description="" />
      <type id="List&lt;WdkModelText&gt;" name="List&lt;WdkModelText&gt;" description="" />
      <type id="GroupSet" name="GroupSet" description="" />
      <type id="Group" name="Group" description="" />
      <type id="Group[]" name="Group[]" description="" />
      <type id="AttributeValueContainer" name="AttributeValueContainer" description="" />
      <type id="LinkAttributeField" name="LinkAttributeField" description="" />
      <type id="ModelConfigUserDB" name="ModelConfigUserDB" description="" />
      <type id="ModelConfigAppDB" name="ModelConfigAppDB" description="" />
      <type id="QueryMonitor" name="QueryMonitor" description="" />
      <type id="short" name="short" description="" />
      <type id="long" name="long" description="" />
      <type id="ModelConfig" name="ModelConfig" description="" />
      <type id="Digester" name="Digester" description="" />
      <type id="Document" name="Document" description="" />
      <type id="URL" name="URL" description="" />
      <type id="Set" name="Set" description="" />
      <type id="&lt;String&gt;" name="&lt;String&gt;" description="" />
      <type id="Options" name="Options" description="" />
      <type id="CommandLine" name="CommandLine" description="" />
      <type id="PrimaryKeyAttributeField" name="PrimaryKeyAttributeField" description="" />
      <type id="&lt;String, Object&gt;" name="&lt;String, Object&gt;" description="" />
      <type id="QuestionSet" name="QuestionSet" description="" />
      <type id="DynamicAttributeSet" name="DynamicAttributeSet" description="" />
      <type id="AttributeList" name="AttributeList" description="" />
      <type id="Map&lt;String, Field&gt;" name="Map&lt;String, Field&gt;" description="" />
      <type id="Param[]" name="Param[]" description="" />
      <type id="Map&lt;String, Param&gt;" name="Map&lt;String, Param&gt;" description="" />
      <type id="Map&lt;Group, Map&lt;String, Param&gt;&gt;" name="Map&lt;Group, Map&lt;String, Param&gt;&gt;" description="" />
      <type id="AnswerParam[]" name="AnswerParam[]" description="" />
      <type id="ParamReference" name="ParamReference" description="" />
      <type id="Map&lt;String, SummaryView&gt;" name="Map&lt;String, SummaryView&gt;" description="" />
      <type id="SummaryView" name="SummaryView" description="" />
      <type id="Question[]" name="Question[]" description="" />
      <type id="Map&lt;String, Question[]&gt;" name="Map&lt;String, Question[]&gt;" description="" />
      <type id="RecordClassSet" name="RecordClassSet" description="" />
      <type id="ParamValuesSet" name="ParamValuesSet" description="" />
      <type id="Map&lt;String, Question&gt;" name="Map&lt;String, Question&gt;" description="" />
      <type id="AttributeQueryReference" name="AttributeQueryReference" description="" />
      <type id="NestedRecord" name="NestedRecord" description="" />
      <type id="NestedRecordList" name="NestedRecordList" description="" />
      <type id="ReporterRef" name="ReporterRef" description="" />
      <type id="Map&lt;String, TableField&gt;" name="Map&lt;String, TableField&gt;" description="" />
      <type id="TableField[]" name="TableField[]" description="" />
      <type id="Field[]" name="Field[]" description="" />
      <type id="Reference" name="Reference" description="" />
      <type id="Map&lt;String, ReporterRef&gt;" name="Map&lt;String, ReporterRef&gt;" description="" />
      <type id="Map&lt;String, Query&gt;" name="Map&lt;String, Query&gt;" description="" />
      <type id="Param" name="Param" description="" />
      <type id="AnswerFilter" name="AnswerFilter" description="" />
      <type id="AnswerFilterLayout" name="AnswerFilterLayout" description="" />
      <type id="Map&lt;String, AnswerFilterLayout&gt;" name="Map&lt;String, AnswerFilterLayout&gt;" description="" />
      <type id="AnswerFilterLayout[]" name="AnswerFilterLayout[]" description="" />
      <type id="FavoriteReference" name="FavoriteReference" description="" />
      <type id="Map&lt;String, RecordView&gt;" name="Map&lt;String, RecordView&gt;" description="" />
      <type id="RecordView" name="RecordView" description="" />
      <type id="List&lt;Map&lt;String, Object&gt;&gt;" name="List&lt;Map&lt;String, Object&gt;&gt;" description="" />
      <type id="RecordClass[]" name="RecordClass[]" description="" />
      <type id="TableValue" name="TableValue" description="" />
      <type id="Map&lt;String, TableValue&gt;" name="Map&lt;String, TableValue&gt;" description="" />
      <type id="Map&lt;String, AttributeValue&gt;" name="Map&lt;String, AttributeValue&gt;" description="" />
      <type id="Map&lt;String, RecordInstance&gt;" name="Map&lt;String, RecordInstance&gt;" description="" />
      <type id="Map&lt;String, RecordInstance[]&gt;" name="Map&lt;String, RecordInstance[]&gt;" description="" />
      <type id="StringBuffer" name="StringBuffer" description="" />
      <type id="ReporterProperty" name="ReporterProperty" description="" />
      <type id="SearchCategory" name="SearchCategory" description="" />
      <type id="Map&lt;String, SearchCategory&gt;" name="Map&lt;String, SearchCategory&gt;" description="" />
      <type id="List&lt;CategoryQuestionRef&gt;" name="List&lt;CategoryQuestionRef&gt;" description="" />
      <type id="CategoryQuestionRef" name="CategoryQuestionRef" description="" />
      <type id="TextAttributeField" name="TextAttributeField" description="" />
      <type id="List&lt;TreeNode&gt;" name="List&lt;TreeNode&gt;" description="" />
      <type id="BoolField" name="BoolField" description="" />
      <type id="String..." name="String..." description="" />
      <type id="InputStream" name="InputStream" description="" />
      <type id="OutputStream" name="OutputStream" description="" />
      <type id="byte[]" name="byte[]" description="" />
      <type id="Clob" name="Clob" description="" />
      <type id="File" name="File" description="" />
      <type id="Throwable" name="Throwable" description="" />
      <type id="DBPlatform" name="DBPlatform" description="" />
      <type id="AnswerFactory" name="AnswerFactory" description="" />
      <type id="UserFactory" name="UserFactory" description="" />
      <type id="StepFactory" name="StepFactory" description="" />
      <type id="DatasetFactory" name="DatasetFactory" description="" />
      <type id="QueryFactory" name="QueryFactory" description="" />
      <type id="BasketFactory" name="BasketFactory" description="" />
      <type id="FavoriteFactory" name="FavoriteFactory" description="" />
      <type id="WdkModelName" name="WdkModelName" description="" />
      <type id="RecordClassSet[]" name="RecordClassSet[]" description="" />
      <type id="QuerySet" name="QuerySet" description="" />
      <type id="QuerySet[]" name="QuerySet[]" description="" />
      <type id="QuestionSet[]" name="QuestionSet[]" description="" />
      <type id="Map&lt;String, QuestionSet&gt;" name="Map&lt;String, QuestionSet&gt;" description="" />
      <type id="ParamSet" name="ParamSet" description="" />
      <type id="ParamSet[]" name="ParamSet[]" description="" />
      <type id="GroupSet[]" name="GroupSet[]" description="" />
      <type id="BooleanQuery" name="BooleanQuery" description="" />
      <type id="XmlQuestionSet" name="XmlQuestionSet" description="" />
      <type id="XmlRecordClassSet" name="XmlRecordClassSet" description="" />
      <type id="XmlQuestionSet[]" name="XmlQuestionSet[]" description="" />
      <type id="XmlRecordClassSet[]" name="XmlRecordClassSet[]" description="" />
      <type id="PropertyList" name="PropertyList" description="" />
      <type id="Map&lt;String, String[]&gt;" name="Map&lt;String, String[]&gt;" description="" />
      <type id="MacroDeclaration" name="MacroDeclaration" description="" />
      <type id="Set&lt;String&gt;" name="Set&lt;String&gt;" description="" />
      <type id="List&lt;PropertyList&gt;" name="List&lt;PropertyList&gt;" description="" />
      <type id="WdkModelBase" name="WdkModelBase" description="" />
      <type id="&lt;String, String&gt;" name="&lt;String, String&gt;" description="" />
      <type id="Exception" name="Exception" description="" />
      <type id="ValidationDriver" name="ValidationDriver" description="" />
      <type id="XmlQuestion" name="XmlQuestion" description="" />
      <type id="Map&lt;String, XmlRecordInstance&gt;" name="Map&lt;String, XmlRecordInstance&gt;" description="" />
      <type id="List&lt;XmlRecordInstance&gt;" name="List&lt;XmlRecordInstance&gt;" description="" />
      <type id="XmlRecordInstance" name="XmlRecordInstance" description="" />
      <type id="XmlRecordInstance[]" name="XmlRecordInstance[]" description="" />
      <type id="XmlAttributeField" name="XmlAttributeField" description="" />
      <type id="XmlAnswerValue" name="XmlAnswerValue" description="" />
      <type id="XmlAttributeField[]" name="XmlAttributeField[]" description="" />
      <type id="XmlRecordClass" name="XmlRecordClass" description="" />
      <type id="XmlDataLoader" name="XmlDataLoader" description="" />
      <type id="XmlQuestion[]" name="XmlQuestion[]" description="" />
      <type id="XmlTableField" name="XmlTableField" description="" />
      <type id="XmlTableField[]" name="XmlTableField[]" description="" />
      <type id="XmlRecordClass[]" name="XmlRecordClass[]" description="" />
      <type id="Map&lt;String, XmlAttributeValue&gt;" name="Map&lt;String, XmlAttributeValue&gt;" description="" />
      <type id="Map&lt;String, XmlTableValue&gt;" name="Map&lt;String, XmlTableValue&gt;" description="" />
      <type id="XmlAttributeValue[]" name="XmlAttributeValue[]" description="" />
      <type id="XmlAttributeValue" name="XmlAttributeValue" description="" />
      <type id="XmlTableValue[]" name="XmlTableValue[]" description="" />
      <type id="XmlTableValue" name="XmlTableValue" description="" />
      <type id="List&lt;XmlRowValue&gt;" name="List&lt;XmlRowValue&gt;" description="" />
      <type id="XmlRowValue[]" name="XmlRowValue[]" description="" />
      <type id="XmlRowValue" name="XmlRowValue" description="" />
      <type id="RecordView[]" name="RecordView[]" description="" />
      <type id="RecordViewHandler" name="RecordViewHandler" description="" />
      <type id="SummaryView[]" name="SummaryView[]" description="" />
      <type id="SummaryViewHandler" name="SummaryViewHandler" description="" />
      <type id="Map&lt;Answer, Answer&gt;" name="Map&lt;Answer, Answer&gt;" description="" />
      <type id="Step" name="Step" description="" />
      <type id="&lt;String[]&gt;" name="&lt;String[]&gt;" description="" />
      <type id="Map&lt;RecordClass, Integer&gt;" name="Map&lt;RecordClass, Integer&gt;" description="" />
      <type id="Set&lt;Integer&gt;" name="Set&lt;Integer&gt;" description="" />
      <type id="Date" name="Date" description="" />
      <type id="List&lt;String&gt;" name="List&lt;String&gt;" description="" />
      <type id="DataSource" name="DataSource" description="" />
      <type id="Dataset" name="Dataset" description="" />
      <type id="Connection" name="Connection" description="" />
      <type id="&lt;Map&lt;String, Object&gt;&gt;" name="&lt;Map&lt;String, Object&gt;&gt;" description="" />
      <type id="Map&lt;RecordClass, List&lt;Favorite&gt;&gt;" name="Map&lt;RecordClass, List&lt;Favorite&gt;&gt;" description="" />
      <type id="StepNode" name="StepNode" description="" />
      <type id="-" name="-" description="" />
      <type id="Map&lt;Integer, Step&gt;" name="Map&lt;Integer, Step&gt;" description="" />
      <type id="Logger" name="Logger" description="" />
      <type id="User[]" name="User[]" description="" />
      <type id="List&lt;Map&lt;String, String&gt;&gt;" name="List&lt;Map&lt;String, String&gt;&gt;" description="" />
      <type id="ResultList" name="ResultList" description="" />
      <type id="boolean[]" name="boolean[]" description="" />
      <type id="WsfRequest" name="WsfRequest" description="" />
      <type id="WsfResponse" name="WsfResponse" description="" />
      <type id="Map&lt;String, Set&lt;String&gt;&gt;" name="Map&lt;String, Set&lt;String&gt;&gt;" description="" />
      <type id="Map&lt;String, QuestionItem&gt;" name="Map&lt;String, QuestionItem&gt;" description="" />
      <type id="Map&lt;String, RecordItem&gt;" name="Map&lt;String, RecordItem&gt;" description="" />
      <type id="ResultType" name="ResultType" description="" />
      <type id="float" name="float" description="" />
      <type id="List&lt;UrlItem&gt;" name="List&lt;UrlItem&gt;" description="" />
      <type id="Map&lt;String, Map&lt;String, Set&lt;String&gt;&gt;&gt;" name="Map&lt;String, Map&lt;String, Set&lt;String&gt;&gt;&gt;" description="" />
      <type id="List&lt;StressTestRunner&gt;" name="List&lt;StressTestRunner&gt;" description="" />
      <type id="Random" name="Random" description="" />
      <type id="PreparedStatement" name="PreparedStatement" description="" />
      <type id="StressTestTask" name="StressTestTask" description="" />
      <type id="HttpURLConnection" name="HttpURLConnection" description="" />
      <type id="Set&lt;Field&gt;" name="Set&lt;Field&gt;" description="" />
      <type id="PrintWriter" name="PrintWriter" description="" />
      <type id="Set&lt;AttributeField&gt;" name="Set&lt;AttributeField&gt;" description="" />
      <type id="StringParam" name="StringParam" description="" />
      <type id="JSONObject" name="JSONObject" description="" />
      <type id="ColumnType" name="ColumnType" description="" />
      <type id="ProcessQuery" name="ProcessQuery" description="" />
      <type id="List&lt;ParamReference&gt;" name="List&lt;ParamReference&gt;" description="" />
      <type id="List&lt;Column&gt;" name="List&lt;Column&gt;" description="" />
      <type id="Map&lt;String, Column&gt;" name="Map&lt;String, Column&gt;" description="" />
      <type id="Column[]" name="Column[]" description="" />
      <type id="List&lt;ParamValuesSet&gt;" name="List&lt;ParamValuesSet&gt;" description="" />
      <type id="Query[]" name="Query[]" description="" />
      <type id="AbstractEnumParam" name="AbstractEnumParam" description="" />
      <type id="EnumParamCache" name="EnumParamCache" description="" />
      <type id="EnumParamTermNode[]" name="EnumParamTermNode[]" description="" />
      <type id="ParamSuggestion" name="ParamSuggestion" description="" />
      <type id="List&lt;RecordClassReference&gt;" name="List&lt;RecordClassReference&gt;" description="" />
      <type id="Map&lt;String, RecordClass&gt;" name="Map&lt;String, RecordClass&gt;" description="" />
      <type id="RecordClassReference" name="RecordClassReference" description="" />
      <type id="DatasetParam" name="DatasetParam" description="" />
      <type id="EnumItem" name="EnumItem" description="" />
      <type id="EnumParam" name="EnumParam" description="" />
      <type id="List&lt;EnumItem&gt;" name="List&lt;EnumItem&gt;" description="" />
      <type id="List&lt;ParamConfiguration&gt;" name="List&lt;ParamConfiguration&gt;" description="" />
      <type id="EnumItemList" name="EnumItemList" description="" />
      <type id="EnumItem[]" name="EnumItem[]" description="" />
      <type id="ParamConfiguration" name="ParamConfiguration" description="" />
      <type id="List&lt;EnumItemList&gt;" name="List&lt;EnumItemList&gt;" description="" />
      <type id="List&lt;EnumParamTermNode&gt;" name="List&lt;EnumParamTermNode&gt;" description="" />
      <type id="EnumParamTermNode" name="EnumParamTermNode" description="" />
      <type id="FlatVocabParam" name="FlatVocabParam" description="" />
      <type id="ParamHandler" name="ParamHandler" description="" />
      <type id="TimestampParam" name="TimestampParam" description="" />
      <type id="ResultSet" name="ResultSet" description="" />
      <type id="HistoryInfo" name="HistoryInfo" description="" />
      <type id="UserProject" name="UserProject" description="" />
      <type id="Map&lt;Integer, Integer&gt;" name="Map&lt;Integer, Integer&gt;" description="" />
      <type id="Map&lt;String, AnswerFilterInstanceBean&gt;" name="Map&lt;String, AnswerFilterInstanceBean&gt;" description="" />
      <type id="AnswerFilterInstanceBean[]" name="AnswerFilterInstanceBean[]" description="" />
      <type id="[]" name="[]" description="" />
      <type id="RecordBean" name="RecordBean" description="" />
      <type id="Map&lt;?, ?&gt;" name="Map&lt;?, ?&gt;" description="" />
      <type id="AnswerValueBean" name="AnswerValueBean" description="" />
      <type id="RecordClassBean" name="RecordClassBean" description="" />
      <type id="QuestionBean" name="QuestionBean" description="" />
      <type id="Iterator&lt;RecordBean&gt;" name="Iterator&lt;RecordBean&gt;" description="" />
      <type id="AttributeFieldBean[]" name="AttributeFieldBean[]" description="" />
      <type id="TableFieldBean[]" name="TableFieldBean[]" description="" />
      <type id="AnswerFilterInstanceBean" name="AnswerFilterInstanceBean" description="" />
      <type id="Map&lt;String, CategoryBean&gt;" name="Map&lt;String, CategoryBean&gt;" description="" />
      <type id="CategoryBean" name="CategoryBean" description="" />
      <type id="QuestionBean[]" name="QuestionBean[]" description="" />
      <type id="UserBean" name="UserBean" description="" />
      <type id="Favorite" name="Favorite" description="" />
      <type id="Field" name="Field" description="" />
      <type id="GroupSetBean" name="GroupSetBean" description="" />
      <type id="GroupBean" name="GroupBean" description="" />
      <type id="GroupBean[ ]" name="GroupBean[ ]" description="" />
      <type id="T" name="T" description="" />
      <type id="ParamBean&lt;T&gt;" name="ParamBean&lt;T&gt;" description="" />
      <type id="Map&lt;String, ParamBean&lt;?&gt;&gt;" name="Map&lt;String, ParamBean&lt;?&gt;&gt;" description="" />
      <type id="ParamBean&lt;?&gt;[]" name="ParamBean&lt;?&gt;[]" description="" />
      <type id="Map&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt;" name="Map&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt;" description="" />
      <type id="Map&lt;String, AttributeFieldBean&gt;" name="Map&lt;String, AttributeFieldBean&gt;" description="" />
      <type id="Map&lt;String, TableFieldBean&gt;" name="Map&lt;String, TableFieldBean&gt;" description="" />
      <type id="Map&lt;String, FieldBean&gt;" name="Map&lt;String, FieldBean&gt;" description="" />
      <type id="List&lt;AnswerParamBean&gt;" name="List&lt;AnswerParamBean&gt;" description="" />
      <type id="Map&lt;String, QuestionBean&gt;" name="Map&lt;String, QuestionBean&gt;" description="" />
      <type id="Map&lt;String, Set&lt;QuestionBean&gt;&gt;" name="Map&lt;String, Set&lt;QuestionBean&gt;&gt;" description="" />
      <type id="Map&lt;String, RecordBean&gt;" name="Map&lt;String, RecordBean&gt;" description="" />
      <type id="Map&lt;String, RecordBean[]&gt;" name="Map&lt;String, RecordBean[]&gt;" description="" />
      <type id="Set&lt;Entry&lt;String, AttributeValue&gt;&gt;" name="Set&lt;Entry&lt;String, AttributeValue&gt;&gt;" description="" />
      <type id="Collection&lt;AttributeValue&gt;" name="Collection&lt;AttributeValue&gt;" description="" />
      <type id="PrimaryKeyAttributeFieldBean" name="PrimaryKeyAttributeFieldBean" description="" />
      <type id="Map&lt;String, AnswerFilterLayoutBean&gt;" name="Map&lt;String, AnswerFilterLayoutBean&gt;" description="" />
      <type id="AnswerFilterLayoutBean[]" name="AnswerFilterLayoutBean[]" description="" />
      <type id="AttributeFieldBean" name="AttributeFieldBean" description="" />
      <type id="StepBean" name="StepBean" description="" />
      <type id="StepBean[]" name="StepBean[]" description="" />
      <type id="Strategy" name="Strategy" description="" />
      <type id="Map&lt;QuestionBean, CategoryBean&gt;" name="Map&lt;QuestionBean, CategoryBean&gt;" description="" />
      <type id="Map&lt;String, QuestionSetBean&gt;" name="Map&lt;String, QuestionSetBean&gt;" description="" />
      <type id="QuestionSetBean[]" name="QuestionSetBean[]" description="" />
      <type id="RecordClassBean[]" name="RecordClassBean[]" description="" />
      <type id="Map&lt;String, RecordClassBean&gt;" name="Map&lt;String, RecordClassBean&gt;" description="" />
      <type id="XmlQuestionSetBean[]" name="XmlQuestionSetBean[]" description="" />
      <type id="Map&lt;String, XmlQuestionSetBean&gt;" name="Map&lt;String, XmlQuestionSetBean&gt;" description="" />
      <type id="XmlRecordClassSetBean[]" name="XmlRecordClassSetBean[]" description="" />
      <type id="UserFactoryBean" name="UserFactoryBean" description="" />
      <type id="XmlQuestionBean" name="XmlQuestionBean" description="" />
      <type id="XmlRecordBean[]" name="XmlRecordBean[]" description="" />
      <type id="Map&lt;String, XmlRecordBean&gt;" name="Map&lt;String, XmlRecordBean&gt;" description="" />
      <type id="XmlRecordClassBean" name="XmlRecordClassBean" description="" />
      <type id="XmlAttributeFieldBean" name="XmlAttributeFieldBean" description="" />
      <type id="XmlAnswerBean" name="XmlAnswerBean" description="" />
      <type id="XmlQuestionBean[]" name="XmlQuestionBean[]" description="" />
      <type id="Map&lt;String, XmlQuestionBean&gt;" name="Map&lt;String, XmlQuestionBean&gt;" description="" />
      <type id="XmlAttributeValueBean[]" name="XmlAttributeValueBean[]" description="" />
      <type id="XmlTableValueBean[]" name="XmlTableValueBean[]" description="" />
      <type id="XmlAttributeFieldBean[]" name="XmlAttributeFieldBean[]" description="" />
      <type id="XmlTableFieldBean[]" name="XmlTableFieldBean[]" description="" />
      <type id="XmlRecordClassBean[]" name="XmlRecordClassBean[]" description="" />
      <type id="List&lt;XmlAttributeValueBean[]&gt;" name="List&lt;XmlAttributeValueBean[]&gt;" description="" />
      <type id="XmlTableFieldBean" name="XmlTableFieldBean" description="" />
      <type id="StepCountUpdater" name="StepCountUpdater" description="" />
      <type id="Stack&lt;Integer&gt;" name="Stack&lt;Integer&gt;" description="" />
      <type id="WdkModel[]" name="WdkModel[]" description="" />
      <type id="QueryInfo" name="QueryInfo" description="" />
      <type id="CacheFactory" name="CacheFactory" description="" />
      <type id="Statement" name="Statement" description="" />
      <type id="Map&lt;PrimaryKeyAttributeValue, Object&gt;" name="Map&lt;PrimaryKeyAttributeValue, Object&gt;" description="" />
      <type id="AttributePlugin" name="AttributePlugin" description="" />
      <type id="List&lt;WordTag&gt;" name="List&lt;WordTag&gt;" description="" />
    </custom-types>
  </types>
  <filters />
  <items>
    <item id="di679030777475998469" cid="C215" type="class" name="AnswerFilter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a33caed67af064c22bc3740c533d007d6311" name="queryRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6a4d01223ef346b8a2260fb365f24661311" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="od7841aa3b5804bff931d65a1467dbb5a311" name="setQueryRef" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.queryRef = queryRef;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5db169bb0d2d4676912529f36994dce3311" name="addInstance" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instance" type="AnswerFilterInstance" type-id="AnswerFilterInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        instance.setRecordClass(recordClass);
        this.instanceList.add(instance);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4fe9eaf29674448baa33604da3c9bbd9311" name="getInstances" type="Map&lt;String, AnswerFilterInstance&gt;" type-id="Map&lt;String, AnswerFilterInstance&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, AnswerFilterInstance&gt;(instanceMap);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    /**
     * @param recordClass
     *            the recordClass to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oc023662a55f448368f2da122c80b2468311" name="setRecordClass" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o991555fe12e945149c5700bff0188eaa311" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude resources for the instances
        for (AnswerFilterInstance instance : instanceList){
            if (instance.include(projectId)){
                instance.excludeResources(projectId);
                String instanceName = instance.getName();
                if (instanceMap.containsKey(instanceName))
                    throw new WdkModelException("answerFilterInstance ["
                            + instanceName + "] of type "
                            + recordClass.getFullName() + " is defined more "
                            + "than once.");
                instanceMap.put(instanceName, instance);}}
        instanceList = null;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc32ed8d15ba149c497e7857253974902311" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (resolved) return;
        // resolve the reference to the filter query
        SqlQuery query = (SqlQuery)wdkModel.resolveReference(queryRef);
        
        // all the filter query should has a weight column
        query.setHasWeight(true);
        
        // make sure the query has exactly one answerParam
        AnswerParam answerParam = null;
        for (Param param : query.getParams()){
            if (!(param instanceof AnswerParam)) continue;
            if (answerParam != null)
                throw new WdkModelException("Only one answerParam is allowed " +
                		"in filterQuery [" + queryRef + "]");
            answerParam = (AnswerParam)param;}
        
        // resolve the references in the instance
        for(AnswerFilterInstance instance : instanceMap.values()){
            // set the references first
            instance.setFilterQuery(query);
            instance.setAnswerParam(answerParam);
            instance.resolveReferences(wdkModel);}
        resolved = true;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di101955302201226563" cid="C216" type="class" name="AnswerFilterInstance" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa24d846e63e147f5a75f170320241503331" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5e0583e0bfd743fea41a280c6456316d331" name="isDefault" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7d1090ce03f6473990e087caf688d16f331" name="isBooleanExpansion" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a668634f5d1ce4334aea7f129ad81e1b4331" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae9efaae585db48a58bb29ba2ede96883331" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a050a058982d94dc28e2532f244429af7331" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af0d90ea25c3f48ea9e84182822ebfa62331" name="filterQuery" type="SqlQuery" type-id="SqlQuery" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a864c31b8ea3f4dfc8198f7bd8d6741aa331" name="answerParam" type="AnswerParam" type-id="AnswerParam" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a18146678724c4b6ab5e891388678ed9b331" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oc71074adbf424768b5262034b26494e0331" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     *            the name to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob1cb53a53ca34247a698e5288e0fa0ce331" name="setName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return the displayName
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="odc4ce3f841e24d64ae5770dc6b0d74ae331" name="getDisplayName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayName;}

    /**
     * @param displayName
     *            the displayName to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o899d39a9219646ea911158cf64c04ca0331" name="setDisplayName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o24921c7f00634b09b70aab7d960baeee331" name="addDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayNameList.add(displayName);}

    /**
     * @return the isDefault
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o232f7f0d28044a14a3e3af8b5a1c40ec331" name="isDefault" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return isDefault;}

    /**
     * @param isDefault
     *            the isDefault to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o148a98b81bc04ddb9109b8530d96388f331" name="setDefault" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isDefault" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.isDefault = isDefault;}

    /**
     * @return the isBooleanExpansion
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oef9d5fc6e02c429f9f7ac37267321a4a331" name="isBooleanExpansion" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return isBooleanExpansion;}

    /**
     * @param isBooleanExpansion
     *            the isBooleanExpansion to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o2b2e8dad79f04d31ad75f28003953e9a331" name="setBooleanExpansion" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isBooleanExpansion" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.isBooleanExpansion = isBooleanExpansion;}

    /**
     * @return the description
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob09971af55144c6f848116ffb4409c34331" name="getDescription" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return description;}</source-code>
          </source-codes>
        </operation>
        <operation id="o61f1be7b7ac1477f87988de75fd8698f331" name="addDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.descriptionList.add(description);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc2fd616fbb904f3282b4d453e13a93c5331" name="addParamValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.paramValueList.add(param);}

    /**
     * @return the recordClass
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o720774c72343474a8bd9e9527ea4321b331" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass;}

    /**
     * @param recordClass
     *            the recordClass to set
     */
    void</source-code>
          </source-codes>
        </operation>
        <operation id="o3494e9b3fe684e6486db2139359ec55d331" name="setRecordClass" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;}

    /**
     * @return the filterQuery
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oa074546f627141bcb920c4670b1e347f331" name="getFilterQuery" type="SqlQuery" type-id="SqlQuery" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return filterQuery;}

    /**
     * @param filterQuery
     *            the filterQuery to set
     */
    void</source-code>
          </source-codes>
        </operation>
        <operation id="o6a5b22eb80fc444496c4663ab527d828331" name="setFilterQuery" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filterQuery" type="SqlQuery" type-id="SqlQuery" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.filterQuery = filterQuery;}

    /**
     * @return the answerParam
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="off1c43fae21d49fc8e9e5bbd6ffa02c1331" name="getAnswerParam" type="AnswerParam" type-id="AnswerParam" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerParam;}

    /**
     * @param answerParam
     *            the answerParam to set
     */
    void</source-code>
          </source-codes>
        </operation>
        <operation id="o0c21bdaf17fd492d89defceeb2e45626331" name="setAnswerParam" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerParam" type="AnswerParam" type-id="AnswerParam" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.answerParam = answerParam;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7e976dcd915d46778dda921abd094155331" name="getParamValueMap" type="Map&lt;String, Object&gt;" type-id="Map&lt;String, Object&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, Object&gt;(paramValueMap);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5e4db6c949e04ebb84cc6f5ae7aa8b47331" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude the display names
        for (WdkModelText text : displayNameList){
            if (text.include(projectId)){
                text.excludeResources(projectId);
                if (displayName != null)
                    throw new WdkModelException("Display Name of "
                            + "answerFilterInstance '" + name + "' in "
                            + recordClass.getFullName()
                            + " is included more than once.");
                this.displayName = text.getText();}}
        displayNameList = null;

        // exclude the descriptions
        for (WdkModelText text : descriptionList){
            if (text.include(projectId)){
                text.excludeResources(projectId);
                if (description != null)
                    throw new WdkModelException("Description of "
                            + "answerFilterInstance '" + name + "' in "
                            + recordClass.getFullName()
                            + " is included more than once.");
                this.description = text.getText();}}
        descriptionList = null;

        // exclude the param values
        for (WdkModelText param : paramValueList){
            if (param.include(projectId)){
                param.excludeResources(projectId);
                String paramName = param.getName();
                String paramValue = param.getText().trim();

                if (paramValueMap.containsKey(paramName))
                    throw new WdkModelException("The param [" + paramName
                            + "] for answerFilterInstance [" + name
                            + "] of type " + recordClass.getFullName()
                            + "  is included more than once.");
                paramValueMap.put(paramName, paramValue);}}
        paramValueList = null;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ocdd02718f0224e7e9392133bbfc32bc4331" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (resolved) return;

        this.wdkModel = wdkModel;

        // make sure the params provides match with those in the filter query
        Map&lt;String, Param&gt; params = filterQuery.getParamMap();
        for (String paramName : paramValueMap.keySet()){
            if (!params.containsKey(paramName))
                throw new WdkModelException("The param [" + paramName
                        + "] declared in answerFilterInstance [" + name
                        + "] of type " + recordClass.getFullName()
                        + " does not exist in the filter query ["
                        + filterQuery.getFullName() + "]");}
        // User user = wdkModel.getSystemUser();
        // make sure the required param is defined
        for (String paramName : params.keySet()){
            if (answerParam.getName().equals(paramName)) continue;
            if (!paramValueMap.containsKey(paramName))
                throw new WdkModelException("The required param value of ["
                        + paramName + "] is not assigned to filter ["
                        + getName() + "]");

            // validate the paramValue for now; however EuPathDB won't be able
            // to pass it
            // Param param = params.get(paramName);
            // String paramValue = paramValueMap.get(paramName);
            // param.validate(user, paramValue);
        }

        resolved = true;}

    public ResultList getResults(AnswerValue answerValue) throws SQLException,
            NoSuchAlgorithmException, WdkModelException, JSONException,
            WdkUserException{
        // use only the id query sql as input
        QueryInstance idInstance = answerValue.getIdsQueryInstance();
        String sql = idInstance.getSql();
        int assignedWeight = idInstance.getAssignedWeight();
        sql = applyFilter(answerValue.getUser(), sql, assignedWeight);
        DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
        ResultSet resultSet =
                SqlUtils.executeQuery(wdkModel, dataSource, sql, idInstance
                        .getQuery().getFullName() + "-" + name + "-filtered");
        try{
            return new SqlResultList(resultSet);}
        catch (SQLException ex){
            resultSet.close();
            throw ex;}}

    public String applyFilter(User user, String sql, int assignedWeight)
            throws WdkModelException, WdkUserException{
        Map&lt;String, Param&gt; params = filterQuery.getParamMap();

        String filterSql = filterQuery.getSql();
        // replace the answer param
        String answerName = answerParam.getName();
        filterSql =
                filterSql.replaceAll("\\$\\$" + answerName + "\\$\\$", "("
                        + sql + ")");

        // replace the rest of the params; the answer param has been replaced
        // and will be ignored here.
        for (Param param : params.values()){
            if (param.getFullName().equals(answerParam.getFullName()))
                continue;

            String dependentValue = paramValueMap.get(param.getName());
            String internal = param.getInternalValue(user, dependentValue);
            filterSql = param.replaceSql(filterSql, internal);}

        // if the filter doesn't return weight, assigned weight will be used
        if (!filterQuery.getColumnMap().containsKey(Utilities.COLUMN_WEIGHT)){
            filterSql =
                    "SELECT f.*, " + assignedWeight + " AS "
                            + Utilities.COLUMN_WEIGHT + " FROM (" + filterSql
                            + ") f";}

        return filterSql;}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di633467168882408572" cid="C217" type="class" name="AnswerFilterInstanceReference" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a943a3de82f854d298aaf9ff3474125da337" name="ref" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6de7f4d7678940a495bb5763c718d446337" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1fc46b80880842f2bab7df680506f17c337" name="instance" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o1f06fd5932a944509c57345aaa390f08337" name="getRef" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return ref;}

    /**
     * @param ref
     *            the ref to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o3267fa6c2882423b8a2550c29d9a7d32337" name="setRef" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ref" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.ref = ref;}

    /**
     * @return the recordClass
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o1e49eeaeb6a1442687dfc816641912c7337" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass;}

    /**
     * @param recordClass
     *            the recordClass to set
     */
    void</source-code>
          </source-codes>
        </operation>
        <operation id="od49fe79f89614f49b99acdb2f0c6bbd3337" name="setRecordClass" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;}

    /**
     * @return the instance
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oa17c21469046401788ea5474b5da4112337" name="getInstance" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return instance;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6a14d0b703154b32815720e4574a91f3337" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // nothing to exclude}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o30edbdd025de4235b49a25cbbfb6d05c337" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // resolve the instance reference
        this.instance = recordClass.getFilter(ref);
        if (instance == null) throw new WdkModelException("Filter doesn't exist: " + ref);
        resolved = true;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di312981370951211126" cid="C218" type="class" name="AnswerFilterLayout" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a9cbf526ec45f46f7bcaa70f0df20f7e6360" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aeb4f130083bc4d7c8bc7391580317f1d360" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5f63a28aea6840b69b8760e7415307eb360" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac29b9c5f1551475287d020d04396de72360" name="visible" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="a169f5ad8cb1a407f9707813c3c12f986360" name="fileName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac8d6f0667d244160b3b8850376c4422c360" name="vertical" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a587b18c24bba4767bd3378f0b6eaebce360" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oefd52c923c52414eb74f5e6d91a4681a360" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass;}

    /**
     * @param recordClass
     *            the recordClass to set
     */
    void</source-code>
          </source-codes>
        </operation>
        <operation id="o371c2dde5e71456abf3fe651c2404f0c360" name="setRecordClass" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;
        if (referenceList != null){
            for (AnswerFilterInstanceReference reference : referenceList){
                reference.setRecordClass(recordClass);}}}

    /**
     * @return the name
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oe0a46bd002714db3b9741a29da003926360" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     *            the name to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o14cad97ff4b44fafaf062066f6ad000d360" name="setName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return the displayName
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o3315b9e30ebd40a2836a1276c6d9e274360" name="getDisplayName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayName;}

    /**
     * @param displayName
     *            the displayName to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5412f1208a6c4198800ad8a245cef8ba360" name="setDisplayName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}

    /**
     * @return the visible
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oac21e41dc8924df2ba4333ab7bb46aaf360" name="isVisible" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return visible;}

    /**
     * @param visible
     *            the visible to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o14d2cdb4a0f04d238e28a621a9b831e4360" name="setVisible" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="visible" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.visible = visible;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8957322c2ce54c51a8cd23bfe75aad0e361" name="addDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.descriptionList.add(description);}

    /**
     * @return the description
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5e41e0e6758d47ec94e1c3b71b2dbb5d361" name="getDescription" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return description;}</source-code>
          </source-codes>
        </operation>
        <operation id="oaef2a02037674e598e742f32df950187361" name="addReference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="reference" type="AnswerFilterInstanceReference" type-id="AnswerFilterInstanceReference" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (recordClass != null) reference.setRecordClass(recordClass);
        this.referenceList.add(reference);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o66f5774a0ac243debb9d02c5d4cb006c361" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude the descriptions
        for (WdkModelText text : descriptionList){
            if (text.include(projectId)){
                text.excludeResources(projectId);
                if (description != null)
                    throw new WdkModelException("Description of "
                            + "answerFilterLayout '" + name + "' in "
                            + recordClass.getFullName()
                            + " is included more than once.");
                this.description = text.getText();}}
        descriptionList = null;

        // exclude the instances
        List&lt;AnswerFilterInstanceReference&gt; newReferences = new ArrayList&lt;AnswerFilterInstanceReference&gt;();
        for (AnswerFilterInstanceReference reference : referenceList){
            if (reference.include(projectId)){
                reference.excludeResources(projectId);
                newReferences.add(reference);}}
        referenceList = newReferences;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc0ed8825e9584b059880f75ed41e078c361" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (resolved) return;

        // resolve the instances
        for (AnswerFilterInstanceReference reference : referenceList){
            reference.resolveReferences(wodkModel);
            String ref = reference.getRef();
            if (instanceMap.containsKey(ref))
                throw new WdkModelException("More than one instance [" + ref
                        + "] are defined in filter layout [" + name + "]");
            instanceMap.put(ref, reference.getInstance());}
        referenceList = null;

        resolved = true;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe451d9d2a25f41b0993aeefd0e8df109361" name="getInstanceMap" type="Map&lt;String, AnswerFilterInstance&gt;" type-id="Map&lt;String, AnswerFilterInstance&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, AnswerFilterInstance&gt;(instanceMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8c9ea91d5d39433ea4e78d4429b628cd361" name="getInstances" type="AnswerFilterInstance[]" type-id="AnswerFilterInstance[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        AnswerFilterInstance[ array = new AnswerFilterInstance[instanceMap.size();
        instanceMap.values().toArray(array);
        return array;}

    /**
     * @return the fileName
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o70a994c58be1423db6ff94af337971ba361" name="getFileName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return fileName;}

    /**
     * @param fileName
     *            the fileName to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o85c489a2d99a465ebaacb558baa2385d361" name="setFileName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fileName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.fileName = fileName;
        if (this.fileName != null) this.fileName = this.fileName.trim();}

    /**
     * @return the vertical
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od1226d08ced74e73b0b2bd7715d28938361" name="isVertical" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return vertical;}

    /**
     * @param vertical
     *            the vertical to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o792cc08239ee4ef587c65b3d84fea03e361" name="setVertical" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="vertical" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.vertical = vertical;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di146237727409867470" cid="C219" type="class" name="AnswerValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="af78cccd27c614b83981779bf2e13e1fd715" name="user" type="User" type-id="User" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aaec30f3f637a4b518ee6da6fec867003715" name="answer" type="Answer" type-id="Answer" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2adb2ed71ac342178612d433be9636aa715" name="resultFactory" type="ResultFactory" type-id="ResultFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a704ae0a1960b4db29b7e7956c70d9700715" name="question" type="Question" type-id="Question" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae8610bdadbce4b81b74c8c6d64490801715" name="idsQueryInstance" type="QueryInstance" type-id="QueryInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a76a1131731d04d999b14ed129c859f42715" name="startIndex" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab10f0749a8864d95b4697c6f587596d5715" name="endIndex" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ada561cecd2944162930b6e55c5376201715" name="sortedIdSql" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0102bd1954204d8a8bcd8bb7d0ca3f6a715" name="pageRecordInstances" type="Map&lt;PrimaryKeyAttributeValue, RecordInstance&gt;" type-id="Map&lt;PrimaryKeyAttributeValue, RecordInstance&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac4630139e4b4464383fb53444a676ff2715" name="resultSize" type="Integer" type-id="Uml.Integer" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0c47db3ca4a349f1873fe704632a50d3715" name="resultSizesByProject" type="Map&lt;String, Integer&gt;" type-id="Map&lt;String, Integer&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4c2b8e8078aa4b27adef564c3b2da4e0715" name="sortingMap" type="Map&lt;String, Boolean&gt;" type-id="Map&lt;String, Boolean&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6023423b748d4f59a7c7afa7ef12b14c715" name="filter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o6e7720d7179b4c4a95222d631a9393b1715" name="AnswerValue" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
            <parameter id="" name="idsQueryInstance" type="QueryInstance" type-id="QueryInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            int startIndex, int endIndex, Map&lt;String, Boolean&gt; sortingMap,
            AnswerFilterInstance filter) throws WdkModelException,
            WdkUserException{
        this.user = user;
        this.question = question;
        this.resultFactory = question.getWdkModel().getResultFactory();
        this.idsQueryInstance = idsQueryInstance;
        this.startIndex = startIndex;
        this.endIndex = endIndex;

        // get sorting columns
        if (sortingMap == null) sortingMap = question.getSortingAttributeMap();
        this.sortingMap = sortingMap;

        // get the view
        this.filter = filter;

        logger.debug("Answer created.");
        // new Exception().printStackTrace();}

    /**
     * A copy constructor, and
     * 
     * @param answerValue
     * @param startIndex
     * @param endIndex
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob240e06452fe4970a90d77aa55403168715" name="AnswerValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> int endIndex){
        this.startIndex = startIndex;
        this.endIndex = endIndex;

        this.user = answerValue.user;
        this.answer = answerValue.answer;
        this.idsQueryInstance = answerValue.idsQueryInstance;
        this.question = answerValue.question;
        this.resultFactory = answerValue.resultFactory;
        this.resultSize = answerValue.resultSize;
        this.resultSizesByFilter = new LinkedHashMap&lt;String, Integer&gt;(
                answerValue.resultSizesByFilter);
        if (answerValue.resultSizesByProject != null)
            this.resultSizesByProject = new LinkedHashMap&lt;String, Integer&gt;(
                    answerValue.resultSizesByProject);

        this.sortingMap = new LinkedHashMap&lt;String, Boolean&gt;(
                answerValue.sortingMap);
        this.filter = answerValue.filter;}

    // ------------------------------------------------------------------
    // Public Methods
    // ------------------------------------------------------------------

    /**
     * provide property that user's term for question
     */</source-code>
          </source-codes>
        </operation>
        <operation id="odc276f43806a4b59866478976a5df480716" name="getQuestion" type="Question" type-id="Question" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8e502eb348b54cdda2e9039b4f4c7adb716" name="getUser" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.user;}</source-code>
          </source-codes>
        </operation>
        <operation id="o82dd8adab93045f6a97048002dab82aa716" name="getPageSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        initPageRecordInstances();
        return pageRecordInstances.size();}</source-code>
          </source-codes>
        </operation>
        <operation id="of58211f82795465c8042ebd83aec9ef4716" name="getPageCount" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        int total = getResultSize();
        int pageSize = endIndex - startIndex + 1;
        int pageCount = (int) Math.round(Math.ceil((float) total / pageSize));
        logger.debug("#Pages: " + pageCount + ",\t#Total: " + total
                + ",\t#PerPage: " + pageSize);
        return pageCount;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1cb619c18cd2421c829e6bd4144b6de9716" name="getResultSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        logger.debug("getting result size: cache=" + resultSize + ", isCached="
                + idsQueryInstance.isCached());
        if (resultSize == null || !idsQueryInstance.isCached()){
            if (filter == null){
                resultSize = idsQueryInstance.getResultSize();} else{
                resultSize = getFilterSize(filter.getName());
                resultSizesByFilter.put(filter.getName(), resultSize);}}
        return resultSize;}</source-code>
          </source-codes>
        </operation>
        <operation id="o060345d77f73439eb703d27c20c8304b716" name="getResultSizesByProject" type="Map&lt;String, Integer&gt;" type-id="Map&lt;String, Integer&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        if (resultSizesByProject == null){
            resultSizesByProject = new LinkedHashMap&lt;String, Integer&gt;();

            // make sure the project_id is defined in the record
            PrimaryKeyAttributeField primaryKey = question.getRecordClass().getPrimaryKeyAttributeField();
            if (!primaryKey.hasColumn(Utilities.COLUMN_PROJECT_ID)){
                String projectId = question.getWdkModel().getProjectId();
                // no project_id defined in the record, use the full size
                resultSizesByProject.put(projectId, getResultSize());} else{
                // need to run the query first
                ResultList resultList;
                // for portal
                String message = idsQueryInstance.getResultMessage();
                if (filter == null) resultList = idsQueryInstance.getResults();
                else resultList = filter.getResults(this);

                try{
                    boolean hasMessage = (message != null &amp;&amp; message.length() &gt; 0);
                    if (hasMessage){
                        String[ sizes = message.split(",");
                        for (String size : sizes){
                            String[ parts = size.split(":");
                            if (parts.length &gt; 1 &amp;&amp; parts[1.matches("^\\d++$")){
                                resultSizesByProject.put(parts[0,
                                        Integer.parseInt(parts[1));} else{
                                // make sure if the message is not expected, the
                                // correct result size can still be retrieved
                                // from
                                // cached result.
                                hasMessage = false;}}}
                    // if the previous step fails, make sure the result size can
                    // still be calculated from cache.
                    if (!hasMessage){
                        while (resultList.next()){
                            if (!hasMessage){
                                // also count by project
                                String project = resultList.get(
                                        Utilities.COLUMN_PROJECT_ID).toString();
                                int subCounter = 0;
                                if (resultSizesByProject.containsKey(project))
                                    subCounter = resultSizesByProject.get(project);
                                // if subContent &lt; 0, it is an error code. don't
                                // change it.
                                if (subCounter &gt;= 0)
                                    resultSizesByProject.put(project,
                                            ++subCounter);}}}}
                finally{
                    resultList.close();}}}
        return resultSizesByProject;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2723d0b55a264cf78bc2a095d92418ff716" name="isDynamic" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getQuestion().isDynamic();}

    /**
     * @return Map where key is param display name and value is param value
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2b43c1b4d4114440b0627417cdffad63716" name="getParamDisplays" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, String&gt; displayParamsMap = new LinkedHashMap&lt;String, String&gt;();
        Map&lt;String, String&gt; paramsMap = idsQueryInstance.getValues();
        Param[ params = question.getParams();
        for (int i = 0; i &lt; params.length; i++){
            Param param = params[i;
            displayParamsMap.put(param.getPrompt(),
                    paramsMap.get(param.getName()));}
        return displayParamsMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="obbef9e8ee1c94b30acad3c570f0408b5716" name="getIdsQueryInstance" type="QueryInstance" type-id="QueryInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return idsQueryInstance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3c92fa5b78fa4526a4bf9892d6e2fbbd716" name="getRecordInstances" type="RecordInstance[]" type-id="RecordInstance[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        initPageRecordInstances();

        RecordInstance[ array = new RecordInstance[pageRecordInstances.size();
        pageRecordInstances.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o61c70adfb1e042b5a455fba04d6345cf716" name="getRecordInstance" type="RecordInstance" type-id="RecordInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="primaryKey" type="PrimaryKeyAttributeValue" type-id="PrimaryKeyAttributeValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return pageRecordInstances.get(primaryKey);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7e820f198c314753936e1c08a11960f7716" name="getChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, JSONException, WdkUserException,
            SQLException{
        return idsQueryInstance.getChecksum();}</source-code>
          </source-codes>
        </operation>
        <operation id="o6674e36b114c4d6ba7ab9add3b201f88716" name="getAnswerKey" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        String key = getChecksum();
        if (filter != null) key += ":" + filter.getName();
        return key;}

    // ///////////////////////////////////////////////////////////////////
    // print methods
    // ///////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="o6a72a32ae91b42b68542fd47f28a1a73716" name="printAsRecords" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer();

        initPageRecordInstances();

        for (RecordInstance recordInstance : pageRecordInstances.values()){
            buf.append(recordInstance.print());
            buf.append("---------------------" + newline);}
        return buf.toString();}

    /**
     * print summary attributes, one per line Note: not sure why this is needed
     * 
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4b01952e7e174c40bdd65cfed02757b0716" name="printAsSummary" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        StringBuffer buf = new StringBuffer();

        initPageRecordInstances();

        for (RecordInstance recordInstance : pageRecordInstances.values()){
            buf.append(recordInstance.printSummary());}
        return buf.toString();}

    /**
     * print summary attributes in tab delimited table with header of attr.
     * names
     * 
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o34d790d1aef84ba087acd739079c52b4716" name="printAsTable" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer();

        initPageRecordInstances();

        // print summary info
        buf.append("# of Records: " + getResultSize() + ",\t# of Pages: "
                + getPageCount() + ",\t# Records per Page: " + getPageSize()
                + newline);

        if (pageRecordInstances.size() == 0) return buf.toString();

        Map&lt;String, AttributeField&gt; attributes = getSummaryAttributeFieldMap();
        for (String nextAttName : attributes.keySet()){
            buf.append(nextAttName + "\t");}
        buf.append(newline);
        for (RecordInstance recordInstance : pageRecordInstances.values()){
            // only print
            for (String nextAttName : attributes.keySet()){
                // make data row
                AttributeValue value = recordInstance.getAttributeValue(nextAttName);
                // only print part of the string
                String str = value.getBriefDisplay();
                buf.append(str + "\t");}
            buf.append(newline);}
        return buf.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="oe28c26a227a048b08dd40359ade49e2e716" name="createReport" type="Reporter" type-id="Reporter" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="reporterName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="config" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // get the full answer
        int endI = getResultSize();
        return createReport(reporterName, config, 1, endI);}</source-code>
          </source-codes>
        </operation>
        <operation id="o82926d8c4f8842509da78829c1662ad2716" name="createReport" type="Reporter" type-id="Reporter" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="reporterName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="config" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="startI" type="int" type-id="int" default-value="" />
            <parameter id="" name="endI" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        // get Reporter
        Map&lt;String, ReporterRef&gt; rptMap = question.getRecordClass().getReporterMap();
        ReporterRef rptRef = rptMap.get(reporterName);
        if (rptRef == null)
            throw new WdkModelException("The reporter " + reporterName + " is "
                    + "not registered for "
                    + question.getRecordClass().getFullName());
        String rptImp = rptRef.getImplementation();
        if (rptImp == null)
            throw new WdkModelException("The reporter " + reporterName + " is "
                    + "not registered for "
                    + question.getRecordClass().getFullName());

        try{
            Class&lt;?&gt; rptClass = Class.forName(rptImp);
            Class&lt;?&gt;[ paramClasses ={ AnswerValue.class, int.class, int.class};
            Constructor&lt;?&gt; constructor = rptClass.getConstructor(paramClasses);

            Object[ params ={ this, startI, endI};
            Reporter reporter = (Reporter) constructor.newInstance(params);
            reporter.setProperties(rptRef.getProperties());
            reporter.configure(config);
            reporter.setWdkModel(rptRef.getWdkModel());
            return reporter;}
        catch (ClassNotFoundException ex){
            throw new WdkModelException(ex);}
        catch (InstantiationException ex){
            throw new WdkModelException(ex);}
        catch (IllegalAccessException ex){
            throw new WdkModelException(ex);}
        catch (SecurityException ex){
            throw new WdkModelException(ex);}
        catch (NoSuchMethodException ex){
            throw new WdkModelException(ex);}
        catch (IllegalArgumentException ex){
            throw new WdkModelException(ex);}
        catch (InvocationTargetException ex){
            throw new WdkModelException(ex);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oc2c3b503d1104932b500d681519c8f74716" name="getFullAnswers" type="Iterable&lt;AnswerValue&gt;" type-id="Iterable&lt;AnswerValue&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, WdkUserException, SQLException,
            JSONException{
        // user tabular reporter as answer iterator
        int resultSize = this.getResultSize();
        TabularReporter reporter = new TabularReporter(this, 1, resultSize);
        return reporter;}

    // ------------------------------------------------------------------
    // Package Methods
    // ------------------------------------------------------------------

    /**
     * Integrate into the page's RecordInstances the attribute values from a
     * particular attributes query. The attributes query result includes only
     * rows for this page.
     * 
     * The query is obtained from Column, and the query should not be modified.
     * 
     * @throws SQLException
     * @throws JSONException
     * @throws NoSuchAlgorithmException
     * @throws WdkModelException
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0bb60c67883143d7a3ed9783ea7fec62716" name="integrateAttributesQuery" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeQuery" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
    		throws WdkModelException, WdkUserException{
        initPageRecordInstances();

        WdkModel wdkModel = question.getWdkModel();
        // has to get a clean copy of the attribute query, without pk params
        // appended
        attributeQuery = (Query) wdkModel.resolveReference(attributeQuery.getFullName());

        logger.debug("filling attribute values from answer "
                + attributeQuery.getFullName());
        for (Column column : attributeQuery.getColumns()){
            logger.trace("column: '" + column.getName() + "'");}
        if (attributeQuery instanceof SqlQuery)
            logger.debug("SQL: \n" + ((SqlQuery) attributeQuery).getSql());

        String sql = getPagedAttributeSql(attributeQuery);
        int count = 0;
        try{
	        // get and run the paged attribute query sql
	        DBPlatform platform = wdkModel.getQueryPlatform();
	        DataSource dataSource = platform.getDataSource();
	        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
	                attributeQuery.getFullName() + "-paged");
	        ResultList resultList = new SqlResultList(resultSet);

	        // fill in the column attributes
	        PrimaryKeyAttributeField pkField = question.getRecordClass().getPrimaryKeyAttributeField();
	        Map&lt;String, AttributeField&gt; fields = question.getAttributeFieldMap();
	        while (resultList.next()){
	            // get primary key
	            Map&lt;String, Object&gt; pkValues = new LinkedHashMap&lt;String, Object&gt;();
	            for (String column : pkField.getColumnRefs()){
	                pkValues.put(column, resultList.get(column));}
	            PrimaryKeyAttributeValue primaryKey = new PrimaryKeyAttributeValue(
	                    pkField, pkValues);
	            RecordInstance record = pageRecordInstances.get(primaryKey);
	
	            if (record == null){
	                StringBuffer error = new StringBuffer();
	                error.append("Paged attribute query [");
	                error.append(attributeQuery.getFullName());
	                error.append("] returns rows that doesn't match the paged ");
	                error.append("records. (");
	                for (String pkName : pkValues.keySet()){
	                    error.append(pkName).append(" = ");
	                    error.append(pkValues.get(pkName)).append(", ");}
	                error.append(").\nPaged Attribute SQL:\n").append(sql);
	                error.append("\n").append("Paged ID SQL:\n").append(getPagedIdSql());
	                throw new WdkModelException(error.toString());}
	
	            // fill in the column attributes
	            for (String columnName : attributeQuery.getColumnMap().keySet()){
	                AttributeField field = fields.get(columnName);
	                if (field != null &amp;&amp; (field instanceof ColumnAttributeField)){
	                    // valid attribute field, fill it in
	                    Object objValue = resultList.get(columnName);
	                    ColumnAttributeValue value = new ColumnAttributeValue(
	                            (ColumnAttributeField) field, objValue);
	                    record.addAttributeValue(value);}}
	            count++;}}
        catch (SQLException e){
        	throw new WdkUserException("Unable to get record instances.", e);}
        
        if (count != pageRecordInstances.size()){
            throw new WdkModelException(
                    "the integrated attribute query "
                            + "doesn't return the same number of records in the current "
                            + "page. Paged attribute sql:\n" + sql);}
        logger.debug("Attribute query [" + attributeQuery.getFullName()
                + "] integrated.");}

    // ------------------------------------------------------------------
    // Private Methods
    // ------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="oa6a646502fd84e00be44e150ea9e1e58716" name="getPagedAttributeSql" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeQuery" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        // get the paged SQL of id query
        String idSql = getPagedIdSql();

        PrimaryKeyAttributeField pkField = question.getRecordClass().getPrimaryKeyAttributeField();

        // combine the id query with attribute query
        String attributeSql = getAttributeSql(attributeQuery);
        StringBuffer sql = new StringBuffer("SELECT aq.* FROM (");
        sql.append(idSql);
        sql.append(") pidq, (").append(attributeSql).append(") aq WHERE ");

        boolean firstColumn = true;
        for (String column : pkField.getColumnRefs()){
            if (firstColumn) firstColumn = false;
            else sql.append(" AND ");
            sql.append("aq.").append(column).append(" = pidq.").append(column);}
        return sql.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1ab701a71fe74cf191a48be2e5a12bed716" name="integrateTableQuery" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableField" type="TableField" type-id="TableField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        initPageRecordInstances();

        WdkModel wdkModel = question.getWdkModel();
        // has to get a clean copy of the attribute query, without pk params
        // appended
        Query tableQuery = tableField.getQuery();
        tableQuery = (Query) wdkModel.resolveReference(tableQuery.getFullName());

        logger.debug("integrate table query from answer: "
                + tableQuery.getFullName());
        for (Param param : tableQuery.getParams()){
            logger.debug("param: " + param.getName());}

        // get and run the paged attribute query sql
        String sql = getPagedTableSql(tableQuery);
        try{
	        DBPlatform platform = wdkModel.getQueryPlatform();
	        DataSource dataSource = platform.getDataSource();
	        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
	                tableQuery.getFullName() + "-paged");
	        ResultList resultList = new SqlResultList(resultSet);
	
	        // initialize table values
	        for (RecordInstance record : pageRecordInstances.values()){
	            PrimaryKeyAttributeValue primaryKey = record.getPrimaryKey();
	            TableValue tableValue = new TableValue(user, primaryKey,
	                    tableField, true);
	            record.addTableValue(tableValue);}
	
	        // make table values
	        PrimaryKeyAttributeField pkField = question.getRecordClass().getPrimaryKeyAttributeField();
	        while (resultList.next()){
	            // get primary key
	            Map&lt;String, Object&gt; pkValues = new LinkedHashMap&lt;String, Object&gt;();
	            for (String column : pkField.getColumnRefs()){
	                pkValues.put(column, resultList.get(column));}
	            PrimaryKeyAttributeValue primaryKey = new PrimaryKeyAttributeValue(
	                    pkField, pkValues);
	            RecordInstance record = pageRecordInstances.get(primaryKey);
	
	            if (record == null){
	                StringBuffer error = new StringBuffer();
	                error.append("Paged table query [" + tableQuery.getFullName());
	                error.append("] returned rows that doesn't match the paged ");
	                error.append("records. (");
	                for (String pkName : pkValues.keySet()){
	                    Object pkValue = pkValues.get(pkName);
	                    error.append(pkName + " = " + pkValue + ", ");}
	                error.append(").\nPaged table SQL:\n" + sql);
	                error.append("\n" + "Paged ID SQL:\n" + getPagedIdSql());
	                throw new WdkModelException(error.toString());}
	
	            TableValue tableValue = record.getTableValue(tableField.getName());
	            // initialize a row in table value
	            tableValue.initializeRow(resultList);}
	        logger.debug("Table query [" + tableQuery.getFullName() + "] integrated.");}
        catch (SQLException e){
        	throw new WdkUserException("Unable to integrate table query", e);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o2831f39428194ec6b7e0466c286734fb716" name="getPagedTableSql" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableQuery" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        // get the paged SQL of id query
        String idSql = getPagedIdSql();

        PrimaryKeyAttributeField pkField = question.getRecordClass().getPrimaryKeyAttributeField();

        // combine the id query with attribute query
        // make an instance from the original attribute query, and attribute
        // query has only one param, user_id. Note that the original
        // attribute query is different from the attribute query held by the
        // recordClass.
        Map&lt;String, String&gt; params = new LinkedHashMap&lt;String, String&gt;();
        String userId = Integer.toString(user.getUserId());
        params.put(Utilities.PARAM_USER_ID, userId);
        QueryInstance queryInstance = tableQuery.makeInstance(user, params,
                true, 0, new LinkedHashMap&lt;String, String&gt;());
        String tableSql = queryInstance.getSql();
        StringBuffer sql = new StringBuffer("SELECT tq.* FROM (");
        sql.append(idSql);
        sql.append(") pidq, (").append(tableSql).append(") tq WHERE ");

        boolean firstColumn = true;
        for (String column : pkField.getColumnRefs()){
            if (firstColumn) firstColumn = false;
            else sql.append(" AND ");
            sql.append("tq.").append(column).append(" = pidq.").append(column);}

        // replace the id_sql macro
        return sql.toString().replace(Utilities.MACRO_ID_SQL, idSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="oecf6dd3ad4c247ecad3118014de314e2716" name="getAttributeSql" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeQuery" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        String queryName = attributeQuery.getFullName();
        Query dynaQuery = question.getDynamicAttributeQuery();
        String idSql = idsQueryInstance.getSql();
        String sql;
        if (dynaQuery != null &amp;&amp; queryName.equals(dynaQuery.getFullName())){
            // the dynamic query doesn't have sql defined, the sql will be
            // constructed from the id query cache table.
            sql = idSql;} else{
            // make an instance from the original attribute query, and attribute
            // query has only one param, user_id. Note that the original
            // attribute query is different from the attribute query held by the
            // recordClass.
            Map&lt;String, String&gt; params = new LinkedHashMap&lt;String, String&gt;();
            String userId = Integer.toString(user.getUserId());
            params.put(Utilities.PARAM_USER_ID, userId);
            QueryInstance queryInstance = attributeQuery.makeInstance(user,
                    params, true, 0, new LinkedHashMap&lt;String, String&gt;());
            sql = queryInstance.getSql();

            // replace the id_sql macro
            sql = sql.replace(Utilities.MACRO_ID_SQL, idSql);}
        return sql;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0d4a769b128047f8b2b1d8183314160c716" name="getSortedIdSql" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        if (sortedIdSql != null) return sortedIdSql;

        // get id sql
        String idSql = getIdSql();

        // get sorting attribute queries
        Map&lt;String, String&gt; attributeSqls = new LinkedHashMap&lt;String, String&gt;();
        List&lt;String&gt; orderClauses = new ArrayList&lt;String&gt;();
        prepareSortingSqls(attributeSqls, orderClauses);

        StringBuffer sql = new StringBuffer("SELECT idq.* FROM ");
        sql.append(idSql).append(" idq");
        // add all tables involved
        for (String shortName : attributeSqls.keySet()){
            sql.append(", (").append(attributeSqls.get(shortName)).append(") ");
            sql.append(shortName);}

        // add primary key join conditions
        String[ pkColumns = question.getRecordClass().getPrimaryKeyAttributeField().getColumnRefs();
        boolean firstClause = true;
        for (String shortName : attributeSqls.keySet()){
            for (String column : pkColumns){
                if (firstClause){
                    sql.append(" WHERE ");
                    firstClause = false;} else sql.append(" AND ");

                sql.append("idq.").append(column);
                sql.append(" = ");
                sql.append(shortName).append(".").append(column);}}

        // add order clause
        // always append primary key columns as the last sorting columns,
        // otherwise Oracle may generate unstable results through pagination
        // when the sorted columns are not unique.
        sql.append(" ORDER BY ");
        for (String clause : orderClauses){
            sql.append(clause).append(", ");}
        firstClause = true;
        for (String column : pkColumns){
            if (firstClause) firstClause = false;
            else sql.append(", ");
            sql.append("idq.").append(column);}
        sortedIdSql = sql.toString();

        logger.debug("sorted id sql constructed.");
        return sortedIdSql;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9bf9c98597364d34b4127e693c53a09a717" name="getPagedIdSql" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        String sortedIdSql = getSortedIdSql();
        DBPlatform platform = question.getWdkModel().getQueryPlatform();
        String sql = platform.getPagedSql(sortedIdSql, startIndex, endIndex);

        logger.debug("paged id sql constructed.");

        return sql;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2cd6eb9210e14029a374aedbb39c78c5717" name="getIdSql" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        // String[] pkColumns =
        // question.getRecordClass().getPrimaryKeyAttributeField().getColumnRefs();
        //
        // StringBuffer sql = new StringBuffer("(SELECT DISTINCT ");
        // boolean firstColumn = true;
        // for (String column : pkColumns) {
        // if (firstColumn) firstColumn = false;
        // else sql.append(", ");
        // sql.append(column);
        // }
        // sql.append(" FROM (");

        String innerSql = idsQueryInstance.getSql();
        int assignedWeight = idsQueryInstance.getAssignedWeight();
        // apply filter
        if (filter != null)
            innerSql = filter.applyFilter(user, innerSql, assignedWeight);
        return "(" + innerSql + ")";
        // sql.append(innerSql).append(") bidq)");
        //
        // logger.debug("id sql constructed.");
        //
        // return sql.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o4c8e5dadc92447038eb2d314bc62044a717" name="prepareSortingSqls" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sqls" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="orders" type="Collection" type-id="Collection" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        Map&lt;String, AttributeField&gt; fields = question.getAttributeFieldMap();
        Map&lt;String, String&gt; querySqls = new LinkedHashMap&lt;String, String&gt;();
        Map&lt;String, String&gt; queryNames = new LinkedHashMap&lt;String, String&gt;();
        Map&lt;String, String&gt; orderClauses = new LinkedHashMap&lt;String, String&gt;();
        WdkModel wdkModel = question.getWdkModel();
        logger.debug("sorting map: " + sortingMap);
        for (String fieldName : sortingMap.keySet()){
            AttributeField field = fields.get(fieldName);
            if (field == null) continue;
            boolean ascend = sortingMap.get(fieldName);
            Map&lt;String, ColumnAttributeField&gt; dependents = field.getColumnAttributeFields();
            for (ColumnAttributeField dependent : dependents.values()){
                Column column = dependent.getColumn();
                logger.debug("field [" + fieldName + "] depends on column ["
                        + column.getName() + "]");
                Query query = column.getQuery();
                String queryName = query.getFullName();
                // cannot use the attribute query from record, need to get it
                // back from wdkModel, since the query has pk params appended
                query = (Query) wdkModel.resolveReference(queryName);

                // handle query
                if (!queryNames.containsKey(queryName)){
                    // query not processed yet, process it
                    String shortName = "aq" + queryNames.size();
                    String sql = getAttributeSql(query);
                    queryNames.put(queryName, shortName);
                    querySqls.put(queryName, sql);}

                // handle column
                String sortingColumn = column.getSortingColumn();
                if (sortingColumn == null) sortingColumn = column.getName();
                boolean ignoreCase = column.isIgnoreCase();
                if (!orderClauses.containsKey(sortingColumn)){
                    // dependent not processed, process it
                    StringBuffer clause = new StringBuffer();
                    if (ignoreCase) clause.append("lower(");
                    clause.append(queryNames.get(queryName));
                    clause.append(".");
                    clause.append(sortingColumn);
                    if (ignoreCase) clause.append(")");
                    clause.append(ascend ? " ASC" : " DESC");
                    orderClauses.put(sortingColumn, clause.toString());}}}

        // fill the map of short name and sqls
        for (String queryName : queryNames.keySet()){
            String shortName = queryNames.get(queryName);
            String sql = querySqls.get(queryName);
            sqls.put(shortName, sql);}
        orders.addAll(orderClauses.values());}

    /**
     * If not already initialized, initialize the page's record instances,
     * setting each with its id (either just primary key or that and project, if
     * using a federated data source).
     * 
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     * @throws WdkModelException
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o238d38a053a6456eb95fb48ed5160fb6717" name="initPageRecordInstances" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        if (pageRecordInstances != null) return;

        logger.debug("Initializing paged records......");
        this.pageRecordInstances = new LinkedHashMap&lt;PrimaryKeyAttributeValue, RecordInstance&gt;();

        String sql = getPagedIdSql();
        try{
	        WdkModel wdkModel = question.getWdkModel();
	        DBPlatform platform = wdkModel.getQueryPlatform();
	        DataSource dataSource = platform.getDataSource();
	        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
	                idsQueryInstance.getQuery().getFullName() + "-paged");
	        ResultList resultList = new SqlResultList(resultSet);
	        RecordClass recordClass = question.getRecordClass();
	        PrimaryKeyAttributeField pkField = recordClass.getPrimaryKeyAttributeField();
	        while (resultList.next()){
	            // get primary key. the primary key is supposed to be translated to
	            // the current ones from the id query, and no more translation
	            // needed.
	            //
	            // If this assumption is false, then we need to join the alias query
	            // into the paged id query as well.
	            Map&lt;String, Object&gt; pkValues = new LinkedHashMap&lt;String, Object&gt;();
	            for (String column : pkField.getColumnRefs()){
	                Object value = resultList.get(column);
	                pkValues.put(column, value);}
	            RecordInstance record = new RecordInstance(this, pkValues);
	            pageRecordInstances.put(record.getPrimaryKey(), record);}}
        catch (SQLException e){
        	throw new WdkUserException("Unable to get record instances.", e);}

        // check if the number of records is expected
        int resultSize = getResultSize();
        int expected = Math.min(endIndex, resultSize) - startIndex + 1;

        if (expected != pageRecordInstances.size()){
            StringBuffer buffer = new StringBuffer();
            for (String name : getSummaryAttributeFieldMap().keySet()){
                if (buffer.length() &gt; 0) buffer.append(", ");
                buffer.append(name);}
            logger.debug("resultSize: " + resultSize + ", start: " + startIndex
                    + ", end: " + endIndex);
            logger.debug("expected: " + expected + ", actual: "
                    + pageRecordInstances.size());
            logger.debug("Paged ID SQL:\n" + sql);
            throw new WdkModelException("The expacted result size is different"
                    + " from the actual size. Please check the id query "
                    + idsQueryInstance.getQuery().getFullName() + " and the "
                    + "attribute queries that return the attributes (" + buffer
                    + "). expected size: " + expected + ", actual size: "
                    + pageRecordInstances.size());}

        logger.debug("Paged records initialized.");}

    /**
     * @return Returns the endRecordInstanceI.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe7b82698c8ab40f4ae148c85f4e69075717" name="getEndIndex" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return endIndex;}

    /**
     * @return Returns the startRecordInstanceI.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od3928acddf334bf982aec1eddf8c3bdf717" name="getStartIndex" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return startIndex;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8fcaa47ebb724dcb95f4cea67a7b7d7b717" name="getResultMessage" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            SQLException, WdkModelException, JSONException, WdkUserException{
        return idsQueryInstance.getResultMessage();}</source-code>
          </source-codes>
        </operation>
        <operation id="oe12ae7368e3644e28b574c8bf4004a91717" name="getSortingMap" type="Map&lt;String, Boolean&gt;" type-id="Map&lt;String, Boolean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, Boolean&gt;(sortingMap);}

    /**
     * Set a new sorting map
     * 
     * @param sortingMap
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob9fbf963488d48af99a54263cc454e13717" name="setSortingMap" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sortingMap" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        if (sortingMap == null){
            sortingMap = question.getSortingAttributeMap();}
        // make sure all sorting columns exist
        StringBuilder buffer = new StringBuilder("set sorting: ");
        Map&lt;String, AttributeField&gt; attributes = question.getAttributeFieldMap();
        Map&lt;String, Boolean&gt; validMap = new LinkedHashMap&lt;String, Boolean&gt;();
        for (String attributeName : sortingMap.keySet()){
            buffer.append(attributeName + "=" + sortingMap.get(attributeName)
                    + ", ");
            // if a sorting attribute is invalid, instead of throwing out an
            // exception, ignore it.
            if (!attributes.containsKey(attributeName)){
                // throw new
                // WdkModelException("the assigned sorting attribute ["
                // + attributeName + "] doesn't exist in the answer of "
                // + "question " + question.getFullName());
                logger.debug("Invalid sorting attribute: User #"
                        + user.getUserId() + ", question: '"
                        + question.getFullName() + "', attribute: '"
                        + attributeName + "'");} else{
                validMap.put(attributeName, sortingMap.get(attributeName));}}
        logger.debug(buffer);
        this.sortingMap.clear();
        this.sortingMap.putAll(validMap);

        this.sortedIdSql = null;
        this.pageRecordInstances = null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5914be55d9444994aaf7f9cf4e6eedf8717" name="getDisplayableAttributes" type="List&lt;AttributeField&gt;" type-id="List&lt;AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; map = getDisplayableAttributeMap();
        return new ArrayList&lt;AttributeField&gt;(map.values());}

    /**
     * The displayable includes all attributes that is not internal. It also
     * contains all the summary attributes that are currently displayed.
     * 
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5a3719c275f34075bb8d39e9fb261a07717" name="getDisplayableAttributeMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; displayAttributes = new LinkedHashMap&lt;String, AttributeField&gt;();
        Map&lt;String, AttributeField&gt; attributes = question.getAttributeFieldMap(FieldScope.NON_INTERNAL);
        // Map&lt;String, AttributeField&gt; summaryAttributes =
        // this.getSummaryAttributeFieldMap();
        for (String attriName : attributes.keySet()){
            AttributeField attribute = attributes.get(attriName);

            // skip the attributes that are already displayed
            // if (summaryAttributes.containsKey(attriName)) continue;

            displayAttributes.put(attriName, attribute);}
        return displayAttributes;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofe8517a5fa7847d78dc8f3f673f0c43d717" name="getDisplayableAttributeTree" type="TreeNode" type-id="TreeNode" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        return convertAttributeTree(question.getAttributeCategoryTree(FieldScope.NON_INTERNAL));}</source-code>
          </source-codes>
        </operation>
        <operation id="o78b55a1708d543ddb11cf4775e830f98717" name="getReportMakerAttributeTree" type="TreeNode" type-id="TreeNode" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        return convertAttributeTree(question.getAttributeCategoryTree(FieldScope.REPORT_MAKER));}</source-code>
          </source-codes>
        </operation>
        <operation id="o20ee0ff9451e4fa087065dd481c04cfb717" name="convertAttributeTree" type="TreeNode" type-id="TreeNode" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="rawAttributeTree" type="AttributeCategoryTree" type-id="AttributeCategoryTree" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
    		throws WdkModelException, WdkUserException{
        TreeNode root = rawAttributeTree.toTreeNode("category root",
                "Attribute Categories");
        List&lt;String&gt; currentlySelectedFields = new ArrayList&lt;String&gt;();
        for (AttributeField field : getSummaryAttributeFieldMap().values()){
            currentlySelectedFields.add(field.getName());}
        root.turnOnSelectedLeaves(currentlySelectedFields);
        root.setDefaultLeaves(new ArrayList&lt;String&gt;(
                question.getSummaryAttributeFieldMap().keySet()));
        return root;}


    //private Map&lt;String, AttributeField&gt; summaryFieldMap;
    //this.summaryFieldMap = new LinkedHashMap&lt;String, AttributeField&gt;();</source-code>
          </source-codes>
        </operation>
        <operation id="oca4d40bdbd174cc9a01220cad3ae196e717" name="getSummaryAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
    		throws WdkModelException, WdkUserException{
        
    	// get preferred attribs from user and initialize map
    	String[ userPrefAttributes = user.getSummaryAttributes(question.getFullName());
        Map&lt;String, AttributeField&gt; summaryFields = new LinkedHashMap&lt;String, AttributeField&gt;();
        
        // always put the primary key as the first attribute
        PrimaryKeyAttributeField pkField = question.getRecordClass().getPrimaryKeyAttributeField();
        summaryFields.put(pkField.getName(), pkField);

        // add remainder of attributes to map and return
        Map&lt;String, AttributeField&gt; allFields = question.getAttributeFieldMap();
        for (String attributeName : userPrefAttributes){
            AttributeField field = allFields.get(attributeName);
            if (field != null) summaryFields.put(attributeName, field);}
        return summaryFields;}

    /**
     * @return returns a list of all primary key values.
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException
     * @throws JSONException
     * @throws WdkUserException
     */
    public Object[][]</source-code>
          </source-codes>
        </operation>
        <operation id="o3e5bc9e396974dd3833217f45f04a489717" name="getPrimaryKeyValues" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        String[ columns = question.getRecordClass().getPrimaryKeyAttributeField().getColumnRefs();
        List&lt;Object[&gt; buffer = new ArrayList&lt;Object[&gt;();

        ResultList resultList;
        if (filter == null) resultList = idsQueryInstance.getResults();
        else resultList = filter.getResults(this);

        while (resultList.next()){
            Object[ pkValues = new String[columns.length;
            for (int columnIndex = 0; columnIndex &lt; columns.length; columnIndex++){
                pkValues[columnIndex = resultList.get(columns[columnIndex);}
            buffer.add(pkValues);}
        Object[[ ids = new String[buffer.size()[columns.length;
        buffer.toArray(ids);
        return ids;}</source-code>
          </source-codes>
        </operation>
        <operation id="o79debf66ba3a42b781e661599df3cb0e717" name="getAnswer" type="Answer" type-id="Answer" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException, SQLException,
            WdkModelException, JSONException, WdkUserException{
        if (answer == null){
            AnswerFactory answerFactory = question.getWdkModel().getAnswerFactory();
            String questionName = question.getFullName();
            answer = answerFactory.getAnswer(questionName, getChecksum());
            if (answer == null) answer = answerFactory.saveAnswerValue(this);}
        return answer;}</source-code>
          </source-codes>
        </operation>
        <operation id="o104679761f1c4d399edea14196cdd1b1717" name="getFilterSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filterName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
    	Integer size = resultSizesByFilter.get(filterName);
	    if (size != null &amp;&amp; idsQueryInstance.isCached()){
	    	return size;}
	    try{
            RecordClass recordClass = question.getRecordClass();

            String innerSql = idsQueryInstance.getSql();
            int assignedWeight = idsQueryInstance.getAssignedWeight();

            // ignore invalid filters
            AnswerFilterInstance filter = recordClass.getFilter(filterName);
            if (filter != null)
                innerSql = filter.applyFilter(user, innerSql, assignedWeight);

            StringBuffer sql = new StringBuffer("SELECT count(*) FROM ");
            sql.append("(").append(innerSql).append(") f");

            WdkModel wdkModel = question.getWdkModel();
            DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
            Object result = SqlUtils.executeScalar(wdkModel, dataSource,
                    sql.toString(), idsQueryInstance.getQuery().getFullName()
                            + "-" + filterName + "-filter-size");
            size = Integer.parseInt(result.toString());

            resultSizesByFilter.put(filterName, size);
            
            return size;}
	    catch (SQLException e){
	    	throw new WdkUserException("Unable to get filter size for filter " + filterName, e);}}

    /**
     * @return the filter
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocd927f9a4710455186e749423ed0a172717" name="getFilter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return filter;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofaaaed9e3d5043f7815d2e230531f16d717" name="setFilter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filterName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (filterName != null){
            RecordClass recordClass = question.getRecordClass();
            setFilter(recordClass.getFilter(filterName));} else this.filter = null;}

    /**
     * @param filter
     *            the filter to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oec2514d471ea41a7beda0c4ea52ae72b717" name="setFilter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.filter = filter;
        reset();}</source-code>
          </source-codes>
        </operation>
        <operation id="o4c89441ffc634488bcd21ff3d415b8c0717" name="setAnswer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answer" type="Answer" type-id="Answer" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.answer = answer;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc02fbee6d7c646558183f20773f91d1c717" name="reset" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        sortedIdSql = null;
        pageRecordInstances = null;
        resultSize = null;
        resultSizesByFilter.clear();
        resultSizesByProject = null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5d3e066f8ab94a018c859a159c7e9926717" name="getAllIds" type="List&lt;String[]&gt;" type-id="List&lt;String[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        String idSql = getSortedIdSql();
        PrimaryKeyAttributeField pkField = question.getRecordClass().getPrimaryKeyAttributeField();
        String[ pkColumns = pkField.getColumnRefs();
        List&lt;String[&gt; pkValues = new ArrayList&lt;String[&gt;();
        WdkModel wdkModel = question.getWdkModel();
        DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
        ResultSet resultSet = null;
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource, idSql,
                    idsQueryInstance.getQuery().getFullName() + "-all-ids");
            while (resultSet.next()){
                String[ values = new String[pkColumns.length;
                for (int i = 0; i &lt; pkColumns.length; i++){
                    Object value = resultSet.getObject(pkColumns[i);
                    values[i = (value == null) ? null : value.toString();}
                pkValues.add(values);}}
        finally{
            SqlUtils.closeResultSet(resultSet);}
        return pkValues;}</source-code>
          </source-codes>
        </operation>
        <operation id="o08c450b776f349c380bd838d1ed85dcc717" name="isUseBooleanFilter" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (idsQueryInstance instanceof BooleanQueryInstance){
            return ((BooleanQueryInstance) idsQueryInstance).isUseBooleanFilter();} else return false;}</source-code>
          </source-codes>
        </operation>
        <operation id="odb5d7915e2ff4fdabf8e77a3dbe75b2d717" name="setPageIndex" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.startIndex = startIndex;
        this.endIndex = endIndex;
        this.sortedIdSql = null;
        this.pageRecordInstances = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di558828821601981958" cid="C220" type="class" name="AttributeCategory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a31452dc5098b407c92d1aa6eb5274563747" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6974769af188412486b70f0a04e3e35c747" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o99359e658e5c497886e0346475bce17e747" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oed59644b4fe44af4a8f87e12edba8988747" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6d091940c4504a0fba49707b4333c4be747" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		this.displayName = displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1a15ea2d8ab84acaab0364f8927e9179747" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="odc523b3bd2c74d62b653008a4acbbfe1747" name="addAttributeCategory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="category" type="AttributeCategory" type-id="AttributeCategory" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		subcategories.add(category);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4c85344132824b34931163ba6e3d7fdd747" name="getSubCategories" type="List&lt;AttributeCategory&gt;" type-id="List&lt;AttributeCategory&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return subcategories;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1755e62598e44f5bb60b75faa7ced383748" name="addField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="AttributeField" type-id="AttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		fields.add(field);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe6438841c1b14aec8acba80e9f402c76748" name="setFields" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="newFields" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		fields = newFields;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2bcd920a5b1246bab39c978ed0a3dc2b748" name="getFields" type="List&lt;AttributeField&gt;" type-id="List&lt;AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return fields;}
	
	/**
	 * Creates copy of this object and returns it.  Deeply copies
	 * nested AttributeCategories, but only copies references to
	 * AttributeFields (List of fields is a copy as though).  Trims
	 * out subcategories that do not contain any fields.
	 * 
	 * @return copy of this AttribueCategory
	 */
	public</source-code>
          </source-codes>
        </operation>
        <operation id="o744e992c540f43b5a8f68dfa844af26d748" name="getTrimmedCopy" type="AttributeCategory" type-id="AttributeCategory" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		AttributeCategory copy = new AttributeCategory();
		copy.name = name;
		copy.displayName = displayName;
		for (AttributeCategory cat : subcategories){
			AttributeCategory catCopy = cat.getTrimmedCopy(scope);
			if (!(catCopy.subcategories.isEmpty() &amp;&amp; catCopy.fields.isEmpty())){
				copy.subcategories.add(catCopy);}}
		for (AttributeField field : fields){
			if (scope.isFieldInScope(field)){
				copy.fields.add(field);}}
		return copy;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9ead2c76c49f49c590a5d63e578bac74748" name="appendToStringBuffer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="indentation" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="builder" type="StringBuilder" type-id="StringBuilder" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		builder.append(indentation).append(name).append(" (").append(fields.size()).append(")").append(newline);
		for (AttributeCategory cat : subcategories){
			cat.appendToStringBuffer(indentation + "  ", builder);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob4adca89e24448a4bf7e54b92a89c663748" name="toTreeNode" type="TreeNode" type-id="TreeNode" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		TreeNode node = new TreeNode(getName(), getDisplayName());
		for (AttributeCategory cat : subcategories){
			node.addChildNode(cat.toTreeNode());}
		for (AttributeField attrib : fields){
			node.addChildNode(new TreeNode(attrib.getName(), attrib.getDisplayName(), attrib.getHelp()));}
		return node;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di973067721213334958" cid="C221" type="class" name="AttributeCategoryTree" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o20d638ae089d454889cd58633a947e80796" name="addAttributeCategory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="category" type="AttributeCategory" type-id="AttributeCategory" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		topLevelCategories.add(category);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc9f2d3423baa4b54a2baacee3b40bd4c796" name="prependAttributeCategory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dynamic" type="AttributeCategory" type-id="AttributeCategory" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		topLevelCategories.add(0, dynamic);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4e00bfed4cda4219bf63886415a27bc2796" name="addAttributeToCategories" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attribute" type="AttributeField" type-id="AttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
		if (attribute.getAttributeCategory() == null){
			// add no-category attribute to default list
			topLevelAttributes.add(attribute);
			return;}
		// split attributeCategory into individual names
		String[ categories = attribute.getAttributeCategory().split(",");
		for (String category : categories){
			category = category.trim();
			if (!categoryMap.containsKey(category)){
				throw new WdkModelException("Attribute field " + attribute.getName() +
						" is assigned to a category '" + category + "' that does not exist.");}
			categoryMap.get(category).addField(attribute);}}

	/**
	 * Creates and returns a copy of this tree with only attributes valid under
	 * the given scope.  Also recursively trims categories that do not have attributes.
	 * 
	 * @param scope scope in which attributes must be valid
	 * @return copy of tree, trimmed for scope and empty categories
	 */
	public</source-code>
          </source-codes>
        </operation>
        <operation id="oe760419a04fc46a888ca93a672b51eae796" name="getTrimmedCopy" type="AttributeCategoryTree" type-id="AttributeCategoryTree" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		AttributeCategoryTree copy = new AttributeCategoryTree();
		for (AttributeCategory cat : topLevelCategories){
			AttributeCategory copyCat = cat.getTrimmedCopy(scope);
			if (!(copyCat.getFields().isEmpty() &amp;&amp; copyCat.getSubCategories().isEmpty())){
				copy.topLevelCategories.add(copyCat);}}
		for (AttributeField field : topLevelAttributes){
			if (scope.isFieldInScope(field)){
				copy.topLevelAttributes.add(field);}}
		try{
			copy.resolveReferences(getWdkModel());}
		catch (WdkModelException e){
			throw new IllegalStateException("Existing category tree has been corrupted.", e);}
		return copy;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob274bfab67b54731823251c6d4049f4c796" name="getTopLevelCategories" type="List&lt;AttributeCategory&gt;" type-id="List&lt;AttributeCategory&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return topLevelCategories;}
	
	/**
	 * Builds out a map from category name to category
	 * @throws WdkModelException 
	 * @throws JSONException 
	 * @throws SQLException 
	 * @throws WdkUserException 
	 * @throws NoSuchAlgorithmException 
	 */
	@Override</source-code>
          </source-codes>
        </operation>
        <operation id="o585ef51cb5004a818755b0457082c955796" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
		super.resolveReferences(model);
		for (AttributeCategory cat : topLevelCategories){
			addCategoryToMap(cat);}}

	/**
	 * Recursively adds the passed category and all subcategories to the category map
	 * 
	 * @param cat category to add
	 * @throws WdkModelException if any categories' names are duplicated
	 */
	private</source-code>
          </source-codes>
        </operation>
        <operation id="o8f0562fe3b074f9089dc87d38d4c302e796" name="addCategoryToMap" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cat" type="AttributeCategory" type-id="AttributeCategory" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
		if (categoryMap.containsKey(cat.getName())){
			throw new WdkModelException("Attribute categories must be unique. " +
					cat.getName() + " is duplicated.");}
		categoryMap.put(cat.getName(), cat);
		for (AttributeCategory subcat : cat.getSubCategories()){
			addCategoryToMap(subcat);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o6d629dfc430f4da4b37f5b45ead1dc20796" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		StringBuilder str = new StringBuilder()
			.append("uncategorized (").append(topLevelAttributes.size()).append(")").append(newline);
		for (AttributeCategory cat : topLevelCategories){
			cat.appendToStringBuffer("", str);}
		return str.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o6d185b1d64d1446faea0647c5120ff6d796" name="toTreeNode" type="TreeNode" type-id="TreeNode" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="rootName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="rootDisplayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		TreeNode root = new TreeNode(rootName, rootDisplayName);
		for (AttributeCategory cat : topLevelCategories){
			root.addChildNode(cat.toTreeNode());}
		for (AttributeField attrib : topLevelAttributes){
			root.addChildNode(new TreeNode(attrib.getName(), attrib.getDisplayName(), attrib.getHelp()));}
		return root;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di138251565897285800" cid="C222" type="class" name="AttributeField" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="oe2dbc1ea4b9f48508616c1008ce96161876" name="getDependents" type="Collection&lt;AttributeField&gt;" type-id="Collection&lt;AttributeField&gt;" visibility="protected" abstract="true" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException;

    protected AttributeFieldContainer container;

    private boolean sortable = true;
    private String align;
    private boolean nowrap = false;
    private boolean removable = true;
    private String categoryName;

    private List&lt;AttributePluginReference&gt; pluginList = new ArrayList&lt;AttributePluginReference&gt;();
    private Map&lt;String, AttributePluginReference&gt; pluginMap;

    /**
     * by default, an attribute can be removed from the result page.
     * 
     * @return
     */
    public boolean isRemovable(){
        return removable;}

    /**
     * @param removable
     *            the removable to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5bd1402e4aa5451c93f7f1e4b7729e2b876" name="setRemovable" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="removable" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.removable = removable;}

    /**
     * @return the sortable
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe4df6a7b702244cbabcf19998e832ca9876" name="isSortable" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return sortable;}

    /**
     * @param sortable
     *            the sortable to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6f9240469f494983a0c218893738bfa8876" name="setSortable" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sortable" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.sortable = sortable;}

    /**
     * @return the align
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o55839ef4bc444acfbe3778aa6ba0fd94876" name="getAlign" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return align;}

    /**
     * @param align
     *            the align to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o29d6b1116042482286c584f2573132ee876" name="setAlign" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="align" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.align = align;}

    /**
     * @return the nowrap
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o72b74436d71b49d9a4fdc317911d6f1b876" name="isNowrap" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return nowrap;}

    /**
     * @param nowrap
     *            the nowrap to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o53accd4f625a44409f47ea5893ed1828876" name="setNowrap" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="nowrap" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.nowrap = nowrap;}

    /**
     * @return attribute category name
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe1c0dd2a3db840299b355a863bc223e9876" name="getAttributeCategory" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return categoryName;}

    /**
     * @param categoryName
     *            attribute category name
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2c557d0689f049ed905417a88feef199876" name="setAttributeCategory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="categoryName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.categoryName = categoryName;}

    /**
     * @param container
     *            the container to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o80b348039a934b938c2056ddd7682c7e876" name="setContainer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="container" type="AttributeFieldContainer" type-id="AttributeFieldContainer" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.container = container;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1b3b4b3bb36f41bb8cb0a50dd3eaacc1876" name="addAttributePluginReference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="reference" type="AttributePluginReference" type-id="AttributePluginReference" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        reference.setAttributeField(this);
        if (pluginList != null) pluginList.add(reference);
        else pluginMap.put(reference.getName(), reference);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa91c987bfac34c20a3865a8f9d419c74876" name="getAttributePlugins" type="Map&lt;String, AttributePluginReference&gt;" type-id="Map&lt;String, AttributePluginReference&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, AttributePluginReference&gt;(pluginMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o15fd45e77ba04fdd9e6ed6ac345f8a31876" name="getColumnAttributeFields" type="Map&lt;String, ColumnAttributeField&gt;" type-id="Map&lt;String, ColumnAttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Map&lt;String, ColumnAttributeField&gt; leaves = new LinkedHashMap&lt;String, ColumnAttributeField&gt;();
        for (AttributeField dependent : getDependents()){
            if (dependent instanceof ColumnAttributeField){
                leaves.put(dependent.getName(),
                        (ColumnAttributeField) dependent);} else{
                leaves.putAll(dependent.getColumnAttributeFields());}}
        return leaves;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0b0734afbbd544f4a7f0cea0e1ae4b97876" name="parseFields" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="text" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        Map&lt;String, AttributeField&gt; children = new LinkedHashMap&lt;String, AttributeField&gt;();
        Map&lt;String, AttributeField&gt; fields = container.getAttributeFieldMap();

        Matcher matcher = AttributeField.MACRO_PATTERN.matcher(text);
        while (matcher.find()){
            String fieldName = matcher.group(1);
            if (!fields.containsKey(fieldName)){
                logger.warn("Invalid field macro in attribute" + " [" + name
                        + "] of [" + recordClass.getFullName() + "]: "
                        + fieldName);
                continue;}

            AttributeField field = fields.get(fieldName);
            children.put(fieldName, field);
            if (!children.containsKey(fieldName))
                children.put(fieldName, field);}
        return children;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8c430243cabc41e3aba0a2cb709e0a61876" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        // exclude attribute plugin references
        pluginMap = new LinkedHashMap&lt;String, AttributePluginReference&gt;();
        for (AttributePluginReference plugin : pluginList){
            if (plugin.include(projectId)){
                String name = plugin.getName();
                if (pluginMap.containsKey(name))
                    throw new WdkModelException("The plugin '" + name
                            + "' is duplicated in attribute " + this.name);
                plugin.excludeResources(projectId);
                pluginMap.put(name, plugin);}}
        pluginList = null;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.Field#presolveReferences(org.gusdb.wdk.model.WdkModel
     * )
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o621664c09e9a4952a4c68a3d6f91ba81876" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(wdkModel);

        // resolve plugin references
        for (AttributePluginReference plugin : pluginMap.values()){
            plugin.resolveReferences(wdkModel);}

        // check dependency loops
        traverseDependeny(this, new Stack&lt;String&gt;());}

    /**
     * 
     * @param attribute
     *            the attribute to be checked
     * @param path
     *            the path from root to the attribute (attribute is not included
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2ab49ebe82f248eaa9a0f119421360a6876" name="traverseDependeny" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attribute" type="AttributeField" type-id="AttributeField" default-value="" />
            <parameter id="" name="path" type="Stack" type-id="Stack" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        if (path.contains(attribute.name))
            throw new WdkModelException("Attribute has loop reference: "
                    + attribute.name);

        path.push(attribute.name);
        for (AttributeField dependent : attribute.getDependents()){
            traverseDependeny(dependent, path);}
        path.pop();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di624027824183952080" cid="C223" type="class" name="AttributeList" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a9c21e51bb4ee41fb8dd6dbb2c3642a95916" name="summaryAttributeNames" type="String[]" type-id="String[]" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a652151f694484b7ab01bbb1adcffa7cd916" name="sortingAttributeMap" type="Map&lt;String, Boolean&gt;" type-id="Map&lt;String, Boolean&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o03e0211b394a475cac5e1d4ab1f3c6b0916" name="AttributeList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        sortingAttributeMap = new LinkedHashMap&lt;String, Boolean&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="o8854f81da3d5453fbda3d8c9389750e1916" name="setSummary" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="summaryList" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.summaryAttributeNames = summaryList.split(",\\s*");}</source-code>
          </source-codes>
        </operation>
        <operation id="od7ae7b7192834da28727f86715bad426916" name="setSorting" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sortList" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        String[ attrCombines = sortList.split(",");
        for (String attrCombine : attrCombines){
            String[ sorts = attrCombine.trim().split("\\s+");
            if (sorts.length != 2)
                throw new WdkModelException("The sorting format is wrong: "
                        + sortList);
            String attrName = sorts[0.trim();
            String strAscend = sorts[1.trim().toLowerCase();
            boolean ascending = strAscend.equals("asc");
            if (!sortingAttributeMap.containsKey(attrName))
                sortingAttributeMap.put(attrName, ascending);}}

    /**
     * @return the sortingAttributeMap
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oedddfe3375f5459cbd23e8b138467271916" name="getSortingAttributeMap" type="Map&lt;String, Boolean&gt;" type-id="Map&lt;String, Boolean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.sortingAttributeMap;}

    /**
     * @return the summaryAttributeNames
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0e84fbb00fc34aae9b80e1c76a89b91b916" name="getSummaryAttributeNames" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.summaryAttributeNames;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob8af790aeeaa46cd8f0eb4374225c12f916" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // no resource to release, do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o15d98ca382a947f996aab666567659ec916" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // nothing to resolve.}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di479398989219281280" cid="C224" type="class" name="AttributeQueryReference" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="oc79b1fc03a854166add228544e15286d947" name="AttributeQueryReference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}

    /**
     * @param twoPartName
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o81dcc12faaea4ebe816a8f5ef8d3c427947" name="AttributeQueryReference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="twoPartName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super(twoPartName);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc0d49d048e204fb1b385d9af9b77306a947" name="addAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeField" type="AttributeField" type-id="AttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        attributeFieldList.add(attributeField);}</source-code>
          </source-codes>
        </operation>
        <operation id="of0c414606bf348bdb5d1f3360ecc2c26947" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, AttributeField&gt;(attributeFieldMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe9d73f053d214ba49768619ee93ccd79947" name="getAttributeFields" type="AttributeField[]" type-id="AttributeField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        AttributeField[ array = new AttributeField[attributeFieldMap.size();
        attributeFieldMap.values().toArray(array);
        return array;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Reference#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o38f3353d01b04672b821fdef5c2a18c8947" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        // exclude attribute fields
        for (AttributeField field : attributeFieldList){
            if (field.include(projectId)){
                field.excludeResources(projectId);
                String fieldName = field.getName();
                if (attributeFieldMap.containsKey(fieldName))
                    throw new WdkModelException("The attributeField "
                            + fieldName + " is duplicated in queryRef "
                            + this.getTwoPartName());
                attributeFieldMap.put(fieldName, field);}}
        attributeFieldList = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di256900610845907431" cid="C225" type="class" name="AttributeValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a6d71130af3a54bf683bb360680deadbc977" name="field" type="AttributeField" type-id="AttributeField" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4d8dd2097db840e49cbda2a6eec8ffc8977" name="value" type="Object" type-id="Object" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="obdcfd1611da7461dbd494e2ff7a01c92977" name="getValue" type="Object" type-id="Object" visibility="public" abstract="true" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException;

    public AttributeValue(AttributeField field){
        this.field = field;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0a570e81a5254a8b9cf891c0db79d8a0977" name="getAttributeField" type="AttributeField" type-id="AttributeField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field;}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od91a24657a314e1e93c5837323ad3a90977" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.getDisplayName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o68a2199a741d4bfabf603b9e8ffa40d7977" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.getName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o4bc01547754c4092b5723193b07c4313977" name="getBriefDisplay" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        String display = getDisplay();
        int truncateTo = field.getTruncateTo();
        if (truncateTo == 0) truncateTo = Utilities.TRUNCATE_DEFAULT;
        if (display.length() &gt; truncateTo)
            display = display.substring(0, truncateTo) + "...";
        return display;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7e2891e0098f4907a5f673fc9c99ad3d977" name="getDisplay" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, WdkUserException, SQLException,
            JSONException{
        Object value = getValue();
        return (value != null) ? value.toString() : "";}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9cf49d4bad7f452da7cac9e4bb6de0ff977" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        try{
            Object value = getValue();
            return (value == null) ? "" : value.toString();} catch (WdkModelException ex){
            throw new RuntimeException(ex);} catch (WdkUserException ex){
            throw new RuntimeException(ex);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di288578242453711888" cid="C226" type="class" name="AttributeValueContainer" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o0067e71a6ba64b22873508038c86daf322" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="protected" abstract="true" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes />
        </operation>
        <operation id="oca1e88973bd24b4caed649b8a84ea32a22" name="fillColumnAttributeValues" type="" type-id="" visibility="protected" abstract="true" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeQuery" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException;

    protected abstract PrimaryKeyAttributeValue getPrimaryKey();

    private Map&lt;String, AttributeValue&gt; attributeValueCache = new LinkedHashMap&lt;String, AttributeValue&gt;();

    public AttributeValue getAttributeValue(String fieldName)
            throws WdkModelException, WdkUserException{
        // get the field from the cache; primary key always exists in the cache
        Map&lt;String, AttributeField&gt; fields = getAttributeFieldMap();
        AttributeField field = fields.get(fieldName);
        if (field == null)
            throw new WdkModelException("The attribute field [" + fieldName
                    + "] cannot be found");

        if (attributeValueCache.containsKey(fieldName))
            return attributeValueCache.get(fieldName);

        // create the cache
        AttributeValue value;
        if (field instanceof LinkAttributeField){
            value = new LinkAttributeValue((LinkAttributeField) field, this);
            attributeValueCache.put(fieldName, value);} else if (field instanceof TextAttributeField){
            value = new TextAttributeValue((TextAttributeField) field, this);
            attributeValueCache.put(fieldName, value);} else if (field instanceof PrimaryKeyAttributeField){
            value = getPrimaryKey();
            attributeValueCache.put(fieldName, value);} else if (field instanceof ColumnAttributeField){
            Query query = ((ColumnAttributeField) field).getColumn().getQuery();

            logger.debug("filling attribute values from query " + query.getFullName());
            for (Column column : query.getColumns()){
                logger.debug("column: " + column.getName());}
            if (query instanceof SqlQuery)
                logger.debug("SQL: \n" + ((SqlQuery)query).getSql());

            fillColumnAttributeValues(query);
            if (!attributeValueCache.containsKey(fieldName))
            // something is wrong here, need further investigation.
                throw new WdkModelException("Field exists, but the value "
                        + "doesn't, need investigation: " + field.getName());
            value = attributeValueCache.get(fieldName);} else{
            throw new WdkModelException(
                    "unsupported attribute field type for : " + fieldName);}
        return value;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8c51617a1a7041e48d772b19330873c822" name="addAttributeValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="AttributeValue" type-id="AttributeValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        attributeValueCache.put(value.getAttributeField().getName(), value);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di588633462646231796" cid="C227" type="class" name="CategoryQuestionRef" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7d7e23b2418e4b75a0a73fc7e05bc6fa62" name="usedBy" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="obf757a1d693d429aac498fccd8948b1b62" name="getUsedBy" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return usedBy;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0ad7f712eba046edb58865a509f4b9eb62" name="setUsedBy" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="usedBy" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.usedBy = usedBy;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di390808899121191578" cid="C228" type="class" name="ColumnAttributeField" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ac5ac6a97dd494d36bd2269470ed9d63988" name="column" type="Column" type-id="Column" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o88bbe8fb6a954022a9c794a70289060888" name="ColumnAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();
        // initialize the optional field values}

    /**
     * @return Returns the column.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8ea43e1b2ede4b1d94e880756876160488" name="getColumn" type="Column" type-id="Column" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.column;}

    /**
     * @param column
     *            The column to set.
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oed0c91a27caa4cd19ea078eb4cd96fcf88" name="setColumn" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="column" type="Column" type-id="Column" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.column = column;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.Field#presolveReferences(org.gusdb.wdk.model.WdkModel
     * )
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8e697a611bb3431ab5cf9b9a1b3fa1b088" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(wdkModel);

        // verify the name
        if (!name.equals(column.getName()))
            throw new WdkModelException("The name of the ColumnAttributeField"
                    + " '" + name + "' does not match the column name '"
                    + column.getName() + "'");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeField#getDependents()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob47e4c2f5f0a40689b78f2cdb637687788" name="getDependents" type="Collection&lt;AttributeField&gt;" type-id="Collection&lt;AttributeField&gt;" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new ArrayList&lt;AttributeField&gt;();}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o1387dc7b81f84fac9ac357c2dc99137c88" name="getColumnAttributeFields" type="Map&lt;String, ColumnAttributeField&gt;" type-id="Map&lt;String, ColumnAttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, ColumnAttributeField&gt; fields = new LinkedHashMap&lt;String, ColumnAttributeField&gt;();
        fields.put(name, this);
        return fields;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di905377597687198095" cid="C229" type="class" name="ColumnAttributeValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o36242eebd5fe426aaa482df7b5fd753f97" name="ColumnAttributeValue" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="ColumnAttributeField" type-id="ColumnAttributeField" default-value="" />
            <parameter id="" name="value" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(field);
        this.value = value;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeValue#getValue()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob233a73cb7a74172aafa07441b562cd797" name="getValue" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return Utilities.parseValue(value);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di639981053829874138" cid="C230" type="class" name="DynamicAttributeSet" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a1ee46eae23f04d57994f42c0fb3db521193" name="question" type="Question" type-id="Question" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o6cebb1214fbc4ea1b091ad6c9008be60193" name="DynamicAttributeSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="o410ba9e2c4134714b7586c03b57e2615193" name="addAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeField" type="AttributeField" type-id="AttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        attributeFieldList.add(attributeField);}</source-code>
          </source-codes>
        </operation>
        <operation id="o43642ebe34ef489fb2ee70cb6b436057193" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer();
        buf.append("  dynamicAttributes:" + newline);

        for (String attrName : attributeFieldMap.keySet()){
            buf.append("    " + attrName + newline);}
        return buf.toString();}

    // /////////////////////////////////////////////////////////////////
    // package methods //
    // /////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="ofbe4dbd7f3ac41b7b2208720c6bf543d193" name="setQuestion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.question = question;}</source-code>
          </source-codes>
        </operation>
        <operation id="o881832670ba54177ada9f613f7d9e48b193" name="getQuestion" type="Question" type-id="Question" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7720a446c39e4f59a29e09b1c08537e9193" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getAttributeFieldMap(FieldScope.ALL);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa324c60d2b2b4ad1a7be70e99525c59f193" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; map = new LinkedHashMap&lt;String, AttributeField&gt;();
        for (AttributeField field : attributeFieldMap.values()){
            if (scope.isFieldInScope(field)){
                map.put(field.getName(), field);}}
        return map;}

    // /////////////////////////////////////////////////////////////////
    // private methods //
    // /////////////////////////////////////////////////////////////////

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o447d981392974171b592b0857279baa0193" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude the attribute fields
        for (AttributeField field : attributeFieldList){
            if (field.include(projectId)){
                field.excludeResources(projectId);
                String fieldName = field.getName();

                // the attribute name must be unique
                if (attributeFieldMap.containsKey(fieldName))
                    throw new WdkModelException("DynamicAttributes contain a "
                            + "duplicate attribute '" + fieldName + "'");

                attributeFieldMap.put(fieldName, field);}}
        attributeFieldList = null;

        // check if weight is defined, if not, create it
        if (!attributeFieldMap.containsKey(Utilities.COLUMN_WEIGHT)){
            // always have weight as a dynamic attribute
            ColumnAttributeField attribute = new ColumnAttributeField();
            attribute.setName(Utilities.COLUMN_WEIGHT);
            attribute.setDisplayName("Weight");
            attribute.setInternal(false);
            attribute.setInReportMaker(true);
            attribute.setSortable(true);
            // attribute.setHelp("User-defined integer value; in a search strategy, unions and intersects will sum the weights, giving higher scores to items found in multiple searches. ");
            attribute.setHelp("The *search result weight*. This is the sum of "
                    + "the weights you specified for individual searches that "
                    + "found this record.   The more searches that found this "
                    + "record the higher will be its weight.  To give a search "
                    + "a weight, click \"Use Weights\" on the search page, and "
                    + "provide the desired weight.");

            // add an histogram plugin to the weight
            AttributePluginReference reference = new AttributePluginReference();
            reference.setName("histogram");
            reference.setDisplay("Histogram");
            reference.setDescription("Display a histogram of weigh distribution");
            reference.setImplementation("org.gusdb.wdk.model.attribute.plugin.HistogramAttributePlugin");
            reference.setView("/wdk/jsp/results/histogram.jsp");
            attribute.addAttributePluginReference(reference);

            attribute.excludeResources(projectId);

            attributeFieldMap.put(Utilities.COLUMN_WEIGHT, attribute);}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oba66691b157441bfbee73a655bc59a8d193" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        RecordClass recordClass = question.getRecordClass();
        Query dynamicAttributeQuery = question.getDynamicAttributeQuery();
        Map&lt;String, Column&gt; columns = dynamicAttributeQuery.getColumnMap();

        // make sure the dynamic attribute set doesn't have duplicated
        // attributes
        Map&lt;String, AttributeField&gt; fields = recordClass.getAttributeFieldMap();
        for (String fieldName : attributeFieldMap.keySet()){
            if (fields.containsKey(fieldName))
                throw new WdkModelException("Dynamic attribute field "
                        + fieldName + " in question " + question.getFullName()
                        + " already exists in recordClass "
                        + recordClass.getFullName());
            AttributeField field = attributeFieldMap.get(fieldName);
            field.setRecordClass(recordClass);
            field.setContainer(question);
            if (field instanceof ColumnAttributeField){
                // need to set the column before resolving references
                Column column = columns.get(fieldName);
                if (column == null)
                    throw new WdkModelException("Dynamic column attribute of "
                            + "question [" + question.getFullName() + "] is "
                            + "defined, but the underlying id query doesn't"
                            + " have the column '" + fieldName + "'");
                ((ColumnAttributeField) field).setColumn(column);}
            field.resolveReferences(wodkModel);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di412273419667740386" cid="C231" type="class" name="FavoriteReference" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7a7a236830184838b011d96942a70280200" name="noteField" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o019384e8ad8b423c83facc41e674f43a200" name="getNoteField" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return noteField;}

    /**
     * @param noteField the noteField to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od5fc3b0c29ec42f89c82ddf1bff81cb6200" name="setNoteField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="noteField" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.noteField = noteField;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di560914610904658306" cid="C232" type="class" name="Field" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2369d53310854c21b5277295640f048f249" name="name" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae9496b4faba04d92ad656946e2e4fe58249" name="displayName" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5514f910c10249808d5d83f486d74c62249" name="help" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6f050f9b100c4f3b85c30bd0d20e6210249" name="type" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af096563b9f074df1843491e74be79066249" name="truncateTo" type="int" type-id="int" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac481afba5323431dbd9a2b598ae57211249" name="internal" type="boolean" type-id="boolean" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8fee5b18600f447694b9a235a741e428249" name="inReportMaker" type="boolean" type-id="boolean" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af756205dcb1a4f44ab2ddaaea47e6aa1249" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0b446ffa971f4dbaad9526b447748bec249" name="Field" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // initialize the optional properties
        internal = false;
        inReportMaker = true;
        truncateTo = Utilities.TRUNCATE_DEFAULT;}

    /**
     * @return Returns the displayName.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o68c10da60fce409dabb12905810abf98249" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (displayName == null) ? name : displayName;}

    /**
     * @param displayName
     *            The displayName to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2ac4443cdc0b494698f7341fc3d568eb249" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}

    /**
     * @return Returns the help.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6b2125a4e5b6493b9b1c2b36c69053cb249" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.help;}

    /**
     * @param help
     *            The help to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o482fb4583b6e4bc4863e98a09e16f090249" name="setHelp" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="help" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.help = help;}

    /**
     * @return Returns the inReportMaker.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe08caa770081455b940788410111b798249" name="isInReportMaker" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.inReportMaker;}

    /**
     * @param inReportMaker
     *            The inReportMaker to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o854c343477fa4a47bc6c627d537336fe249" name="setInReportMaker" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="inReportMaker" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.inReportMaker = inReportMaker;}

    /**
     * @return Returns the internal.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o58b258ed81c34359b18abc5929b22df3249" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.internal;}

    /**
     * @param internal
     *            The internal to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2d986a2d0599419ab8853fb07f20f082249" name="setInternal" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="internal" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.internal = internal;}

    /**
     * @return Returns the name.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o37a05240df4e404690ac0c1793bde35d249" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.name;}

    /**
     * @param name
     *            The name to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3194f7d59e6f4df3af0daa489cbac17b249" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return Returns the truncateTo.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe54ccc5d20474aa7a8bb0738f5ed8b04249" name="getTruncateTo" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.truncateTo;}

    /**
     * @param truncateTo
     *            The truncateTo to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obd57da27cf164e138cec0c0a17897cec249" name="setTruncateTo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="truncateTo" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.truncateTo = truncateTo;}

    /**
     * @return Returns the type.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o477b410f82cf4805a5b8e5d75edd690e249" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.type;}

    /**
     * @param type
     *            The type to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o649861e6466a4f6daec294c09c991027249" name="setType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="type" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.type = type;}

    /**
     * @return the recordClass
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oaacb8714eed94751847adf27678c40e6249" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass;}

    /**
     * @param recordClass
     *            the recordClass to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o491618b63e7b4c158e7281df5c08a62c249" name="setRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4f762a6fabaa4310819f4bce0b9a6684249" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getDisplayName();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di772226955709176858" cid="C233" type="class" name="Group" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="af39bc7adcf5546ea82c724b09426badd321" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abecb9c0d680d4d079bee7973812f865a321" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac14ca0021c32441f87b6ae4db736859c321" name="descriptions" type="List&lt;WdkModelText&gt;" type-id="List&lt;WdkModelText&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a41726e43f26f45dcb702e3c55f5b4ff3321" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6111e7f960a94b8ea58593f615036768321" name="displayType" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a72521824a9754f5daaf2c89a8ffbac6d321" name="visible" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a65ad86d786ba478dae0fea200021fdfb321" name="groupSet" type="GroupSet" type-id="GroupSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o02e6f125551c40429f962a2a22d33c15321" name="Empty" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (empty == null){
            empty = new Group();
            empty.displayType = "empty";}
        return empty;}</source-code>
          </source-codes>
        </operation>
        <operation id="o35a42b9a349e4c9a92a2dbee82086352321" name="Group" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // initialize an empty group
        name = "empty";
        displayName = "";
        description = "";
        descriptions = new ArrayList&lt;WdkModelText&gt;();}

    /**
     * @return the description
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oc830c12f41494c8caf5d095e2d59e873321" name="getDescription" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return description;}

    /**
     * @param description
     *            the description to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o947fcb297c6d488cbe4ec3f0ada18c60321" name="addDescription" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.descriptions.add(description);}

    /**
     * @return the displayName
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8ca77671854d4341a0f519a407a2dab7321" name="getDisplayName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayName;}

    /**
     * @param displayName
     *            the displayName to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o7cd4a7b090eb45a0ad579d516a2f985d321" name="setDisplayName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}

    /**
     * @return the groupSet
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o6bc11b60563c48188c14424726ae2060321" name="getGroupSet" type="GroupSet" type-id="GroupSet" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return groupSet;}

    /**
     * @param groupSet
     *            the groupSet to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o6030dd7cb13542819436a7643db8d6e6321" name="setGroupSet" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="groupSet" type="GroupSet" type-id="GroupSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.groupSet = groupSet;}

    /**
     * @return the name
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oce80df4b2c7b40a2a9b452a5a7f2d968321" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     *            the name to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ode8cc8ecc3fc4173aedf4460c202b43b321" name="setName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7d8c8c09b0144deb86de0dfc7fe65067321" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (groupSet != null) return groupSet.getName() + "." + name;
        else return name;}

    /**
     * @return the displayType
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oc2722a33bb794994b4c8d3c99b6e6dcf321" name="getDisplayType" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayType;}

    /**
     * @param displayType
     *            the displayType to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o111e7feb594d417988f73eee3db6e19a321" name="setDisplayType" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayType = displayType;}</source-code>
          </source-codes>
        </operation>
        <operation id="od089964bd71b4a5eacc9d3ef92ca36c9321" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
        <operation id="o1bcd83750574486882e0488e76ee74ce321" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="obb0141abe32147988ca35605ce5f872b321" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude descriptions
        boolean hasDescription = false;
        for (WdkModelText description : descriptions){
            if (description.include(projectId)){
                if (hasDescription){
                    throw new WdkModelException("The group " + getFullName()
                            + " has more than one description for project "
                            + projectId);} else{
                    this.description = description.getText();
                    hasDescription = true;}}}
        descriptions = null;}

    /**
     * @return the visible
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8f500f660a2c498b8ab4fc1aaf3d667e322" name="isVisible" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return visible;}

    /**
     * @param visible
     *            the visible to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o228d87695961448a91633368868204bf322" name="setVisible" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="visible" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.visible = visible;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di907442539805502205" cid="C234" type="class" name="GroupSet" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="af340f21968494853a1be42ea6354d952376" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o2d392eef1ed84307a8584a9905589970376" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     * the name to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o71d5abdb1d28400d8eef14ce5f12fad0376" name="setName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oec12cc7275bc479faebd5a0312b15d9b376" name="getGroup" type="Group" type-id="Group" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Group group = groupMap.get(name);
        if (group == null)
            throw new WdkModelException("Group Set " + getName()
                    + " does not include group " + name);
        return group;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.ModelSetI#getElement(java.lang.String)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ofd939c47aff442eb9f8a872dc7f33804376" name="getElement" type="Object" type-id="Object" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="elementName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return groupMap.get(elementName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3ca4afc916004a92bc068a9c33790990376" name="getGroups" type="Group[]" type-id="Group[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Group[ array = new Group[groupMap.size();
        groupMap.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o11550ae679b747db8bedae7352d8e475376" name="addGroup" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="group" type="Group" type-id="Group" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        groupList.add(group);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.ModelSetI#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o006f087943a046e48ccdc517f18f9d7d376" name="resolveReferences" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (Group group : groupMap.values()){
            group.resolveReferences(model);}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.ModelSetI#setResources(org.gusdb.wdk.model.WdkModel)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od6cf350b76f748e0aa628c8f8cf1158f376" name="setResources" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (Group group : groupMap.values()){
            group.setResources(model);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5a9726260eb54e6e9f9717b4df7b5005376" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer("GroupSet: name='" + name + "'");
        buf.append(newline);
        for (Group group : groupMap.values()){
            buf.append(newline);
            buf.append(":::::::::::::::::::::::::::::::::::::::::::::");
            buf.append(newline);
            buf.append(group).append(newline);}

        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4cd648a07133448fa28569a0e966d08f376" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude groups
        for (Group group : groupList){
            if (group.include(projectId)){
                group.excludeResources(projectId);
                String groupName = group.getName();
                if (groupMap.containsKey(groupName))
                    throw new WdkModelException("Group named " + groupName
                            + " already exists in group set " + name);
                group.setGroupSet(this);
                groupMap.put(groupName, group);}}
        groupList = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di604588006873279083" cid="C235" type="class" name="LinkAttributeField" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a30bc2c200300478fb40c27046fa2d7bb436" name="urls" type="List&lt;WdkModelText&gt;" type-id="List&lt;WdkModelText&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af22ab7478d81461493ecc3d7efa61c76436" name="url" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac4c64e411e68462689dbfbc83ffb999a436" name="displayTexts" type="List&lt;WdkModelText&gt;" type-id="List&lt;WdkModelText&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8b4e7868bb814a87a7bd37a8c46b9c32436" name="displayText" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o7e489403eddc42daa43c906d6ea2d6a2436" name="LinkAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        displayTexts = new ArrayList&lt;WdkModelText&gt;();
        urls = new ArrayList&lt;WdkModelText&gt;();
        // by default, don't show linked attributes in the download
        this.inReportMaker = false;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5303b206a22741c68b82c5355afdc764436" name="addUrl" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="url" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.urls.add(url);}</source-code>
          </source-codes>
        </operation>
        <operation id="o14151eb923e344deb1df6976566625aa436" name="getUrl" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return url;}

    /**
     * @return the displayText
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa2155d67315a4359af54225efbccdb8a436" name="getDisplayText" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayText;}

    /**
     * @param displayText
     *                the displayText to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o127f8543e2c74701b2c87ac987e89d24436" name="addDisplayText" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayText" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayTexts.add(displayText);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9f6c7b6d304044cb9ac3663bed9ac937436" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);
        
        String rcName = (recordClass == null) ? ""
                : (recordClass.getFullName() + ".");

        // exclude urls
        boolean hasUrl = false;
        for (WdkModelText url : urls){
            if (url.include(projectId)){
                if (hasUrl){
                    throw new WdkModelException("The linkAttribute " + rcName
                            + getName() + " has more than one &lt;url&gt; for "
                            + "project " + projectId);} else{
                    this.url = url.getText();
                    hasUrl = true;}}}
        // check if all urls are excluded
        if (!hasUrl)
            throw new WdkModelException("The linkAttribute " + rcName + name
                    + " does not have a &lt;url&gt; tag for project " + projectId);
        urls = null;

        // exclude display texts
        boolean hasText = false;
        for (WdkModelText text : displayTexts){
            if (text.include(projectId)){
                if (hasText){
                    throw new WdkModelException("The linkAttribute " + rcName
                            + getName() + " has more than one &lt;displayText&gt; "
                            + "for project " + projectId);} else{
                    this.displayText = text.getText();
                    hasText = true;}}}
        // check if all texts are excluded
        if (!hasText)
            throw new WdkModelException("The linkAttribute " + rcName + name
                    + " does not have a &lt;displayText&gt; tag for project "
                    + projectId);
        displayTexts = null;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeField#getDependents()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc41d19f9598a4983935db5a7a96025b2436" name="getDependents" type="Collection&lt;AttributeField&gt;" type-id="Collection&lt;AttributeField&gt;" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        Map&lt;String, AttributeField&gt; dependents = parseFields(url);
        dependents.putAll(parseFields(displayText));
        return dependents.values();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di173925527310573853" cid="C236" type="class" name="LinkAttributeValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a772e27b551834cc6a22dcae8874fc7aa473" name="container" type="AttributeValueContainer" type-id="AttributeValueContainer" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a794ef9b6ef9e4cb498af1093a04d7126473" name="field" type="LinkAttributeField" type-id="LinkAttributeField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af04fdcb3987b412bb52c2be993871b99473" name="displayText" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0460aa140def4e8ea0ba97a1e719e1b0473" name="url" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o79b063de410e4c25bae87fa81db57faa473" name="LinkAttributeValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="LinkAttributeField" type-id="LinkAttributeField" default-value="" />
            <parameter id="" name="container" type="AttributeValueContainer" type-id="AttributeValueContainer" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(field);
        this.field = field;
        this.container = container;}</source-code>
          </source-codes>
        </operation>
        <operation id="o55e155a7cb9541759e068d1879a5e854473" name="getDisplayText" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        if (displayText == null){
            String text = field.getDisplayText();
            Map&lt;String, AttributeField&gt; subFields = field.parseFields(text);
            Map&lt;String, Object&gt; values = new LinkedHashMap&lt;String, Object&gt;();
            for (String subField : subFields.keySet()){
                AttributeValue value = container.getAttributeValue(subField);
                values.put(subField, value.getValue());}
            this.displayText = Utilities.replaceMacros(text, values);}
        return this.displayText;}</source-code>
          </source-codes>
        </operation>
        <operation id="o473912d6221c4986a172e0c4686729ff473" name="getUrl" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        if (this.url == null){
            String url = field.getUrl();
            Map&lt;String, AttributeField&gt; subFields = field.parseFields(url);
            Map&lt;String, Object&gt; values = new LinkedHashMap&lt;String, Object&gt;();
            for (String subField : subFields.keySet()){
                AttributeValue value = container.getAttributeValue(subField);
                values.put(subField, value.getValue());}
            this.url = Utilities.replaceMacros(url, values);}
        return this.url;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8b870f9de859405eacb0773ebe5ed943473" name="getValue" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        return getDisplayText() + "(" + getUrl() + ")";}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di956623095496810963" cid="C237" type="class" name="MacroDeclaration" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ac12922391caf46649c24bb0eb5f9912f506" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8d32c98aedb040d2bcddf2877811d092506" name="usedByModel" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="ab12d39de0d7842df95e2d018018d2187506" name="usedByJsp" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="ad7b69b08a231456a8dded36f3efc3ded506" name="usedByPerl" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o5f7e08c6a91940019e34b0d4761296cd506" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name the name to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o067aec6f905e479a8b41a59c3f6ffba4506" name="setName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9b6fd67d6e2940c59dcf3537683e6ac8506" name="setUsedBy" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="usedBy" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (usedBy == null || usedBy.trim().length() == 0) return;
        
        usedByModel = usedByJsp = usedByPerl = false;
        String[ parts = usedBy.split(",");
        for (String part : parts){
            part = part.trim();
            if ("model".equalsIgnoreCase(part)) usedByModel = true;
            else if ("jsp".equalsIgnoreCase(part)) usedByJsp = true;
            else if ("perl".equalsIgnoreCase(part)) usedByPerl = true;}}

    /**
     * @return the usedByModel
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o9ebc00cc1f934279a70ced22b06c1f07506" name="isUsedByModel" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return usedByModel;}

    /**
     * @return the usedByJsp
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8f873e6da5534b518ff61506205c3154506" name="isUsedByJsp" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return usedByJsp;}

    /**
     * @return the usedByPerl
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oedbbb7270a5d454ab1fb42534f96d72a506" name="isUsedByPerl" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return usedByPerl;}

    /* (non-Javadoc)
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o01df2f0ce7404da4890c740276e6301c506" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // do nothing}

    /* (non-Javadoc)
     * @see org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5ca4240f6bf048d9b64981975916c567506" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di939942112955934021" cid="C238" type="class" name="ModelConfig" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ae490b781a6a04cf99e6b0b5d6e367e9d611" name="modelName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab6a9598030ad4498b1a7604504db2427611" name="webServiceUrl" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab5c483619c3946cbbc06617883bbba8d611" name="defaultRole" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="&quot;wdk_user&quot;">
          <stereotypes />
        </attribute>
        <attribute id="ab7c4b5ca95d249bf80b9e589713ff117611" name="smtpServer" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2348f01c581c46a1944615dde641c292611" name="supportEmail" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abf1952641b0c4515a77538febd7c6be0611" name="adminEmail" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3725af7428d54db28c37f25fa09b3a47611" name="emailSubject" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2539d9bb2f414bf99884292a1ec801b3611" name="emailContent" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a077b73fa5c6d49afa3d50eb1f76b6ac2611" name="userDB" type="ModelConfigUserDB" type-id="ModelConfigUserDB" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1525d097e0784c6e9ad19a6fd5942394611" name="appDB" type="ModelConfigAppDB" type-id="ModelConfigAppDB" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9f6182739e4d444593c85aa82fc6b783611" name="projectId" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a77f637a6bdb4479eb6867655b3f982a6611" name="gusHome" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9b087391bf864c1eb12b212a97a8f65b611" name="secretKeyFile" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a62a31f4b78d94523a1336d3548309f13611" name="useWeights" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="a193e24ccb4f642c6af4ce850681f3739611" name="paramRegex" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o354b239e8ae340afbbf7ddc09fc38d0f611" name="QueryMonitor" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">

    /**
     * The projectId is not part of the config file content, it is input by the
     * user
     */

    // location of secret key file

    // whether to include weight form

    /**
     * @return the projectId
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oedc3ca66a52c46a396b96e40c8c0ee2e611" name="getProjectId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.projectId;}

    /**
     * @param projectId
     *            the projectId to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o38e08ea4eff54b2ba78cac1a47f32e09611" name="setProjectId" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.projectId = projectId;}

    /**
     * @return the gusHome
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oba1514f65fdb493ab3dfd612c2578f0d611" name="getGusHome" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.gusHome;}

    /**
     * @param gusHome
     *            the gusHome to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa3a3bdf9ea7341679c9922b07a46986c611" name="setGusHome" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="gusHome" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.gusHome = gusHome;}

    /**
     * @return the modelName
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o359894aa976e45afbb92c07f9d6cbe92611" name="getModelName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.modelName;}

    /**
     * @param modelName
     *            the modelName to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3bbf825ef32a4eae8d4279774ec06ade611" name="setModelName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="modelName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.modelName = modelName;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa98e3ea09627424a9bd0b2cb3e8ad074611" name="getWebServiceUrl" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return webServiceUrl;}</source-code>
          </source-codes>
        </operation>
        <operation id="o05edb73498304dd4abf998a564be4c96611" name="setWebServiceUrl" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="urlString" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        webServiceUrl = urlString;}

    /**
     * @return Returns the smtpServer.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o92f3114b8e994b77b6e810fec53d6627611" name="getSmtpServer" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return smtpServer;}

    /**
     * @param smtpServer
     *            The smtpServer to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9b0d9999b4664fe6871409f782b417ed611" name="setSmtpServer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="smtpServer" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.smtpServer = smtpServer;}

    /**
     * @return Returns the emailContent.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="odf8e91fea87c4881b5ebe189e5867b0b611" name="getEmailContent" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return emailContent;}

    /**
     * @param emailContent
     *            The emailContent to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o29b6d1631ab343e5ae0efb25d8af9668611" name="setEmailContent" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="emailContent" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.emailContent = emailContent;}

    /**
     * @return Returns the emailSubject.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o96794cffa98e4f04ab81058de9d0a569611" name="getEmailSubject" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return emailSubject;}

    /**
     * @param emailSubject
     *            The emailSubject to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofd3012f01b994ecaa8a7b99f0a5ee64e611" name="setEmailSubject" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="emailSubject" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.emailSubject = emailSubject;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6b7703a853064995860bf1e497970b5d611" name="getSupportEmail" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return supportEmail;}</source-code>
          </source-codes>
        </operation>
        <operation id="o886725520bad40148a749260fa2599c8611" name="setSupportEmail" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="supportEmail" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.supportEmail = supportEmail;}

    /**
     * @return the userDB
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa5723bc0671c4e22a6fa5ca1d0f07e87611" name="getUserDB" type="ModelConfigUserDB" type-id="ModelConfigUserDB" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return userDB;}

    /**
     * @param userDB
     *            the userDB to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o897313ce531c458c905044d22dcfb911611" name="setUserDB" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userDB" type="ModelConfigUserDB" type-id="ModelConfigUserDB" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.userDB = userDB;}

    /**
     * @return the appDB
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o637e34e2856243cea18afdb9398751ce611" name="getAppDB" type="ModelConfigAppDB" type-id="ModelConfigAppDB" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return appDB;}

    /**
     * @param appDB
     *            the appDB to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc3ce879e193d4432a5865b2900a2261d611" name="setAppDB" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="appDB" type="ModelConfigAppDB" type-id="ModelConfigAppDB" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.appDB = appDB;}

    /**
     * @return the defaultRole
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od0edd68add46403990d56c7479662814611" name="getDefaultRole" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return defaultRole;}

    /**
     * @param defaultRole
     *            the defaultRole to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0af62a91a1404372b9ea0ceffba99864611" name="setDefaultRole" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="defaultRole" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.defaultRole = defaultRole;}

    /**
     * @return the secretKeyFile
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7fc040cd7d864762b3b3ec69a443e7ff611" name="getSecretKeyFile" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return secretKeyFile;}

    /**
     * @param secretKeyFile
     *            the secretKeyFile to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob5388f993efb4236bc61e8368004f7ae611" name="setSecretKeyFile" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="secretKeyFile" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.secretKeyFile = secretKeyFile;}

    /**
     * @return the useWeights
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob5edb07e1efe4bf39b0a2b2431ad1c95611" name="getUseWeights" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return useWeights;}

    /**
     * @param secretKeyFile
     *            the secretKeyFile to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob95f627d08814e8fb365ec9806994dff611" name="setUseWeights" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="useWeights" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.useWeights = useWeights;}

    /**
     * @return the adminEmail
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o062eeab134a7423bb60a1c011d6d9ef5611" name="getAdminEmail" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return adminEmail;}

    /**
     * @param adminEmail
     *            the adminEmail to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2e6052cf64a742158e3906a80e9ae189611" name="setAdminEmail" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="adminEmail" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (adminEmail != null &amp;&amp; adminEmail.length() == 0) adminEmail = null;
        this.adminEmail = adminEmail;}

    /**
     * @return the paramRegex
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc9a23fe6cf4a45418b69e8e372422ff3611" name="getParamRegex" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return paramRegex;}

    /**
     * @param paramRegex the paramRegex to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0bb927adb6524227b51a889bd1b447b0611" name="setParamRegex" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramRegex" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.paramRegex = paramRegex;}

    /**
     * @return the queryMonitor
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2e94f9907d954eb0bd41d4bcef872dc5611" name="getQueryMonitor" type="QueryMonitor" type-id="QueryMonitor" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queryMonitor;}

    /**
     * @param queryMonitor the queryMonitor to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob9c35fb04d0e4847ace6571e0a6a21e1611" name="setQueryMonitor" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryMonitor" type="QueryMonitor" type-id="QueryMonitor" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.queryMonitor = queryMonitor;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di802961372643331929" cid="C239" type="class" name="ModelConfigAppDB" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7900a01b8666436ca87eb61b16c653c2624" name="userDbLink" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ob29e9911fbdc4c49b80caf1570ea909b624" name="getUserDbLink" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return userDbLink;}

    /**
     * @param userDbLink
     *            the userDbLink to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="occ0eaf95b91846fb8a0dab4a0a411b17624" name="setUserDbLink" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userDbLink" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (userDbLink.length() &gt; 0 &amp;&amp; !userDbLink.startsWith("@"))
            userDbLink = "@" + userDbLink;
        this.userDbLink = userDbLink;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di581903952126930509" cid="C240" type="class" name="ModelConfigDB" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="abf883bed68e94334a8dd64f930537021698" name="login" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a257da96fbd564e9681c192fe0e9f4901698" name="password" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0118d8768fc84bcabd33cce9f0ddbcd2698" name="connectionUrl" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a812bcfbdbe754774baa7864488d76240698" name="platform" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6be37aa809554d9f86ead8323bb743ea698" name="maxActive" type="short" type-id="short" visibility="private" abstract="false" virtual="false" default-value="20">
          <stereotypes />
        </attribute>
        <attribute id="a3c7693160e2344589c29687c55f8b476698" name="maxIdle" type="short" type-id="short" visibility="private" abstract="false" virtual="false" default-value="1">
          <stereotypes />
        </attribute>
        <attribute id="a0d4999ce8a5146b681d479054d9c54cd698" name="minIdle" type="short" type-id="short" visibility="private" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="ac512a128e587427e8f5dbe0af371a45b698" name="maxWait" type="short" type-id="short" visibility="private" abstract="false" virtual="false" default-value="50">
          <stereotypes />
        </attribute>
        <attribute id="a3a2423caa994418aabb9e1a02f4ea7b7698" name="showConnections" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a62e9c130f04a443db8d1ec19fa4aa7c7698" name="showConnectionsInterval" type="long" type-id="long" visibility="private" abstract="false" virtual="false" default-value="10">
          <stereotypes />
        </attribute>
        <attribute id="aa1c4ccdac5d1450a818ba60483d6eb30698" name="showConnectionsDuration" type="long" type-id="long" visibility="private" abstract="false" virtual="false" default-value="600">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o26dd7fd20830402b9a756c94efd2554e698" name="getLogin" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return login;}

    /**
     * @param login
     *            the login to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="of7e26649ad3d4fa88ec1b621e08f3555698" name="setLogin" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="login" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.login = login;}

    /**
     * @return the password
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5f79b91525b04babbf6f186131f11c58698" name="getPassword" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return password;}

    /**
     * @param password
     *            the password to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o731c60d0eca94b66aa6b3e470c267710698" name="setPassword" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="password" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.password = password;}

    /**
     * @return the connectionUrl
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob50cd4bdc29d4bbcb2f06ae382a024db698" name="getConnectionUrl" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return connectionUrl;}

    /**
     * @param connectionUrl
     *            the connectionUrl to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o3a001a210bcf4fea9dbadf12e03f5c24698" name="setConnectionUrl" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="connectionUrl" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.connectionUrl = connectionUrl;}

    /**
     * @return the platform
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o041a6949245740a0b5eb4e123ed60bd1698" name="getPlatformClass" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "org.gusdb.wdk.model.dbms." + platform;}

    /**
     * @param platform
     *            the platform to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od6ce79cebd3043c8b5e9453291eb92d4698" name="setPlatform" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="platform" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.platform = platform;}

    /**
     * @return the maxActive
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o3b0ebb8de650474eb08b8705d1a95a69698" name="getMaxActive" type="short" type-id="short" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return maxActive;}

    /**
     * @param maxActive
     *            the maxActive to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o36fa9bba5e544f0ba313ffceb7a5fe96698" name="setMaxActive" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="maxActive" type="short" type-id="short" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.maxActive = maxActive;}

    /**
     * @return the maxIdle
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="off4c952eaf1141e3824cbd2ec4c8ca29698" name="getMaxIdle" type="short" type-id="short" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return maxIdle;}

    /**
     * @param maxIdle
     *            the maxIdle to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o0cde91e3598a40e39ae0b9e0e59150b5698" name="setMaxIdle" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="maxIdle" type="short" type-id="short" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.maxIdle = maxIdle;}

    /**
     * @return the minIdle
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5e862329b8b24c3290eec6143848b4ca698" name="getMinIdle" type="short" type-id="short" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return minIdle;}

    /**
     * @param minIdle
     *            the minIdle to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o7d5f8a9c7046445cbc6f25af915bdf99698" name="setMinIdle" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="minIdle" type="short" type-id="short" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.minIdle = minIdle;}

    /**
     * @return the maxWait
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o33af88a881204e9d9dee7f945c8274f2698" name="getMaxWait" type="short" type-id="short" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return maxWait;}

    /**
     * @param maxWait
     *            the maxWait to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o6f2ba3bc757d4ad689a5a39ae7b823b6698" name="setMaxWait" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="maxWait" type="short" type-id="short" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.maxWait = maxWait;}

    /**
     * @return the showConnections
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="odfe81a5f448e4766b228ef07733bdaf9698" name="isShowConnections" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return showConnections;}

    /**
     * @param showConnections
     *            the showConnections to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8c791d864d2d4fb6ac2cf43a8549e9e3698" name="setShowConnections" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="showConnections" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.showConnections = showConnections;}

    /**
     * @return the showConnectionsInterval
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="odfdb029078e34ebb962de9a4deb73c4b698" name="getShowConnectionsInterval" type="long" type-id="long" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return showConnectionsInterval;}

    /**
     * @param showConnectionsInterval
     *            the showConnectionsInterval to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o788bfc10bd4b4818a494feddb64346bc699" name="setShowConnectionsInterval" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="showConnectionsInterval" type="long" type-id="long" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.showConnectionsInterval = showConnectionsInterval;}

    /**
     * @return the showConnectionsDuration
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o85e83b702ffe480dad9fa49d581fe2eb699" name="getShowConnectionsDuration" type="long" type-id="long" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return showConnectionsDuration;}

    /**
     * @param showConnectionsDuration
     *            the showConnectionsDuration to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o515b7fcbd2e144c59494c3d2c43e33f9699" name="setShowConnectionsDuration" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="showConnectionsDuration" type="long" type-id="long" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.showConnectionsDuration = showConnectionsDuration;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di681578709362269999" cid="C241" type="class" name="ModelConfigParser" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="oefd64516842c4a269e074a895d36f0aa741" name="ModelConfigParser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="gusHome" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SAXException, IOException{
        super(gusHome, "lib/rng/wdkModel-config.rng");}</source-code>
          </source-codes>
        </operation>
        <operation id="od8051e7fb45f48b49d0f177b6d85d5a3741" name="parseConfig" type="ModelConfig" type-id="ModelConfig" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SAXException,
            IOException, WdkModelException{
        // validate the configuration file
        URL configURL = makeURL(gusHome, "config/" + projectId
                + "/model-config.xml");

        validate(configURL);
        ModelConfig modelConfig = (ModelConfig) digester.parse(configURL.openStream());
        modelConfig.setGusHome(gusHome);
        modelConfig.setProjectId(projectId);
        return modelConfig;}</source-code>
          </source-codes>
        </operation>
        <operation id="o79f1423db5884e0dab6bb9fb229ed56b741" name="configureDigester" type="Digester" type-id="Digester" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        Digester digester = new Digester();
        digester.setValidating(false);

        digester.addObjectCreate("modelConfig", ModelConfig.class);
        digester.addSetProperties("modelConfig");
        digester.addBeanPropertySetter("modelConfig/paramRegex");
        digester.addBeanPropertySetter("modelConfig/emailContent");
        digester.addBeanPropertySetter("modelConfig/emailSubject");

        // load application db
        configureNode(digester, "modelConfig/appDb", ModelConfigAppDB.class,
                "setAppDB");

        // load user db
        configureNode(digester, "modelConfig/userDb", ModelConfigUserDB.class,
                "setUserDB");

        configureNode(digester, "modelConfig/queryMonitor", QueryMonitor.class,
                "setQueryMonitor");
        digester.addCallMethod("modelConfig/queryMonitor/ignoreSlowQueryRegex",
                "addIgnoreSlowQueryRegex", 0);
        digester.addCallMethod(
                "modelConfig/queryMonitor/ignoreBrokenQueryRegex",
                "addIgnoreBrokenQueryRegex", 0);

        return digester;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di882359400499979161" cid="C242" type="class" name="ModelConfigUserDB" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7c48a8b22b354165a697b44c1a2414cf761" name="userSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa9177024164b49d297959a37354a4ded761" name="wdkEngineSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o1bc51349fbc446d3a79fc0ea3de0a7b7761" name="getUserSchema" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return userSchema;}

    /**
     * @param userSchema
     *            the userSchema to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o184137b2fa074dbc875aeaefb368d4e3761" name="setUserSchema" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userSchema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.userSchema = DBPlatform.normalizeSchema(userSchema);}

    /**
     * @return the wdkEngineSchema
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="odf6bc4892f0a4549bc04a4b9c2439e65761" name="getWdkEngineSchema" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkEngineSchema;}

    /**
     * @param wdkEngineSchema
     *            the wdkEngineSchema to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o55d2520ea6774bd781cb81b751b1ccd9761" name="setWdkEngineSchema" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkEngineSchema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkEngineSchema = DBPlatform.normalizeSchema(wdkEngineSchema);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di396445018648243413" cid="C243" type="class" name="ModelXmlParser" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:18">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o268eeafd0fd64834b3ea77c456519722728" name="ModelXmlParser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="gusHome" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SAXException, IOException{
        super(gusHome, "lib/rng/wdkModel.rng");

        // get model schema file and xml schema file
        xmlSchemaURL = makeURL(gusHome, "lib/rng/xmlAnswer.rng");
        xmlDataDir = gusHome + "/lib/xml/";}</source-code>
          </source-codes>
        </operation>
        <operation id="oef1f3bb2f43b4685b8307e068686669c728" name="parseModel" type="WdkModel" type-id="WdkModel" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws ParserConfigurationException,
            TransformerFactoryConfigurationError, TransformerException,
            IOException, SAXException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException, InstantiationException, IllegalAccessException,
            ClassNotFoundException, URISyntaxException{
        logger.debug("Loading configuration...");

        // get model config
        ModelConfig config = getModelConfig(projectId);
        String modelName = config.getModelName();

        // construct urls to model file, prop file, and config file
        URL modelURL = makeURL(gusHome, "lib/wdk/" + modelName + ".xml");
        URL modelPropURL = makeURL(gusHome, "config/" + projectId
                + "/model.prop");

        // load property map
        Map&lt;String, String&gt; properties = loadProperties(projectId,
                modelPropURL, config);

        // load master model
        logger.debug("Resolving WDK model...");
        Set&lt;String&gt; replacedMacros = new LinkedHashSet&lt;String&gt;();
        Document masterDoc = buildMasterDocument(projectId, modelURL,
                properties, replacedMacros);

        // write document into an input source
        logger.debug("Parsing WDK model...");
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        Source source = new DOMSource(masterDoc);
        Result result = new StreamResult(output);
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.transform(source, result);
        InputStream input = new ByteArrayInputStream(output.toByteArray());
        WdkModel model = (WdkModel) digester.parse(input);

        model.setGusHome(gusHome);
        model.setXmlSchema(xmlSchemaURL); // set schema for xml data
        model.setXmlDataDir(new File(xmlDataDir)); // consider refactoring
        model.configure(config);
        model.setResources();
        model.setProperties(properties, replacedMacros);

        return model;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2e1c15d459ff4d72ae723075de668e55728" name="getModelConfig" type="ModelConfig" type-id="ModelConfig" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SAXException,
            IOException, WdkModelException{
        ModelConfigParser parser = new ModelConfigParser(gusHome);
        return parser.parseConfig(projectId);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc50ed5464cd3466ab2c507d49fc5524e728" name="buildMasterDocument" type="Document" type-id="Document" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="wdkModelURL" type="URL" type-id="URL" default-value="" />
            <parameter id="" name="properties" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="replacedMacros" type="Set" type-id="Set" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SAXException, IOException, ParserConfigurationException,
            WdkModelException, TransformerFactoryConfigurationError,
            TransformerException, URISyntaxException{
        // load constants from master file
        Map&lt;String, String&gt; constants = loadConstants(projectId, wdkModelURL);

        // get the xml document of the model
        Document masterDoc = loadDocument(wdkModelURL, properties,
                replacedMacros, constants);
        Node root = masterDoc.getElementsByTagName("wdkModel").item(0);

        // get all imports, and replace each of them with the sub-model
        NodeList children = root.getChildNodes();
        for (int i = 0; i &lt; children.getLength(); i++){
            Node child = children.item(i);
            if (!(child instanceof Element)) continue;
            Element importNode = (Element) child;
            if (!importNode.getTagName().equals("import")) continue;

            // get url to the first import
            String href = importNode.getAttribute("file");
            URL importURL = makeURL(gusHome, "lib/wdk/" + href);

            // load constants from import doc, and merge it with master ones
            Map&lt;String, String&gt; subConsts = loadConstants(projectId, importURL);
            for (String key : constants.keySet()){
                if (!subConsts.containsKey(key)) // keep all sub-constants
                    subConsts.put(key, constants.get(key));}

            Document importDoc = loadDocument(importURL, properties,
                    replacedMacros, subConsts);

            // get the children nodes from imported sub-model, and add them
            // into master document
            Node subRoot = importDoc.getElementsByTagName("wdkModel").item(0);
            NodeList childrenNodes = subRoot.getChildNodes();
            for (int j = 0; j &lt; childrenNodes.getLength(); j++){
                Node childNode = childrenNodes.item(j);
                if (childNode instanceof Element){
                    Node imported = masterDoc.importNode(childNode, true);
                    root.appendChild(imported);}}}

        return masterDoc;}</source-code>
          </source-codes>
        </operation>
        <operation id="o360b8b30a247434db4b7194957679bd9729" name="loadConstants" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="modelXmlURL" type="URL" type-id="URL" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws IOException, SAXException,
            ParserConfigurationException, URISyntaxException{
        logger.trace("Test parsing " + modelXmlURL.toString());
        Map&lt;String, String&gt; constants = new LinkedHashMap&lt;String, String&gt;();
        // load xml document without validation
        File file = new File(modelXmlURL.toURI());
        String content = new String(Utilities.readFile(file));
        Document document = loadDocument(content);
        Node root = document.getElementsByTagName("wdkModel").item(0);
        NodeList children = root.getChildNodes();
        for (int i = 0; i &lt; children.getLength(); i++){
            Node child = children.item(i);
            if (child instanceof Element){
                Element element = (Element) child;
                if (element.getTagName().equals("constant")){
                    String name = element.getAttribute("name");
                    String includes = element.getAttribute("includeProjects");
                    String excludes = element.getAttribute("excludeProjects");
                    String value = element.getTextContent();
                    if (includes.length() &gt; 0){
                        // if includes is set, ignore excludes
                        String[ array = includes.trim().split("\\s*,\\s*");
                        if (arrayContains(array, projectId))
                            constants.put(name, value);} else if (excludes.length() &gt; 0){
                        String[ array = excludes.trim().split("\\s*,\\s*");
                        if (!arrayContains(array, projectId))
                            constants.put(name, value);} else{ // no in/excludes, include by default
                        constants.put(name, value);}}}}
        return constants;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob36862de5a2e40c38e0e3199bd72aa83729" name="arrayContains" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="array" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="key" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        for (String value : array){
            if (value.equals(key)) return true;}
        return false;}

    /**
     * Valid the xml first, and then subsitute properties and constants, and at
     * last return the parsed XML Document.
     * 
     * @param modelXmlURL
     * @param properties
     * @param replacedMacros
     * @param constants
     * @return
     * @throws SAXException
     * @throws IOException
     * @throws ParserConfigurationException
     * @throws WdkModelException
     * @throws TransformerFactoryConfigurationError
     * @throws TransformerException
     * @throws URISyntaxException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7b6889e239dd46268044e9366592e579729" name="Document" type="&lt;String&gt;" type-id="&lt;String&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="replacedMacros" type="Set" type-id="Set" default-value="" />
            <parameter id="" name="constants" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SAXException, IOException,
            ParserConfigurationException, WdkModelException,
            TransformerFactoryConfigurationError, TransformerException,
            URISyntaxException{
        // validate the sub-model
        validate(modelXmlURL);

        // load file into string
        File file = new File(modelXmlURL.toURI());
        String content = new String(Utilities.readFile(file));

        // substitute the constants &amp; properties. Constants first, since
        // properties are more specific.
        content = substituteConstants(content, constants);
        content = substituteProps(content, properties, replacedMacros);

        return loadDocument(content);}</source-code>
          </source-codes>
        </operation>
        <operation id="of75645d2b8fb47b6a5911216d68b0937729" name="Map" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="config" type="ModelConfig" type-id="ModelConfig" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        Map&lt;String, String&gt; propMap = new LinkedHashMap&lt;String, String&gt;();
        Properties properties = new Properties();
        properties.load(modelPropURL.openStream());
        Iterator&lt;Object&gt; it = properties.keySet().iterator();
        while (it.hasNext()){
            String propName = (String) it.next();
            String value = properties.getProperty(propName);
            propMap.put(propName, value);}

        // add several config into the prop map automatically
        if (!propMap.containsKey("PROJECT_ID")){
            propMap.put("PROJECT_ID", projectId);}
        if (!propMap.containsKey("USER_DBLINK")){
            String userDbLink = config.getAppDB().getUserDbLink();
            propMap.put("USER_DBLINK", userDbLink);}
        if (!propMap.containsKey("USER_SCHEMA")){
            propMap.put("USER_SCHEMA", config.getUserDB().getUserSchema());}
        if (!propMap.containsKey("WDK_ENGINE_SCHEMA")){
            String engineSchema = config.getUserDB().getWdkEngineSchema();
            propMap.put("WDK_ENGINE_SCHEMA", engineSchema);}

        return propMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1d2b04bd378b45478ee0fbdf5826622a729" name="substituteConstants" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="content" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="constants" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws TransformerFactoryConfigurationError, TransformerException,
            WdkModelException, URISyntaxException{
        Matcher matcher = CONSTANT_PATTERN.matcher(content);

        // search and substitute the property macros
        StringBuilder buffer = new StringBuilder();
        int prevPos = 0;
        while (matcher.find()){
            String propName = matcher.group(1);

            // check if the property macro is defined
            if (!constants.containsKey(propName)) continue;

            String propValue = constants.get(propName);
            buffer.append(content.subSequence(prevPos, matcher.start()));
            buffer.append(propValue);
            prevPos = matcher.end();}
        if (prevPos &lt; content.length())
            buffer.append(content.substring(prevPos));

        // construct input stream
        return buffer.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o45c0f430c33240dab9b278c070a6e5e1729" name="String" type="&lt;String&gt;" type-id="&lt;String&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="replacedMacros" type="Set" type-id="Set" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws TransformerFactoryConfigurationError, TransformerException,
            WdkModelException, URISyntaxException{
        Matcher matcher = PROPERTY_PATTERN.matcher(content);

        // search and substitute the property macros
        StringBuilder buffer = new StringBuilder();
        int prevPos = 0;
        while (matcher.find()){
            String propName = matcher.group(1);

            // check if the property macro is defined
            if (!properties.containsKey(propName)) continue;

            String propValue = properties.get(propName);
            buffer.append(content.subSequence(prevPos, matcher.start()));
            buffer.append(propValue);
            prevPos = matcher.end();

            replacedMacros.add(propName);}
        if (prevPos &lt; content.length())
            buffer.append(content.substring(prevPos));

        // construct input stream
        return buffer.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o37ea4ca9b09443c1a2af2d18af8a12f8729" name="configureDigester" type="Digester" type-id="Digester" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Digester digester = new Digester();
        digester.setValidating(false);

        configureModel(digester);

        // configure all sub nodes of recordClassSet
        configureRecordClassSet(digester);

        // configure all sub nodes of querySet
        configureQuerySet(digester);

        // configure all sub nodes of paramSet
        configureParamSet(digester);

        // configure all sub nodes of questionSet
        configureQuestionSet(digester);

        // configure all sub nodes of xmlQuestionSet
        configureXmlQuestionSet(digester);

        // configure all sub nodes of xmlRecordSet
        configureXmlRecordClassSet(digester);

        // configure all sub nodes of xmlRecordSet
        configureGroupSet(digester);

        // configure the attributes
        configureAttributeFields(digester);

        configureCommonNodes(digester);

        return digester;}</source-code>
          </source-codes>
        </operation>
        <operation id="o81bb92713d5d48d3bb40620a5b8e8938730" name="configureModel" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // Root -- WDK Model
        digester.addObjectCreate("wdkModel", WdkModel.class);
        digester.addSetProperties("wdkModel");

        configureNode(digester, "wdkModel/modelName", WdkModelName.class,
                "addWdkModelName");

        configureNode(digester, "wdkModel/introduction", WdkModelText.class,
                "addIntroduction");
        digester.addCallMethod("wdkModel/introduction", "setText", 0);

        // default property list
        configureNode(digester, "wdkModel/defaultPropertyList",
                PropertyList.class, "addDefaultPropertyList");

        // categories
        configureNode(digester, "wdkModel/searchCategory",
                SearchCategory.class, "addCategory");

        configureNode(digester, "wdkModel/searchCategory/questionRef",
                CategoryQuestionRef.class, "addQuestionRef");
        digester.addCallMethod("wdkModel/searchCategory/questionRef",
                "setText", 0);

        // configure property macros
        configureNode(digester, "wdkModel/declaredMacro",
                MacroDeclaration.class, "addMacroDeclaration");}</source-code>
          </source-codes>
        </operation>
        <operation id="o0a36f68ae6ea4fbbb17ce0ad312d0078730" name="configureRecordClassSet" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // record class set
        configureNode(digester, "wdkModel/recordClassSet",
                RecordClassSet.class, "addRecordClassSet");

        // record class
        configureNode(digester, "wdkModel/recordClassSet/recordClass",
                RecordClass.class, "addRecordClass");

        // attribute categories
        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/attributeCategories",
                AttributeCategoryTree.class, "setAttributeCategoryTree");
        configureNode(digester, "*/attributeCategory", AttributeCategory.class,
                "addAttributeCategory");

        // favorite references
        configureNode(digester, "wdkModel/recordClassSet/recordClass/favorite",
                FavoriteReference.class, "addFavorite");

        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/attributesList",
                AttributeList.class, "addAttributeList");

        // defaultTestParamValues
        configureParamValuesSet(digester,
                "wdkModel/recordClassSet/recordClass/testParamValues",
                "addParamValuesSet");

        // reporter
        configureNode(digester, "wdkModel/recordClassSet/recordClass/reporter",
                ReporterRef.class, "addReporterRef");
        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/reporter/property",
                ReporterProperty.class, "addProperty");
        digester.addCallMethod(
                "wdkModel/recordClassSet/recordClass/reporter/property",
                "setValue", 0);

        // filter layouts
        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/answerFilterLayout",
                AnswerFilterLayout.class, "addFilterLayout");
        configureNode(
                digester,
                "wdkModel/recordClassSet/recordClass/answerFilterLayout/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod(
                "wdkModel/recordClassSet/recordClass/answerFilterLayout/description",
                "setText", 0);
        configureNode(
                digester,
                "wdkModel/recordClassSet/recordClass/answerFilterLayout/instanceRef",
                AnswerFilterInstanceReference.class, "addReference");
        configureNode(
                digester,
                "wdkModel/recordClassSet/recordClass/answerFilterLayout/layout",
                WdkModelText.class, "addLayout");
        digester.addCallMethod(
                "wdkModel/recordClassSet/recordClass/answerFilterLayout/layout",
                "setText", 0);

        // filter instances
        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/answerFilter",
                AnswerFilter.class, "addFilter");
        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/answerFilter/instance",
                AnswerFilterInstance.class, "addInstance");

        configureNode(
                digester,
                "wdkModel/recordClassSet/recordClass/answerFilter/instance/displayName",
                WdkModelText.class, "addDisplayName");
        digester.addCallMethod(
                "wdkModel/recordClassSet/recordClass/answerFilter/instance/displayName",
                "setText", 0);

        configureNode(
                digester,
                "wdkModel/recordClassSet/recordClass/answerFilter/instance/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod(
                "wdkModel/recordClassSet/recordClass/answerFilter/instance/description",
                "setText", 0);

        configureNode(
                digester,
                "wdkModel/recordClassSet/recordClass/answerFilter/instance/paramValue",
                WdkModelText.class, "addParamValue");
        digester.addCallMethod(
                "wdkModel/recordClassSet/recordClass/answerFilter/instance/paramValue",
                "setText", 0);

        // attribute query ref
        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/attributeQueryRef",
                AttributeQueryReference.class, "addAttributesQueryRef");

        // tables
        configureNode(digester, "wdkModel/recordClassSet/recordClass/table",
                TableField.class, "addTableField");

        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/table/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod(
                "wdkModel/recordClassSet/recordClass/table/description",
                "setText", 0);

        // tableField's property list
        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/table/propertyList",
                PropertyList.class, "addPropertyList");

        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/table/columnAttribute",
                ColumnAttributeField.class, "addAttributeField");

        // nested record and record list
        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/nestedRecord",
                NestedRecord.class, "addNestedRecordQuestionRef");

        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/nestedRecordList",
                NestedRecordList.class, "addNestedRecordListQuestionRef");

        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/summaryView",
                SummaryView.class, "addSummaryView");

        configureNode(
                digester,
                "wdkModel/recordClassSet/recordClass/summaryView/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod(
                "wdkModel/recordClassSet/recordClass/summaryView/description",
                "setText", 0);

        configureNode(digester,
                "wdkModel/recordClassSet/recordClass/recordView",
                RecordView.class, "addRecordView");

        configureNode(
                digester,
                "wdkModel/recordClassSet/recordClass/recordView/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod(
                "wdkModel/recordClassSet/recordClass/recordView/description",
                "setText", 0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o9a1babcea8834c23b4abb54709ca1ec6730" name="configureQuerySet" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // QuerySet
        configureNode(digester, "wdkModel/querySet", QuerySet.class,
                "addQuerySet");

        // defaultTestParamValues
        configureParamValuesSet(digester,
                "wdkModel/querySet/defaultTestParamValues",
                "addDefaultParamValuesSet");

        // cardinalitySql
        configureNode(digester, "wdkModel/querySet/testRowCountSql",
                WdkModelText.class, "addTestRowCountSql");
        digester.addCallMethod("wdkModel/querySet/testRowCountSql", "setText",
                0);

        // sqlQuery
        configureNode(digester, "wdkModel/querySet/sqlQuery", SqlQuery.class,
                "addQuery");

        // testParamValues
        configureParamValuesSet(digester,
                "wdkModel/querySet/sqlQuery/testParamValues",
                "addParamValuesSet");

        configureNode(digester, "wdkModel/querySet/sqlQuery/sql",
                WdkModelText.class, "addSql");
        digester.addCallMethod("wdkModel/querySet/sqlQuery/sql", "setText", 0);

        configureNode(digester, "wdkModel/querySet/sqlQuery/paramRef",
                ParamReference.class, "addParamRef");

        configureNode(digester, "wdkModel/querySet/sqlQuery/column",
                Column.class, "addColumn");

        configureNode(digester, "wdkModel/querySet/sqlQuery/sqlParamValue",
                WdkModelText.class, "addSqlParamValue");
        digester.addCallMethod("wdkModel/querySet/sqlQuery/sqlParamValue",
                "setText", 0);

        // processQuery
        configureNode(digester, "wdkModel/querySet/processQuery",
                ProcessQuery.class, "addQuery");

        // testParamValues
        configureParamValuesSet(digester,
                "wdkModel/querySet/processQuery/testParamValues",
                "addParamValuesSet");

        configureNode(digester, "wdkModel/querySet/processQuery/paramRef",
                ParamReference.class, "addParamRef");

        configureNode(digester, "wdkModel/querySet/processQuery/wsColumn",
                Column.class, "addColumn");}</source-code>
          </source-codes>
        </operation>
        <operation id="o347066a253974f5eb3d0c39110594651730" name="configureParamSet" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // ParamSet
        configureNode(digester, "wdkModel/paramSet", ParamSet.class,
                "addParamSet");

        // string param
        String path = "wdkModel/paramSet/stringParam";
        configureNode(digester, path, StringParam.class, "addParam");
        configureParamContent(digester, path);
        configureNode(digester, path + "/regex", WdkModelText.class, "addRegex");
        digester.addCallMethod(path + "/regex", "setText", 0);

        // flatVocabParam
        path = "wdkModel/paramSet/flatVocabParam";
        configureNode(digester, path, FlatVocabParam.class, "addParam");
        configureParamContent(digester, path);

        // answer param
        configureNode(digester, "wdkModel/paramSet/answerParam",
                AnswerParam.class, "addParam");
        configureParamContent(digester, "wdkModel/paramSet/answerParam");
        configureNode(digester, "wdkModel/paramSet/answerParam/recordClass",
                RecordClassReference.class, "addRecordClassRef");

        // dataset param
        path = "wdkModel/paramSet/datasetParam";
        configureNode(digester, path, DatasetParam.class, "addParam");
        configureParamContent(digester, path);

        // enum param
        path = "wdkModel/paramSet/enumParam";
        configureNode(digester, path, EnumParam.class, "addParam");
        configureParamContent(digester, path);

        path = path + "/enumList";
        configureNode(digester, path, EnumItemList.class, "addEnumItemList");

        configureNode(digester, path + "/enumValue", EnumItem.class,
                "addEnumItem");
        digester.addBeanPropertySetter(path + "/enumValue/display");
        digester.addBeanPropertySetter(path + "/enumValue/term");
        digester.addBeanPropertySetter(path + "/enumValue/internal");
        digester.addBeanPropertySetter(path + "/enumValue/parentTerm");

        configureNode(digester, path + "/enumValue/dependedValue",
                WdkModelText.class, "addDependedValue");
        digester.addCallMethod(path + "/enumValue/dependedValue", "setText", 0);

        // timestamp param
        path = "wdkModel/paramSet/timestampParam";
        configureNode(digester, path, TimestampParam.class, "addParam");
        configureParamContent(digester, path);}</source-code>
          </source-codes>
        </operation>
        <operation id="odb88c1e91cc946c2a845e4b322001ab5730" name="configureParamContent" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
            <parameter id="" name="paramPath" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        configureNode(digester, paramPath + "/suggest", ParamSuggestion.class,
                "addSuggest");
        configureNode(digester, paramPath + "/noTranslation",
                ParamConfiguration.class, "addNoTranslation");}</source-code>
          </source-codes>
        </operation>
        <operation id="o01be5f17e58c4997a4bc3599d96307bc730" name="configureQuestionSet" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // QuestionSet
        configureNode(digester, "wdkModel/questionSet", QuestionSet.class,
                "addQuestionSet");

        configureNode(digester, "wdkModel/questionSet/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod("wdkModel/questionSet/description", "setText", 0);

        // question
        configureNode(digester, "wdkModel/questionSet/question",
                Question.class, "addQuestion");

        configureNode(digester, "wdkModel/questionSet/question/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod("wdkModel/questionSet/question/description",
                "setText", 0);

        configureNode(digester, "wdkModel/questionSet/question/summary",
                WdkModelText.class, "addSummary");
        digester.addCallMethod("wdkModel/questionSet/question/summary",
                "setText", 0);

        // question's property list
        configureNode(digester, "wdkModel/questionSet/question/propertyList",
                PropertyList.class, "addPropertyList");

        configureNode(digester, "wdkModel/questionSet/question/attributesList",
                AttributeList.class, "addAttributeList");

        // dynamic attribute set
        configureNode(digester,
                "wdkModel/questionSet/question/dynamicAttributes",
                DynamicAttributeSet.class, "addDynamicAttributeSet");

        configureNode(
                digester,
                "wdkModel/questionSet/question/dynamicAttributes/columnAttribute",
                ColumnAttributeField.class, "addAttributeField");

        configureNode(digester, "wdkModel/questionSet/question/paramRef",
                ParamReference.class, "addParamRef");

        configureNode(digester, "wdkModel/questionSet/question/sqlParamValue",
                WdkModelText.class, "addSqlParamValue");
        digester.addCallMethod("wdkModel/questionSet/question/sqlParamValue",
                "setText", 0);

        configureNode(digester, "wdkModel/questionSet/question/summaryView",
                SummaryView.class, "addSummaryView");

        configureNode(
                digester,
                "wdkModel/questionSet/question/summaryView/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod(
                "wdkModel/questionSet/question/summaryView/description",
                "setText", 0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o30c7c017a18044f1bc846d2f0407b08c730" name="configureXmlQuestionSet" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // load XmlQuestionSet
        configureNode(digester, "wdkModel/xmlQuestionSet",
                XmlQuestionSet.class, "addXmlQuestionSet");

        configureNode(digester, "wdkModel/xmlQuestionSet/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod("wdkModel/xmlQuestionSet/description",
                "setText", 0);

        // load XmlQuestion
        configureNode(digester, "wdkModel/xmlQuestionSet/xmlQuestion",
                XmlQuestion.class, "addQuestion");

        configureNode(digester,
                "wdkModel/xmlQuestionSet/xmlQuestion/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod(
                "wdkModel/xmlQuestionSet/xmlQuestion/description", "setText", 0);}</source-code>
          </source-codes>
        </operation>
        <operation id="ofa683d1a76f040bc81e5581748e4fd77730" name="configureParamValuesSet" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
            <parameter id="" name="path" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="addMethodName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        digester.addObjectCreate(path, ParamValuesSet.class);
        digester.addSetProperties(path);
        digester.addCallMethod(path + "/paramValue", "put", 2);
        digester.addCallParam(path + "/paramValue", 0, "name");
        digester.addCallParam(path + "/paramValue", 1);
        digester.addSetNext(path, addMethodName);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa9304baaf3ec4958867ab2df3bf4388b730" name="configureXmlRecordClassSet" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // load XmlRecordClassSet
        configureNode(digester, "wdkModel/xmlRecordClassSet",
                XmlRecordClassSet.class, "addXmlRecordClassSet");

        // load XmlRecordClass
        configureNode(digester, "wdkModel/xmlRecordClassSet/xmlRecordClass",
                XmlRecordClass.class, "addRecordClass");

        // load XmlAttributeField
        configureNode(digester,
                "wdkModel/xmlRecordClassSet/xmlRecordClass/xmlAttribute",
                XmlAttributeField.class, "addAttributeField");

        // load XmlTableField
        configureNode(digester,
                "wdkModel/xmlRecordClassSet/xmlRecordClass/xmlTable",
                XmlTableField.class, "addTableField");

        // load XmlAttributeField within table
        configureNode(
                digester,
                "wdkModel/xmlRecordClassSet/xmlRecordClass/xmlTable/xmlAttribute",
                XmlAttributeField.class, "addAttributeField");}</source-code>
          </source-codes>
        </operation>
        <operation id="of7df90ba0b734ebe8da05433d9e2fffa730" name="configureGroupSet" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // load GroupSet
        configureNode(digester, "wdkModel/groupSet", GroupSet.class,
                "addGroupSet");

        // load group
        configureNode(digester, "wdkModel/groupSet/group", Group.class,
                "addGroup");

        configureNode(digester, "wdkModel/groupSet/group/description",
                WdkModelText.class, "addDescription");
        digester.addCallMethod("wdkModel/groupSet/group/description",
                "setText", 0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o64a390b885854d42864039d0bc5f89ca730" name="configureAttributeFields" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // primary key attribute
        String prefixPK = "wdkModel/recordClassSet/recordClass/primaryKeyAttribute";
        configureNode(digester, prefixPK, PrimaryKeyAttributeField.class,
                "addAttributeField");
        configureNode(digester, prefixPK + "/columnRef", WdkModelText.class,
                "addColumnRef");
        digester.addCallMethod(prefixPK + "/columnRef", "setText", 0);
        configureNode(digester, prefixPK + "/text", WdkModelText.class,
                "addText");
        digester.addCallMethod(prefixPK + "/text", "setText", 0);
        configureAttributePlugins(digester, "primaryKeyAttribute");

        configureNode(digester, "*/columnAttribute",
                ColumnAttributeField.class, "addAttributeField");
        configureAttributePlugins(digester, "columnAttribute");

        // link attribute
        configureNode(digester, "*/linkAttribute", LinkAttributeField.class,
                "addAttributeField");
        configureNode(digester, "*/linkAttribute/url", WdkModelText.class,
                "addUrl");
        digester.addCallMethod("*/linkAttribute/url", "setText", 0);
        configureNode(digester, "*/linkAttribute/displayText",
                WdkModelText.class, "addDisplayText");
        digester.addCallMethod("*/linkAttribute/displayText", "setText", 0);
        configureAttributePlugins(digester, "linkAttribute");

        // text attribute
        configureNode(digester, "*/textAttribute", TextAttributeField.class,
                "addAttributeField");

        configureNode(digester, "*/textAttribute/text", WdkModelText.class,
                "addText");
        digester.addCallMethod("*/textAttribute/text", "setText", 0);

        configureNode(digester, "*/textAttribute/display", WdkModelText.class,
                "addDisplay");
        digester.addCallMethod("*/textAttribute/display", "setText", 0);
        configureAttributePlugins(digester, "textAttribute");}</source-code>
          </source-codes>
        </operation>
        <operation id="o00e570bdeb2a446ba5867ec2d1f5ce22730" name="configureAttributePlugins" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
            <parameter id="" name="attribute" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String prefix = "*/" + attribute + "/plugin";
        // configure plugins for
        configureNode(digester, prefix, AttributePluginReference.class,
                "addAttributePluginReference");
        configureNode(digester, prefix + "/property", WdkModelText.class,
                "addProperty");
        digester.addCallMethod(prefix + "/property", "setText", 0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o22b902c09d984e0a97cc96b30438f668730" name="configureCommonNodes" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        configureNode(digester, "*/help", WdkModelText.class, "addHelp");
        digester.addCallMethod("*/help", "setText", 0);

        configureNode(digester, "*/value", WdkModelText.class, "addValue");
        digester.addCallMethod("*/value", "setText", 0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2a17aa7d71fd4008966e65752a0ca8ed730" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SAXException, IOException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, WdkModelException, NoSuchAlgorithmException,
            SQLException, JSONException, WdkUserException,
            InstantiationException, IllegalAccessException,
            ClassNotFoundException{
        String cmdName = System.getProperty("cmdName");

        // process args
        Options options = declareOptions();
        CommandLine cmdLine = parseOptions(cmdName, options, args);
        String projectId = cmdLine.getOptionValue(Utilities.ARGUMENT_PROJECT_ID);
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        // create a parser, and parse the model file
        WdkModel wdkModel = WdkModel.construct(projectId, gusHome);

        // print out the model content
        System.out.println(wdkModel.toString());
        System.exit(0);}</source-code>
          </source-codes>
        </operation>
        <operation id="obc33ce3cbb7a4875958669cddbd694c4730" name="addOption" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="argName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="desc" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        Option option = new Option(argName, true, desc);
        option.setRequired(true);
        option.setArgName(argName);

        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="oef17cdc4b273491f93327c019d3056cb730" name="declareOptions" type="Options" type-id="Options" visibility="private" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Options options = new Options();

        // config file
        addOption(options, "model", "the name of the model.  This is used to "
                + "find the Model XML file ($GUS_HOME/lib/wdk/model_name.xml) "
                + "the Model property file ($GUS_HOME/config/model_name.prop) "
                + "and the Model config file "
                + "($GUS_HOME/config/model_name-config.xml)");

        return options;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c4f3e64cb404352a76d3544c32c17fd730" name="parseOptions" type="CommandLine" type-id="CommandLine" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        CommandLineParser parser = new BasicParser();
        CommandLine cmdLine = null;
        try{
            // parse the command line arguments
            cmdLine = parser.parse(options, args);} catch (ParseException exp){
            // oops, something went wrong
            System.err.println("");
            System.err.println("Parsing failed.  Reason: " + exp.getMessage());
            System.err.println("");
            usage(cmdName, options);}

        return cmdLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob9f9ab2840574fe499fa3328d35049c3730" name="usage" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        String newline = System.getProperty("line.separator");
        String cmdlineSyntax = cmdName + " -model model_name";

        String header = newline + "Parse and print out a WDK Model xml file."
                + newline + newline + "Options:";

        String footer = "";

        // PrintWriter stderr = new PrintWriter(System.err);
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(75, cmdlineSyntax, header, options, footer);
        System.exit(1);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di612593100987235370" cid="C244" type="class" name="NestedRecord" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:18">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a27d61e9c044e4491a6fe100a7350d38b786" name="parentRecordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a340de94483a144f3817739071b5db018786" name="questionTwoPartName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aebfc79c4910e4f4d9d3e570ec7204a14786" name="question" type="Question" type-id="Question" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o72729e57e2834e80b3e62d5e9ad75b81786" name="setQuestionRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionTwoPartName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.questionTwoPartName = questionTwoPartName;}</source-code>
          </source-codes>
        </operation>
        <operation id="oedc219ce5b4f4f978aa396226ca60ad3786" name="getTwoPartName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionTwoPartName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o137c1197eac940df98c1a318ee6fee71786" name="getQuestion" type="Question" type-id="Question" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o88cc7ffa93d24693a79f930833fd409a786" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        this.question = (Question) wdkModel.resolveReference(questionTwoPartName);
        question.resolveReferences(wdkModel);

        // validate the nesting query; the query acts as a table query of the
        // parent recordClass.
        Query query = question.getQuery();
        query.resolveReferences(wdkModel);
        parentRecordClass.validateQuery(query);
        String[ paramNames = parentRecordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // prepare the query and add primary key params
        query = RecordClass.prepareQuery(wdkModel, query, paramNames);
        question.setQuery(query);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe5c5ac023c6f4af8aae17637bf285844786" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}

    /**
     * @return the parentRecordClass
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1d0d303f647f49129661dbdbef1a5bbe786" name="getParentRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return parentRecordClass;}

    /**
     * @param parentRecordClass
     *            the parentRecordClass to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5a870af7f4c746aba93fda1fba2c21cf786" name="setParentRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="parentRecordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.parentRecordClass = parentRecordClass;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di591599673291789792" cid="C245" type="class" name="NestedRecordList" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:18">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a1b5460ae44f244dda6aaa92530576b3c841" name="parentRecordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a86fb669410034d9baa530b18fdfc950c841" name="questionTwoPartName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad6d060ad81784dce9ea8599a6c11e843841" name="question" type="Question" type-id="Question" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oae060868929544b784da09b98c1c2303841" name="NestedRecordList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="o640d231182914e3fabd490dd1202d3b7841" name="setQuestionRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionTwoPartName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.questionTwoPartName = questionTwoPartName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o27fbb0bd8a9043f7b206dc65833a0d6c841" name="getTwoPartName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionTwoPartName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4281536a849249f0b49482938cab7580841" name="getQuestion" type="Question" type-id="Question" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question;}

    /**
     * @return the parentRecordClass
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o062e30d35f9f4af6a5ab0df8723c79fe841" name="getParentRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return parentRecordClass;}

    /**
     * @param parentRecordClass
     *            the parentRecordClass to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0459073a76b945febe5d7e7a23a563a0841" name="setParentRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="parentRecordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.parentRecordClass = parentRecordClass;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5869c3fc3b3a48fbbb24ae58915ee44a841" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        this.question = (Question) wdkModel.resolveReference(questionTwoPartName);
        question.resolveReferences(wdkModel);

        // validate the query
        Query query = question.getQuery();
        query.resolveReferences(wdkModel);
        parentRecordClass.validateQuery(query);
        String[ paramNames = parentRecordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // prepare the query and add primary key params
        query = RecordClass.prepareQuery(wdkModel, query, paramNames);
        question.setQuery(query);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2563b22b250049dca56d311100469239841" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di145833528459039630" cid="C246" type="class" name="PrimaryKeyAttributeField" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:18">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ad53ff3fef9cd4e9d8c7904a3c878aa1f970" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2dee58a5c5ac46a6ae952a43ad19eb33970" name="text" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9d053a65d41947309938af38bafddbbd970" name="aliasQueryRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="of539fcf3688b43f1b13660bd6ed4952a970" name="PrimaryKeyAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // this step should be deprecated
        // add project id into the column list
        // columnRefSet.add(Utilities.COLUMN_PROJECT_ID);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0f334da6ac934d389196e0bdca901f25970" name="addColumnRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="columnRef" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.columnRefList.add(columnRef);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4a8382188c354b52acad053c1e2c397d970" name="getColumnRefs" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ array = new String[columnRefSet.size();
        columnRefSet.toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4f6e3cc4af08454ca7c837173b700e64970" name="hasColumn" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="columnName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return columnRefSet.contains(columnName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6f6add1f93544eb09c7b11b5a09689e0971" name="addText" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="text" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.textList.add(text);}</source-code>
          </source-codes>
        </operation>
        <operation id="o089d916b9e0942a997ad8b5ddc872a60971" name="getText" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return text;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.Field#setRecordClass(org.gusdb.wdk.model.RecordClass)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="odf7433eaeffd4601afa7e71f0f9eda9b971" name="setRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super.setRecordClass(recordClass);
        this.recordClass = recordClass;}

    /**
     * @return the aliasQueryRef
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1792bf251ef040cdb2b08c1fcf969a80971" name="getAliasQueryRef" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return aliasQueryRef;}

    /**
     * @param aliasQueryRef
     *            the aliasQueryRef to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o222564cc32654b9797ac5e9cb5e38df1971" name="setAliasQueryRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="aliasQueryRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.aliasQueryRef = aliasQueryRef;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="occ396da9acd3489984af6e8976c9624c971" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        // exclude columnRefs
        for (WdkModelText columnRef : columnRefList){
            if (columnRef.include(projectId)){
                columnRef.excludeResources(projectId);
                String columnName = columnRef.getText();

                if (columnRefSet.contains(columnName)){
                    throw new WdkModelException("The columnRef " + columnRef
                            + " is duplicated in primaryKetAttribute in "
                            + "recordClass " + recordClass.getFullName());} else columnRefSet.add(columnName);}}
        columnRefList = null;
        if (columnRefSet.size() == 0)
            throw new WdkModelException("No primary key column defined in "
                    + "recordClass " + recordClass.getFullName());
        if (columnRefSet.size() &gt; Utilities.MAX_PK_COLUMN_COUNT)
            throw new WdkModelException("You can specify up to "
                    + Utilities.MAX_PK_COLUMN_COUNT + " primary key "
                    + "columns in recordClass " + recordClass.getFullName());

        // exclude format
        for (WdkModelText text : textList){
            if (text.include(projectId)){
                text.excludeResources(projectId);
                this.text = text.getText();
                break;}}
        textList = null;
        if (text == null)
            throw new WdkModelException("No primary key format string defined"
                    + " in recordClass " + recordClass.getFullName());}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeField#getDependents()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc6b30a2d179c403c8fe94f133f81d178971" name="getDependents" type="Collection&lt;AttributeField&gt;" type-id="Collection&lt;AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return parseFields(text).values();}

    /**
     * primary key cannot be removed (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeField#isRemovable()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o201f12ca1a20458ca7ddc3327def09c6971" name="isRemovable" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return false;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di769886416728954682" cid="C247" type="class" name="PrimaryKeyAttributeValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a469d755318ba4a10b2dc00e698b34b2d40" name="field" type="PrimaryKeyAttributeField" type-id="PrimaryKeyAttributeField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad5094145b5fb49eca54e36645e8e15af40" name="pkValues" type="Map&lt;String, Object&gt;" type-id="Map&lt;String, Object&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o1d5e3c67b8ed494baea4fe96bfed2d8b40" name="PrimaryKeyAttributeValue" type="&lt;String, Object&gt;" type-id="&lt;String, Object&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="PrimaryKeyAttributeField" type-id="PrimaryKeyAttributeField" default-value="" />
            <parameter id="" name="pkValues" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super(field);
        this.field = field;
        this.pkValues = new LinkedHashMap&lt;String, Object&gt;(pkValues);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe4ad57a65a394cd883d4117e5ead525b40" name="getValues" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, String&gt; values = new LinkedHashMap&lt;String, String&gt;();
        for (String column : pkValues.keySet()){
            String value = Utilities.parseValue(pkValues.get(column));
            values.put(column, value);}
        return values;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe58a35ba8f1645f686297b7431c866f440" name="getValue" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (value == null)
            value = Utilities.replaceMacros(field.getText(), pkValues);
        return value;}

    /**
     * @param obj
     * @return
     * @see java.lang.Object#equals(java.lang.Object)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oad008ca0080041aaacbd0057cf17b97840" name="equals" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obj" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (obj instanceof PrimaryKeyAttributeValue){
            PrimaryKeyAttributeValue pk = (PrimaryKeyAttributeValue) obj;

            for (String columnName : pkValues.keySet()){
                if (!pk.pkValues.containsKey(columnName)) return false;
                Object value = pk.pkValues.get(columnName);
                if (!pkValues.get(columnName).equals(value)) return false;}
            return true;} else return false;}

    /**
     * @return
     * @see java.lang.Object#hashCode()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa342874fd5a14efbabca6afc01187be340" name="hashCode" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	try{
    		return getValue().hashCode();}
    	catch (WdkModelException e){
    		throw new WdkRuntimeException(e);}}

    /**
     * @return
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5858572e9be9439d977b533e40c812fa40" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        try{
            return (String) getValue();}
        catch (WdkModelException ex){
            throw new WdkRuntimeException(ex);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di289708538405327334" cid="C248" type="class" name="PropertyList" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a46c63765d02d48ebb3b1736603b9308f103" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o278aed9996d149d59f5fb3abc4154413103" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.name;}

    /**
     * @param name
     *                the name to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o86721bd8beda4417a27afc07823dc6a8103" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o76ac3501a6d84cac9c13847935754257103" name="addValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        valueTexts.add(value);}</source-code>
          </source-codes>
        </operation>
        <operation id="od01f4e54aa954676a3c31be0119341ae103" name="getValues" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ array = new String[values.size();
        values.toArray(array);
        return array;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9fca5022caa94d0cb2ca80028c978dd0103" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude property values
        for (WdkModelText valueText : valueTexts){
            if (valueText.include(projectId)){
                valueText.excludeResources(projectId);
                String value = valueText.getText();
                if (values.contains(value)){
                    throw new WdkModelException("The property value \"" + value
                            + "\" is included more than once in property "
                            + "list: " + name);} else{
                    values.add(value);}}}
        valueTexts = null;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9e464c314a734a0abf189afeb1d8fd3b103" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di652420346233593257" cid="C249" type="class" name="QueryMonitor" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a41fc2909cad5486cbc9e087c237fa3cf157" name="slowQueryThreshold" type="long" type-id="long" visibility="private" abstract="false" virtual="false" default-value="10">
          <stereotypes />
        </attribute>
        <attribute id="a63a961bf0ef24384b64ee08e63f90c94157" name="brokenQueryThreshold" type="long" type-id="long" visibility="private" abstract="false" virtual="false" default-value="60">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o6de714acdfbd4e5b87660edc831838e3157" name="getSlowQueryThreshold" type="long" type-id="long" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return slowQueryThreshold;}

    /**
     * @param slowQueryThreshold the slowQueryThreshold to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o21fa079dd2f945a5a84844031d151672157" name="setSlowQueryThreshold" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="slowQueryThreshold" type="long" type-id="long" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.slowQueryThreshold = slowQueryThreshold;}

    /**
     * @return the brokenQueryThreshold
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o851cea56b3c34de6925f183a95b4e783158" name="getBrokenQueryThreshold" type="long" type-id="long" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return brokenQueryThreshold;}

    /**
     * @param brokenQueryThreshold the brokenQueryThreshold to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od7b72fced8c043dab9b0b2e075d862c1158" name="setBrokenQueryThreshold" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="brokenQueryThreshold" type="long" type-id="long" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.brokenQueryThreshold = brokenQueryThreshold;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2a7f7e06eb8343829eaff9e7d1446232158" name="addIgnoreSlowQueryRegex" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="regex" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        ignoreSlowQueryRegexes.add(Pattern.compile(regex));}</source-code>
          </source-codes>
        </operation>
        <operation id="oed835046ce8c4e61a0ae86b94983836f158" name="addIgnoreBrokenQueryRegex" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="regex" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        ignoreBrokenQueryRegexes.add(Pattern.compile(regex));}</source-code>
          </source-codes>
        </operation>
        <operation id="o8d0739c8aaa64b5eb8121a44e148517e158" name="isIgnoredSlowQuery" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        for (Pattern pattern : ignoreSlowQueryRegexes){
            if (pattern.matcher(sql).find()) return true;}
        return false;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5934979a67d84537998465cfadc278f5158" name="isIgnoredBrokenQuery" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        for(Pattern pattern : ignoreBrokenQueryRegexes){
            if (pattern.matcher(sql).find()) return true;}
        return false;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di225058844914850965" cid="C250" type="class" name="Question" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:20">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a475b2b0b5dcc4274aaf12e0250c4198f276" name="recordClassRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a214db387e9924a3db31254fdeebff32d276" name="idQueryRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a40e43becab594f58a8efe95976b6f80f276" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac0536ff947ab42f185f129f28700b440276" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8467abf0733f4a1183e7058c6044a491276" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4bff73edb5464dbfacf8335de2c5b990276" name="summary" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae9533e335c054af9a0f2f358f8851c8b276" name="help" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="adaaa93a795b641a187ba9d2e25ab2265276" name="questionSet" type="QuestionSet" type-id="QuestionSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae5a9cc07c9c44ba483620f34c30a47ae276" name="query" type="Query" type-id="Query" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af24522504d5441ac83cdb2cf4840ec56276" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aff3a4f066809468eaa3c739bf603eb4c276" name="category" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5e69061460ef43fe825dbb27632c5b73276" name="fullAnswer" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a4b330cbf350e497fa4758f5532fd3105277" name="customJavascriptFile" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="&quot;&quot;">
          <stereotypes />
        </attribute>
        <attribute id="ac1bdc48c427c4f0a8f7145d8559fe781277" name="defaultSummaryAttributeNames" type="String[]" type-id="String[]" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab60f086660104e5da80a61e7233bebce277" name="dynamicAttributeSet" type="DynamicAttributeSet" type-id="DynamicAttributeSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7163a2a14d37490d89fa81e988d3b8fd277" name="dynamicAttributeQuery" type="Query" type-id="Query" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a77b62c1ec72b4811843216cbd234b2e0277" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6e51bfa728584656aedce0a7744802aa277" name="noSummaryOnSingleRecord" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="acc11838dcf9d464d9be049d6d547ec01277" name="ignoreSubType" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a4baec766164948e6a121bff76b557ea2277" name="shortDisplayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a41432d6e868848c78ceabb72d92a0d1a277" name="newBuild" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa6e5eb4707fb4eb39dfe9cf6434138f0277" name="reviseBuild" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o68f9b674c88c4f82a359408bd5dfbe9c277" name="Question" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}

    /**
     * copy constructor
     * 
     * @param question
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o720867a82214430aa1c6515c36339fe3277" name="Question" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(question);
        this.category = question.category;
        this.description = question.description;
        this.displayName = question.displayName;

        // TODO - need to deep-copy dynamicAttributeSet as well
        this.dynamicAttributeSet = question.dynamicAttributeSet;

        this.help = question.help;

        // need to deep-copy query as well
        this.query = question.query;
        this.idQueryRef = question.idQueryRef;
        this.questionSet = question.questionSet;
        this.recordClass = question.recordClass;
        this.recordClassRef = question.recordClassRef;
        this.defaultSortingMap.putAll(question.defaultSortingMap);
        this.summary = question.summary;
        this.defaultSummaryAttributeFields.putAll(question.defaultSummaryAttributeFields);
        this.wdkModel = question.wdkModel;

        this.noSummaryOnSingleRecord = question.noSummaryOnSingleRecord;
        this.shortDisplayName = question.shortDisplayName;
        this.customJavascriptFile = question.customJavascriptFile;

        this.paramRefs = new ArrayList&lt;ParamReference&gt;(question.paramRefs);

        if (sqlMacroList != null)
            this.sqlMacroList = new ArrayList&lt;WdkModelText&gt;(
                    question.sqlMacroList);
        this.sqlMacroMap = new LinkedHashMap&lt;String, String&gt;(
                question.sqlMacroMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7d3cc5a62fb2460e8f203b4923d77e3b277" name="getNewBuild" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return newBuild;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc84a542303e64d0ebe22491ce3a641cf277" name="setNewBuild" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="newBuild" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.newBuild = newBuild;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7b2b74a7fe5b4de6a1cab5c7c7ebf1e4277" name="getReviseBuild" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return reviseBuild;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4a5f0b9b811e49ab96e69599ec7de386277" name="setReviseBuild" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="reviseBuild" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.reviseBuild = reviseBuild;}</source-code>
          </source-codes>
        </operation>
        <operation id="oeaf995bbfeb34fd4b0bd5b60437eb073277" name="isNew" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String currentBuild = wdkModel.getBuildNumber();
        if (currentBuild == null) return false; // current release is not set
        else return (currentBuild.equals(newBuild));}</source-code>
          </source-codes>
        </operation>
        <operation id="o855a0c1283744bc698ff66e593f6edb4277" name="isRevised" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String currentBuild = wdkModel.getBuildNumber();
        if (currentBuild == null) return false; // current release is not set
        else return (currentBuild.equals(reviseBuild));}

    /**
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obc39aff4c6184b1391da320e1694367b277" name="getWdkModel" type="WdkModel" type-id="WdkModel" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.wdkModel;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe85dc61830e44aadbe96e85ebc553ee3277" name="setWdkModel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;}</source-code>
          </source-codes>
        </operation>
        <operation id="od77075f16a0547798fa225be53d42a1f277" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0d3fbe4231544bf98a93cfe90d7f2e4c277" name="addDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.descriptions.add(description);}</source-code>
          </source-codes>
        </operation>
        <operation id="od05d257d71564c53b830aff6c5571525277" name="addSummary" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="summary" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.summaries.add(summary);}</source-code>
          </source-codes>
        </operation>
        <operation id="ocfbd000239074a59a23e88aa9d614775277" name="addHelp" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="help" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.helps.add(help);}</source-code>
          </source-codes>
        </operation>
        <operation id="o881c9b4ce6d54c5ebbf2820ef3449b33277" name="setRecordClassRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClassRef = recordClassRef;}</source-code>
          </source-codes>
        </operation>
        <operation id="o24bcadc1ec774437b7bfe1718cd9517f277" name="setRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;
        this.recordClassRef = recordClass.getFullName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o09451877b56e40f18492f8522319977e277" name="setQueryRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryTwoPartName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.idQueryRef = queryTwoPartName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1625000e5f56426aae8942a754849abe277" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0dff0ebaad4e49a288a8451ed66d61a0277" name="setCategory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="category" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.category = category;}</source-code>
          </source-codes>
        </operation>
        <operation id="oef5667a01b054b0aae5b56b8a62353b1277" name="setCustomJavascript" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="customJavascript" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.customJavascriptFile = customJavascript;}</source-code>
          </source-codes>
        </operation>
        <operation id="o87d3beaf7c0b40d7b0b08c0ccee57774277" name="addAttributeList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeList" type="AttributeList" type-id="AttributeList" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.attributeLists.add(attributeList);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7f71c2b2ffa047db81f8a0f618b28a66277" name="addDynamicAttributeSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dynamicAttributes" type="DynamicAttributeSet" type-id="DynamicAttributeSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        dynamicAttributes.setQuestion(this);
        this.dynamicAttributeSets.add(dynamicAttributes);}</source-code>
          </source-codes>
        </operation>
        <operation id="o1c02ce693a6e4dc2b1119232721cc633277" name="getFields" type="Map&lt;String, Field&gt;" type-id="Map&lt;String, Field&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, Field&gt; fields = new LinkedHashMap&lt;String, Field&gt;();
        Map&lt;String, AttributeField&gt; attributes = getAttributeFieldMap(scope);
        Map&lt;String, TableField&gt; tables = recordClass.getTableFieldMap(scope);

        fields.putAll(attributes);
        fields.putAll(tables);
        return fields;}</source-code>
          </source-codes>
        </operation>
        <operation id="odfc42fe35c5b4175896dd21b257afdaf277" name="getDynamicAttributeQuery" type="Query" type-id="Query" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dynamicAttributeQuery;}

    // /////////////////////////////////////////////////////////////////////

    /**
     * make an answer with default page size
     * 
     * @param paramErrors
     * @return
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oaaa10c15b2f14b2d988800049baeb12b277" name="makeAnswerValue" type="AnswerValue" type-id="AnswerValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValues" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="assignedWeight" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        int pageStart = 1;
        int pageEnd = Utilities.DEFAULT_PAGE_SIZE;
        Map&lt;String, Boolean&gt; sortingMap = new LinkedHashMap&lt;String, Boolean&gt;(
                defaultSortingMap);
        AnswerFilterInstance filter = recordClass.getDefaultFilter();
        AnswerValue answerValue = makeAnswerValue(user, dependentValues,
                pageStart, pageEnd, sortingMap, filter, assignedWeight);
        if (this.fullAnswer){
            int resultSize = answerValue.getResultSize();
            if (resultSize &gt; pageEnd)
                answerValue.setPageIndex(pageStart, resultSize);}
        return answerValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="o281a12518ec14ace9b9c1d0748307632277" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="pageEnd" type="int" type-id="int" default-value="" />
            <parameter id="" name="sortingAttributes" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="filter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" default-value="" />
            <parameter id="" name="assignedWeight" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        return makeAnswerValue(user, dependentValues, pageStart, pageEnd,
                sortingAttributes, filter, true, assignedWeight);}

    /**
     * make an answer by given page range, sorted by the given attribute list.
     * 
     * @param paramErrors
     * @param i
     * @param j
     * @param sortingAttributes
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od0f5ed9bd00c43068cb5905a01465623277" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="pageStart" type="int" type-id="int" default-value="" />
            <parameter id="" name="pageEnd" type="int" type-id="int" default-value="" />
            <parameter id="" name="sortingAttributes" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="filter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" default-value="" />
            <parameter id="" name="validate" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="assignedWeight" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        Map&lt;String, String&gt; context = new LinkedHashMap&lt;String, String&gt;();
        context.put(Utilities.QUERY_CTX_QUESTION, getFullName());

        QueryInstance qi = query.makeInstance(user, dependentValues, validate,
                assignedWeight, context);
        AnswerValue answerValue = new AnswerValue(user, this, qi, pageStart,
                pageEnd, sortingAttributes, filter);

        return answerValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob7b97a871292424993a0b2ed569a7149278" name="getParams" type="Param[]" type-id="Param[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return query.getParams();}</source-code>
          </source-codes>
        </operation>
        <operation id="oaf14d28e804b4969a5896647d0eb2b76278" name="getParamMap" type="Map&lt;String, Param&gt;" type-id="Map&lt;String, Param&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return query.getParamMap();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa8c552c64bf84461b9d2fd671c74d183278" name="getParamMapByGroups" type="Map&lt;Group, Map&lt;String, Param&gt;&gt;" type-id="Map&lt;Group, Map&lt;String, Param&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Param[ params = query.getParams();
        Map&lt;Group, Map&lt;String, Param&gt;&gt; paramGroups = new LinkedHashMap&lt;Group, Map&lt;String, Param&gt;&gt;();
        for (Param param : params){
            Group group = param.getGroup();
            Map&lt;String, Param&gt; paramGroup;
            if (paramGroups.containsKey(group)){
                paramGroup = paramGroups.get(group);} else{
                paramGroup = new LinkedHashMap&lt;String, Param&gt;();
                paramGroups.put(group, paramGroup);}
            paramGroup.put(param.getName(), param);}
        return paramGroups;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8fb5cefc6ba14e09a12bb6957877fa7c278" name="getParamMapByGroups" type="Map&lt;Group, Map&lt;String, Param&gt;&gt;" type-id="Map&lt;Group, Map&lt;String, Param&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Param[ params = query.getParams();
        Map&lt;Group, Map&lt;String, Param&gt;&gt; paramGroups = new LinkedHashMap&lt;Group, Map&lt;String, Param&gt;&gt;();
        for (Param param : params){
            Group group = param.getGroup();
            if (!group.getDisplayType().equalsIgnoreCase(displayType))
                continue;
            Map&lt;String, Param&gt; paramGroup;
            if (paramGroups.containsKey(group)){
                paramGroup = paramGroups.get(group);} else{
                paramGroup = new LinkedHashMap&lt;String, Param&gt;();
                paramGroups.put(group, paramGroup);}
            paramGroup.put(param.getName(), param);}
        return paramGroups;}</source-code>
          </source-codes>
        </operation>
        <operation id="o40836a620a1f482499a02f0863faca27278" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return description;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocec4df7c44ab40fc860b1282f56e08af278" name="getSummary" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return summary;}</source-code>
          </source-codes>
        </operation>
        <operation id="o593ef1ae2e624552a33b3d8aa55b6ef6278" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return help;}</source-code>
          </source-codes>
        </operation>
        <operation id="of4b1218ab8fe49818b736d298aa31833278" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (displayName == null) displayName = getFullName();
        return displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4890675fccf347b6b7d37d869b48766c278" name="getCustomJavascript" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return customJavascriptFile;}

    /**
     * @deprecated
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o517b0f9e2da84477aec146e82538a90d278" name="getCategory" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (category == null) ? "" : category;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa7d592a41f8a4234887b274a87e8cb97278" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.recordClass;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c04649e2df349eeaf5a154347f999ed278" name="getQuery" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.query;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7843000e66844957aa80c975cea5aacb278" name="setQuery" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="q" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.query = q;
        this.idQueryRef = q.getFullName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o42b21d45e59b455cb7549d9a6ab97af4278" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oab117fccfafe4d7c8dde1f7afa33d2cc278" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (questionSet == null) return name;
        else return questionSet.getName() + "." + name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5fcca76c38664a09871e3792835ff770278" name="getQuestionSetName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionSet.getName();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa23dac28ec3341ec8cef05b586ae3a02278" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");

        StringBuffer saNames = new StringBuffer();
        Map&lt;String, AttributeField&gt; summaryFields = getAttributeFieldMap(FieldScope.NON_INTERNAL);
        for (String saName : summaryFields.keySet()){
            saNames.append(saName + ", ");}
        StringBuffer buf = new StringBuffer("Question: name='" + name + "'"
                + newline + "  recordClass='" + recordClassRef + "'" + newline
                + "  query='" + idQueryRef + "'" + newline + "  displayName='"
                + getDisplayName() + "'" + newline + "  customJavascript='"
                + getCustomJavascript() + "'" + newline + "  summary='"
                + getSummary() + "'" + newline + "  description='"
                + getDescription() + "'" + newline + "  summaryAttributes='"
                + saNames + "'" + newline + "  help='" + getHelp() + "'"
                + newline);
        buf.append(dynamicAttributeSet.toString());
        return buf.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="of4f2a369d4854308883a4ee87cf5ab81278" name="isDynamic" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dynamicAttributeSet != null;}

    /**
     * A indicator to the controller whether this question should make answers
     * that contains all records in one page or not.
     * 
     * @return the fullAnswer
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe0f2efadbbff485eb7b01a3a0f92fe94278" name="isFullAnswer" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return fullAnswer;}

    /**
     * Set the indicator to the controller that suggests this question to make
     * answers containing all records in one page, or not.
     * 
     * @param fullAnswer
     *            the fullAnswer to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o84652259f7f240d1835d821b07267a2c278" name="setFullAnswer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fullAnswer" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.fullAnswer = fullAnswer;}

    /**
     * @return the noSummaryOnSingleRecord
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o78b9acdb636043d7914fb6bcd413d19b278" name="isNoSummaryOnSingleRecord" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return noSummaryOnSingleRecord;}

    /**
     * @param noSummaryOnSingleRecord
     *            the noSummaryOnSingleRecord to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4416bc23a1e140f6bdb5d4de498680f9278" name="setNoSummaryOnSingleRecord" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="noSummaryOnSingleRecord" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.noSummaryOnSingleRecord = noSummaryOnSingleRecord;}

    // /////////////////////////////////////////////////////////////////////
    // package methods
    // /////////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="of2733b5edbd34ff692d3d6de5a83a86c278" name="getDynamicAttributeFields" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dynamicAttributeSet.getAttributeFieldMap();}

    /**
     * The difference between this method and getAttribute(SUMMARY) is that the
     * getAttribute(SUMMARY) will get the configured summary list, and if the
     * list is not configured, it will return all non-internal attribute fields;
     * meanwhile this method returns the configured list if it is configured,
     * otherwise it only return a limited number of attribtue fields for display
     * purpose.
     * 
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofcd4871ae05f498ea5f45d8e36e411f4278" name="getSummaryAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; attributeFields = new LinkedHashMap&lt;String, AttributeField&gt;();

        // always put primary key as the first field
        AttributeField pkField = recordClass.getPrimaryKeyAttributeField();
        attributeFields.put(pkField.getName(), pkField);

        if (defaultSummaryAttributeFields.size() &gt; 0){
            attributeFields.putAll(defaultSummaryAttributeFields);} else{
            attributeFields = recordClass.getSummaryAttributeFieldMap();}

        // add weight to the list
        // for now, it is commented out, maybe re-activated in the future.
        // Map&lt;String, AttributeField&gt; dynamicFields =
        // dynamicAttributeSet.getAttributeFieldMap();
        // AttributeField weightField =
        // dynamicFields.get(Utilities.COLUMN_WEIGHT);
        // attributeFields.put(weightField.getName(), weightField);

        return attributeFields;}</source-code>
          </source-codes>
        </operation>
        <operation id="o562bb8abf78443a58a82f96f15534377278" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getAttributeFieldMap(FieldScope.ALL);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob23e059c220642c482bd3c837ffd71e4278" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; attributeFields = new LinkedHashMap&lt;String, AttributeField&gt;();

        // always put primary key as the first field
        AttributeField pkField = recordClass.getPrimaryKeyAttributeField();
        attributeFields.put(pkField.getName(), pkField);

        attributeFields.putAll(recordClass.getAttributeFieldMap(scope));

        attributeFields.putAll(dynamicAttributeSet.getAttributeFieldMap(scope));

        return attributeFields;}</source-code>
          </source-codes>
        </operation>
        <operation id="oceca1b83058b425ea26811e5ef846140278" name="getAttributeCategoryTree" type="AttributeCategoryTree" type-id="AttributeCategoryTree" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{

        // get trimmed copy of category tree
        AttributeCategoryTree tree = recordClass.getAttributeCategoryTree(scope);

        // integrate dynamic attributes into tree as first root node
        AttributeCategory dynamic = new AttributeCategory();
        dynamic.setName("dynamic");
        dynamic.setDisplayName("Search-Specific");
        for (AttributeField field : dynamicAttributeSet.getAttributeFieldMap(
                scope).values()){
            if (field.getName().equals(Utilities.COLUMN_WEIGHT)){
                tree.addAttributeToCategories(field);} else{
                dynamic.addField(field);}}
        if (!dynamic.getFields().isEmpty()){
            tree.prependAttributeCategory(dynamic);}

        return tree;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2a25a6b808bc4538ba2e31ad364d174e278" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (resolved) return;
        super.resolveReferences(model);
        this.wdkModel = model;

        try{
            // it must happen before dynamicAttributeSet, because it is
            // referenced
            // in the dynamicAttributeSet.
            this.recordClass = (RecordClass) model.resolveReference(recordClassRef);

            // the id query is always cloned to keep a reference to the
            // question.
            query = (Query) model.resolveReference(idQueryRef);
            query = query.clone();

            // check if we have customized sqlMacros
            if (query instanceof SqlQuery){
                SqlQuery sqlQuery = (SqlQuery) query;
                for (String macro : sqlMacroMap.keySet()){
                    sqlQuery.addSqlParamValue(macro, sqlMacroMap.get(macro));}}

            // check if we have customized params;
            if (paramRefs.size() &gt; 0){
                String queryName = query.getFullName();
                Map&lt;String, Param&gt; params = query.getParamMap();
                for (ParamReference paramRef : paramRefs){
                    String paramName = paramRef.getElementName();
                    if (!params.containsKey(paramName))
                        throw new WdkModelException("The paramRef ["
                                + paramName + "] defined in QUESTION ["
                                + getFullName() + "] doesn't exist in the "
                                + "referenced id query [" + queryName + "].");
                    Param param = ParamReference.resolveReference(model,
                            paramRef, queryName);
                    query.addParam(param);}}
            // set question to the param context; all params are cloned along
            // with the cloning of the query.
            for (Param param : query.getParams()){
                param.setContextQuestion(this);}

            // all the id queries should have weight column
            query.setHasWeight(true);

            // dynamic attribute set need to be initialized after the id query.
            this.dynamicAttributeQuery = createDynamicAttributeQuery(model);
            dynamicAttributeQuery.resolveReferences(model);
            dynamicAttributeSet.resolveReferences(model);

            // make sure we always display weight for combined question
            // if (query.isCombined()) {
            // AttributeField weight = dynamicAttributeSet
            // .getAttributeFieldMap().get(Utilities.COLUMN_WEIGHT);
            // weight.setRemovable(false);
            // }

            // resolve default summary attributes
            if (defaultSummaryAttributeNames != null){
                Map&lt;String, AttributeField&gt; attributeFields = getAttributeFieldMap();
                for (String fieldName : defaultSummaryAttributeNames){
                    AttributeField field = attributeFields.get(fieldName);
                    if (field == null)
                        throw new WdkModelException("Summary attribute field ["
                                + fieldName + "] defined in question ["
                                + getFullName() + "] is invalid.");
                    defaultSummaryAttributeFields.put(fieldName, field);}}
            defaultSummaryAttributeNames = null;

            // make sure we create index on primary keys
            String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
            query.setIndexColumns(pkColumns);

            // resolve summary views
            for (SummaryView summaryView : summaryViewMap.values()){
                summaryView.resolveReferences(model);}}
        catch (WdkModelException ex){
            logger.error("resolving question '" + getFullName() + " failed. "
                    + ex);
            throw ex;}

        resolved = true;}</source-code>
          </source-codes>
        </operation>
        <operation id="o935f6f76ca7540189c159fbc70a51ca8278" name="setQuestionSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionSet" type="QuestionSet" type-id="QuestionSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        this.questionSet = questionSet;}

    // /////////////////////////////////////////////////////////////////////
    // Protected Methods
    // /////////////////////////////////////////////////////////////////////

    /**
     * This method is use to clone the question, excluding dynamic attributes
     * 
     * @return
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o93cc4da44d514d2fa765ff2e1fbd829f278" name="getSortingAttributeMap" type="Map&lt;String, Boolean&gt;" type-id="Map&lt;String, Boolean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, Boolean&gt; map = new LinkedHashMap&lt;String, Boolean&gt;();

        for (String attrName : defaultSortingMap.keySet()){
            map.put(attrName, defaultSortingMap.get(attrName));
            if (map.size() &gt;= User.SORTING_LEVEL) break;}

        // no sorting map defined, use the definition in recordClass
        if (map.size() == 0) map = recordClass.getSortingAttributeMap();

        return map;}

    /**
     * @return the ignoreSubType
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of954a3b20ddf4b5ca2ba13d8163eb2dc278" name="isIgnoreSubType" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return ignoreSubType;}

    /**
     * @param ignoreSubType
     *            the ignoreSubType to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o11d04b095a2a45f5a774b904a521e5f8278" name="setIgnoreSubType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ignoreSubType" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.ignoreSubType = ignoreSubType;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of763faa7cc784b2db5231dfc44cc0cf4278" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        // exclude descriptions
        boolean hasDescription = false;
        for (WdkModelText description : descriptions){
            if (description.include(projectId)){
                if (hasDescription){
                    throw new WdkModelException("The question " + getFullName()
                            + " has more than one description for project "
                            + projectId);} else{
                    this.description = description.getText();
                    hasDescription = true;}}}
        descriptions = null;

        // exclude summaries
        boolean hasSummary = false;
        for (WdkModelText summ : summaries){
            if (summ.include(projectId)){
                if (hasSummary){
                    throw new WdkModelException("The question " + getFullName()
                            + " has more than one summary for project "
                            + projectId);} else{
                    this.summary = summ.getText();
                    hasSummary = true;}}}
        summaries = null;

        // exclude helps
        boolean hasHelp = false;
        for (WdkModelText help : helps){
            if (help.include(projectId)){
                if (hasHelp){
                    throw new WdkModelException("The question " + getFullName()
                            + " has more than one help for project "
                            + projectId);} else{
                    this.help = help.getText();
                    hasHelp = true;}}}
        helps = null;

        // exclude summary and sorting attribute list
        boolean hasAttributeList = false;
        for (AttributeList attributeList : attributeLists){
            if (attributeList.include(projectId)){
                if (hasAttributeList){
                    throw new WdkModelException("The question " + getFullName()
                            + " has more than one &lt;attributesList&gt; for "
                            + "project " + projectId);} else{
                    this.defaultSummaryAttributeNames = attributeList.getSummaryAttributeNames();
                    this.defaultSortingMap = attributeList.getSortingAttributeMap();
                    hasAttributeList = true;}}}
        attributeLists = null;

        // exclude dynamic attribute set
        boolean hasDynamicAttributes = false;
        for (DynamicAttributeSet dynamicAttributeSet : dynamicAttributeSets){
            if (dynamicAttributeSet.include(projectId)){
                if (hasDynamicAttributes){
                    throw new WdkModelException("The question " + getFullName()
                            + " has more than one &lt;dynamicAttributes&gt; for "
                            + "project " + projectId);} else{
                    dynamicAttributeSet.excludeResources(projectId);
                    this.dynamicAttributeSet = dynamicAttributeSet;
                    hasDynamicAttributes = true;}}}
        dynamicAttributeSets = null;

        // add weight as an attribute
        if (dynamicAttributeSet == null){
            DynamicAttributeSet dynamicSet = new DynamicAttributeSet();
            dynamicSet.setQuestion(this);
            dynamicSet.excludeResources(projectId);
            this.dynamicAttributeSet = dynamicSet;}

        // exclude param refs
        for (int i = paramRefs.size() - 1; i &gt;= 0; i--){
            ParamReference paramRef = paramRefs.get(i);
            if (paramRef.include(projectId)){
                paramRef.excludeResources(projectId);} else{
                paramRefs.remove(i);}}

        // exclude sql macros
        for (WdkModelText macro : sqlMacroList){
            if (macro.include(projectId)){
                macro.excludeResources(projectId);
                String name = macro.getName();
                if (sqlMacroMap.containsKey(name))
                    throw new WdkModelException("The macro " + name
                            + " is duplicated in question " + getFullName());

                sqlMacroMap.put(macro.getName(), macro.getText());}}
        sqlMacroList = null;

        // exclude the summary views
        for (SummaryView view : summaryViewList){
            if (view.include(projectId)){
                view.excludeResources(projectId);
                String name = view.getName();
                if (summaryViewMap.containsKey(name))
                    throw new WdkModelException("The summary view '" + name
                            + "' is duplicated in question " + getFullName());

                summaryViewMap.put(name, view);}}
        summaryViewList = null;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob3cbf87e8fda49cc818f99b3e4d4277a278" name="createDynamicAttributeQuery" type="Query" type-id="Query" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        SqlQuery query = new SqlQuery();
        query.setIsCacheable(false);
        query.setName(this.query.getName() + DYNAMIC_QUERY_SUFFIX);
        // put the dynamic query into the same query set of the id query.
        QuerySet querySet = this.query.getQuerySet();
        querySet.addQuery(query);

        // set the columns, which as the same column as the id query
        boolean hasWeight = false;
        for (Column column : this.query.getColumns()){
            query.addColumn(new Column(column));
            if (column.getName().equals(Utilities.COLUMN_WEIGHT))
                hasWeight = true;}
        if (!hasWeight){
            // create and add the weight column
            Column column = new Column();
            column.setName(Utilities.COLUMN_WEIGHT);
            column.setType(ColumnType.NUMBER);
            column.setWidth(12);
            query.addColumn(column);}

        // dynamic query doesn't have sql defined, here just fill in the stub
        // sql; the real sql will be constructed by answerValue
        query.setSql("");

        query.excludeResources(wdkModel.getProjectId());

        return query;}</source-code>
          </source-codes>
        </operation>
        <operation id="o79de3fa5a82145b4ba0d3eec3361f376279" name="setShortDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="shortDisplayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.shortDisplayName = shortDisplayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o25b34119e7024848993768b3abd9b4de279" name="getShortDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (shortDisplayName == null) ? getDisplayName() : shortDisplayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa690c2905b2045688dfd3ab77adca831279" name="getTransformParams" type="AnswerParam[]" type-id="AnswerParam[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        List&lt;AnswerParam&gt; list = new ArrayList&lt;AnswerParam&gt;();
        String rcName = recordClass.getFullName();
        for (Param param : query.getParams()){
            if (param instanceof AnswerParam){
                AnswerParam answerParam = (AnswerParam) param;
                Map&lt;String, RecordClass&gt; recordClasses = answerParam.getRecordClasses();
                if (recordClasses.containsKey(rcName)) list.add(answerParam);}}
        AnswerParam[ array = new AnswerParam[list.size();
        list.toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob148665f9af14e62bea8e6ec6bd64781279" name="addParamRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramRef" type="ParamReference" type-id="ParamReference" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.paramRefs.add(paramRef);}</source-code>
          </source-codes>
        </operation>
        <operation id="o526035fee17a4feab6702fcdc397bb06279" name="addSqlParamValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sqlMacro" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.sqlMacroList.add(sqlMacro);}</source-code>
          </source-codes>
        </operation>
        <operation id="o840e17eb7b8c4159a033398d856ee720279" name="getSummaryViews" type="Map&lt;String, SummaryView&gt;" type-id="Map&lt;String, SummaryView&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // get views from record
        Map&lt;String, SummaryView&gt; map = recordClass.getSummaryViews();

        // override the views defined in the question
        map.putAll(summaryViewMap);

        return map;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4a44277735a74a02b780d29e6e638ef0279" name="getSummaryView" type="SummaryView" type-id="SummaryView" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="viewName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException{
        SummaryView view = summaryViewMap.get(viewName);
        if (view != null) return view;

        return recordClass.getSummaryView(viewName);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe7d6bb7c3d914378a2771ec17b360b20279" name="getDefaultSummaryView" type="SummaryView" type-id="SummaryView" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // first look for default in the views defined in question
        for (SummaryView view : summaryViewMap.values()){
            if (view.isDefault()) return view;}
        // then look for the default in the views from record
        Map&lt;String, SummaryView&gt; viewsFromRecord = recordClass.getSummaryViews();
        for (SummaryView view : viewsFromRecord.values()){
            if (view.isDefault()) return view;}
        // return the first view from question
        if (summaryViewMap.size() &gt; 0)
            return summaryViewMap.values().iterator().next();
        // return the first view from record
        if (viewsFromRecord.size() &gt; 0)
            return viewsFromRecord.values().iterator().next();

        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="oee299096b45f4ab0a00d71f7fcb24ddd279" name="addSummaryView" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="view" type="SummaryView" type-id="SummaryView" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (summaryViewList == null) summaryViewMap.put(view.getName(), view);
        else summaryViewList.add(view);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di276509540673896782" cid="C251" type="class" name="QuestionSet" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:20">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aab44c781926847fd9f7cfae6296a5e43502" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8df3b45d4ad243eca63a4b1b742dd214502" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac73d3dd0314d40a5be8f53c76fab51cb502" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a379c34fc853f4c3caf9c958d6c9b7060502" name="doNotTest" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="abe72a78584164084a41a6f3a330ca7c1502" name="internal" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0585a69eb0bd4f03bce364256ec15b08502" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc980997577104a08a2e65c7a72ede9ae502" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1779d01cfc5c4ea8b3a4ef2cb00cc3ad502" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1e68c846589f495b9bcd183587a0f998502" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (displayName != null) ? displayName : name;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob23cd65379f34db883ee8b86a22ba9c5502" name="addDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.descriptions.add(description);}</source-code>
          </source-codes>
        </operation>
        <operation id="o10a9449a15784d46bdab7c512d187f0f502" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return description;}</source-code>
          </source-codes>
        </operation>
        <operation id="od11f4ca83ee64025ae35d370a18cd90f502" name="setDoNotTest" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="doNotTest" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	this.doNotTest = doNotTest;}</source-code>
          </source-codes>
        </operation>
        <operation id="oabd8c40724b44088956aedd0d02e591f502" name="getDoNotTest" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	return doNotTest;}</source-code>
          </source-codes>
        </operation>
        <operation id="offcb2da83c5043ed9a8038345b64a1af502" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.internal;}</source-code>
          </source-codes>
        </operation>
        <operation id="oadb6b2df57024e75967f235557180ae0502" name="setInternal" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="internal" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.internal = internal;}</source-code>
          </source-codes>
        </operation>
        <operation id="obdb80da181a54243b7c54e38090dd084502" name="getQuestion" type="Question" type-id="Question" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Question question = questionMap.get(name);
        if (question == null)
            throw new WdkModelException("Question Set " + getName()
                    + " does not include question " + name);
        return question;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6d45fd0dc23945c099b5b18531c32bcc502" name="contains" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionMap.containsKey(questionName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2f7a5bfd4f40409ba423f198e84cc284502" name="getElement" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionMap.get(name);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0dd4b15dbe544b86b67fce2942cab1d0502" name="getQuestions" type="Question[]" type-id="Question[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Question[ array = new Question[questionMap.size();
        questionMap.values().toArray(array);
        return array;}

    @Deprecated</source-code>
          </source-codes>
        </operation>
        <operation id="o6dd230b2d45444bab7e787eb4e6d8110502" name="getQuestionsByCategory" type="Map&lt;String, Question[]&gt;" type-id="Map&lt;String, Question[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, List&lt;Question&gt;&gt; questionsByCategory = new LinkedHashMap&lt;String, List&lt;Question&gt;&gt;();
        for (Question question : questionMap.values()){
            String category = question.getCategory();
            List&lt;Question&gt; questionList = questionsByCategory.get(category);
            if (questionList == null){
                questionList = new ArrayList&lt;Question&gt;();
                questionsByCategory.put(category, questionList);}
            questionList.add(question);}

        Map&lt;String, Question[&gt; questionArraysByCategory = new LinkedHashMap&lt;String, Question[&gt;();
        for (String category : questionsByCategory.keySet()){
            List&lt;Question&gt; questionList = questionsByCategory.get(category);
            Question[ questions = new Question[questionList.size();
            questionList.toArray(questions);
            questionArraysByCategory.put(category, questions);}
        return questionArraysByCategory;}</source-code>
          </source-codes>
        </operation>
        <operation id="o74fef06f3e534529a139ac9d038276de503" name="addQuestion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        question.setQuestionSet(this);
        if (questionList != null) questionList.add(question);
        else questionMap.put(question.getName(), question);}</source-code>
          </source-codes>
        </operation>
        <operation id="o240ab0f5a8244b59b0f50b0efb15d5ee503" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (Question question : questionMap.values()){
            question.resolveReferences(model);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oa47e4a3a8b064ddbad5642031dcb6ce3503" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
        <operation id="o550d6dc99cd148f39285d5b6d2f06110503" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer("QuestionSet: name='" + getName()
                + "'" + newline + "  displayName='" + getDisplayName() + "'"
                + newline + "  description='" + getDescription() + "'"
                + newline + "  internal='" + isInternal() + "'" + newline);
        buf.append(newline);

        for (Question question : questionMap.values()){
            buf.append(newline);
            buf.append(":::::::::::::::::::::::::::::::::::::::::::::");
            buf.append(newline);
            buf.append(question);
            buf.append(newline);}

        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6a0bacf47ea648d59239af27675e35ab503" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude descriptions
        boolean hasDescription = false;
        for (WdkModelText description : descriptions){
            if (description.include(projectId)){
                if (hasDescription){
                    throw new WdkModelException("The questionSet " + getName()
                            + " has more than one description for project "
                            + projectId);} else{
                    this.description = description.getText();
                    hasDescription = true;}}}
        descriptions = null;

        // exclude resources in each question
        for (Question question : questionList){
            if (question.include(projectId)){
                question.setQuestionSet(this);
                question.excludeResources(projectId);
                String questionName = question.getName();
                if (questionMap.containsKey(questionName))
                    throw new WdkModelException("Question named "
                            + questionName + " already exists in question set "
                            + getName());

                questionMap.put(questionName, question);}}
        questionList = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di614693273383621526" cid="C252" type="class" name="RecordClass" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:22">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa9dea86d364d4b11bfebfe106aace1c6744" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa6c535a4489346798a350efce25ba043745" name="recordClassSet" type="RecordClassSet" type-id="RecordClassSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4f437b39d92d4ec48333ddfb3f7076bb745" name="primaryKeyField" type="PrimaryKeyAttributeField" type-id="PrimaryKeyAttributeField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad597d649bec4445cbe0f7dd2fdd1d659745" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9e933ed7963e4c75b0f20f83239d18ca745" name="fullName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="afed775382f164e4596300e3783d9a00b745" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4633df6b79c5452d8f0bc8210d17304e745" name="shortDisplayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af2a0dc1a04d14256aec515b955b724f9745" name="attributeOrdering" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2dae27416daa4a1d89e55458e0cee170745" name="type" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac6aaf345ff5f46b9ab760218ba601f37745" name="attributeCategoryTree" type="AttributeCategoryTree" type-id="AttributeCategoryTree" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a07c4d7cc74114c0d8c8daa665d86a9df745" name="doNotTest" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a3eab1c5a060c4262ae9b5c3281edb12b745" name="paramValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4cec0f30195d4919894bbbaf1d8b990b745" name="nestedRecordQuestions" type="Map&lt;String, Question&gt;" type-id="Map&lt;String, Question&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aeb43d3a637fc4073996762c7b221fda7745" name="nestedRecordListQuestions" type="Map&lt;String, Question&gt;" type-id="Map&lt;String, Question&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3517c28544474455b5462c6ba04254d4745" name="aliasQueryRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
        <attribute id="ae5749b9b65674666af333a2f0c8d8021745" name="aliasQuery" type="Query" type-id="Query" visibility="private" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
        <attribute id="ad5b88002fd124dcd80346322ba4f9ab9745" name="defaultFilter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af785fc0f1a484fa59920439e5679d569745" name="booleanExpansionFilter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aec394322ba4d48df88efcae7cc85785f745" name="defaultSummaryAttributeNames" type="String[]" type-id="String[]" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9e0f37fb8aba46679ccf9dd533353650745" name="useBasket" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="a0bb03ecdfd1b46fc8b11921281c9f570745" name="favoriteNoteFieldName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4a67a569faeb486da1017fb18394ca08745" name="favoriteNoteField" type="AttributeField" type-id="AttributeField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o4cfdb1c3062c4b3d9079aba3bb60b1a4745" name="getWdkModel" type="WdkModel" type-id="WdkModel" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8e52dd2a997b4df899f375e66df04f1d745" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5be0b5f63587426c9100ca7be5616a77745" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (displayName == null) ? getType() : displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob2992bdc97f84e639e9ec7ca9ad01181745" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}

    /**
     * @param attList
     *            comma separated list of attributes in a summary containing
     *            this recordClass.
     */
    /*
     * public void setSummaryAttributeList (String attList){
     * this.summaryAttributeList = attList; }
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8c83eaba99524384906708af1453e2ce745" name="setAttributeOrdering" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attOrder" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.attributeOrdering = attOrder;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6989cd6bdd06465f859292c3befc3365745" name="setAliasQueryRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.aliasQueryRef = queryRef;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9163ca737aa2435f90a6a2ad28ea7dae745" name="getPrimaryKeyAttributeField" type="PrimaryKeyAttributeField" type-id="PrimaryKeyAttributeField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return primaryKeyField;}

    /**
     * @param attributesQueryRef
     *            two part query name (set.name)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1cd5e67979b74dff95ce2f78accf717a745" name="addAttributesQueryRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributesQueryRef" type="AttributeQueryReference" type-id="AttributeQueryReference" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        attributesQueryRefList.add(attributesQueryRef);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0d2e207818704225a73b375c39a6705e745" name="addAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeField" type="AttributeField" type-id="AttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        attributeField.setRecordClass(this);
        attributeField.setContainer(this);
        attributeFieldList.add(attributeField);}</source-code>
          </source-codes>
        </operation>
        <operation id="o77ecd2c76ec9420e86692b649c9f50a7745" name="addTableField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableField" type="TableField" type-id="TableField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        tableField.setRecordClass(this);
        tableFieldList.add(tableField);}</source-code>
          </source-codes>
        </operation>
        <operation id="o149d14a8ed6e4c93b22467dcfd204203745" name="addNestedRecordQuestion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="q" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        nestedRecordQuestions.put(q.getFullName(), q);}</source-code>
          </source-codes>
        </operation>
        <operation id="oddc39c974d2e4131b64b56fa4c8c7491745" name="addNestedRecordListQuestion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="q" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        nestedRecordListQuestions.put(q.getFullName(), q);}</source-code>
          </source-codes>
        </operation>
        <operation id="oab0b16a8ca274ccaa153900814002ecb745" name="addNestedRecordQuestionRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="nr" type="NestedRecord" type-id="NestedRecord" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        nestedRecordQuestionRefList.add(nr);}</source-code>
          </source-codes>
        </operation>
        <operation id="o12acf5273f9e415fb0f517fafc0b7516745" name="addNestedRecordListQuestionRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="nrl" type="NestedRecordList" type-id="NestedRecordList" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        nestedRecordListQuestionRefList.add(nrl);}</source-code>
          </source-codes>
        </operation>
        <operation id="o579c9bc2f5d844d1bc44b73e919e66f9745" name="addReporterRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="reporter" type="ReporterRef" type-id="ReporterRef" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        reporterList.add(reporter);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3832a768d7624e66bddbc77138c9ffa2745" name="setDoNotTest" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="doNotTest" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.doNotTest = doNotTest;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9350d8490a4f405ea2a803b024e76440745" name="getDoNotTest" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return doNotTest;}</source-code>
          </source-codes>
        </operation>
        <operation id="o272c632bc8a1481cb611287d7920739b745" name="addParamValuesSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        unexcludedParamValuesSets.add(paramValuesSet);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa63b9b26313244d1b923c914311e1d80745" name="getParamValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return paramValuesSet == null ? new ParamValuesSet() : paramValuesSet;}</source-code>
          </source-codes>
        </operation>
        <operation id="obc726c3192e848fca10d002563f885de745" name="setAttributeCategoryTree" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tree" type="AttributeCategoryTree" type-id="AttributeCategoryTree" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        attributeCategoryTree = tree;}

    // ////////////////////////////////////////////////////////////
    // public getters
    // ////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="oa0e99301b43c41e5aff59c450f10ee3e745" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4081ed0f61e940e795040329b949e87c745" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return fullName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7b6e6edaa4e745dfa6049eb7b39ad5e8745" name="getTableFieldMap" type="Map&lt;String, TableField&gt;" type-id="Map&lt;String, TableField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getTableFieldMap(FieldScope.ALL);}</source-code>
          </source-codes>
        </operation>
        <operation id="oacf189280dbd4c0285a58775c1044bd8745" name="getTableFieldMap" type="Map&lt;String, TableField&gt;" type-id="Map&lt;String, TableField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, TableField&gt; fields = new LinkedHashMap&lt;String, TableField&gt;();
        for (TableField field : tableFieldsMap.values()){
            if (scope.isFieldInScope(field)){
                fields.put(field.getName(), field);}}
        return fields;}</source-code>
          </source-codes>
        </operation>
        <operation id="o00e6158110994e4e98d83b5fe56d92fd746" name="getTableFields" type="TableField[]" type-id="TableField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, TableField&gt; tables = getTableFieldMap();
        TableField[ array = new TableField[tables.size();
        tables.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0b12677bc222406b9f730fbf4c57c9c5746" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getAttributeFieldMap(FieldScope.ALL);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0054ebae95b447979cd7d50f7d5408bc746" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; fields = new LinkedHashMap&lt;String, AttributeField&gt;();

        // always put primary key field as the first one
        fields.put(primaryKeyField.getName(), primaryKeyField);

        for (AttributeField field : attributeFieldsMap.values()){
            if (scope.isFieldInScope(field)){
                fields.put(field.getName(), field);}}
        return fields;}</source-code>
          </source-codes>
        </operation>
        <operation id="oac0b292ab4654cb7ae3f4380f741d37f746" name="getAttributeFields" type="AttributeField[]" type-id="AttributeField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; attributes = getAttributeFieldMap();
        AttributeField[ array = new AttributeField[attributes.size();
        attributes.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3d1e659940b946589e1afe6bbd52e9f3746" name="getFields" type="Field[]" type-id="Field[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        int attributeCount = attributeFieldsMap.size();
        int tableCount = tableFieldsMap.size();
        Field[ fields = new Field[attributeCount + tableCount;
        // copy attribute fields
        attributeFieldsMap.values().toArray(fields);
        // copy table fields
        TableField[ tableFields = getTableFields();
        System.arraycopy(tableFields, 0, fields, attributeCount, tableCount);
        return fields;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa0ec1ea287d9493fbf34e703663671fe746" name="getNestedRecordQuestions" type="Question[]" type-id="Question[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (nestedRecordQuestions == null){
            initNestedRecords();}
        Question[ returnedNq = new Question[nestedRecordQuestions.size();
        nestedRecordQuestions.values().toArray(returnedNq);
        return returnedNq;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8a99ff798ce8436e962b5045d9c85a7f746" name="getNestedRecordListQuestions" type="Question[]" type-id="Question[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (nestedRecordListQuestions == null){
            initNestedRecords();}
        Question[ returnedNq = new Question[nestedRecordListQuestions.size();
        nestedRecordListQuestions.values().toArray(returnedNq);
        return returnedNq;}</source-code>
          </source-codes>
        </operation>
        <operation id="o84e719d5c343411d9ea479e9e3b497a8746" name="getReference" type="Reference" type-id="Reference" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return new Reference(getFullName());}</source-code>
          </source-codes>
        </operation>
        <operation id="obdcc02707a604202a493319d680e0b11746" name="getReporterMap" type="Map&lt;String, ReporterRef&gt;" type-id="Map&lt;String, ReporterRef&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, ReporterRef&gt;(reporterMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6689a2b3d6b54f9b86e1cab3785c4ea6746" name="getAttributeCategoryTree" type="AttributeCategoryTree" type-id="AttributeCategoryTree" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return attributeCategoryTree.getTrimmedCopy(scope);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob5bd560bcee448809362d9b80379e47a746" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer("Record: name='" + name + "'").append(newline);

        buf.append(
                "--- Attribute Category Tree (with attribute count per category) ---").append(
                newline);
        buf.append(attributeCategoryTree.toString());

        buf.append("--- Attributes ---").append(newline);
        for (AttributeField attribute : attributeFieldsMap.values()){
            buf.append(attribute.getName()).append(newline);}

        buf.append("--- Tables ---").append(newline);
        for (TableField table : tableFieldsMap.values()){
            buf.append(table.getName()).append(newline);}
        return buf.toString();}

    /*
     * &lt;sanityRecord ref="GeneRecordClasses.GeneRecordClass"
     * primaryKey="PF11_0344"/&gt;
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9418809010594ffb82dd4218b89df8dc746" name="getSanityTestSuggestion" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        String indent = "    ";
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer(newline + newline + indent
                + "&lt;sanityRecord ref=\"" + getFullName() + "\"" + newline
                + indent + indent + indent + "primaryKey=\"FIX_pk\"&gt;" + newline);
        buf.append(indent + "&lt;/sanityRecord&gt;");
        return buf.toString();}

    // /////////////////////////////////////////////////////////////////////////
    // package scope methods
    // /////////////////////////////////////////////////////////////////////////

    /**
     * @param recordSetName
     *            name of the recordSet to which this record belongs.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4b5b5f3b78fb4a039579514f54fac5ce746" name="setRecordClassSet" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassSet" type="RecordClassSet" type-id="RecordClassSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClassSet = recordClassSet;
        this.fullName = recordClassSet.getName() + "." + name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8a4959a9693d479795547f8ed963df4e746" name="getRecordClassSet" type="RecordClassSet" type-id="RecordClassSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClassSet;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6f47228855f0487b9e4dc89e71ca535c746" name="getAttributeQuery" type="Query" type-id="Query" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryFullName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return attributeQueries.get(queryFullName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c4d0d5fdf5f4c78ba2f7e3bddb143c3746" name="getAttributeQueries" type="Map&lt;String, Query&gt;" type-id="Map&lt;String, Query&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, Query&gt;(this.attributeQueries);}</source-code>
          </source-codes>
        </operation>
        <operation id="o917763febe25476db7855536ba71e0aa746" name="getAttributeField" type="AttributeField" type-id="AttributeField" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        AttributeField attributeField = attributeFieldsMap.get(attributeName);
        if (attributeField == null){
            String message = "RecordClass " + getName()
                    + " doesn't have an attribute field with name '"
                    + attributeName + "'.";
            throw new WdkModelException(message);}
        return attributeField;}</source-code>
          </source-codes>
        </operation>
        <operation id="o50209698c38141c9b3250a790e48e548746" name="getTableField" type="TableField" type-id="TableField" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        TableField tableField = tableFieldsMap.get(tableName);
        if (tableField == null){
            String message = "Record " + getName()
                    + " does not have a table field with name '" + tableName
                    + "'.";
            throw new WdkModelException(message);}
        return tableField;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o1a79d543fcf44a5a82dddd785d4a7ac9746" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (resolved) return;
        super.resolveReferences(model);
        this.wdkModel = model;

        if (name.length() == 0 || name.indexOf('\'') &gt;= 0)
            throw new WdkModelException("recordClass name cannot be empty or "
                    + "having single quotes: " + name);

        // resolve the references for attribute queries
        resolveAttributeQueryReferences(model);

        // resolve references for the attribute fields
        for (AttributeField field : attributeFieldsMap.values()){
            field.resolveReferences(model);}

        // resolve the alias query
        resolveAliasQuery(model);

        // resolve the references for table queries
        resolveTableFieldReferences(model);

        if (attributeOrdering != null){
            Map&lt;String, AttributeField&gt; orderedAttributes = sortAllAttributes();
            attributeFieldsMap = orderedAttributes;}

        for (NestedRecord nestedRecord : nestedRecordQuestionRefs.values()){
            nestedRecord.setParentRecordClass(this);
            nestedRecord.resolveReferences(model);}

        for (NestedRecordList nestedRecordList : nestedRecordListQuestionRefs.values()){
            nestedRecordList.setParentRecordClass(this);
            nestedRecordList.resolveReferences(model);}

        // resolve reference for alias query

        // resolve the filter and layout.
        resolveFilterReferences(model);

        // resolve default summary attributes
        if (defaultSummaryAttributeNames != null){
            Map&lt;String, AttributeField&gt; attributeFields = getAttributeFieldMap();
            for (String fieldName : defaultSummaryAttributeNames){
                AttributeField field = attributeFields.get(fieldName);
                if (field == null)
                    throw new WdkModelException("Summary attribute field ["
                            + fieldName + "] defined in question ["
                            + getFullName() + "] is invalid.");
                defaultSummaryAttributeFields.put(fieldName, field);}}
        defaultSummaryAttributeNames = null;

        // create column attribute fields for primary keys if needed.
        createPrimaryKeySubFields();

        // resolve the favorite note reference to attribute field
        if (favoriteNoteFieldName != null){
            favoriteNoteField = attributeFieldsMap.get(favoriteNoteFieldName);
            if (favoriteNoteField == null)
                throw new WdkModelException("The attribute '"
                        + favoriteNoteFieldName + "' for the default favorite "
                        + "note content of recordClass '" + getFullName()
                        + "' is invalid.");}

        // resolve references in the attribute category tree
        resolveCategoryTreeReferences(model);

        // resolve references for views
        for (SummaryView summaryView : summaryViewMap.values()){
            summaryView.resolveReferences(model);}
        for (RecordView recordView : recordViewMap.values()){
            recordView.resolveReferences(model);}

        resolved = true;}</source-code>
          </source-codes>
        </operation>
        <operation id="of14138dfed94416fae4425b2a4e83fc6746" name="resolveCategoryTreeReferences" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        // ensure attribute categories are unique, then add attribute
        // references to appropriate places on category tree
        if (attributeCategoryTree == null){
            // no categories were specified for this record class
            // must still create tree to hold all (uncategorized) attributes
            attributeCategoryTree = new AttributeCategoryTree();}

        // this must be called before the attributes are added....
        attributeCategoryTree.resolveReferences(model);

        for (AttributeQueryReference queryRef : attributesQueryRefList){
            for (AttributeField attribute : queryRef.getAttributeFields()){
                attributeCategoryTree.addAttributeToCategories(attribute);}}
        for (AttributeField attribute : attributeFieldList){
            if (attribute != getPrimaryKeyAttributeField()){
                attributeCategoryTree.addAttributeToCategories(attribute);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o9ca6b949a47c4519a7026206b2175c26746" name="resolveAttributeQueryReferences" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        String[ paramNames = primaryKeyField.getColumnRefs();
        for (AttributeQueryReference reference : attributesQueryRefList){
            // validate attribute query
            Query query = (Query) wdkModel.resolveReference(reference.getTwoPartName());
            validateBulkQuery(query);

            // add fields into record level, and associate columns
            Map&lt;String, AttributeField&gt; fields = reference.getAttributeFieldMap();
            Map&lt;String, Column&gt; columns = query.getColumnMap();
            for (AttributeField field : fields.values()){
                field.setRecordClass(this);
                field.setContainer(this);
                String fieldName = field.getName();
                // check if the attribute is duplicated
                if (attributeFieldsMap.containsKey(fieldName))
                    throw new WdkModelException("The AttributeField "
                            + fieldName + " is duplicated in the recordClass "
                            + getFullName());

                // link columnAttributes with columns
                if (field instanceof ColumnAttributeField){
                    Column column = columns.get(fieldName);
                    if (column == null)
                        throw new WdkModelException("Column is missing for "
                                + "the columnAttributeField " + fieldName
                                + " in recordClass " + getFullName());
                    ((ColumnAttributeField) field).setColumn(column);}
                attributeFieldsMap.put(fieldName, field);}
            // add user param into the original attribute query, if needed
            if (!query.getParamMap().containsKey(Utilities.PARAM_USER_ID)){
                query.addParam(getUserParam());}

            Query attributeQuery = RecordClass.prepareQuery(wdkModel, query,
                    paramNames);
            attributeQueries.put(query.getFullName(), attributeQuery);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5b743a535bac4256ba009184bf49dc7e746" name="resolveAliasQuery" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (aliasQueryRef != null){
            Query query = (SqlQuery) wdkModel.resolveReference(aliasQueryRef);

            validateBulkQuery(query);

            Map&lt;String, Column&gt; columnMap = query.getColumnMap();
            // make sure the attribute query also returns old primary key
            // columns
            for (String column : primaryKeyField.getColumnRefs()){
                column = Utilities.ALIAS_OLD_KEY_COLUMN_PREFIX + column;
                if (!columnMap.containsKey(column))
                    throw new WdkModelException("The attribute query "
                            + query.getFullName() + " of " + getFullName()
                            + " does not return the required old primary key "
                            + "column " + column);}

            // the alias query should also return columns for old primary key
            // columns, with a prefix "old_".
            String[ pkColumns = primaryKeyField.getColumnRefs();
            String[ paramNames = new String[pkColumns.length;
            for (int i = 0; i &lt; pkColumns.length; i++){
                paramNames[i = Utilities.ALIAS_OLD_KEY_COLUMN_PREFIX
                        + pkColumns[i;}

            this.aliasQuery = RecordClass.prepareQuery(wdkModel, query,
                    paramNames);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oaf74e1e67f8446048b5efaf90246f6f1746" name="resolveTableFieldReferences" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        String[ paramNames = primaryKeyField.getColumnRefs();

        // resolve the references for table queries
        for (TableField tableField : tableFieldsMap.values()){
            tableField.resolveReferences(wdkModel);

            Query query = tableField.getQuery();
            query = (Query) wdkModel.resolveReference(query.getFullName());

            // add user param into the original table query, if needed
            if (!query.getParamMap().containsKey(Utilities.PARAM_USER_ID)){
                query.addParam(getUserParam());}
            Query tableQuery = RecordClass.prepareQuery(wdkModel, query,
                    paramNames);
            tableQueries.put(query.getFullName(), tableQuery);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o3b7d1a7287b34b02a2f73bc65535fecb746" name="resolveFilterReferences" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        // resolve references for filter instances
        for (AnswerFilter filter : filterList){
            filter.resolveReferences(wdkModel);

            Map&lt;String, AnswerFilterInstance&gt; instances = filter.getInstances();
            for (String filterName : instances.keySet()){
                if (filterMap.containsKey(filterName))
                    throw new WdkModelException("Filter instance ["
                            + filterName + "] of type " + getFullName()
                            + " is included more than once");
                AnswerFilterInstance instance = instances.get(filterName);
                filterMap.put(filterName, instance);

                if (instance.isDefault()){
                    if (defaultFilter != null)
                        throw new WdkModelException(
                                "The default filter of type " + getFullName()
                                        + " is defined more than once: ["
                                        + defaultFilter.getName() + "], ["
                                        + instance.getName() + "]");
                    defaultFilter = instance;}
                if (instance.isBooleanExpansion()){
                    if (booleanExpansionFilter != null)
                        throw new WdkModelException("The boolean expansion "
                                + "filter of type " + getFullName()
                                + " is defined more " + "than once: ["
                                + booleanExpansionFilter.getName() + "] and ["
                                + instance.getName() + "]");
                    booleanExpansionFilter = instance;}}}
        filterList = null;

        // resolve references for the filter layout instances
        for (AnswerFilterLayout layout : filterLayoutMap.values()){
            layout.resolveReferences(wdkModel);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o921b88f1835c43d89a408cf8c65514f1747" name="getUserParam" type="Param" type-id="Param" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // create the missing user_id param for the attribute query
        ParamSet paramSet = wdkModel.getParamSet(Utilities.INTERNAL_PARAM_SET);
        if (paramSet.contains(Utilities.PARAM_USER_ID))
            return paramSet.getParam(Utilities.PARAM_USER_ID);

        StringParam userParam = new StringParam();
        userParam.setName(Utilities.PARAM_USER_ID);
        userParam.setNumber(true);

        userParam.excludeResources(wdkModel.getProjectId());
        userParam.resolveReferences(wdkModel);
        userParam.setResources(wdkModel);
        paramSet.addParam(userParam);
        return userParam;}</source-code>
          </source-codes>
        </operation>
        <operation id="oad2960a300f6469bbbbedacf23abfcf8747" name="validateBulkQuery" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        validateQuery(query);

        // Further limit the attribute/table query to have only user_id param
        // (optional). This is required to enable bulk query rewriting.
        String message = "Bulk query '" + query.getFullName()
                + "' can have only a '" + Utilities.PARAM_USER_ID
                + "' param, and it is optional.";
        Param[ params = query.getParams();
        if (params.length &gt; 1) throw new WdkModelException(message);
        else if (params.length == 1
                &amp;&amp; !params[0.getName().equals(Utilities.PARAM_USER_ID))
            throw new WdkModelException(message);}

    /**
     * validate a query, and make sure it returns primary key columns, and the
     * params of it can have only primary_key-column-mapped params (optional)
     * and user_id param (optional).
     * 
     * @param query
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o08a5bb7955a04284ac78eb1fe10b1d2b747" name="validateQuery" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        String[ pkColumns = primaryKeyField.getColumnRefs();
        Map&lt;String, String&gt; pkColumnMap = new LinkedHashMap&lt;String, String&gt;();
        for (String column : pkColumns)
            pkColumnMap.put(column, column);

        // make sure the params contain only primary key params, and (optional)
        // user_id param; but they can have less params than primary key
        // columns. WDK will append the missing ones automatically.
        for (Param param : query.getParams()){
            String paramName = param.getName();
            if (paramName.equals(Utilities.PARAM_USER_ID)) continue;
            if (!pkColumnMap.containsKey(paramName))
                throw new WdkModelException("The attribute or table query "
                        + query.getFullName() + " has param " + paramName
                        + ", and it doesn't match with any of the primary key "
                        + "columns.");}

        // make sure the attribute/table query returns primary key columns
        Map&lt;String, Column&gt; columnMap = query.getColumnMap();
        for (String column : primaryKeyField.getColumnRefs()){
            if (!columnMap.containsKey(column))
                throw new WdkModelException("The query " + query.getFullName()
                        + " of " + getFullName() + " doesn't return the "
                        + "required primary key column " + column);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o4154c33cbaed4644b9b0fb2862fd813a747" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // set the resource in reporter
        for (ReporterRef reporter : reporterMap.values()){
            reporter.setResources(wdkModel);}}

    /**
     * Called when the RecordClass is asked for a NestedRecordQuestion or
     * NestedRecordQuestionList. Cannot be done upon RecordClass initialization
     * because the Questions are not guaranteed to have their resources set,
     * which throws a NullPointerException when the Question is asked for the
     * name of its QuestionSet.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0db2c5ded89c4931bdd7dee08d9eb5b4747" name="initNestedRecords" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        nestedRecordQuestions = new LinkedHashMap&lt;String, Question&gt;();
        for (NestedRecord nextNr : nestedRecordQuestionRefs.values()){
            nextNr.setParentRecordClass(this);
            Question q = nextNr.getQuestion();
            addNestedRecordQuestion(q);}

        nestedRecordListQuestions = new LinkedHashMap&lt;String, Question&gt;();
        for (NestedRecordList nextNrl : nestedRecordListQuestionRefs.values()){
            nextNrl.setParentRecordClass(this);
            Question q = nextNrl.getQuestion();
            addNestedRecordListQuestion(q);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o81b7e4edb5824833b7a23877680ea973747" name="sortAllAttributes" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        String orderedAtts[ = attributeOrdering.split(",");
        Map&lt;String, AttributeField&gt; orderedAttsMap = new LinkedHashMap&lt;String, AttributeField&gt;();

        // primaryKey first
        orderedAttsMap.put(primaryKeyField.getName(), primaryKeyField);

        for (String nextAtt : orderedAtts){
            nextAtt = nextAtt.trim();
            if (!orderedAttsMap.containsKey(nextAtt)){
                AttributeField nextAttField = attributeFieldsMap.get(nextAtt);

                if (nextAttField == null){
                    String message = "RecordClass " + getFullName()
                            + " defined attribute " + nextAtt + " in its "
                            + "attribute ordering, but that is not a valid "
                            + "attribute for this RecordClass";
                    throw new WdkModelException(message);}
                orderedAttsMap.put(nextAtt, nextAttField);}}
        // add all attributes not in the ordering
        for (String nextAtt : attributeFieldsMap.keySet()){
            if (!orderedAttsMap.containsKey(nextAtt)){
                AttributeField nextField = attributeFieldsMap.get(nextAtt);
                orderedAttsMap.put(nextAtt, nextField);}}
        return orderedAttsMap;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o813caf8e604c4623bb27e5f3d4b7770f747" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude reporters
        for (ReporterRef reporter : reporterList){
            if (reporter.include(projectId)){
                reporter.excludeResources(projectId);
                String reporterName = reporter.getName();
                if (reporterMap.containsKey(reporterName))
                    throw new WdkModelException("The reporter " + reporterName
                            + " is duplicated in recordClass "
                            + this.getFullName());
                reporterMap.put(reporterName, reporter);}}
        reporterList = null;

        // exclude attributes
        List&lt;AttributeField&gt; newFieldList = new ArrayList&lt;AttributeField&gt;();
        for (AttributeField field : attributeFieldList){
            if (field.include(projectId)){
                field.excludeResources(projectId);
                String fieldName = field.getName();
                if (field instanceof PrimaryKeyAttributeField){
                    if (this.primaryKeyField != null)
                        throw new WdkModelException("primary key field is "
                                + "duplicated in recordClass " + getFullName());
                    this.primaryKeyField = (PrimaryKeyAttributeField) field;} else{ // other attribute fields
                    if (attributeFieldsMap.containsKey(fieldName))
                        throw new WdkModelException("The attributeField "
                                + fieldName + " is duplicated in recordClass "
                                + getFullName());}
                attributeFieldsMap.put(fieldName, field);
                newFieldList.add(field);}}
        attributeFieldList = newFieldList;

        // make sure there is a primary key
        if (primaryKeyField == null)
            throw new WdkModelException("The primaryKeyField of recordClass "
                    + getFullName() + " is not set. Please define a "
                    + "&lt;primaryKeyAttribute&gt; in the recordClass.");
        this.aliasQueryRef = primaryKeyField.getAliasQueryRef();

        // exclude table fields
        for (TableField field : tableFieldList){
            if (field.include(projectId)){
                field.excludeResources(projectId);
                String fieldName = field.getName();
                if (attributeFieldsMap.containsKey(fieldName))
                    throw new WdkModelException("The table " + fieldName
                            + " is duplicated in recordClass " + getFullName());
                tableFieldsMap.put(fieldName, field);}}
        tableFieldList = null;

        // exclude query refs
        Map&lt;String, AttributeQueryReference&gt; attributesQueryRefs = new LinkedHashMap&lt;String, AttributeQueryReference&gt;();
        for (AttributeQueryReference queryRef : attributesQueryRefList){
            if (queryRef.include(projectId)){
                String refName = queryRef.getTwoPartName();
                if (attributesQueryRefs.containsKey(refName)){
                    throw new WdkModelException("recordClass " + getFullName()
                            + " has more than one attributeQueryRef \""
                            + refName + "\"");} else{
                    queryRef.excludeResources(projectId);
                    attributesQueryRefs.put(refName, queryRef);}}}
        attributesQueryRefList.clear();
        attributesQueryRefList.addAll(attributesQueryRefs.values());

        // exclude nested records
        for (NestedRecord nestedRecord : nestedRecordQuestionRefList){
            if (nestedRecord.include(projectId)){
                String refName = nestedRecord.getTwoPartName();
                if (nestedRecordQuestionRefs.containsKey(refName)){
                    throw new WdkModelException("recordClass " + getFullName()
                            + " has more than one nestedRecord \"" + refName
                            + "\"");} else{
                    nestedRecord.excludeResources(projectId);
                    nestedRecordQuestionRefs.put(refName, nestedRecord);}}}
        nestedRecordQuestionRefList = null;

        // exclude nested record lists
        for (NestedRecordList recordList : nestedRecordListQuestionRefList){
            if (recordList.include(projectId)){
                String refName = recordList.getTwoPartName();
                if (nestedRecordListQuestionRefs.containsKey(refName)){
                    throw new WdkModelException("recordClass " + getFullName()
                            + " has more than one nestedRecordList \""
                            + refName + "\"");} else{
                    recordList.excludeResources(projectId);
                    nestedRecordListQuestionRefs.put(refName, recordList);}}}
        nestedRecordListQuestionRefList = null;

        // exclude filter instances
        List&lt;AnswerFilter&gt; newFilters = new ArrayList&lt;AnswerFilter&gt;();
        for (AnswerFilter filter : filterList){
            if (filter.include(projectId)){
                filter.excludeResources(projectId);
                newFilters.add(filter);}}
        filterList = newFilters;

        // exclude filter layout
        for (AnswerFilterLayout layout : filterLayoutList){
            if (layout.include(projectId)){
                layout.excludeResources(projectId);
                String layoutName = layout.getName();
                if (filterLayoutMap.containsKey(layoutName))
                    throw new WdkModelException("Filter layout [" + layoutName
                            + "] of type " + getFullName()
                            + " is included more than once");
                filterLayoutMap.put(layoutName, layout);}}
        filterLayoutList = null;

        // exclude paramValuesSets
        for (ParamValuesSet pvs : unexcludedParamValuesSets){
            if (pvs.include(projectId)){
                if (paramValuesSet != null)
                    throw new WdkModelException(
                            "Duplicate &lt;paramErrors&gt; included in record class "
                                    + getName() + " for projectId " + projectId);
                paramValuesSet = pvs;}}

        // exclude summary and sorting attribute list
        boolean hasAttributeList = false;
        for (AttributeList attributeList : attributeLists){
            if (attributeList.include(projectId)){
                if (hasAttributeList){
                    throw new WdkModelException("The question " + getFullName()
                            + " has more than one &lt;attributesList&gt; for "
                            + "project " + projectId);} else{
                    this.defaultSummaryAttributeNames = attributeList.getSummaryAttributeNames();
                    this.defaultSortingMap = attributeList.getSortingAttributeMap();
                    hasAttributeList = true;}}}
        attributeLists = null;

        // exclude favorite references
        for (FavoriteReference favorite : favorites){
            if (favorite.include(projectId)){
                if (favoriteNoteFieldName != null)
                    throw new WdkModelException("The favorite tag is "
                            + "duplicated on the recordClass " + getFullName());
                this.favoriteNoteFieldName = favorite.getNoteField();}}
        favorites = null;

        // exclude the summary views
        Map&lt;String, SummaryView&gt; summaryViews = new LinkedHashMap&lt;String, SummaryView&gt;();
        for (SummaryView view : summaryViewList){
            if (view.include(projectId)){
                view.excludeResources(projectId);
                String name = view.getName();
                if (summaryViews.containsKey(name))
                    throw new WdkModelException("The summary view '" + name
                            + "' is duplicated in record " + getFullName());

                summaryViews.put(name, view);}}
        summaryViewList = null;

        // add WDK supported views to all record classes, first
        for (SummaryView view : SummaryView.createSupportedSummaryViews(this)){
            view.excludeResources(projectId);
            summaryViewMap.put(view.getName(), view);}
 
        // then add user defined views to override WDK supported ones
        for (SummaryView view : summaryViews.values()){
            summaryViewMap.put(view.getName(), view);} 


        // exclude the summary views
        Map&lt;String, RecordView&gt; recordViews = new LinkedHashMap&lt;String, RecordView&gt;();
        for (RecordView view : recordViewList){
            if (view.include(projectId)){
                view.excludeResources(projectId);
                String name = view.getName();
                if (recordViews.containsKey(name))
                    throw new WdkModelException("The record view '" + name
                            + "' is duplicated in record " + getFullName());

                recordViews.put(name, view);}}
        recordViewList = null;

        // add WDK supported views to all record classes first
        for (RecordView view : RecordView.createSupportedRecordViews()){
            view.excludeResources(projectId);
            recordViewMap.put(view.getName(), view);}

        // then add user defined views to override WDK supported ones
        for (RecordView view : recordViews.values()){
            recordViewMap.put(view.getName(), view);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o628e36364a0044bbb01b15e678b092af747" name="addFilter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filter" type="AnswerFilter" type-id="AnswerFilter" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        filter.setRecordClass(this);
        this.filterList.add(filter);}</source-code>
          </source-codes>
        </operation>
        <operation id="o58b5835b019b413e852df05b1ed55d32747" name="getFilterMap" type="Map&lt;String, AnswerFilterInstance&gt;" type-id="Map&lt;String, AnswerFilterInstance&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, AnswerFilterInstance&gt;(filterMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0e89f004b1f54aabb8c111ad0c51a1f1747" name="getFilters" type="AnswerFilterInstance[]" type-id="AnswerFilterInstance[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        AnswerFilterInstance[ instances = new AnswerFilterInstance[filterMap.size();
        filterMap.values().toArray(instances);
        return instances;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc39dcf83eca54e07a8dc1332d93b8c43747" name="getFilter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filterName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        if (filterName == null) return null;
        AnswerFilterInstance instance = filterMap.get(filterName);

        // ignore the invalid filter name
        // if (instance == null)
        // throw new WdkModelException("The name [" + filterName
        // + "] does not " + "match any filter instance of type "
        // + getFullName());
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o291539c802b140cea785b323b401f200747" name="addFilterLayout" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="layout" type="AnswerFilterLayout" type-id="AnswerFilterLayout" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        layout.setRecordClass(this);
        this.filterLayoutList.add(layout);}</source-code>
          </source-codes>
        </operation>
        <operation id="o28d60829043d49fa873d01311b211ae5747" name="getFilterLayoutMap" type="Map&lt;String, AnswerFilterLayout&gt;" type-id="Map&lt;String, AnswerFilterLayout&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, AnswerFilterLayout&gt;(filterLayoutMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="of7dcbeb7e3554249bcd3ace1f774bba9747" name="getFilterLayouts" type="AnswerFilterLayout[]" type-id="AnswerFilterLayout[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        AnswerFilterLayout[ layouts = new AnswerFilterLayout[filterLayoutMap.size();
        filterLayoutMap.values().toArray(layouts);
        return layouts;}</source-code>
          </source-codes>
        </operation>
        <operation id="o179e373cb25e40f6bed9859c834c0bee747" name="getFilterLayout" type="AnswerFilterLayout" type-id="AnswerFilterLayout" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="layoutName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        AnswerFilterLayout layout = filterLayoutMap.get(layoutName);
        if (layout == null)
            throw new WdkModelException("The name [" + layoutName + "] does "
                    + "not match any filter layout of type " + getFullName());
        return layout;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa84c341ef25a4389a2d138965e6cf8cd747" name="getDefaultFilter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return defaultFilter;}</source-code>
          </source-codes>
        </operation>
        <operation id="o39023c3b917f4c4fbe505db241078a29747" name="getBooleanExpansionFilter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return booleanExpansionFilter;}

    /**
     * @return the type
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o589ab4655d114ee5a7e85cbf420ffeaf747" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (type == null) ? getFullName() : type;}

    /**
     * @param type
     *            the type to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3937ddaf10b24f44875ff00d0d414890747" name="setType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="type" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.type = type;}

    /**
     * Make sure all pk columns has a corresponding ColumnAttributeField
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6de9960e510f4b1bb3246bbcd6ba194a747" name="createPrimaryKeySubFields" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // make sure the record has at least one attribute query, otherwise skip
        // this process
        if (attributeQueries.size() == 0) return;

        String[ pkColumns = primaryKeyField.getColumnRefs();
        // use the first attribute query as the underlying query for the column
        // attribute fields for the primary key; every atribute query returns
        // primary key columns.
        Query attributeQuery = attributeQueries.values().iterator().next();
        Map&lt;String, Column&gt; columns = attributeQuery.getColumnMap();
        for (String name : pkColumns){
            if (attributeFieldsMap.containsKey(name)) continue;

            ColumnAttributeField field = new ColumnAttributeField();
            field.setName(name);
            field.setInternal(true);
            field.setRecordClass(this);
            field.setContainer(this);
            Column column = columns.get(name);
            field.setColumn(column);
            attributeFieldsMap.put(name, field);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o4c4e044c71454055a6f9f068a6dadd9b747" name="addAttributeList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeList" type="AttributeList" type-id="AttributeList" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.attributeLists.add(attributeList);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3e3fbea4e40f4437bb8e57673048eba9747" name="getSummaryAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; attributeFields = new LinkedHashMap&lt;String, AttributeField&gt;();

        // always put primary key as the first field
        attributeFields.put(primaryKeyField.getName(), primaryKeyField);

        if (defaultSummaryAttributeFields.size() &gt; 0){
            attributeFields.putAll(defaultSummaryAttributeFields);} else{
            Map&lt;String, AttributeField&gt; nonInternalFields = getAttributeFieldMap(FieldScope.NON_INTERNAL);
            for (String fieldName : nonInternalFields.keySet()){
                attributeFields.put(fieldName, nonInternalFields.get(fieldName));
                if (attributeFields.size() &gt;= Utilities.DEFAULT_SUMMARY_ATTRIBUTE_SIZE)
                    break;}}
        return attributeFields;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4639bd485be74a68b5ce1883a1aef081747" name="getSortingAttributeMap" type="Map&lt;String, Boolean&gt;" type-id="Map&lt;String, Boolean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, Boolean&gt; map = new LinkedHashMap&lt;String, Boolean&gt;();
        int count = 0;
        for (String attrName : defaultSortingMap.keySet()){
            map.put(attrName, defaultSortingMap.get(attrName));
            count++;
            if (count &gt;= User.SORTING_LEVEL) break;}

        // has to sort at least on something, primary key as default
        if (map.size() == 0){
            String pkName = primaryKeyField.getName();
            map.put(pkName, true);}

        return map;}</source-code>
          </source-codes>
        </operation>
        <operation id="odf79e05d8246474291e47fbe7b38bf02747" name="getAliasQuery" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return aliasQuery;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7c89c3c69e294943a92957f9e74d132a748" name="getChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3e411453ab9d42b7b69dd6158b90ff49748" name="setUseBasket" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="useBasket" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.useBasket = useBasket;}</source-code>
          </source-codes>
        </operation>
        <operation id="of2f8f6a42cc346ddbd9c673aee3681f3748" name="isUseBasket" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return useBasket;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5a86ae0f0e9f470c9f8ab41cbda4eca3748" name="getRealtimeBasketQuestion" type="Question" type-id="Question" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        String questionName = Utilities.INTERNAL_QUESTION_SET + ".";
        questionName += getFullName().replace('.', '_');
        questionName += BasketFactory.REALTIME_BASKET_QUESTION_SUFFIX;
        return (Question) wdkModel.resolveReference(questionName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8bb7d238d7274b51ab5a04ee1eda0875748" name="getSnapshotBasketQuestion" type="Question" type-id="Question" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        String questionName = Utilities.INTERNAL_QUESTION_SET + ".";
        questionName += getFullName().replace('.', '_');
        questionName += BasketFactory.SNAPSHOT_BASKET_QUESTION_SUFFIX;
        return (Question) wdkModel.resolveReference(questionName);}</source-code>
          </source-codes>
        </operation>
        <operation id="od6da04921b3347d4be5b2d8db3b2421a748" name="getTransformQuestions" type="Question[]" type-id="Question[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="allowTypeChange" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        List&lt;Question&gt; list = new ArrayList&lt;Question&gt;();
        for (QuestionSet questionSet : wdkModel.getAllQuestionSets()){
            for (Question question : questionSet.getQuestions()){
                if (!question.getQuery().isTransform()) continue;
                if (question.getTransformParams(this).length == 0) continue;
                String outType = question.getRecordClass().getFullName();
                if (allowTypeChange || this.getFullName().equals(outType))
                    list.add(question);}}
        Question[ array = new Question[list.size();
        list.toArray(array);
        return array;}

    /**
     * @return the shortDisplayName
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o524baf950a2d4d0c9b9a3315fd7965b4748" name="getShortDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (shortDisplayName != null) ? shortDisplayName : getDisplayName();}

    /**
     * @param shortDisplayName
     *            the shortDisplayName to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o57ec55cc58c9442bb2c8306f5f48e797748" name="setShortDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="shortDisplayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.shortDisplayName = shortDisplayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o12960cbdbf6440da818476ef338edd30748" name="addFavorite" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="favorite" type="FavoriteReference" type-id="FavoriteReference" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.favorites.add(favorite);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3faa470478ef4ab1853cb00f40ff3c9e748" name="getFavoriteNoteField" type="AttributeField" type-id="AttributeField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return favoriteNoteField;}</source-code>
          </source-codes>
        </operation>
        <operation id="of9d0daba5fe4448f8f0f1d0d62293263748" name="getSummaryViews" type="Map&lt;String, SummaryView&gt;" type-id="Map&lt;String, SummaryView&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, SummaryView&gt;(summaryViewMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o1e91a9ea8daa440a958249905e86086d748" name="getSummaryView" type="SummaryView" type-id="SummaryView" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="viewName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException{
        if (summaryViewMap.containsKey(viewName)){
            return summaryViewMap.get(viewName);} else{
            throw new WdkUserException("Unknown summary view for record class "
                    + "[" + getFullName() + "]: " + viewName);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oe1974f4248144abe8e6acec0949c1b89748" name="addSummaryView" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="view" type="SummaryView" type-id="SummaryView" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (summaryViewList == null) summaryViewMap.put(view.getName(), view);
        else summaryViewList.add(view);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6b83f26da37946ecbce592424ab29943748" name="getRecordViews" type="Map&lt;String, RecordView&gt;" type-id="Map&lt;String, RecordView&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, RecordView&gt;(recordViewMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa88878f26c42488abd65528d3fea280e748" name="getRecordView" type="RecordView" type-id="RecordView" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="viewName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException{
        if (recordViewMap.containsKey(viewName)){
            return recordViewMap.get(viewName);} else{
            throw new WdkUserException("Unknown record view for record class "
                    + "[" + getFullName() + "]: " + viewName);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oecbc6e110c444b6396c794ecddf045e7748" name="getDefaultRecordView" type="RecordView" type-id="RecordView" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        for (RecordView view : recordViewMap.values()){
            if (view.isDefault()) return view;}

        if (recordViewMap.size() &gt; 0)
            return recordViewMap.values().iterator().next();

        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o84c10200a8dd4439ab8516e2eae1b8f2748" name="addRecordView" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="view" type="RecordView" type-id="RecordView" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (recordViewList == null) recordViewMap.put(view.getName(), view);
        else recordViewList.add(view);}</source-code>
          </source-codes>
        </operation>
        <operation id="o57e9be5afa394046b023357779e80960748" name="hasMultipleRecords" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="pkValues" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException,
            WdkUserException, SQLException, JSONException{
        List&lt;Map&lt;String, Object&gt;&gt; records = lookupPrimaryKeys(user, pkValues);
        return records.size() &gt; 1;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1f5d87dc33b14474a2ab105da7b13d03748" name="lookupPrimaryKeys" type="List&lt;Map&lt;String, Object&gt;&gt;" type-id="List&lt;Map&lt;String, Object&gt;&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="pkValues" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, NoSuchAlgorithmException, WdkUserException,
            JSONException{
        List&lt;Map&lt;String, Object&gt;&gt; records = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();
        // nothing to look up
        if (aliasQuery == null){
            records.add(pkValues);
            return records;}

        // get alias from the alias query
        Map&lt;String, String&gt; oldValues = new LinkedHashMap&lt;String, String&gt;();
        for (String param : pkValues.keySet()){
            String oldParam = Utilities.ALIAS_OLD_KEY_COLUMN_PREFIX + param;
            String value = Utilities.parseValue(pkValues.get(param));
            oldValues.put(oldParam, value);}

        QueryInstance instance = aliasQuery.makeInstance(user, oldValues, true,
                0, new LinkedHashMap&lt;String, String&gt;());
        ResultList resultList = null;
        try{
            resultList = instance.getResults();
            while (resultList.next()){
                Map&lt;String, Object&gt; newValue = new LinkedHashMap&lt;String, Object&gt;();
                for (String param : pkValues.keySet()){
                    newValue.put(param, resultList.get(param));}
                records.add(newValue);}
            // no alias found, use the original ones
            if (records.size() == 0) records.add(pkValues);}
        finally{
            if (resultList != null) resultList.close();}

        return records;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di771981904978004388" cid="C253" type="class" name="RecordClassSet" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:22">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab3f3f6eef87643f691f8e90be6f765f1924" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oc38f6cc5650d43f1baf29008a7be4954924" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe654007c155042e3b13cc360d292e62e924" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o26f7b54f5aa84985a9db553f865422e6924" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        RecordClass s = recordClassMap.get(name);
        if (s == null)
            throw new WdkModelException("RecordClass Set " + getName()
                    + " does not include recordClass " + name);
        return s;}</source-code>
          </source-codes>
        </operation>
        <operation id="o686800bbe32641e688a0765a0d8ed3c7924" name="getElement" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClassMap.get(name);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa56da2160b374100a2ec3193ce901a30924" name="getRecordClasses" type="RecordClass[]" type-id="RecordClass[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        RecordClass[ array = new RecordClass[recordClassMap.size();
            recordClassMap.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa8097295888e437dbd55bdd54e47cca1924" name="hasRecordClass" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClassMap.containsKey(recordClass.getName());}</source-code>
          </source-codes>
        </operation>
        <operation id="o5a82a771c1a44876b7311613f7e066b1924" name="addRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        recordClass.setRecordClassSet(this);
        recordClassList.add(recordClass);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7140cf2ff2ab4a1aae0b56e9875ef422924" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer("RecordClassSet: name='" + name
                + "'");
        buf.append(newline);
        Iterator&lt;RecordClass&gt; recordClassIterator = recordClassMap.values().iterator();
        while (recordClassIterator.hasNext()){
            buf.append(newline);
            buf.append(":::::::::::::::::::::::::::::::::::::::::::::");
            buf.append(newline);
            buf.append(recordClassIterator.next()).append(newline);}

        return buf.toString();}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa0325629663d49abb0b1cdbbab26ea95924" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (name.length() == 0 || name.indexOf('\'') &gt;= 0)
            throw new WdkModelException("recordClassSet name cannot be empty "
                    + "or having single quotes: " + name);

        Iterator&lt;RecordClass&gt; recordClassIterator = recordClassMap.values().iterator();
        while (recordClassIterator.hasNext()){
            RecordClass recordClass = recordClassIterator.next();
            recordClass.resolveReferences(model);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o6cdebb7e29d24e719d79ab5bee0a8b66924" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (RecordClass recordClass : recordClassMap.values()){
            recordClass.setResources(model);}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4c1c52dd8b36457eab009c4d34efbb75924" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude record classes
        for (RecordClass recordClass : recordClassList){
            if (recordClass.include(projectId)){
                recordClass.excludeResources(projectId);
                String rcName = recordClass.getName();
                if (recordClassMap.containsKey(rcName))
                    throw new WdkModelException("RecordClass " + rcName
                            + " already exists in recordClass set " + getName());
                recordClassMap.put(rcName, recordClass);}}
        recordClassList = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di497088791191822498" cid="C254" type="class" name="RecordInstance" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:23">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5d65e3b5a58941f7bcd2a5dbe9956671984" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a31b873e0404b490486b68a511677bfed984" name="primaryKey" type="PrimaryKeyAttributeValue" type-id="PrimaryKeyAttributeValue" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a233d47faefaa47a1bcd01eec5b2c6164984" name="user" type="User" type-id="User" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8c2ac177bd7c42c68b474d721ea44f1f984" name="answerValue" type="AnswerValue" type-id="AnswerValue" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a510cb897753e41a09af504e8227fb77f984" name="isValidRecord" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o18d32330bc1a4676b27d075f1b242536984" name="RecordInstance" type="&lt;String, Object&gt;" type-id="&lt;String, Object&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
            <parameter id="" name="pkValues" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        this.user = user;
        this.recordClass = recordClass;
        this.isValidRecord = true;

         List&lt;Map&lt;String, Object&gt;&gt; records = recordClass.lookupPrimaryKeys(
         user, pkValues);
         if (records.size() != 1)
         throw new WdkUserException("The primary key doesn't map to "
         + "singular record: " + pkValues);
       
         pkValues = records.get(0);

        PrimaryKeyAttributeValue primaryKey = new PrimaryKeyAttributeValue(
                recordClass.getPrimaryKeyAttributeField(), pkValues);
        setPrimaryKey(primaryKey);}

    /**
     * @throws WdkUserException
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * 
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0913bd3d13cf4f57a04f611d80959c07984" name="RecordInstance" type="&lt;String, Object&gt;" type-id="&lt;String, Object&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="pkValues" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        this.answerValue = answerValue;
        this.recordClass = answerValue.getQuestion().getRecordClass();
        this.isValidRecord = true;

        // the record instance from answer doesn't need the pk value translation
        PrimaryKeyAttributeValue primaryKey = new PrimaryKeyAttributeValue(
                recordClass.getPrimaryKeyAttributeField(), pkValues);
        setPrimaryKey(primaryKey);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7a888389ce7f4e62ac9ce347c03ce4c9984" name="setPrimaryKey" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="primaryKey" type="PrimaryKeyAttributeValue" type-id="PrimaryKeyAttributeValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.primaryKey = primaryKey;
        addAttributeValue(primaryKey);}</source-code>
          </source-codes>
        </operation>
        <operation id="ocb1a8fcbf75047489b8c1f11bf942ffd985" name="isValidRecord" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return isValidRecord;}

    /**
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6e1b6519101a47b192e8c38a3311c09d985" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeValueContainer#getAttributeFieldMap()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oad54c753f1e14fdaa9d0f4b991b309e5985" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getAttributeFieldMap(FieldScope.ALL);}</source-code>
          </source-codes>
        </operation>
        <operation id="ofd849582e252425b97bf29e48b8a7fd4985" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (answerValue != null) return answerValue.getQuestion().getAttributeFieldMap(
                scope);
        else return recordClass.getAttributeFieldMap(scope);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.AttributeValueContainer#fillColumnAttributeValues
     * (org.gusdb.wdk.model.query.Query)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="odebe4d83a01d4ea5b9c9c0f2b36b4d7b985" name="fillColumnAttributeValues" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeQuery" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        logger.debug("filling column attribute values...");
        if (answerValue != null){
            answerValue.integrateAttributesQuery(attributeQuery);
            return;}

        // prepare the attribute query, and make a new one,
        String queryName = attributeQuery.getFullName();

        Query query = recordClass.getAttributeQuery(queryName);

        logger.debug("filling attribute values from record on query: "
                + query.getFullName());
        for (Column column : query.getColumns()){
            logger.debug("column: " + column.getName());}
        if (query instanceof SqlQuery)
            logger.debug("SQL: \n" + ((SqlQuery) query).getSql());

        Map&lt;String, String&gt; paramValues = primaryKey.getValues();
        // put user id in the attribute query
        String userId = Integer.toString(user.getUserId());
        paramValues.put(Utilities.PARAM_USER_ID, userId);
        QueryInstance instance = query.makeInstance(user, paramValues, true, 0,
                new LinkedHashMap&lt;String, String&gt;());

        ResultList resultList = null;
        try{
            resultList = instance.getResults();

            if (!resultList.next()){
                // throwing exception prevents proper handling in front
                // end...just return?
                isValidRecord = false;
                throw new WdkUserException("Attribute query " + queryName
                        + " doesn't return any row: \n" + instance.getSql());}

            Map&lt;String, AttributeField&gt; fields = recordClass.getAttributeFieldMap();
            for (Column column : query.getColumns()){
                if (!fields.containsKey(column.getName())) continue;
                AttributeField field = fields.get(column.getName());
                if (!(field instanceof ColumnAttributeField)) continue;
                Object objValue = resultList.get(column.getName());
                ColumnAttributeValue value = new ColumnAttributeValue(
                        (ColumnAttributeField) field, objValue);
                addAttributeValue(value);}}
        finally{
            if (resultList != null) resultList.close();}
        logger.debug("column attributes are cached.");}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.AttributeValueContainer#getAttributeField(java.lang
     * .String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5668987758594b95913869d6a5839c55985" name="getAttributeField" type="AttributeField" type-id="AttributeField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fieldName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        Map&lt;String, AttributeField&gt; attributeFields = getAttributeFieldMap();
        if (!attributeFields.containsKey(fieldName))
            throw new WdkModelException("The attribute field '" + fieldName
                    + "' does not exist in record instance "
                    + recordClass.getFullName());
        return attributeFields.get(fieldName);}</source-code>
          </source-codes>
        </operation>
        <operation id="oee36e4ad142942debee43b277ea556d9985" name="getPrimaryKey" type="PrimaryKeyAttributeValue" type-id="PrimaryKeyAttributeValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return primaryKey;}</source-code>
          </source-codes>
        </operation>
        <operation id="o412302a382fa4889b324c78ed125a231985" name="getTableValue" type="TableValue" type-id="TableValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        TableField tableField = recordClass.getTableField(tableName);

        // check if the table value has been cached
        if (tableValueCache.containsKey(tableName))
            return tableValueCache.get(tableName);

        // not cached, if it's in the context of an answer, integrate it.
        if (answerValue != null){
            answerValue.integrateTableQuery(tableField);
            return tableValueCache.get(tableName);}

        // in the context of record, create the value
        TableValue value = new TableValue(user, primaryKey, tableField, false);
        addTableValue(value);
        return value;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8e52c451c5294fffa33bd3539a55f7f4985" name="addTableValue" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableValue" type="TableValue" type-id="TableValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        tableValueCache.put(tableValue.getTableField().getName(), tableValue);}

    /**
     * @return Map of tableName -&gt; TableFieldValue
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2294050386914f85a63ea16131cdfe12985" name="getTables" type="Map&lt;String, TableValue&gt;" type-id="Map&lt;String, TableValue&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, SQLException, JSONException, WdkUserException{
        Map&lt;String, TableValue&gt; values = new LinkedHashMap&lt;String, TableValue&gt;();
        for (TableField field : recordClass.getTableFields()){
            String name = field.getName();
            TableValue value = getTableValue(name);
            values.put(name, value);}
        return values;}

    /**
     * @return Map of attributeName -&gt; AttributeFieldValue
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oce850c3d56c64c8a821186e1b7e5d674985" name="getAttributeValueMap" type="Map&lt;String, AttributeValue&gt;" type-id="Map&lt;String, AttributeValue&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, SQLException,
            JSONException, WdkUserException{
        return getAttributeValueMap(FieldScope.ALL);}

    /**
     * @param scope
     * @return
     * @throws NoSuchAlgorithmException
     * @throws WdkModelException
     * @throws SQLException
     * @throws JSONException
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="odb65ef82c8fa43c69166f3099bc4f81d985" name="getAttributeValueMap" type="Map&lt;String, AttributeValue&gt;" type-id="Map&lt;String, AttributeValue&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, SQLException,
            JSONException, WdkUserException{
        Map&lt;String, AttributeField&gt; fields = getAttributeFieldMap(scope);
        Map&lt;String, AttributeValue&gt; values = new LinkedHashMap&lt;String, AttributeValue&gt;();

        for (AttributeField field : fields.values()){
            String name = field.getName();
            values.put(name, getAttributeValue(name));}
        return values;}

    // change name of method?</source-code>
          </source-codes>
        </operation>
        <operation id="o431f90b61e8248e993ab8406590559d3985" name="getNestedRecordInstances" type="Map&lt;String, RecordInstance&gt;" type-id="Map&lt;String, RecordInstance&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{

        Map&lt;String, RecordInstance&gt; riMap = new LinkedHashMap&lt;String, RecordInstance&gt;();
        Question nq[ = this.recordClass.getNestedRecordQuestions();

        if (nq != null){
            for (int i = 0; i &lt; nq.length; i++){
                Question nextNq = nq[i;
                AnswerValue a = getNestedRecordAnswer(nextNq);

                // the reset function is no longer available; instead call
                // cloneAnswer() to get a new answer object and work on it
                // a.resetRecordInstanceCounter();
                RecordInstance[ records = a.getRecordInstances();

                if (records.length &gt; 1){
                    throw new WdkModelException("NestedQuestion "
                            + nextNq.getName() + " returned more than one "
                            + "RecordInstance when called from "
                            + this.recordClass.getName());}
                if (records.length &gt; 0){
                    riMap.put(nextNq.getName(), records[0);}}}
        return riMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="o14e469b2c4ac476ba63502cbab1be4b7985" name="getNestedRecordInstanceLists" type="Map&lt;String, RecordInstance[]&gt;" type-id="Map&lt;String, RecordInstance[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{

        Question nql[ = this.recordClass.getNestedRecordListQuestions();
        Map&lt;String, RecordInstance[&gt; riListMap = new LinkedHashMap&lt;String, RecordInstance[&gt;();

        if (nql != null){
            for (int i = 0; i &lt; nql.length; i++){
                Question nextNql = nql[i;
                AnswerValue a = getNestedRecordAnswer(nextNql);
                RecordInstance[ records = a.getRecordInstances();
                if (records != null) riListMap.put(nextNql.getName(), records);}}
        return riListMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob91caaa2036b4ad797a062848b75fc9e985" name="getNestedRecordAnswer" type="AnswerValue" type-id="AnswerValue" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        Map&lt;String, String&gt; params = primaryKey.getValues();
        int pageStart = 1;
        int pageEnd = Utilities.MAXIMUM_RECORD_INSTANCES;
        Map&lt;String, Boolean&gt; sortingMap = question.getSortingAttributeMap();
        AnswerFilterInstance filter = question.getRecordClass().getDefaultFilter();
        // create an answer with maximium allowed rows
        return question.makeAnswerValue(user, params, pageStart, pageEnd,
                sortingMap, filter, 0);}

    // maybe change this to RecordInstance[][] for jspwrap purposes?
    /*
     * public Vector getNestedRecordListInstances() throws WdkModelException,
     * WdkUserException{ NestedRecordList nrLists[] =
     * this.recordClass.getNestedRecordLists(); Vector nrVector = new Vector();
     * if (nrLists != null){ for (int i = 0; i &lt; nrLists.length; i++){
     * NestedRecordList nextNrList = nrLists[i]; RecordInstance riList[] =
     * nextNrList.getRecordInstances(this); nrVector.add(riList); } } return
     * nrVector; }
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0b8f576a066f4b0bbc1f1043b726421f985" name="print" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{

        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer();

        Map&lt;String, AttributeValue&gt; attributeValues = getAttributeValueMap();

        Map&lt;String, AttributeValue&gt; summaryAttributeValues = new LinkedHashMap&lt;String, AttributeValue&gt;();
        Map&lt;String, AttributeValue&gt; nonSummaryAttributeValues = new LinkedHashMap&lt;String, AttributeValue&gt;();

        splitSummaryAttributeValue(attributeValues, summaryAttributeValues,
                nonSummaryAttributeValues);

        printAtts_Aux(buf, summaryAttributeValues);
        printAtts_Aux(buf, nonSummaryAttributeValues);

        Map&lt;String, TableValue&gt; tableValues = getTables();
        for (TableValue tableValue : tableValues.values()){
            String displayName = tableValue.getTableField().getDisplayName();
            buf.append(newline);
            buf.append("[Table]: " + displayName).append(newline);
            tableValue.write(buf);}

        buf.append(newline);
        buf.append("Nested Records belonging to this RecordInstance:" + newline);
        Map&lt;String, RecordInstance&gt; nestedRecords = getNestedRecordInstances();
        for (String nextRecordName : nestedRecords.keySet()){
            RecordInstance nextNr = nestedRecords.get(nextRecordName);
            buf.append("***" + nextRecordName + "***" + newline
                    + nextNr.printSummary() + newline);}

        buf.append("Nested Record Lists belonging to this RecordInstance:"
                + newline);

        Map&lt;String, RecordInstance[&gt; nestedRecordLists = getNestedRecordInstanceLists();
        for (String nextRecordListName : nestedRecordLists.keySet()){
            RecordInstance nextNrList[ = nestedRecordLists.get(nextRecordListName);
            buf.append("***" + nextRecordListName + "***" + newline);
            for (int i = 0; i &lt; nextNrList.length; i++){
                buf.append(nextNrList[i.printSummary() + newline);}}

        return buf.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="odd7896c3edf4433281f7518a4c33f392985" name="printSummary" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{

        StringBuffer buf = new StringBuffer();

        Map&lt;String, AttributeValue&gt; attributeValues = getAttributeValueMap();

        Map&lt;String, AttributeValue&gt; summaryAttributeValues = new LinkedHashMap&lt;String, AttributeValue&gt;();
        Map&lt;String, AttributeValue&gt; nonSummaryAttributeValues = new LinkedHashMap&lt;String, AttributeValue&gt;();

        splitSummaryAttributeValue(attributeValues, summaryAttributeValues,
                nonSummaryAttributeValues);

        printAtts_Aux(buf, summaryAttributeValues);
        return buf.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="od65badd8cc7a41ba97bf9b4eb729db28985" name="toXML" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        return toXML("");}</source-code>
          </source-codes>
        </operation>
        <operation id="oa06562e35592435c958d4e97e82f3c17985" name="toXML" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ident" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException, NoSuchAlgorithmException, SQLException,
            JSONException{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer();

        String rootStart = ident + "&lt;" + getRecordClass().getFullName() + "&gt;"
                + newline + ident + "&lt;li&gt;" + newline;
        String rootEnd = ident + "&lt;/li&gt;" + newline + ident + "&lt;/"
                + getRecordClass().getFullName() + "&gt;" + newline;
        ident = ident + "    ";
        buf.append(rootStart);

        Map&lt;String, AttributeValue&gt; attributeFields = getAttributeValueMap();
        for (String fieldName : attributeFields.keySet()){
            AttributeValue value = attributeFields.get(fieldName);
            AttributeField field = value.getAttributeField();
            buf.append(ident + "&lt;" + field.getName() + "&gt;" + value.getValue()
                    + "&lt;/" + field.getName() + "&gt;" + newline);}

        Map&lt;String, TableValue&gt; tableFields = getTables();
        for (String fieldName : tableFields.keySet()){
            buf.append(ident + "&lt;" + fieldName + "&gt;" + newline);

            TableValue tableValue = tableFields.get(fieldName);
            tableValue.toXML(buf, "li", ident);
            buf.append(ident + "&lt;/" + fieldName + "&gt;" + newline);}

        Map&lt;String, RecordInstance&gt; nestedRecords = getNestedRecordInstances();
        for (String nextRecordName : nestedRecords.keySet()){
            RecordInstance nextNr = nestedRecords.get(nextRecordName);
            buf.append(nextNr.toXML(ident));}

        Map&lt;String, RecordInstance[&gt; nestedRecordLists = getNestedRecordInstanceLists();
        for (String nextRecordListName : nestedRecordLists.keySet()){
            RecordInstance nextNrList[ = nestedRecordLists.get(nextRecordListName);
            for (int i = 0; i &lt; nextNrList.length; i++){
                buf.append(nextNrList[i.toXML(ident) + newline);}}

        buf.append(rootEnd);

        return buf.toString();}

    // /////////////////////////////////////////////////////////////////////////
    // package methods
    // /////////////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="od75b4d236af14891b21d56bb2fc7d8c8985" name="getSummaryAttributeNames" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; summaryFields = getAttributeFieldMap(FieldScope.NON_INTERNAL);
        String[ names = new String[summaryFields.size();
        summaryFields.keySet().toArray(names);
        return names;}</source-code>
          </source-codes>
        </operation>
        <operation id="o46aaa3335e804b44926014bf67ae926d985" name="getSummaryAttributeValueMap" type="Map&lt;String, AttributeValue&gt;" type-id="Map&lt;String, AttributeValue&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, SQLException,
            JSONException, WdkUserException{
        return getAttributeValueMap(FieldScope.NON_INTERNAL);}

    // /////////////////////////////////////////////////////////////////////////
    // protected methods
    // /////////////////////////////////////////////////////////////////////////

    /**
     * Given a map of all attributes in this recordInstance, separate them into
     * those that are summary attributes and those that are not summary
     * attributes. Place results into
     * 
     * @param summaryAttributes
     *            and
     * @param nonSummaryAttributes
     *            .
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o39babf5d24324a0da95ac074e1c04a62985" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="nonSummaryAttributes" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        for (String fieldName : attributes.keySet()){
            AttributeValue attribute = attributes.get(fieldName);
            if (attribute.getAttributeField().isInternal()){
                summaryAttributes.put(fieldName, attribute);} else{
                nonSummaryAttributes.put(fieldName, attribute);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o789d5183a1764d88b54ea1217b186ada985" name="printAtts_Aux" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="buf" type="StringBuffer" type-id="StringBuffer" default-value="" />
            <parameter id="" name="attributes" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, SQLException,
            JSONException, WdkUserException{
        String newline = System.getProperty("line.separator");
        for (String attributeName : attributes.keySet()){
            AttributeValue attribute = attributes.get(attributeName);
            buf.append(attribute.getAttributeField().getDisplayName());
            buf.append(":   " + attribute.getBriefDisplay());
            buf.append(newline);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di706289683434874876" cid="C255" type="class" name="Reference" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:24">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a3a61564dcb544a26872dca8c0f09e564121" name="setName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aaf64398cab804121aacf124711f677cd121" name="elementName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a63d8a1d289554908a77509d6ad0b15da121" name="twoPartName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa36913759c9c4aa2889c7f3e188f4e0d121" name="groupRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oc797a88c80bc4f378d4a39bbcd122495121" name="Reference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}

    /**
     * @param twoPartName Of the form "set.element"
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o810ec3eb7ece40848e9666312cf6b6f4121" name="Reference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="twoPartName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        setRef(twoPartName);}</source-code>
          </source-codes>
        </operation>
        <operation id="ocf6c057b6c834deb8a3ca4912eeb8ffb121" name="getSetName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.setName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8a2967ef8c134e2bb68bb4dae7ed9e4b121" name="getElementName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.elementName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3e13fcb29c314a528ebf77472b57b043121" name="getTwoPartName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return twoPartName;}
    
    /**
     * @param twoPartName Of the form "set.element"
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9f1baa3b5bd2493aa7289340d2cdbf75121" name="setRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="twoPartName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        
        if (twoPartName == null){
            throw new WdkModelException("Error: twoPartName is null");}
        if (!twoPartName.matches("\\S+\\.\\S+")){
            throw new WdkModelException("Error: Reference '" + twoPartName + "' is not in the form 'setName.elementName'");}
	    
        String[ parts = twoPartName.split("\\.");
        setName = parts[0;
        elementName = parts[1;
        this.twoPartName = twoPartName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o08e228ff8cd74ca99b1cbfad079062ac121" name="setGroupRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="groupRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        
        if (groupRef == null){
            throw new WdkModelException("Error: twoPartName is null");}
        if (!groupRef.matches("\\S+\\.\\S+")){
            throw new WdkModelException("Error: Group Reference '" + groupRef + "' is not in the form 'setName.elementName'");}
        
        this.groupRef = groupRef;}
    
    /**
     * @return the groupRef
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oeb3c3b8f8a994d9e89f88756dc402e95121" name="getGroupRef" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return groupRef;}</source-code>
          </source-codes>
        </operation>
        <operation id="od3c0d27677af479bb620faad8bdb1421121" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "Reference: "+twoPartName;}

    /* (non-Javadoc)
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oad4d7bd373934cf3a16bc1f83f98d195121" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // do nothing}

    /* (non-Javadoc)
     * @see org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of6c5c5743bba40059fc62d3ab0e33304121" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di318230204362045667" cid="C256" type="class" name="ReporterProperty" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:24">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a0233ca86b37943ee84c655ea9cbd8435184" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab82b4e54b785494aaf9f6c811fdd3b3e184" name="value" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o4407c2e5b5af4843bc5d6da8de8cf217184" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     *                the name to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o24032ab2f6ff4221bf0780467938538f184" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return the value
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6566cd0a0dfa465caef35c2c10e5aa47184" name="getValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.value;}

    /**
     * @param value
     *                the value to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc4dda18907534dddb3cc7f675b012c62184" name="setValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.value = value;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6e7984c1628b44f599f6abbd7388de77184" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o47ffdb8807a74c5689d666b462dcedce184" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di205294143613050544" cid="C257" type="class" name="ReporterRef" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:24">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2bedfd9d7eb240d5b9cc2256b85774df357" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aac368f1a26b74d4fbb9d3adb9c9f112e357" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7b11555516c447248ead39629e57d4d4357" name="implementation" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2df63e89993e41a8a7d31d8bbdd0f78a357" name="inReportMaker" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="ac16cc67eea894429b278f12407ea2e2e357" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o4fa367b7e2c845c3910220475d1bbaad357" name="getWdkModel" type="WdkModel" type-id="WdkModel" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel;}

    /**
     * @return the implementation
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6e2e415e6ee0415cba8402f5b0d34a5d357" name="getImplementation" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return implementation;}

    /**
     * @param implementation
     *            the implementation to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc762fe72016d41c58987ee6bb16bbdac358" name="setImplementation" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="implementation" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.implementation = implementation;}

    /**
     * @return the name
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5a086fab44924f609598eb8cda5ec647358" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     *            the name to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9b635a535ad6414ca03ef515db6f2afb358" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return the displayName
     */</source-code>
          </source-codes>
        </operation>
        <operation id="offe340b5d0db4befa2eb6b68eca6c229358" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayName;}

    /**
     * @param displayName
     *            the displayName to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o171b05f9bb364aaf8fc7bd009eaaf4d5358" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}

    /**
     * @return the inReportMaker
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9a78a1f885c84c8fb581143b76c289d6358" name="isInReportMaker" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return inReportMaker;}

    /**
     * @param inReportMaker
     *            the inReportMaker to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of468d41217744394983187aae12ea14b358" name="setInReportMaker" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="inReportMaker" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.inReportMaker = inReportMaker;}</source-code>
          </source-codes>
        </operation>
        <operation id="o104b9aa01e5a493594f3e1bbfcec8bcc358" name="addProperty" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="property" type="ReporterProperty" type-id="ReporterProperty" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.propertyList.add(property);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6402b4f839bd49318ea80f9ed59869b0358" name="getProperties" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, String&gt;(this.properties);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o469a7d71067a44e5b64d000ebbf53e0d358" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude properties
        for (ReporterProperty property : propertyList){
            if (property.include(projectId)){
                property.excludeResources(projectId);
                String propName = property.getName();
                String propValue = property.getValue();
                if (properties.containsKey(propName))
                    throw new WdkModelException("The property " + propName
                            + " is duplicated in reporter " + name);
                properties.put(propName, propValue);
                logger.trace("reporter property: [" + propName + "]='"
                        + propValue + "'");}}
        propertyList = null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8f7324a70d4c427db6ed30e68386a178358" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o05e00e6ce4a14d19a306fc1e11cffb6c358" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di248295428150003419" cid="C258" type="class" name="SearchCategory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:24">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a1e38e66894684d4aa1915cdb459d92ed664" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ace31ce5241294ab9bee0e7c7a8772cc8664" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab94b802585b543e9a6061728d23c0eed664" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a162888f47eda4373aa2137273ab7b967664" name="parentRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a67a2bae27eba4e1aab3686ada5b5a71e664" name="parent" type="SearchCategory" type-id="SearchCategory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a43f25911e0e849df90541a7e844fabcf664" name="usedBy" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abb10dd8966e546d2bc9cd4e0c8bdcf99664" name="children" type="Map&lt;String, SearchCategory&gt;" type-id="Map&lt;String, SearchCategory&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0a237554223e42a48f6c7d51cabadde8664" name="questionRefs" type="List&lt;CategoryQuestionRef&gt;" type-id="List&lt;CategoryQuestionRef&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="od0feba49cd654890a1fcc4044b1698f9664" name="SearchCategory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        questionRefs = new ArrayList&lt;CategoryQuestionRef&gt;();
        children = new LinkedHashMap&lt;String, SearchCategory&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="oe14371f9c40d4f45997cec0ed312a033664" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9fee0cd78ac54a1ba81812ff42ef9109664" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa170c8d0d0c74f09b761ddc28aed7580664" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o43ca84cb203e4d83a01433daf81db28e664" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4589ce1406d04a10b58cc867388e91bd664" name="addQuestionRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionRef" type="CategoryQuestionRef" type-id="CategoryQuestionRef" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.questionRefs.add(questionRef);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa6be0dd5a6b7431dbc46a5b73f6915f4664" name="getWebsiteQuestions" type="Question[]" type-id="Question[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return getQuestions(USED_BY_WEBSITE);}</source-code>
          </source-codes>
        </operation>
        <operation id="o61227672d7d34e8e99eb1b5043a910c2664" name="getWebserviceQuestions" type="Question[]" type-id="Question[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return getQuestions(USED_BY_WEBSERVICE);}</source-code>
          </source-codes>
        </operation>
        <operation id="o61ee9323050344c094c417f9f5767dcb664" name="getQuestions" type="Question[]" type-id="Question[]" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="usedBy" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        List&lt;Question&gt; questions = new ArrayList&lt;Question&gt;();
        for (CategoryQuestionRef questionRef : questionRefs){
            String qusedBy = questionRef.getUsedBy();
            if (usedBy == null || qusedBy == null
                    || qusedBy.equalsIgnoreCase(usedBy)){
                String ref = questionRef.getText();
                Question question = (Question) wdkModel.resolveReference(ref);
                questions.add(question);}}
        Question[ array = new Question[questions.size();
        questions.toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="of935076bb8f14ba9b9edb06be87f2f09664" name="setParentRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="parentRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.parentRef = parentRef;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3ebb4340b3c14a4489d2468d92e9488b664" name="getParent" type="SearchCategory" type-id="SearchCategory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return parent;}</source-code>
          </source-codes>
        </operation>
        <operation id="o683e308329f4481f86f47abe6544f447665" name="getWebsiteChildren" type="Map&lt;String, SearchCategory&gt;" type-id="Map&lt;String, SearchCategory&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getChildren(USED_BY_WEBSITE);}</source-code>
          </source-codes>
        </operation>
        <operation id="o323f7c088fb9497090de59586213a99b665" name="getWebserviceChildren" type="Map&lt;String, SearchCategory&gt;" type-id="Map&lt;String, SearchCategory&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getChildren(USED_BY_WEBSERVICE);}</source-code>
          </source-codes>
        </operation>
        <operation id="o5686f9815c1242899abfdc193d766555665" name="getChildren" type="Map&lt;String, SearchCategory&gt;" type-id="Map&lt;String, SearchCategory&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="usedBy" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, SearchCategory&gt; categories = new LinkedHashMap&lt;String, SearchCategory&gt;();
        for(SearchCategory child : children.values()){
            String cusedBy = child.getUsedBy();
            if (usedBy == null || cusedBy == null || cusedBy.equalsIgnoreCase(usedBy)){
                categories.put(child.getName(), child);}}
        return categories;}</source-code>
          </source-codes>
        </operation>
        <operation id="o74398f91d37c4cca8212ee6039a9c06c665" name="isAncesterOf" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="category" type="SearchCategory" type-id="SearchCategory" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        SearchCategory parent = category.parent;
        while (parent != null){
            if (parent.equals(this)) return true;
            parent = parent.parent;}
        return false;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o408fd54c3037481590d806ffd6ba191d665" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude questionRefs
        for (int i = questionRefs.size() -1; i &gt;=0; i--){
            CategoryQuestionRef ref = questionRefs.get(i);
            if (ref.include(projectId)){
                ref.excludeResources(projectId);} else{
                questionRefs.remove(i);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o863820e24507476b9824edd9037c545a665" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        this.wdkModel = wdkModel;
        // get the base recordClass
        for (int i = questionRefs.size() -1; i &gt;=0; i--){
            CategoryQuestionRef ref = questionRefs.get(i);
            String questionName = ref.getText().trim();
            try{
                wdkModel.resolveReference(questionName);} catch (WdkModelException ex){
                // relax a bit, just ignore the missing questions
                logger.debug("The question [" + questionName + "] is defined "
                        + "in category [" + name + "], but doesn't exist in "
                        + "the model.");
                questionRefs.remove(i);}}

        // resolve the parent
        SearchCategory parent = wdkModel.getCategories().get(parentRef);
        if (parent != null){
            // parent cannot be the same node as this one, or a child of it
            if (parent.equals(this) || this.isAncesterOf(parent))
                throw new WdkModelException("the category '" + name
                        + "' cannot have a parent of '" + parentRef + "'");
            this.parent = parent;
            this.parent.children.put(name, this);}}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2b9e2bb2d4c043b2b276f0808f8c2480665" name="equals" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obj" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (obj == null || !(obj instanceof SearchCategory)) return false;
        SearchCategory category = (SearchCategory) obj;
        return this.name.equalsIgnoreCase(category.name);}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#hashCode()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc15455d4bc7a4383a70a03eefba7200f665" name="hashCode" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.name.toLowerCase().hashCode();}</source-code>
          </source-codes>
        </operation>
        <operation id="o9c24e30280934d7aa8fa50353a0d0ba3665" name="isMultiCategory" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return children.size() &gt; 1;}</source-code>
          </source-codes>
        </operation>
        <operation id="o11076ef857174e04a74c5ad56fc057cc665" name="getUsedBy" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return usedBy;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe332bb2137e745a5a26f0dcca0fe66af665" name="setUsedBy" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="usedBy" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.usedBy = usedBy;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di785380985160935449" cid="C259" type="class" name="TableField" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:24">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ac04de72b9dd94824b8566b21e54a5ee6955" name="queryTwoPartName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac50337de3f00417d9c8dd6eca48a24fb955" name="query" type="Query" type-id="Query" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a12e1f82fc3b840aa8ae3342d5a610fb5955" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o851a3693486f44439cc67d4478bd6023955" name="getQuery" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return query;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8c5906fa528549e8b57a72c114a70a2e955" name="setQuery" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.query = query;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7df9e2f7aea54c9c959ee57fef6b3799955" name="setQueryRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.queryTwoPartName = queryRef;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocde5c2ce8ac54cd58ca6b625d1c263db955" name="addAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeField" type="AttributeField" type-id="AttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        attributeField.setRecordClass(recordClass);
        attributeField.setContainer(this);
        attributeFieldList.add(attributeField);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4f6d8510ceba454781d565db411e7019955" name="getQueryRef" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queryTwoPartName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o59dcfffaa905494292e4b16d90ce1d3f955" name="getAttributeFields" type="AttributeField[]" type-id="AttributeField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getAttributeFields(FieldScope.ALL);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe4222334eca849b7b2028a1eef123e7b955" name="getAttributeFields" type="AttributeField[]" type-id="AttributeField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; fieldMap = getAttributeFieldMap(scope);
        AttributeField[ array = new AttributeField[fieldMap.size();
        fieldMap.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c9e8881ad2149829066171405ccd985955" name="addDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.descriptions.add(description);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeFieldContainer#getAttributeFieldMap()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o835ab0d11666456cb611f2fe7eccdb38955" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getAttributeFieldMap(FieldScope.ALL);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8a566106daa848758b697be599a1c625955" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (description == null) ? "" : description;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8404932dcb1344eb9fd7b18e3409f768955" name="getAttributeFieldMap" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; map = new LinkedHashMap&lt;String, AttributeField&gt;();
        for (AttributeField field : attributeFieldMap.values()){
        	if (scope.isFieldInScope(field)){
                map.put(field.getName(), field);}}
        return map;}</source-code>
          </source-codes>
        </operation>
        <operation id="oeb8b1ea1b9984e67b079478c6f824ec9956" name="getAttributeField" type="AttributeField" type-id="AttributeField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fieldName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return attributeFieldMap.get(fieldName);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.Field#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o11cb34534e0b44c8a29b343103c14db8956" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (resolved) return;
        super.resolveReferences(wdkModel);
        
        // resolve Query
        Query query = (Query) wdkModel.resolveReference(queryTwoPartName);

        // validate the table query
        recordClass.validateBulkQuery(query);

        // prepare the query and add primary key params
        String[ paramNames = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        query = RecordClass.prepareQuery(wdkModel, query, paramNames);
        this.query = query;

        Column[ columns = query.getColumns();
        for (Column column : columns){
            AttributeField field = attributeFieldMap.get(column.getName());
            if (field != null &amp;&amp; field instanceof ColumnAttributeField){
                ((ColumnAttributeField) field).setColumn(column);} // else, it's okay to have unmatched columns}
        resolved = true;}

    /*
     * (non-Javadoc) Should never be called, but is necessary because TableField
     * implements FieldI.
     * 
     * @see org.gusdb.wdk.model.FieldI#getTruncateTo()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o90dff32d7d5f421a998262ed96ace6a5956" name="getTruncateTo" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        throw new RuntimeException("getTruncate does not apply to TableField");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0ac02fac94eb49b093f1161cdb315f30956" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);
        
        // exclude descriptions
        boolean hasDescription = false;
        for (WdkModelText description : descriptions){
            if (description.include(projectId)){
                if (hasDescription){
                    throw new WdkModelException("The table field " + name
                            + " of recordClass " + recordClass.getFullName()
                            + " has more than one description for project "
                            + projectId);} else{
                    this.description = description.getText();
                    hasDescription = true;}}}
        descriptions = null;

        // exclude attributes
        for (AttributeField field : attributeFieldList){
            if (field.include(projectId)){
                field.excludeResources(projectId);
                String fieldName = field.getName();
                if (attributeFieldMap.containsKey(fieldName))
                    throw new WdkModelException("The attributeField "
                            + fieldName + " is duplicated in table "
                            + this.name);
                attributeFieldMap.put(fieldName, field);}}
        attributeFieldList = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di608213288223983542" cid="C260" type="class" name="TextAttributeField" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:25">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a9aeed869bfa545b49f5387d4ec632d20906" name="texts" type="List&lt;WdkModelText&gt;" type-id="List&lt;WdkModelText&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad0bfe97a84f9438cb317b4d43d5aa2d3906" name="text" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a74b99c6b48c745a19ca72804f33c52ab906" name="displays" type="List&lt;WdkModelText&gt;" type-id="List&lt;WdkModelText&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6a16f0e7f87a48f5a9c62ea497ef77d3906" name="display" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oea94c1891cad4ae9bbd0e3f51a010ccf906" name="TextAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        texts = new ArrayList&lt;WdkModelText&gt;();
        displays = new ArrayList&lt;WdkModelText&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="o0f8dd86ce4834bc3afd5c9ea53609138906" name="addText" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="text" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.texts.add(text);}</source-code>
          </source-codes>
        </operation>
        <operation id="of506b26a834d41d191c2ec225ecd4cdf906" name="getText" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return text;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6bc922c8ca9e45dc876e3ca8be20fde9906" name="addDisplay" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="display" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displays.add(display);}</source-code>
          </source-codes>
        </operation>
        <operation id="o246c66a2f13c43bb99ad9e590f769d7b906" name="getDisplay" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (display != null) ? display : text;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe65545015b1a41449994413d1afcbd81906" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        String rcName = (recordClass == null) ? ""
                : (recordClass.getFullName() + ".");

        // exclude texts
        boolean hasText = false;
        for (WdkModelText text : texts){
            if (text.include(projectId)){
                if (hasText){
                    throw new WdkModelException("The textAttribute " + rcName
                            + getName() + " has more than one &lt;text&gt; for "
                            + "project " + projectId);} else{
                    this.text = text.getText();
                    hasText = true;}}}
        // check if all texts are excluded
        if (this.text == null)
            throw new WdkModelException("The text attribute " + rcName
                    + getName() + " does not have a &lt;text&gt; tag for project "
                    + projectId);
        texts = null;

        // exclude display, display is optional
        boolean hasDisplay = false;
        for (WdkModelText display : displays){
            if (display.include(projectId)){
                if (hasDisplay){
                    throw new WdkModelException("The textAttribute " + rcName
                            + getName() + " has more than one &lt;display&gt; for "
                            + "project " + projectId);} else{
                    this.display = display.getText();
                    hasDisplay = true;}}}
        displays = null;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeField#getDependents()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0159bc24222847e19d5f5c1ac740e85c906" name="getDependents" type="Collection&lt;AttributeField&gt;" type-id="Collection&lt;AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        String content = text;
        if (display != null) content += "\n" + display;
        return parseFields(content).values();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di196583758920207168" cid="C261" type="class" name="TextAttributeValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:26">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a3268595a859a4fd1aaf4174cdf55fec534" name="container" type="AttributeValueContainer" type-id="AttributeValueContainer" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a51aa14790f0e4465bee9844d1e80f6e034" name="field" type="TextAttributeField" type-id="TextAttributeField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a853f471b4bbe4f738135fde58ed8cbc734" name="text" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7b2824418a58427a8b313bf651b1063334" name="display" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o63b3066c23e5406c87aacc05fbbf78ee34" name="TextAttributeValue" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="TextAttributeField" type-id="TextAttributeField" default-value="" />
            <parameter id="" name="container" type="AttributeValueContainer" type-id="AttributeValueContainer" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(field);
        this.field = field;
        this.container = container;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeValue#getValue()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6f055fce52a846049ee14c5be75020f334" name="getValue" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        if (this.text == null){
            String text = field.getText();
            Map&lt;String, AttributeField&gt; subFields = field.parseFields(text);
            Map&lt;String, Object&gt; values = new LinkedHashMap&lt;String, Object&gt;();
            for (String subField : subFields.keySet()){
                AttributeValue value = container.getAttributeValue(subField);
                Object object = value.getValue();
                values.put(subField, (object == null) ? "" : object.toString());}
            this.text = Utilities.replaceMacros(text, values);}
        return this.text;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7486c02ec7794cd6a17a674521ab652234" name="getDisplay" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        if (this.display == null){
            String content = field.getDisplay();
            Map&lt;String, AttributeField&gt; subFields = field.parseFields(content);
            Map&lt;String, Object&gt; values = new LinkedHashMap&lt;String, Object&gt;();
            for (String subField : subFields.keySet()){
                AttributeValue value = container.getAttributeValue(subField);
                Object object = value.getValue();
                values.put(subField, (object == null) ? "" : object.toString());}
            this.display = Utilities.replaceMacros(content, values);}
        return this.display;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di313902532412798213" cid="C262" type="class" name="TreeNode" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:26">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2f0bb1b77f9e4f2c911ebac23cb1e1fb359" name="_openByDefault" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="ab7da361a656947b4a73b29af6e330d89359" name="_name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aeb87e7e6d28c4cacaee2aa2139e00fde359" name="_displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a921421a6198248d7a24c6dc09f959aa1359" name="_help" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o174fb4f1ece44676949fbe205f505ec8359" name="TreeNode" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		this(name, displayName, "");}</source-code>
          </source-codes>
        </operation>
        <operation id="oc0767f2dd08542ff93c257cc3d251e4c359" name="TreeNode" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String help){
		_name = name;
		_displayName = displayName;
		_help = help;
		for (int i = 0; i &lt; _booleanFields.length; i++){
			_booleanFields[i = false;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o43f30759e8454a45aca4b0866066f96e359" name="setOpenByDefault" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="openByDefault" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		_openByDefault = openByDefault;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob3c474a6cba745f1a7196bdbbf47bae4359" name="getOpenByDefault" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _openByDefault;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9e39ac2fda454d17aba8b4fc1c4ac52d359" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _name;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofcb717e289644f16a6b4df7769aa7d1e359" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="obbedc12a9cae4855882f16ed2d8bfdce359" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _help;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6ccf6277076442a7aa6516c55608ea80359" name="getIsLeaf" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _childNodes.isEmpty();}</source-code>
          </source-codes>
        </operation>
        <operation id="o155c9810103a44ce998d6dac6040b3a7359" name="addChildNode" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="child" type="TreeNode" type-id="TreeNode" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		_childNodes.add(child);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa098ab9605fb404987e99e0d4da7ebed359" name="getChildNodes" type="List&lt;TreeNode&gt;" type-id="List&lt;TreeNode&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _childNodes;}</source-code>
          </source-codes>
        </operation>
        <operation id="o90a124a14bd243c1ac07f6d140ed83f5359" name="getNonLeafNodes" type="List&lt;TreeNode&gt;" type-id="List&lt;TreeNode&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return getByIfLeaf(false);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8ad1d83098c043b884706b8c4b5fc734359" name="getLeafNodes" type="List&lt;TreeNode&gt;" type-id="List&lt;TreeNode&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return getByIfLeaf(true);}</source-code>
          </source-codes>
        </operation>
        <operation id="o66b0953aa5164bb783f37c22ec0ec518359" name="getByIfLeaf" type="List&lt;TreeNode&gt;" type-id="List&lt;TreeNode&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ifLeaf" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		List&lt;TreeNode&gt; nodes = new ArrayList&lt;TreeNode&gt;();
		for (TreeNode node : _childNodes){
			if (node.getIsLeaf() == ifLeaf){
				nodes.add(node);}}
		return nodes;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c4d177ae88c4eceaacfedc7917f62b4359" name="setSelected" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isSelected" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		_booleanFields[BoolField.SELECTED.ordinal() = isSelected;}</source-code>
          </source-codes>
        </operation>
        <operation id="o697eddbf431140db8a7f93a663a10544359" name="getSelected" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _booleanFields[BoolField.SELECTED.ordinal();}</source-code>
          </source-codes>
        </operation>
        <operation id="o561d9fef172245c08a5b9f29776764f8360" name="setIsDefault" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isDefault" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		_booleanFields[BoolField.DEFAULT.ordinal() = isDefault;}</source-code>
          </source-codes>
        </operation>
        <operation id="of2ed66a000bd4ba1b397b2d61d1fa611360" name="getIsDefault" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _booleanFields[BoolField.DEFAULT.ordinal();}</source-code>
          </source-codes>
        </operation>
        <operation id="od99eeda3664c45cb994de461fc60f8bd360" name="setBoolField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fieldId" type="BoolField" type-id="BoolField" default-value="" />
            <parameter id="" name="value" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		_booleanFields[fieldId.ordinal() = value;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8df6dcfe36534ffc8294da114779b943360" name="getBoolField" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fieldId" type="BoolField" type-id="BoolField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _booleanFields[fieldId.ordinal();}</source-code>
          </source-codes>
        </operation>
        <operation id="o36a96602f6424ad98aefa23d5f85677f360" name="turnOnSelectedLeaves" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="names" type="String..." type-id="String..." default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		setBooleansToTrue(BoolField.SELECTED, Arrays.asList(names));}</source-code>
          </source-codes>
        </operation>
        <operation id="of56a3282ed864e7fac44839cce832b1d360" name="turnOnSelectedLeaves" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="selectedList" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		setBooleansToTrue(BoolField.SELECTED, selectedList);}</source-code>
          </source-codes>
        </operation>
        <operation id="oca7ff34a2e8d4ab3b65b63d8c043c6f0360" name="turnOnAllLeaves" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		setAllBooleansToTrue(BoolField.SELECTED);}</source-code>
          </source-codes>
        </operation>
        <operation id="o516d4f45cae74ce29995fbc6104e4279360" name="getSelectedAsList" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return getNamesOfLeavesWithBoolean(BoolField.SELECTED, true);}
	
	public void setDefaultLeaves(String...names){
		setBooleansToTrue(BoolField.DEFAULT, Arrays.asList(names));}</source-code>
          </source-codes>
        </operation>
        <operation id="o6b6c64ab7f8444faa3d9c70b66651818360" name="setDefaultLeaves" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="defaultList" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		setBooleansToTrue(BoolField.DEFAULT, defaultList);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4e271d9d68b54f909a710d5dd002f9c4360" name="setAllOnAsDefault" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		setAllBooleansToTrue(BoolField.DEFAULT);}</source-code>
          </source-codes>
        </operation>
        <operation id="odffd5709e2b144b6990e051a30b4a5c1360" name="getDefaultAsList" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return getNamesOfLeavesWithBoolean(BoolField.DEFAULT, true);}</source-code>
          </source-codes>
        </operation>
        <operation id="o263946c1982544a1990c7397926b9f01360" name="setBooleansToTrue" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fieldId" type="BoolField" type-id="BoolField" default-value="" />
            <parameter id="" name="names" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		for (TreeNode node : _childNodes){
			if (node.getIsLeaf()){
				if (names.contains(node.getName())){
					node.setBoolField(fieldId, true);}}
			else{
				node.setBooleansToTrue(fieldId, names);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o7702b410597742028c7b51b652a3095b360" name="setAllBooleansToTrue" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fieldId" type="BoolField" type-id="BoolField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		for (TreeNode node : _childNodes){
			if (node.getIsLeaf()){
				node.setBoolField(fieldId, true);}
			else{
				node.setAllBooleansToTrue(fieldId);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5285c3211ceb436c878bb59268cd524e360" name="getNamesOfLeavesWithBoolean" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fieldId" type="BoolField" type-id="BoolField" default-value="" />
            <parameter id="" name="value" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		StringBuilder str = new StringBuilder();
		for (TreeNode node : _childNodes){
			if (node.getIsLeaf()){
				if (node.getBoolField(fieldId) == value){
					str.append(",'").append(node.getName().replace("'", "\\'")).append("'");}}
			else{
				String namesFromChild = node.getNamesOfLeavesWithBoolean(fieldId, value);
				if (namesFromChild.length() &gt; 0){
					str.append(",").append(namesFromChild);}}}
		String all = str.toString();
		if (all.length() &gt; 0){
			return all.substring(1, all.length());}
		return all;}</source-code>
          </source-codes>
        </operation>
        <operation id="o40db938881994488819029cbe585defa360" name="getIsAllSelected" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		for (TreeNode node : _childNodes){
			if (node.getIsLeaf()){
				if (!node.getSelected()){
					return false;}}
			else{
				if (!node.getIsAllSelected()){
					return false;}}}
		return true;}
	
	@Override</source-code>
          </source-codes>
        </operation>
        <operation id="o593f6e2bb21f4b54becc5d92018e3397360" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		if (getIsLeaf()){
			return leafToString();}
		return toString("");}</source-code>
          </source-codes>
        </operation>
        <operation id="oc6ae3f347d7d42aeb03a9399e93a4bf1360" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="indentation" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		String IND = indentation;
		String NL = System.getProperty("line.separator");
		StringBuilder str = new StringBuilder()
			.append(IND).append("TreeNode {").append(NL)
			.append(IND).append("  Name: ").append(_name).append(NL)
			.append(IND).append("  DisplayName: ").append(_displayName).append(NL)
			.append(IND).append("  Leaves:").append(NL);
		for (TreeNode node : _childNodes){
			if (node.getIsLeaf()){
				str.append(IND).append("    ").append(node).append(NL);}}
		str.append(IND).append("  Children {").append(NL);
		for (TreeNode child : _childNodes){
			if (!child.getIsLeaf()){
				str.append(child.toString(IND + "    "));}}
		str.append(IND).append("  }").append(NL)
		   .append(IND).append("}").append(NL);
		return str.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="ob05bba3f81c7471b8b769322fb71e01f360" name="leafToString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		StringBuilder str = new StringBuilder()
			.append("Leaf { name: \"").append(_name)
			.append("\", displayName: \"").append(_displayName)
			.append("\", help: ").append(_help == null ? "null" : _help.length() + " chars")
			.append(", bools: ");
		boolean first = true;
		for (BoolField field : BoolField.values()){
			str.append(first ? "{ " : ", "); first = false;
			str.append(field.name().toLowerCase()).append(": ").append(_booleanFields[field.ordinal());}
		str.append(" } }");
		return str.toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di827445554714885895" cid="C263" type="class" name="Utilities" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:26">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="oc591feb7ee264fdca3cee03e264dd6ef966" name="encrypt" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="data" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return encrypt(data, false);}</source-code>
          </source-codes>
        </operation>
        <operation id="o247bd67db6db4520b9209433b25dad39966" name="encrypt" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="data" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="shortDigest" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        // cannot encrypt null value
        if (data == null || data.length() == 0)
            throw new WdkModelException("Cannot encrypt an empty/null string");
        
        byte[ byteBuffer = getEncryptedBytes(data.toString());
        if (shortDigest){
            // just take the first 8 bytes from MD5 hash
            int size = Math.min(byteBuffer.length, 8);
            byte[ newBuffer = new byte[size;
            System.arraycopy(byteBuffer, 0, newBuffer, 0, newBuffer.length);
            byteBuffer = newBuffer;}
        // convert each byte into hex format
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i &lt; byteBuffer.length; i++){
            int code = (byteBuffer[i &amp; 0xFF);
            if (code &lt; 0x10) buffer.append('0');
            buffer.append(Integer.toHexString(code));}
        return buffer.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="oe55c3805685841a8901f37f15655b418966" name="getEncryptedBytes" type="byte[]" type-id="byte[]" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="str" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	try{
    		MessageDigest digest = MessageDigest.getInstance(ALGORITHM);
    		return digest.digest(str.getBytes());}
    	catch (NoSuchAlgorithmException e){
			throw new WdkRuntimeException("Unable to initialize MessageDigest with algorithm " + ALGORITHM, e);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o4a41e405051e403b948d7977586f0c33966" name="replaceMacros" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="text" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="tokens" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        for (String token : tokens.keySet()){
            Object object = tokens.get(token);
            String value = (object == null) ? "" : object.toString();
            String macro = Pattern.quote("$$" + token + "$$");
            text = text.replaceAll(macro, value);}
        return text;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5f4b5f0f3bda423f8d62108317ad49a8966" name="toArray" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="data" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (data == null || data.length() == 0){
            String[ values = new String[0;
            return values;}
        data = data.replace(',', ' ');
        data = data.replace(';', ' ');
        data = data.replace('\t', ' ');
        data = data.replace('\n', ' ');
        data = data.replace('\r', ' ');
        return data.trim().split("\\s+");}</source-code>
          </source-codes>
        </operation>
        <operation id="o79fa08be52834c2a96e55f3a280235a2966" name="fromArray" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="data" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return fromArray(data, ",");}</source-code>
          </source-codes>
        </operation>
        <operation id="o8aef6749c8534b94aad2aca81661e9b4966" name="fromArray" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="data" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="delimiter" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (data == null) return null;
        StringBuffer sb = new StringBuffer();
        for (String value : data){
            if (sb.length() &gt; 0) sb.append(delimiter);
            sb.append(value);}
        return sb.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o4e7bd1f5bc874fbf8ff2ad9a56c22702966" name="parseValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="objValue" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	if (objValue == null) return null;
    	if (objValue instanceof Clob){
    		return parseClob((Clob)objValue);}
    	return objValue.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5850bf5887b14d43be9d036e4aaa7e27966" name="parseClob" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="clobValue" type="Clob" type-id="Clob" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	try{
    		return clobValue.getSubString(1, (int)clobValue.length());}
    	catch (SQLException e){
    		throw new WdkRuntimeException("Error while reading Clob", e);}}
    
    public static String[][]</source-code>
          </source-codes>
        </operation>
        <operation id="o2d8f44937deb4d1cbb2e36e1232e9cbf966" name="convertContent" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="content" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        JSONArray jsResult = new JSONArray(content);
        JSONArray jsRow = (JSONArray) jsResult.get(0);
        String[[ result = new String[jsResult.length()[jsRow.length();
        for (int row = 0; row &lt; result.length; row++){
            jsRow = (JSONArray) jsResult.get(row);
            for (int col = 0; col &lt; result[row.length; col++){
                Object cell = jsRow.get(col);
                result[row[col = (cell == null || cell == JSONObject.NULL) ? null
                        : cell.toString();}}
        return result;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0d9ea12347d94195aeae843f62d30b29967" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="subject" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="content" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException{
        String smtpServer = wdkModel.getModelConfig().getSmtpServer();

        logger.debug("Sending message to: " + email + ", reply: " + reply
                + ", using SMPT: " + smtpServer);

        // create properties and get the session
        Properties props = new Properties();
        props.put("mail.smtp.host", smtpServer);
        props.put("mail.debug", "true");
        Session session = Session.getInstance(props);

        // instantiate a message
        Message message = new MimeMessage(session);
        try{
            message.setFrom(new InternetAddress(reply));
            message.setReplyTo(new Address[{ new InternetAddress(reply)});
            message.setRecipient(Message.RecipientType.TO, new InternetAddress(
                    email));
            message.setSubject(subject);
            message.setSentDate(new Date());
            // set html content
            message.setDataHandler(new DataHandler(new HTMLDataSource(content)));

            // send email
            Transport.send(message);} catch (AddressException ex){
            throw new WdkUserException(ex);} catch (MessagingException ex){
            throw new WdkModelException(ex);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o8c1d5d812e264529b5aeb158251db0e9967" name="readFile" type="byte[]" type-id="byte[]" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        byte[ buffer = new byte[(int) file.length();
        InputStream stream = new FileInputStream(file);
        stream.read(buffer, 0, buffer.length);
        stream.close();
        return buffer;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di540687436327668413" cid="C264" type="class" name="HTMLDataSource" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:26">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a8f6c3da43f19402ca48ad5856578de87965" name="html" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ofe9750794ad5472d9114dae9bc1a912c965" name="HTMLDataSource" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="htmlString" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            html = htmlString;}

        // Return html string in an InputStream.
        // A new stream must be returned each time.</source-code>
          </source-codes>
        </operation>
        <operation id="ocebe7f715053408b893b864726243abc965" name="getInputStream" type="InputStream" type-id="InputStream" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws IOException{
            if (html == null) throw new IOException("Null HTML");
            return new ByteArrayInputStream(html.getBytes());}</source-code>
          </source-codes>
        </operation>
        <operation id="o6c5ad7e5a7e540a795f40c42fd18169f966" name="getOutputStream" type="OutputStream" type-id="OutputStream" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws IOException{
            throw new IOException("This DataHandler cannot write HTML");}</source-code>
          </source-codes>
        </operation>
        <operation id="o16fd4454173d4d5583d7484046f670bf966" name="getContentType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return "text/html";}</source-code>
          </source-codes>
        </operation>
        <operation id="obd7a3b455b06484da4ce1ff840ab9a52966" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return "JAF text/html dataSource to send e-mail only";}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di307102424634614777" cid="C265" type="class" name="WdkException" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:27">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o89b08ebdfe2a4b66830b2198b1f7a7a539" name="WdkException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();}</source-code>
          </source-codes>
        </operation>
        <operation id="odbf08212e4704b55b8a9166f13fd6a3639" name="WdkException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg);}</source-code>
          </source-codes>
        </operation>
        <operation id="o57027781410e476988b28f6210c5ce2a39" name="WdkException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg, cause);}</source-code>
          </source-codes>
        </operation>
        <operation id="o02b50550e81941c0a5af95e9369d0e6f40" name="WdkException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(cause.getMessage(), cause);}

    /**
     * @return A default formatting of contained errors
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofd39005be34c45c680ec600c4679b6d940" name="formatErrors" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer(newline);
        String message = super.getMessage();

        if (message != null){
            // add project header
            if (modelName != null){
                String prefix = "[" + modelName + "] ";
                if (!message.trim().startsWith(prefix)) buf.append(prefix);}

            buf.append(message + newline);}
        return buf.toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di403513675669368114" cid="C266" type="class" name="WdkModel" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5dc89ff0682d4c1ebe052cbb41642142622" name="gusHome" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0c915fb11238422082752f61fd4df36c622" name="modelConfig" type="ModelConfig" type-id="ModelConfig" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0bbb1159dbf045b783356da60567d4f8622" name="projectId" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a290e59f1369a4b35af309ba092e5e2ea622" name="platform" type="DBPlatform" type-id="DBPlatform" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae74247b29b964a16a69e95b29e182958622" name="userPlatform" type="DBPlatform" type-id="DBPlatform" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="afc6a65571ce644c2a06ac5fd18c7fe44622" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aefe60f6dd4de4c98a130fdb989063602622" name="version" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac477081dcea94604a7fc27a6de72db53622" name="releaseDate" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8cc4357656c04a55a9ac026598600cd6622" name="introduction" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae513dbd53b034ae080e324dee89f1b65622" name="resultFactory" type="ResultFactory" type-id="ResultFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4486252359d742e1bb77a921051188fe622" name="answerFactory" type="AnswerFactory" type-id="AnswerFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a65cff2eabde54c65bb0e7c3ce5e4dd0d622" name="properties" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9d6b8a24fe1648ac9b3afe1bf3fca1a7622" name="xmlSchemaURL" type="URL" type-id="URL" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a91a8e285fdf340088fbf47ea457e755e622" name="xmlDataDir" type="File" type-id="File" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5f7da23170354890ab6cd44ed1e3a7b2622" name="userFactory" type="UserFactory" type-id="UserFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a44b2f57a6353407a9d0f123399ef4f40622" name="stepFactory" type="StepFactory" type-id="StepFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae48f34878bad419da70e16c1367766c8622" name="datasetFactory" type="DatasetFactory" type-id="DatasetFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad7088e1be6184b339ee9fd210462b98d622" name="queryFactory" type="QueryFactory" type-id="QueryFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="acf182f2b68984cb5acd40aa3f6bd44ad622" name="basketFactory" type="BasketFactory" type-id="BasketFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="afac58716fb6b40aab5ff326e1b8fd685622" name="favoriteFactory" type="FavoriteFactory" type-id="FavoriteFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a74a04b52c725401db9cf3fdd303b32d6622" name="secretKey" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abe35d89211794b9bb62889be2820e2b7622" name="systemUser" type="User" type-id="User" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa0111db8df8b4aa6a8efa31862753f95622" name="buildNumber" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o8e603eda2cf04d41ab297d9d2d5311e3622" name="construct" type="WdkModel" type-id="WdkModel" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="gusHome" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        StackTraceElement[ stackTrace = new Throwable().getStackTrace();
        int index = stackTrace.length - 1;
        String tip = "";
        if (index &gt;= 0) tip = "called by " + stackTrace[index.getClassName();
        logger.debug("Constructing wdk model [" + projectId + "] (GUS_HOME="
                + gusHome + "); " + tip);

        try{
            ModelXmlParser parser = new ModelXmlParser(gusHome);
            WdkModel wdkModel = parser.parseModel(projectId);

            logger.debug("Model ready to use.");
            return wdkModel;} catch (Exception ex){
            ex.printStackTrace();
            throw new WdkModelException(ex);}}

    private List&lt;QuerySet&gt; querySetList = new ArrayList&lt;QuerySet&gt;();
    private Map&lt;String, QuerySet&gt; querySets = new LinkedHashMap&lt;String, QuerySet&gt;();

    private List&lt;ParamSet&gt; paramSetList = new ArrayList&lt;ParamSet&gt;();
    private Map&lt;String, ParamSet&gt; paramSets = new LinkedHashMap&lt;String, ParamSet&gt;();

    private List&lt;RecordClassSet&gt; recordClassSetList = new ArrayList&lt;RecordClassSet&gt;();
    private Map&lt;String, RecordClassSet&gt; recordClassSets = new LinkedHashMap&lt;String, RecordClassSet&gt;();

    private List&lt;QuestionSet&gt; questionSetList = new ArrayList&lt;QuestionSet&gt;();
    private Map&lt;String, QuestionSet&gt; questionSets = new LinkedHashMap&lt;String, QuestionSet&gt;();

    private Map&lt;String, ModelSetI&gt; allModelSets = new LinkedHashMap&lt;String, ModelSetI&gt;();

    private List&lt;GroupSet&gt; groupSetList = new ArrayList&lt;GroupSet&gt;();
    private Map&lt;String, GroupSet&gt; groupSets = new LinkedHashMap&lt;String, GroupSet&gt;();

    private List&lt;XmlQuestionSet&gt; xmlQuestionSetList = new ArrayList&lt;XmlQuestionSet&gt;();
    private Map&lt;String, XmlQuestionSet&gt; xmlQuestionSets = new LinkedHashMap&lt;String, XmlQuestionSet&gt;();

    private List&lt;XmlRecordClassSet&gt; xmlRecordClassSetList = new ArrayList&lt;XmlRecordClassSet&gt;();
    private Map&lt;String, XmlRecordClassSet&gt; xmlRecordClassSets = new LinkedHashMap&lt;String, XmlRecordClassSet&gt;();

    private List&lt;WdkModelName&gt; wdkModelNames = new ArrayList&lt;WdkModelName&gt;(); // use default version

    private List&lt;WdkModelText&gt; introductions = new ArrayList&lt;WdkModelText&gt;();

    private List&lt;MacroDeclaration&gt; macroList = new ArrayList&lt;MacroDeclaration&gt;();
    private Set&lt;String&gt; modelMacroSet = new LinkedHashSet&lt;String&gt;();
    private Set&lt;String&gt; jspMacroSet = new LinkedHashSet&lt;String&gt;();
    private Set&lt;String&gt; perlMacroSet = new LinkedHashSet&lt;String&gt;();

    /**
     * xmlSchemaURL is used by the XmlQuestions. This is the only place where
     * XmlQuestion can find it.
     */

    private List&lt;PropertyList&gt; defaultPropertyLists = new ArrayList&lt;PropertyList&gt;();
    private Map&lt;String, String[]&gt; defaultPropertyListMap = new LinkedHashMap&lt;String, String[]&gt;();

    private List&lt;SearchCategory&gt; categoryList = new ArrayList&lt;SearchCategory&gt;();
    private Map&lt;String, SearchCategory&gt; categoryMap = new LinkedHashMap&lt;String, SearchCategory&gt;();
    private Map&lt;String, SearchCategory&gt; rootCategoryMap = new LinkedHashMap&lt;String, SearchCategory&gt;();

    /**
     * @param initRecordClassList
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o98dc962891904d9e90e00788591ab9b7622" name="getQuestion" type="Question" type-id="Question" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionFullName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        Reference r = new Reference(questionFullName);
        QuestionSet ss = getQuestionSet(r.getSetName());
        return ss.getQuestion(r.getElementName());}</source-code>
          </source-codes>
        </operation>
        <operation id="ob6f297a412894c6fa52f603f5d955e4c623" name="getQuestions" type="Question[]" type-id="Question[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String rcName = recordClass.getFullName();
        List&lt;Question&gt; questions = new ArrayList&lt;Question&gt;();
        for (QuestionSet questionSet : questionSets.values()){
            for (Question question : questionSet.getQuestions()){
                if (question.getRecordClass().getFullName().equals(rcName))
                    questions.add(question);}}
        Question[ array = new Question[questions.size();
        questions.toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="od1f13a6cbc49418faded68f62c3d6334623" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassReference" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        Reference r = new Reference(recordClassReference);
        RecordClassSet rs = getRecordClassSet(r.getSetName());
        return rs.getRecordClass(r.getElementName());}</source-code>
          </source-codes>
        </operation>
        <operation id="o6631d5f68c154eeb9058a65d99be7d48623" name="getResultFactory" type="ResultFactory" type-id="ResultFactory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return resultFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="o07bd4556f8a24b659b0c6e677bc63e27623" name="addWdkModelName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModelName" type="WdkModelName" type-id="WdkModelName" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModelNames.add(wdkModelName);}

    /**
     * @return Returns the version.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob2d27743358044db91d7fe241c0ae9ed623" name="getVersion" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return version;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofe02d19e3cd242d19e98ad24140916d0623" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayName;}</source-code>
          </source-codes>
        </operation>
        <operation id="od8da0993c4b9473fbaec419e7d14898f623" name="addIntroduction" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="introduction" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        introductions.add(introduction);}</source-code>
          </source-codes>
        </operation>
        <operation id="o1f6ee7237b7a434cb642e42d716632f7623" name="getIntroduction" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return introduction;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa62e4be2f90648f8904f5bda57b94d31623" name="getProperties" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return properties;}</source-code>
          </source-codes>
        </operation>
        <operation id="o228baa50af034c00b58eccdc6b80464e623" name="setProperties" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="properties" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="replacedMacros" type="Set" type-id="Set" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // make sure all the declared model macros are present
        for (String macro : modelMacroSet){
            // macro not provided, error
            if (!properties.containsKey(macro))
                throw new WdkModelException("Required model macro '" + macro
                        + "' is not defined in the model.prop file");
            // macro provided but not used, warning, but not error
            if (!replacedMacros.contains(macro))
                logger.warn("The model macro '" + macro + "' is never used in"
                        + " the model xml files.");}
        // make sure all the declared jsp macros are present
        for (String macro : jspMacroSet){
            if (!properties.containsKey(macro))
                throw new WdkModelException("Required jsp macro '" + macro
                        + "' is not defined in the model.prop file");}
        // make sure all the declared perl macros are present
        for (String macro : perlMacroSet){
            if (!properties.containsKey(macro))
                throw new WdkModelException("Required perl macro '" + macro
                        + "' is not defined in the model.prop file");}
        this.properties = properties;}

    // RecordClass Sets</source-code>
          </source-codes>
        </operation>
        <operation id="oc904218e5be645b6be74346a3ac1c0f8623" name="getRecordClassSet" type="RecordClassSet" type-id="RecordClassSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassSetName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{

        if (!recordClassSets.containsKey(recordClassSetName)){
            String err = "WDK Model " + projectId
                    + " does not contain a recordClass set with name "
                    + recordClassSetName;

            throw new WdkModelException(err);}
        return (RecordClassSet) recordClassSets.get(recordClassSetName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o469d8d4b0ed6417e8050279f4cda7011623" name="getAllRecordClassSets" type="RecordClassSet[]" type-id="RecordClassSet[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        RecordClassSet sets[ = new RecordClassSet[recordClassSets.size();
        recordClassSets.values().toArray(sets);
        return sets;}

    // Query Sets</source-code>
          </source-codes>
        </operation>
        <operation id="o582431403b1b4c4e8149268d95d20616623" name="getQuerySet" type="QuerySet" type-id="QuerySet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="setName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (!querySets.containsKey(setName)){
            String err = "WDK Model " + projectId
                    + " does not contain a query set with name " + setName;
            throw new WdkModelException(err);}
        return (QuerySet) querySets.get(setName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6a4c1b774cd94b5eb5daf450a2ce4866623" name="hasQuerySet" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="setName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return querySets.containsKey(setName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o1246d573a1f14703a64679d0fdb2613c623" name="getAllQuerySets" type="QuerySet[]" type-id="QuerySet[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        QuerySet sets[ = new QuerySet[querySets.size();
        querySets.values().toArray(sets);
        return sets;}</source-code>
          </source-codes>
        </operation>
        <operation id="o98d38286a0b4482d989a858b72094188623" name="getAllQuestionSets" type="QuestionSet[]" type-id="QuestionSet[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        QuestionSet sets[ = new QuestionSet[questionSets.size();
        questionSets.values().toArray(sets);
        return sets;}

    // Question Sets</source-code>
          </source-codes>
        </operation>
        <operation id="ocf9c3d1bdf0a4a6696e94c341120db84623" name="getQuestionSet" type="QuestionSet" type-id="QuestionSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="setName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (!questionSets.containsKey(setName)){
            String err = "WDK Model " + projectId
                    + " does not contain a Question set with name " + setName;
            throw new WdkModelException(err);}
        return (QuestionSet) questionSets.get(setName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o971e9fb5dabe43bcad36d2ad2674f69b623" name="hasQuestionSet" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="setName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionSets.containsKey(setName);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe7f8a32474df4fc19a483f74f113538f623" name="getQuestionSets" type="Map&lt;String, QuestionSet&gt;" type-id="Map&lt;String, QuestionSet&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, QuestionSet&gt; sets = new LinkedHashMap&lt;String, QuestionSet&gt;();
        for (String setName : questionSets.keySet()){
            sets.put(setName, (QuestionSet) questionSets.get(setName));}
        return sets;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7236e3166915492084b1c7992c60276c623" name="getParamSet" type="ParamSet" type-id="ParamSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="setName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (!paramSets.containsKey(setName)){
            String err = "WDK Model " + projectId
                    + " does not contain a param set with name " + setName;
            throw new WdkModelException(err);}
        return (ParamSet) paramSets.get(setName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4d29e31d5f454908935d1816dbd0c43f672" name="getAllParamSets" type="ParamSet[]" type-id="ParamSet[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        ParamSet[ sets = new ParamSet[paramSets.size();
        paramSets.values().toArray(sets);
        return sets;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3bfce16d41f64f43b1bc9ad5853a7b4e672" name="getAllGroupSets" type="GroupSet[]" type-id="GroupSet[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        GroupSet[ array = new GroupSet[groupSets.size();
        groupSets.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4f5d4e7dd6e646d19e23f6dede19224e672" name="getGroupSet" type="GroupSet" type-id="GroupSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="setName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        GroupSet groupSet = (GroupSet) groupSets.get(setName);
        if (groupSet == null)
            throw new WdkModelException("The Model does not "
                    + "have a groupSet named " + setName);
        return groupSet;}</source-code>
          </source-codes>
        </operation>
        <operation id="o63add4f9100c494a87446ebf10df4f07673" name="getBooleanQuestion" type="Question" type-id="Question" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // check if the boolean question already exists
        String qname = Question.BOOLEAN_QUESTION_PREFIX
                + recordClass.getFullName().replace('.', '_');
        QuestionSet internalSet = getQuestionSet(Utilities.INTERNAL_QUESTION_SET);

        Question booleanQuestion;
        if (internalSet.contains(qname)){
            booleanQuestion = internalSet.getQuestion(qname);} else{
            booleanQuestion = new Question();
            booleanQuestion.setName(qname);
            booleanQuestion.setDisplayName("Combine "
                    + recordClass.getDisplayName() + " results");
            booleanQuestion.setRecordClassRef(recordClass.getFullName());
            BooleanQuery booleanQuery = getBooleanQuery(recordClass);
            booleanQuestion.setQueryRef(booleanQuery.getFullName());
            booleanQuestion.excludeResources(projectId);
            booleanQuestion.resolveReferences(this);

            internalSet.addQuestion(booleanQuestion);}
        return booleanQuestion;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob1e6f661e234453fb892bc2d224b483c673" name="getBooleanQuery" type="BooleanQuery" type-id="BooleanQuery" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // check if the boolean query already exists
        String queryName = BooleanQuery.getQueryName(recordClass);
        QuerySet internalQuerySet = getQuerySet(Utilities.INTERNAL_QUERY_SET);

        BooleanQuery booleanQuery;
        if (internalQuerySet.contains(queryName)){
            booleanQuery = (BooleanQuery) internalQuerySet.getQuery(queryName);} else{
            booleanQuery = new BooleanQuery(recordClass);

            // make sure we create index on primary keys
            String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
            booleanQuery.setIndexColumns(pkColumns);

            internalQuerySet.addQuery(booleanQuery);

            booleanQuery.excludeResources(projectId);
            booleanQuery.resolveReferences(this);
            booleanQuery.setDoNotTest(true);
            booleanQuery.setIsCacheable(true); // cache the boolean query}
        return booleanQuery;}

    // ModelSetI's
    private &lt;T extends ModelSetI&gt; void addSet(T set, Map&lt;String, T&gt; setMap){
        String setName = set.getName();
        if (allModelSets.containsKey(setName)){
            String err = "WDK Model " + projectId
                    + " already contains a set with name " + setName;

            throw new WdkModelException(err);}
        setMap.put(setName, set);
        allModelSets.put(setName, set);}

    /**
     * Set whatever resources the model needs. It will pass them to its kids
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o364f944e8537427ca5fbd80110d9c649673" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (ModelSetI modelSet : allModelSets.values()){
            modelSet.setResources(this);}}

    /**
     * This method should happen after the resolveReferences, since projectId is
     * set by this method from modelConfig
     * 
     * @param gusHome
     * @throws WdkModelException
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     * @throws ClassNotFoundException
     * @throws IllegalAccessException
     * @throws InstantiationException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od4d21ab6f54e444a88b5c3de27a89388673" name="configure" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="modelConfig" type="ModelConfig" type-id="ModelConfig" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException, InstantiationException, IllegalAccessException,
            ClassNotFoundException{

        // assign projectId
        String projectId = modelConfig.getProjectId().trim();
        if (projectId.length() == 0 || projectId.indexOf('\'') &gt;= 0)
            throw new WdkModelException("The projectId/modelName cannot be "
                    + "empty, and cannot have single quote in it: " + projectId);
        this.projectId = projectId;
        this.modelConfig = modelConfig;
        ModelConfigAppDB appDB = modelConfig.getAppDB();
        ModelConfigUserDB userDB = modelConfig.getUserDB();

        // initialize authentication factory
        // set the max active as half of the model's configuration

        platform = (DBPlatform) Class.forName(appDB.getPlatformClass()).newInstance();
        platform.initialize(this, "APP", appDB);
        userPlatform = (DBPlatform) Class.forName(userDB.getPlatformClass()).newInstance();
        userPlatform.initialize(this, "USER", userDB);

        resultFactory = new ResultFactory(this);
        userFactory = new UserFactory(this);
        stepFactory = new StepFactory(this);
        datasetFactory = new DatasetFactory(this);
        queryFactory = new QueryFactory(this);
        answerFactory = new AnswerFactory(this);
        basketFactory = new BasketFactory(this);
        favoriteFactory = new FavoriteFactory(this);

        // set the exception header
        WdkModelException.modelName = getProjectId();
        WdkUserException.modelName = getProjectId();

        // exclude resources that are not used by this project
        excludeResources();

        // internal sets will be created if author hasn't define them
        createInternalSets();

        // it has to be called after internal sets are created, but before
        // recordClass references are resolved.
        addBasketReferences();

        // resolve references in the model objects
        resolveReferences();

        // create boolean questions
        createBooleanQuestions();}</source-code>
          </source-codes>
        </operation>
        <operation id="o9aa6a17779354e4faac1213494f63dd7673" name="addBasketReferences" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        for (RecordClassSet rcSet : recordClassSets.values()){
            for (RecordClass recordClass : rcSet.getRecordClasses()){
                if (recordClass.isUseBasket()){
                    basketFactory.createAttributeQueryRef(recordClass);
                    basketFactory.createRealtimeBasketQuestion(recordClass);
                    basketFactory.createSnapshotBasketQuestion(recordClass);
                    basketFactory.createBasketAttributeQuery(recordClass);}}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o73d3331f726b4c0bb4e64f96067b6139673" name="getModelConfig" type="ModelConfig" type-id="ModelConfig" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return modelConfig;}</source-code>
          </source-codes>
        </operation>
        <operation id="o63b6576e5cbb465e8d15cd7b9362936f673" name="getQueryPlatform" type="DBPlatform" type-id="DBPlatform" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return platform;}

    // Function Added by Cary P. Feb 7, 2008</source-code>
          </source-codes>
        </operation>
        <operation id="o8c765bee17a14796bbe8fda50503ddd6673" name="getUserPlatform" type="DBPlatform" type-id="DBPlatform" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return userPlatform;}</source-code>
          </source-codes>
        </operation>
        <operation id="ode2f267fce2746f99dc3f0fd7ec30d95673" name="getUserFactory" type="UserFactory" type-id="UserFactory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return userFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6841cd6bd8a245a8aa49b181d1772875673" name="getStepFactory" type="StepFactory" type-id="StepFactory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return stepFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="odd2f09ae2ca2470ea27c99beab380a8a673" name="resolveReference" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="twoPartName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        String s = "Invalid reference '" + twoPartName + "'. ";

        // ensures &lt;code&gt;twoPartName&lt;/code&gt; is formatted correctly
        Reference reference = new Reference(twoPartName);

        String setName = reference.getSetName();
        String elementName = reference.getElementName();

        ModelSetI set = (ModelSetI) allModelSets.get(setName);

        if (set == null){
            String s3 = s + " There is no set called '" + setName + "'";
            throw new WdkModelException(s3);}
        Object element = set.getElement(elementName);
        if (element == null){
            String s4 = s + " Set '" + setName + "' returned null for '"
                    + elementName + "'";
            throw new WdkModelException(s4);}
        return element;}

    /**
     * Some elements within the set may refer to others by name. Resolve those
     * references into real object references.
     * 
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2f522b3f0f2a44a58deb1a5fa2da4208673" name="resolveReferences" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        // Since we use Map here, the order of the sets in allModelSets are
        // random. However, if QuestionSet is resolved before a RecordSet, and
        // it goes down to resolve: QuestionSet -&gt; Question -&gt; RecordClass, and
        // when we try to resolve the RecordClass, a copy of it has been put
        // into RecordSet yet not being resolved. That means the attribute won't
        // be compatible since one contains nothing.
        // Iterator modelSets = allModelSets.values().iterator();
        // while (modelSets.hasNext()) {
        // ModelSetI modelSet = (ModelSetI) modelSets.next();
        // modelSet.resolveReferences(this);
        // }

        // instead, we first resolve querySets, then recordSets, and then
        // paramSets, and last on questionSets
        for (GroupSet groupSet : groupSets.values()){
            groupSet.resolveReferences(this);}
        for (QuerySet querySet : querySets.values()){
            querySet.resolveReferences(this);}
        for (ParamSet paramSet : paramSets.values()){
            paramSet.resolveReferences(this);}
        for (RecordClassSet recordClassSet : recordClassSets.values()){
            recordClassSet.resolveReferences(this);}
        for (QuestionSet questionSet : questionSets.values()){
            questionSet.resolveReferences(this);}
        // resolve references for xml record classes and questions
        for (XmlRecordClassSet rcSet : xmlRecordClassSets.values()){
            rcSet.resolveReferences(this);}
        for (XmlQuestionSet qSet : xmlQuestionSets.values()){
            qSet.resolveReferences(this);}
        for (SearchCategory category : this.categoryMap.values()){
            category.resolveReferences(this);
            if (category.getParent() == null)
                rootCategoryMap.put(category.getName(), category);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o78ad7bc65b4449e8aeea5cf1e5c307d9673" name="excludeResources" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // decide model name, display name, and version
        boolean hasModelName = false;
        for (WdkModelName wdkModelName : wdkModelNames){
            if (wdkModelName.include(projectId)){
                if (hasModelName){
                    throw new WdkModelException("The model has more than one "
                            + "&lt;modelName&gt; for project " + projectId);} else{
                    this.displayName = wdkModelName.getDisplayName();
                    this.version = wdkModelName.getVersion();
                    this.releaseDate = wdkModelName.getReleaseDate();
                    this.buildNumber = wdkModelName.getBuildNumber();
                    hasModelName = true;}}}
        wdkModelNames = null; // no more use of modelNames

        // decide the introduction
        boolean hasIntroduction = false;
        for (WdkModelText intro : introductions){
            if (intro.include(projectId)){
                if (hasIntroduction){
                    throw new WdkModelException("The model has more than one "
                            + "&lt;introduction&gt; for project " + projectId);} else{
                    this.introduction = intro.getText();
                    hasIntroduction = true;}}}
        introductions = null;

        // exclude the property list
        for (PropertyList propList : defaultPropertyLists){
            if (propList.include(projectId)){
                String listName = propList.getName();
                if (defaultPropertyListMap.containsKey(listName)){
                    throw new WdkModelException("The model has more than one "
                            + "defaultPropertyList \"" + listName
                            + "\" for project " + projectId);} else{
                    propList.excludeResources(projectId);
                    defaultPropertyListMap.put(listName, propList.getValues());}}}
        defaultPropertyLists = null;

        // remove question sets
        for (QuestionSet questionSet : questionSetList){
            if (questionSet.include(projectId)){
                questionSet.excludeResources(projectId);
                addSet(questionSet, questionSets);}}
        questionSetList = null;

        // remove param sets
        for (ParamSet paramSet : paramSetList){
            if (paramSet.include(projectId)){
                paramSet.excludeResources(projectId);
                addSet(paramSet, paramSets);}}
        paramSetList = null;

        // remove query sets
        for (QuerySet querySet : querySetList){
            if (querySet.include(projectId)){
                querySet.excludeResources(projectId);
                addSet(querySet, querySets);}}
        querySetList = null;

        // remove record class sets
        for (RecordClassSet recordClassSet : recordClassSetList){
            if (recordClassSet.include(projectId)){
                recordClassSet.excludeResources(projectId);
                addSet(recordClassSet, recordClassSets);}}
        recordClassSetList = null;

        // remove group sets
        for (GroupSet groupSet : groupSetList){
            if (groupSet.include(projectId)){
                groupSet.excludeResources(projectId);
                addSet(groupSet, groupSets);}}
        groupSetList = null;

        // remove xml question sets
        for (XmlQuestionSet xmlQSet : xmlQuestionSetList){
            if (xmlQSet.include(projectId)){
                xmlQSet.excludeResources(projectId);
                addSet(xmlQSet, xmlQuestionSets);}}
        xmlQuestionSetList = null;

        // remove xml record class sets
        for (XmlRecordClassSet xmlRSet : xmlRecordClassSetList){
            if (xmlRSet.include(projectId)){
                xmlRSet.excludeResources(projectId);
                addSet(xmlRSet, xmlRecordClassSets);}}
        xmlRecordClassSetList = null;

        // exclude categories
        for (SearchCategory category : this.categoryList){
            if (category.include(projectId)){
                String name = category.getName();
                if (categoryMap.containsKey(name))
                    throw new WdkModelException("The category name '" + name
                            + "' is duplicated");
                category.excludeResources(projectId);
                categoryMap.put(name, category);}}
        categoryList = null;

        // exclude categories
        for (MacroDeclaration macro : macroList){
            if (macro.include(projectId)){
                String name = macro.getName();
                macro.excludeResources(projectId);
                if (macro.isUsedByModel()){
                    if (modelMacroSet.contains(name))
                        throw new WdkModelException("More than one model "
                                + "macros '" + name + "' are defined");
                    modelMacroSet.add(name);}
                if (macro.isUsedByJsp()){
                    if (jspMacroSet.contains(name))
                        throw new WdkModelException("More than one jsp "
                                + "macros '" + name + "' are defined");
                    jspMacroSet.add(name);}
                if (macro.isUsedByPerl()){
                    if (perlMacroSet.contains(name))
                        throw new WdkModelException("More than one perl "
                                + "macros '" + name + "' are defined");
                    perlMacroSet.add(name);}}}
        macroList = null;}

    /**
     * this method has be to called after the excluding, but before resolving.
     * 
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oeaf203a28aa347e1b3ec0ff0c79e3dc7673" name="createInternalSets" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // create a param set to hold all internal params, that is, the params
        // created at run-time.
        boolean hasSet = false;
        for (ParamSet paramSet : paramSets.values()){
            if (paramSet.getName().equals(Utilities.INTERNAL_PARAM_SET)){
                hasSet = true;
                break;}}
        if (!hasSet){
            ParamSet internalParamSet = new ParamSet();
            internalParamSet.setName(Utilities.INTERNAL_PARAM_SET);
            addSet(internalParamSet, paramSets);
            internalParamSet.excludeResources(projectId);}

        // create a query set to hold all internal queries, that is, the queries
        // created at run-time.
        hasSet = false;
        for (QuerySet querySet : querySets.values()){
            if (querySet.getName().equals(Utilities.INTERNAL_QUERY_SET)){
                hasSet = true;
                break;}}
        if (!hasSet){
            QuerySet internalQuerySet = new QuerySet();
            internalQuerySet.setName(Utilities.INTERNAL_QUERY_SET);
            internalQuerySet.setDoNotTest(true);
            addQuerySet(internalQuerySet);
            internalQuerySet.excludeResources(projectId);}

        // create a query set to hold all internal questions, that is, the
        // questions created at run-time.
        hasSet = false;
        for (QuestionSet questionSet : questionSets.values()){
            if (questionSet.getName().equals(Utilities.INTERNAL_QUESTION_SET)){
                hasSet = true;
                break;}}
        if (!hasSet){
            QuestionSet internalQuestionSet = new QuestionSet();
            internalQuestionSet.setInternal(true);
            internalQuestionSet.setName(Utilities.INTERNAL_QUESTION_SET);
            internalQuestionSet.setDoNotTest(true);
            addQuestionSet(internalQuestionSet);
            internalQuestionSet.excludeResources(projectId);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o532fd377715d4fdeabf134869ca85317673" name="createBooleanQuestions" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, SQLException, JSONException, WdkUserException{
        for (RecordClassSet recordClassSet : getAllRecordClassSets()){
            for (RecordClass recordClass : recordClassSet.getRecordClasses()){
                getBooleanQuestion(recordClass);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o542bfdd6f24642a79be43b663271cfde673" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer("WdkModel: projectId='" + projectId
                + "'" + newline + "displayName='" + displayName + "'" + newline
                + "introduction='" + introduction + "'");
        buf.append(showSet("Param", paramSets));
        buf.append(showSet("Query", querySets));
        buf.append(showSet("RecordClass", recordClassSets));
        buf.append(showSet("XmlRecordClass", xmlRecordClassSets));
        buf.append(showSet("Question", questionSets));
        buf.append(showSet("XmlQuestion", xmlQuestionSets));
        return buf.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o0713ccdf87584c159886b425a0e2dce1673" name="showSet" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="setType" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="setMap" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer();
        String newline = System.getProperty("line.separator");
        buf.append(newline);
        buf.append("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo"
                + newline);
        buf.append("ooooooooooooooooooooooooooooo " + setType
                + " Sets oooooooooooooooooooooooooo" + newline);
        buf.append("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo"
                + newline + newline);
        for (ModelSetI set : setMap.values()){
            buf.append("=========================== " + set.getName()
                    + " ===============================" + newline + newline);
            buf.append(set).append(newline);}
        buf.append(newline);

        return buf.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1921f68fd7f4470cbb47aa1f3a1d9537673" name="addQuestionSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionSet" type="QuestionSet" type-id="QuestionSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        if (questionSetList != null) questionSetList.add(questionSet);
        else addSet(questionSet, questionSets);}</source-code>
          </source-codes>
        </operation>
        <operation id="o910e8a04ae7d49aa989962f7ac953f2d673" name="addRecordClassSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassSet" type="RecordClassSet" type-id="RecordClassSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        if (recordClassSetList != null) recordClassSetList.add(recordClassSet);
        else addSet(recordClassSet, recordClassSets);}</source-code>
          </source-codes>
        </operation>
        <operation id="ocd26f5ab383e4eb99d48f7c91e81258c673" name="addQuerySet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="querySet" type="QuerySet" type-id="QuerySet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (querySetList != null) querySetList.add(querySet);
        else addSet(querySet, querySets);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7eeabdca167b4d47b84c3033074dcf0b673" name="addParamSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramSet" type="ParamSet" type-id="ParamSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (paramSetList != null) paramSetList.add(paramSet);
        else addSet(paramSet, paramSets);}</source-code>
          </source-codes>
        </operation>
        <operation id="o336d1a12191648b4a5eb60b7ca8f3b89673" name="addGroupSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="groupSet" type="GroupSet" type-id="GroupSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (groupSetList != null) groupSetList.add(groupSet);
        else addSet(groupSet, groupSets);}</source-code>
          </source-codes>
        </operation>
        <operation id="o89e10c19570f4c808f1dcd078dc5e1e1673" name="addXmlQuestionSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionSet" type="XmlQuestionSet" type-id="XmlQuestionSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        if (xmlQuestionSetList != null) xmlQuestionSetList.add(questionSet);
        else addSet(questionSet, xmlQuestionSets);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa5a16677db0a477eb726463ded0244be673" name="addXmlRecordClassSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassSet" type="XmlRecordClassSet" type-id="XmlRecordClassSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        if (xmlRecordClassSetList != null) xmlRecordClassSetList.add(recordClassSet);
        else addSet(recordClassSet, xmlRecordClassSets);}

    // =========================================================================
    // Xml data source related methods
    // =========================================================================</source-code>
          </source-codes>
        </operation>
        <operation id="o04e316201add4260b3802252ce7a5341673" name="getXmlQuestionSets" type="XmlQuestionSet[]" type-id="XmlQuestionSet[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlQuestionSet[ qsets = new XmlQuestionSet[xmlQuestionSets.size();
        xmlQuestionSets.values().toArray(qsets);
        return qsets;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9ff040568020448a8f1e86bccfc37a64673" name="getXmlQuestionSet" type="XmlQuestionSet" type-id="XmlQuestionSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="setName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        XmlQuestionSet qset = (XmlQuestionSet) xmlQuestionSets.get(setName);
        if (qset == null)
            throw new WdkModelException("WDK Model " + projectId
                    + " does not contain an Xml Question set with name "
                    + setName);
        return qset;}</source-code>
          </source-codes>
        </operation>
        <operation id="o542ab5c422954d6d8e4422f8fbf8b3cb673" name="getXmlRecordClassSets" type="XmlRecordClassSet[]" type-id="XmlRecordClassSet[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlRecordClassSet[ rcsets = new XmlRecordClassSet[xmlRecordClassSets.size();
        xmlRecordClassSets.values().toArray(rcsets);
        return rcsets;}</source-code>
          </source-codes>
        </operation>
        <operation id="obcc3ff418e3a45faadfc7fe280ca739c673" name="getXmlRecordClassSet" type="XmlRecordClassSet" type-id="XmlRecordClassSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="setName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        XmlRecordClassSet rcset = (XmlRecordClassSet) xmlRecordClassSets.get(setName);
        if (rcset == null)
            throw new WdkModelException("WDK Model " + projectId
                    + " does not contain an Xml Record Class set with name "
                    + setName);
        return rcset;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa928cd8c335341af972bdc17d65f78c6674" name="setXmlSchema" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="xmlSchemaURL" type="URL" type-id="URL" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.xmlSchemaURL = xmlSchemaURL;}</source-code>
          </source-codes>
        </operation>
        <operation id="oae2fefc99cd74b30bc9df6db9228be9f674" name="getXmlSchemaURL" type="URL" type-id="URL" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return xmlSchemaURL;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1c61a13d1cb24e0f8e82150304611d08674" name="setXmlDataDir" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="path" type="File" type-id="File" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.xmlDataDir = path;}</source-code>
          </source-codes>
        </operation>
        <operation id="o258ff259702e49f0a080659ce46b1bb7674" name="getXmlDataDir" type="File" type-id="File" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return xmlDataDir;}</source-code>
          </source-codes>
        </operation>
        <operation id="o90885177ae9d4ee6a693284b48d974e8674" name="getDatasetFactory" type="DatasetFactory" type-id="DatasetFactory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return datasetFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="o74b7ea2e6b1c428191e6c7189793aade674" name="getQueryFactory" type="QueryFactory" type-id="QueryFactory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queryFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofec26a9fb292425980378368df62b04b674" name="getAnswerFactory" type="AnswerFactory" type-id="AnswerFactory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="o405114ed4a68420283ad6af60fbf90be674" name="getProjectId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return projectId;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1ab73954137f409bbb0c3716b713db63674" name="getQuestionDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionFullName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        try{
            Question question = (Question) resolveReference(questionFullName);
            return question.getDisplayName();} catch (WdkModelException ex){
            // question doesn't exist, return null;
            return null;}}

    /**
     * This method is supposed to be called by the digester
     * 
     * @param propertyList
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o52004812c4604a3ea1e80c4112155857674" name="addDefaultPropertyList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="propertyList" type="PropertyList" type-id="PropertyList" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.defaultPropertyLists.add(propertyList);}

    /**
     * if the property list of the given name doesn't exist, an empty string
     * array will be returned.
     * 
     * @param propertyListName
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe81376c08225484a9a3cbe195d9be7c3674" name="getDefaultPropertyList" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="propertyListName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (!defaultPropertyListMap.containsKey(propertyListName))
            return new String[0;
        return defaultPropertyListMap.get(propertyListName);}</source-code>
          </source-codes>
        </operation>
        <operation id="of45b023c735645af98f40ecdb287337f674" name="getDefaultPropertyLists" type="Map&lt;String, String[]&gt;" type-id="Map&lt;String, String[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, String[&gt; propLists = new LinkedHashMap&lt;String, String[&gt;();
        for (String plName : defaultPropertyListMap.keySet()){
            String[ values = defaultPropertyListMap.get(plName);
            String[ array = new String[values.length;
            System.arraycopy(values, 0, array, 0, array.length);
            propLists.put(plName, array);}
        return propLists;}</source-code>
          </source-codes>
        </operation>
        <operation id="o47e306df6e1b4392b717b61d4ca860c8674" name="addCategory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="category" type="SearchCategory" type-id="SearchCategory" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.categoryList.add(category);}</source-code>
          </source-codes>
        </operation>
        <operation id="o30558d0247e44e30970c6dcf910b4e6b674" name="getCategories" type="Map&lt;String, SearchCategory&gt;" type-id="Map&lt;String, SearchCategory&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, SearchCategory&gt;(categoryMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="od3862e08c6ea44ccb5902b04cd009e5f674" name="getRooCategories" type="Map&lt;String, SearchCategory&gt;" type-id="Map&lt;String, SearchCategory&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="usedBy" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, SearchCategory&gt; roots = new LinkedHashMap&lt;String, SearchCategory&gt;();
        for (SearchCategory root : rootCategoryMap.values()){
            String cusedBy = root.getUsedBy();
            if (cusedBy == null || usedBy == null
                    || cusedBy.equalsIgnoreCase(usedBy))
                roots.put(root.getName(), root);}
        return roots;}</source-code>
          </source-codes>
        </operation>
        <operation id="o948cc10fc65e4026bc635963eca1721d674" name="addMacroDeclaration" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="macro" type="MacroDeclaration" type-id="MacroDeclaration" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        macroList.add(macro);}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#finalize()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc2c745449ef34d32a7ac0d65e5680fcd674" name="finalize" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Throwable{
        logger.debug("Model unloaded.");}</source-code>
          </source-codes>
        </operation>
        <operation id="oa1ad459f8bcc4041a71d98a65f0b0094674" name="queryParamDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        for (String paramSetName : paramSets.keySet()){
            ParamSet paramSet = (ParamSet) paramSets.get(paramSetName);
            for (Param param : paramSet.getParams()){
                if (param.getName().equals(paramName))
                    return param.getPrompt();}}
        return paramName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8354d73340d6450290ebea3aad2785cc674" name="getSecretKey" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, IOException{
        if (secretKey == null){
            // load secret key file &amp; read contents
            String secretKeyFileLoc = modelConfig.getSecretKeyFile();
            if (secretKeyFileLoc == null) return null;

            File file = new File(secretKeyFileLoc);
            if (!file.exists()) return null;

            InputStream fis = new FileInputStream(secretKeyFileLoc);
            StringBuffer contents = new StringBuffer();
            int chr;
            while ((chr = fis.read()) != -1){
                contents.append((char) chr);}
            fis.close();
            this.secretKey = UserFactory.md5(contents.toString());}
        return secretKey;}</source-code>
          </source-codes>
        </operation>
        <operation id="odfdae9765af942128ce9330652fe5790674" name="getUseWeights" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return modelConfig.getUseWeights();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa740923caf8b469094832714b3b77662674" name="getSystemUser" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        if (systemUser == null) systemUser = userFactory.createGuestUser();
        return systemUser;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8fc0b16e51dc4695a3eecf66d0caada9674" name="getBasketFactory" type="BasketFactory" type-id="BasketFactory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return basketFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="o72c4c5082fdd4bdd8d6a55d5e0a323e0674" name="getFavoriteFactory" type="FavoriteFactory" type-id="FavoriteFactory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return favoriteFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="oeb732e95d4c24a5f9f8efde7b9155982674" name="getReleaseDate" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return releaseDate;}

    /**
     * @return the queryMonitor
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4176b558f453420b9225922e635b3dca674" name="getQueryMonitor" type="QueryMonitor" type-id="QueryMonitor" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return modelConfig.getQueryMonitor();}

    /**
     * @return the buildNumber
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocf4edf40654245b0a6f039dc353928f8674" name="getBuildNumber" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return buildNumber;}

    /**
     * @param buildNumber the buildNumber to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obc765c6527f644498b67a5de8278b487674" name="setBuildNumber" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="buildNumber" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.buildNumber = buildNumber;}</source-code>
          </source-codes>
        </operation>
        <operation id="oebfd0b471b9247d1b70e77b80aa291ab674" name="getGusHome" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
      return gusHome;}</source-code>
          </source-codes>
        </operation>
        <operation id="oaa782aea57ce46f0ab2d55fbc7bb5049674" name="setGusHome" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="gusHome" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
      this.gusHome = gusHome;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di518273085667052986" cid="C267" type="class" name="WdkModelBase" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa5a59331441b4dc196ebea49f4e6938156" name="includeProjects" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a600f3b6b36ee4e79bc3b649a59c561d256" name="excludeProjects" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a028f622e7c8a416bb40eb651242f2ce756" name="resolved" type="boolean" type-id="boolean" visibility="protected" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a8be642f511d443ae96fdf864a0b60b1156" name="propertyLists" type="List&lt;PropertyList&gt;" type-id="List&lt;PropertyList&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae1ef61ccadcf4467a61232ec2104edbd56" name="propertyListMap" type="Map&lt;String, String[]&gt;" type-id="Map&lt;String, String[]&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa9e001b1e3094ee28443c89be1c3760056" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o84d418f09acd486c91e944855cb6cfd256" name="WdkModelBase" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        includeProjects = new LinkedHashSet&lt;String&gt;();
        excludeProjects = new LinkedHashSet&lt;String&gt;();
        propertyLists = new ArrayList&lt;PropertyList&gt;();
        propertyListMap = new LinkedHashMap&lt;String, String[&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="o678ad20beb9e49819610aa56169dc63756" name="WdkModelBase" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="base" type="WdkModelBase" type-id="WdkModelBase" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = base.wdkModel;
        resolved = base.resolved;
        includeProjects = new LinkedHashSet&lt;String&gt;(base.includeProjects);
        excludeProjects = new LinkedHashSet&lt;String&gt;(base.excludeProjects);
        if (base.propertyLists != null)
            propertyLists = new ArrayList&lt;PropertyList&gt;(base.propertyLists);
        if (base.propertyListMap != null)
            propertyListMap = new LinkedHashMap&lt;String, String[&gt;(
                    base.propertyListMap);}

    /**
     * @param excludeProjects
     *            the excludeProjects to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o520ae753a3d748e4b18b242619a32d6b57" name="setExcludeProjects" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="excludeProjects" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        excludeProjects = excludeProjects.trim();
        if (excludeProjects.length() == 0) return;

        String[ projects = excludeProjects.split(",");
        for (String project : projects){
            this.excludeProjects.add(project.trim());}}

    /**
     * @param includeProjects
     *            the includeProjects to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2813dcf20daa41b58a189b0dcadbf82257" name="setIncludeProjects" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="includeProjects" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        includeProjects = includeProjects.trim();
        if (includeProjects.length() == 0) return;

        String[ projects = includeProjects.split(",");
        for (String project : projects){
            this.includeProjects.add(project.trim());}}

    /**
     * 
     * @param projectId
     * @return true if the object is included in the current project
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob61eeea4cc2d4a679a0184da3d5f740857" name="include" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (includeProjects.isEmpty()){ // no inclusions assigned
            return !excludeProjects.contains(projectId);} else{ // has inclusions
            return includeProjects.contains(projectId);}}

    /**
     * @return the resolved
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofe8da32f6a6641039bb6297b0589879c57" name="isResolved" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return resolved;}

    /**
     * This method is supposed to be called by the digester
     * 
     * @param propertyList
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o619c8fe05ac34a7da9173daf432e5fc557" name="addPropertyList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="propertyList" type="PropertyList" type-id="PropertyList" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.propertyLists.add(propertyList);}

    /**
     * if the property list of the given name doesn't exist, it will try to get
     * a default property list from the WdkModel.
     * 
     * @param propertyListName
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o38de08bb8c044c0aa95536bafc230c3a57" name="getPropertyList" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="propertyListName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (!propertyListMap.containsKey(propertyListName))
            return wdkModel.getDefaultPropertyList(propertyListName);
        return propertyListMap.get(propertyListName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7039ff54b5b541c2bc974b074db7df6a57" name="getPropertyLists" type="Map&lt;String, String[]&gt;" type-id="Map&lt;String, String[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // get the default property lists
        Map&lt;String, String[&gt; propLists = wdkModel.getDefaultPropertyLists();
        // replace the default ones with the ones defined in the question
        for (String plName : propertyListMap.keySet()){
            String[ values = propertyListMap.get(plName);
            String[ array = new String[values.length;
            System.arraycopy(values, 0, array, 0, array.length);
            propLists.put(plName, array);}
        return propLists;}

    /**
     * exclude the resources the object hold which are not included in the
     * current project
     * 
     * @param projectId
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7c7e4ac038314707b96dd1c2b6c83fa657" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude property lists
        for (PropertyList propList : propertyLists){
            if (propList.include(projectId)){
                String listName = propList.getName();
                if (propertyListMap.containsKey(listName)){
                    throw new WdkModelException("The node "
                            + this.getClass().getName() + " has more than one "
                            + "propertyList \"" + listName + "\" for project "
                            + projectId);} else{
                    propList.excludeResources(projectId);
                    propertyListMap.put(propList.getName(),
                            propList.getValues());}}}
        propertyLists = null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8df7e0c7b8c9411e8194deab0620d3ed57" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        this.wdkModel = wdkModel;}</source-code>
          </source-codes>
        </operation>
        <operation id="o65534e324ac0460bbc3701f32287e92957" name="getWdkModel" type="WdkModel" type-id="WdkModel" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	return wdkModel;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di850420968107681926" cid="C268" type="class" name="WdkModelException" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5f8a63a1a0924b639cc05d5ef82df028195" name="paramErrors" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="package" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ofb9f8440071c442fa6eca9c1fd017816195" name="WdkModelException" type="&lt;String, String&gt;" type-id="&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramErrors" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();
        this.paramErrors = paramErrors;}</source-code>
          </source-codes>
        </operation>
        <operation id="oac0ae465bd1047a4a16a46fb34b87ec5195" name="WdkModelException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();}</source-code>
          </source-codes>
        </operation>
        <operation id="ocb68351a75074100a07c8d68ae984737195" name="WdkModelException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg);}</source-code>
          </source-codes>
        </operation>
        <operation id="o57289ccb358f487799f4807f2f517e9b195" name="WdkModelException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg, cause);}</source-code>
          </source-codes>
        </operation>
        <operation id="o50b6aae40d8c45afb14e62f9cd541295195" name="WdkModelException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(cause);
        if (cause instanceof WdkModelException){
            this.paramErrors = ((WdkModelException) cause).paramErrors;}}</source-code>
          </source-codes>
        </operation>
        <operation id="oc0f1121b849a4f7fb71b526ad3bb50d3195" name="WdkModelException" type="&lt;String, String&gt;" type-id="&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="paramErrors" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(message);
        this.paramErrors = paramErrors;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9abdf2ed267340dd839b0a07c3ae00f5195" name="WdkModelException" type="&lt;String, String&gt;" type-id="&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
            <parameter id="" name="paramErrors" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(cause);
        this.paramErrors = paramErrors;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob1bfaef0e1934e26b895a504a005cd7b195" name="WdkModelException" type="&lt;String, String&gt;" type-id="&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
            <parameter id="" name="paramErrors" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(message, cause);
        this.paramErrors = paramErrors;}

    /**
     * @return Map where keys are Params and values are an tuple of (value,
     *         errMsg), one for each error param value
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0d2d32e573444b319dc87acb6b12c77e195" name="getParamErrors" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return paramErrors;}

    /**
     * @return A default formatting of contained errors
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o270a015ec26343acb5bea82969719f40195" name="formatErrors" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer(super.formatErrors());
        buf.append(newline);
        if (paramErrors != null){
            for (String paramPrompt : paramErrors.keySet()){
                String details = paramErrors.get(paramPrompt);
                buf.append(paramPrompt + ": " + details + newline);}}
        return buf.toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di747576725598737874" cid="C269" type="class" name="WdkModelName" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a07cd2db58f8d411dbc602cd66cf19c73316" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="afa15e31cdbf24cd0ba60c4fe957c8880316" name="version" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aafe47d49373d4f1ab0422bbf33044eab316" name="releaseDate" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa48d957cee584c9380dcccbb952f833d316" name="buildNumber" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o406e93f47cb445f7a2c5861bdbfa821d316" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.displayName;}

    /**
     * @param displayName
     *            the displayName to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o16dea3086a3e4059a7a7e15a4308d631316" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}

    /**
     * @return the version
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o19a578b495164d11a92cb01f5b991ad5316" name="getVersion" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.version;}

    /**
     * @param version
     *            the version to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o695a29bb96d743ae95c11ebee6cbb24c316" name="setVersion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="version" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.version = version;}

    /**
     * @return the releaseDate
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od955763a7fdb48369b2f76aa9dbe5f2b316" name="getReleaseDate" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return releaseDate;}

    /**
     * @param releaseDate
     *            the releaseDate to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc8baeb6e0846464c8b0cf79e043d5735316" name="setReleaseDate" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="releaseDate" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.releaseDate = releaseDate;}</source-code>
          </source-codes>
        </operation>
        <operation id="o81a3403fd25c4d6eaeaf0ee1c92bb1d7316" name="getBuildNumber" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return buildNumber;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob401bf3d529f40d1bf8fe7486cc1569a316" name="setBuildNumber" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="buildNumber" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.buildNumber = buildNumber;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o97ba5ece36194f3aa8b511952666465b316" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // no resources held by ModelName. do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob477070c21c947eba78c094895838d42316" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // nothing to do}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di727997256418440629" cid="C270" type="class" name="WdkModelText" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a605a5ca9e22943b6803459e5d81f03fc396" name="name" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7813dd5343be466e98dee4b40a65b2bb396" name="text" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oe6a84828863343289a861fd008504679396" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     *            the name to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2bb5039232d94734930c27b0c6e1456f396" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return the text
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob1e9252363e14a119bd00e28b728c3dc396" name="getText" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.text;}

    /**
     * @param text
     *            the text to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe1f48d680e294fb4a82eaa6f24049c99397" name="setText" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="text" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.text = text;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o308cc284d01447249812edfd748b8940397" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // no resource held by it, do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc539162f983540839ae4d61ddfc3617b397" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // have nothing to do}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di251154621520770601" cid="C271" type="class" name="WdkRuntimeException" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="od88893192b394c0ab213ec0b2c2f8c13421" name="WdkRuntimeException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		super(message);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6e2c2ca03df34b0b9027ca86da5a8402421" name="WdkRuntimeException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cause" type="Exception" type-id="Exception" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		super(cause);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2a17cc687c44401b8a3dcaa5d333f6be422" name="WdkRuntimeException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cause" type="Exception" type-id="Exception" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		super(message, cause);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di380945687256724796" cid="C272" type="class" name="WdkUserException" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o30ddc19b5c4842c9b92b628fc5c7bfe3461" name="WdkUserException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();}</source-code>
          </source-codes>
        </operation>
        <operation id="oe66f8cebaacd4e82b1f3f55fa00e0005461" name="WdkUserException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(message);}</source-code>
          </source-codes>
        </operation>
        <operation id="obdd31691ac7b45e8a7884dcdac578d9f461" name="WdkUserException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(cause);}</source-code>
          </source-codes>
        </operation>
        <operation id="o27a0573816204fd29042468f08ab67d6461" name="WdkUserException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg, cause);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di973559587783787860" cid="C273" type="class" name="XmlParser" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="acbad8c9fed7449948471b161644ca822840" name="gusHome" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab9d714ef62a44d238393a33c3203f911840" name="validator" type="ValidationDriver" type-id="ValidationDriver" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a75b35d82191a49dd87d6bd03fd2c7548840" name="digester" type="Digester" type-id="Digester" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o5ce541c7e4004389841b59a821e5d41e840" name="XmlParser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="gusHome" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="schemaPath" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SAXException,
            IOException{
        this.gusHome = gusHome;

        // get model schema file and xml schema file
        URL schemaURL = makeURL(gusHome, schemaPath);

        // config validator and digester
        validator = configureValidator(schemaURL);
        digester = configureDigester();}</source-code>
          </source-codes>
        </operation>
        <operation id="oef82b2592a2a43cbb39f0e6da084b4c9840" name="configureValidator" type="ValidationDriver" type-id="ValidationDriver" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schemaURL" type="URL" type-id="URL" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SAXException, IOException{
        System.setProperty(
                "org.apache.xerces.xni.parser.XMLParserConfiguration",
                "org.apache.xerces.parsers.XIncludeParserConfiguration");

        ErrorHandler errorHandler = new ErrorHandlerImpl(System.err);
        PropertyMap schemaProperties = new SinglePropertyMap(
                ValidateProperty.ERROR_HANDLER, errorHandler);
        ValidationDriver validator = new ValidationDriver(schemaProperties,
                PropertyMap.EMPTY);
        validator.loadSchema(ValidationDriver.uriOrFileInputSource(schemaURL.toExternalForm()));
        return validator;}</source-code>
          </source-codes>
        </operation>
        <operation id="oea13d6d53afb42f68d140e73ad3b1558840" name="makeURL" type="URL" type-id="URL" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="parent" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="relativePath" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws MalformedURLException{
        String url = parent + "/" + relativePath;
        String lower = url.toLowerCase();
        if (lower.startsWith("file:/") || lower.startsWith("http://")
                || lower.startsWith("https://") || lower.startsWith("ftp://")
                || lower.startsWith("ftps://")){
            return new URL(url);} else{
            File file = new File(url);
            return file.toURI().toURL();}}</source-code>
          </source-codes>
        </operation>
        <operation id="o75d5bedaa9204b0580469cece2b8d223840" name="validate" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="modelXmlURL" type="URL" type-id="URL" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SAXException, IOException,
            WdkModelException{
        logger.trace("Validating model file: " + modelXmlURL);
        String err = "Validation failed: " + modelXmlURL.toExternalForm();
        try{
            InputSource is = ValidationDriver.uriOrFileInputSource(modelXmlURL.toExternalForm());
            boolean result = validator.validate(is);
            if (!result){
                logger.error(err);
                throw new WdkModelException(err);}} catch (SAXException ex){
            logger.error(err + "\n" + ex);
            throw ex;} catch (IOException ex){
            logger.error(err + "\n" + ex);
            throw ex;}}

    /**
     * Load XML Document from string content with out validation &amp; substitution.
     * 
     * @param content
     * @return
     * @throws IOException
     * @throws SAXException
     * @throws ParserConfigurationException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od88e2dc126d14343bb4f9afc782229ce840" name="loadDocument" type="Document" type-id="Document" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="content" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SAXException,
            IOException, ParserConfigurationException{
        // load the content into DOM model
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        // turn off validation here, since we don't use DTD; validation is done
        // before this point
        factory.setValidating(false);
        factory.setNamespaceAware(false);
        DocumentBuilder builder = factory.newDocumentBuilder();

        // ErrorHandler errorHandler = new ErrorHandlerImpl(System.err);
        // builder.setErrorHandler(errorHandler);
        builder.setErrorHandler(new org.xml.sax.ErrorHandler(){

            // ignore fatal errors (an exception is guaranteed)
            public void fatalError(SAXParseException exception)
                    throws SAXException{
                exception.printStackTrace(System.err);}

            // treat validation errors as fatal
            public void error(SAXParseException e) throws SAXParseException{
                e.printStackTrace(System.err);
                throw e;}

            // dump warnings too
            public void warning(SAXParseException err) throws SAXParseException{
                System.err.println("** Warning" + ", line "
                        + err.getLineNumber() + ", uri " + err.getSystemId());
                System.err.println("   " + err.getMessage());}});

        InputStream stream = new ByteArrayInputStream(content.getBytes());
        Document doc = builder.parse(stream);
        stream.close();
        return doc;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob803db120ac64a919c3e4cb08ad1074a840" name="configureNode" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="digester" type="Digester" type-id="Digester" default-value="" />
            <parameter id="" name="path" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="method" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        digester.addObjectCreate(path, nodeClass);
        digester.addSetProperties(path);
        digester.addSetNext(path, method);}</source-code>
          </source-codes>
        </operation>
        <operation id="od8d0850709ef44e699f78b053629f70e840" name="configureDigester" type="Digester" type-id="Digester" visibility="protected" abstract="true" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes />
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di353745487256835871" cid="C274" type="class" name="XmlAnswerValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:31">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a10ab97823fe641b19e2f1cd35ced9fd1183" name="startIndex" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a49b03d2e40514d0aa62a70dd80353560183" name="endIndex" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4f39158d83a542109bebd3cc57aa5455183" name="question" type="XmlQuestion" type-id="XmlQuestion" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a22c1ef8623734e28a8a5cdb6a2fba094183" name="recordInstanceMap" type="Map&lt;String, XmlRecordInstance&gt;" type-id="Map&lt;String, XmlRecordInstance&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8265a5058da2432eabc0d4a1f38fed75184" name="recordInstances" type="List&lt;XmlRecordInstance&gt;" type-id="List&lt;XmlRecordInstance&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o29a83a8aa2404773b8c14d82b30203ee184" name="XmlAnswerValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        recordInstances = new ArrayList&lt;XmlRecordInstance&gt;();
        recordInstanceMap = new LinkedHashMap&lt;String, XmlRecordInstance&gt;();}

    /**
     * @return Returns the endIndex.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0719bfc4abd24cd2b9eb29dfb9689380184" name="getEndIndex" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.endIndex;}

    /**
     * @param endIndex The endIndex to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of8a2670f37c6472391d256b0f2e9b6b2184" name="setEndIndex" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.endIndex = endIndex;}

    /**
     * @return Returns the startIndex.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o23b1d2a92c584fd79bd5cbd8b8e25b19184" name="getStartIndex" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.startIndex;}

    /**
     * @param startIndex The startIndex to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o89531f5029754c8f9531af1a758799ba184" name="setStartIndex" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.startIndex = startIndex;}

    /**
     * @return Returns the question.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o311e288956ed4ce4b300c7cd47bdf8f4184" name="getQuestion" type="XmlQuestion" type-id="XmlQuestion" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question;}</source-code>
          </source-codes>
        </operation>
        <operation id="o11ae0f4bf8fd42ecabd189ea7892200b184" name="setQuestion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="XmlQuestion" type-id="XmlQuestion" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.question = question;}</source-code>
          </source-codes>
        </operation>
        <operation id="ode7149195e72448db6aca22b63e5fa31184" name="getResultSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordInstances.size();}</source-code>
          </source-codes>
        </operation>
        <operation id="o7e10e1032c094544bfc77ed7b183d13b184" name="getPageSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        int end = Math.min(endIndex, recordInstances.size());
        return (end - startIndex + 1);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7f3ce59075374d8083425928d48dab44184" name="addRecordInstance" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="record" type="XmlRecordInstance" type-id="XmlRecordInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordInstances.add(record);
        this.recordInstanceMap.put(record.getId(), record);}</source-code>
          </source-codes>
        </operation>
        <operation id="o52b5128776284f43b71c29895b45f512184" name="getRecordInstances" type="XmlRecordInstance[]" type-id="XmlRecordInstance[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // only return the records within the page
        int pageSize = getPageSize();
        XmlRecordInstance[ records = new XmlRecordInstance[pageSize;
        for (int i = 0; i &lt; pageSize; i++){
            records[i = recordInstances.get(i + startIndex - 1);}
        return records;}</source-code>
          </source-codes>
        </operation>
        <operation id="odcfe0c8394b64a45b2898e36e11f632f184" name="getRecordInstanceMap" type="Map&lt;String, XmlRecordInstance&gt;" type-id="Map&lt;String, XmlRecordInstance&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	return recordInstanceMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="o48155738edde43f79555cdd04d6a84ed184" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // resolve references for record instances
        for (XmlRecordInstance record : recordInstances){
            // set record class for the record, who will be used in the record's
            // resolveReferences() method.
            record.setRecordClass(question.getRecordClass());
            record.resolveReferences(model);}}</source-code>
          </source-codes>
        </operation>
        <operation id="odff9a05bba4e4a429bfbea2d6f6ae64d184" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // create summary attribute index
        XmlAttributeField[ sumArray = question.getSummaryAttributes();
        Map&lt;String, XmlAttributeField&gt; summaries = new LinkedHashMap&lt;String, XmlAttributeField&gt;();
        for (XmlAttributeField field : sumArray){
            summaries.put(field.getName(), field);}

        // set record class for each instance
        for (XmlRecordInstance record : recordInstances){
            // set summaryAttribute
            XmlAttributeValue[ attributes = record.getAttributes();
            for (XmlAttributeValue attribute : attributes){
                attribute.setSummary(summaries.containsKey(attribute.getName()));}}}

    /**
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9d03a2cba72f41b884774ba6c8d64c72184" name="print" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer(this.getClass().getName());

        // TODO - print question information
        sb.append(":\r\n\tname = ");
        sb.append(question.getName());
        sb.append(":\r\n\tdisplay name = ");
        sb.append(question.getDisplayName());
        sb.append(":\r\n\tdescription = ");
        sb.append(question.getDescription());
        sb.append(":\r\n\tdata url = ");
        sb.append(question.getXmlDataURL());
        sb.append("\r\n");

        // print out records
        for (XmlRecordInstance record : recordInstances){
            sb.append("\r\n ------- Record ");
            sb.append(record.getId());
            sb.append(" -------\r\n");
            sb.append(record.print());}
        return sb.toString();}

    /*
     * (non-Javadoc) print out the records in tabular format
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o48a047f207e34b108545fd12820658ef184" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer();
        XmlAttributeField[ summaryAttributes = question.getSummaryAttributes();

        // print out the field names
        for (XmlAttributeField field : summaryAttributes){
            sb.append(field.getName());
            sb.append("\t");}
        sb.append("\r\n");

        // print out the records
        for (XmlRecordInstance record : recordInstances){
            sb.append(record.toString());
            sb.append("\r\n");}
        return sb.toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di580659253239705119" cid="C275" type="class" name="XmlAttributeField" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:31">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o0cafdc510ca84259ac438bd1d2b11482299" name="XmlAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o35eb5860ba604a3c86c692346f8302d0299" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String classnm = this.getClass().getName();
        StringBuffer buf = new StringBuffer(classnm);
        buf.append(": name='");
        buf.append(getName());
        buf.append("'\r\n  displayName='");
        buf.append(getDisplayName());
        buf.append("'\r\n  help='");
        buf.append(getHelp());
        buf.append("'\r\n");
        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0816d789c6be4f8c91d45519ed852657299" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.AttributeField#getDependents()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od84b0c9d5fa047b2a5284b003c9c54b0299" name="getDependents" type="Collection&lt;AttributeField&gt;" type-id="Collection&lt;AttributeField&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // TODO Auto-generated method stub
        return new ArrayList&lt;AttributeField&gt;();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Field#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0611b2b0b30e436ea2fc1cfb28576407299" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di619946347591484897" cid="C276" type="class" name="XmlAttributeValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:31">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a98870823abd24cfab1555fa047434535558" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0e61aff6762741c5916e505543dab4e3559" name="attributeField" type="XmlAttributeField" type-id="XmlAttributeField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0ae6d38fe1b14b6dbb23ac0ba3ced0a6559" name="value" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2305257886b54391843c1544f8e8e4e5559" name="isSummary" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o6fdc22e273f6434397388598050044a0559" name="XmlAttributeValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        isSummary = true;}

    /**
     * @return Returns the value.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3562087aa5ea4239a7884d12c6d6549d559" name="getValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.value;}</source-code>
          </source-codes>
        </operation>
        <operation id="of2916f11f8a347e8bfc57a1ba598ad8d559" name="getBriefValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // prepare truncation length
        int truncate = attributeField.getTruncateTo();
        if (truncate == 0) truncate = Utilities.TRUNCATE_DEFAULT;

        if (value == null || truncate &gt;= value.length()) return value;
        else return value.substring(0, truncate) + ". . .";}

    /**
     * @param value The value to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o962c4399440b4c29a5a6d64e42c82a4c559" name="setValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.value = value;}

    /**
     * @return Returns the attributeField.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od46b426ce08a485095b30843bae7fdbb559" name="getAttributeField" type="XmlAttributeField" type-id="XmlAttributeField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attributeField;}

    /**
     * This function is called by XmlRecordInstance in setting resource stage
     * 
     * @param attributeField
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o95388a9285dd4ffb8138d665333963b4561" name="setAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeField" type="XmlAttributeField" type-id="XmlAttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.attributeField = attributeField;}</source-code>
          </source-codes>
        </operation>
        <operation id="o09e18556743f48daa3541b17e3df0bad561" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o37481d6e444c4e90b4fe4ea0be4b7510561" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attributeField.getDisplayName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getHelp()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3932c109d595487cb1f19074fadcd2c2561" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attributeField.getHelp();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getIsInternal()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc3a9961dbd384a5bb24c45bdb5457de1561" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attributeField.isInternal();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oba4f418abecb465c9711c5621950a071561" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (attributeField == null) return name;
        else return attributeField.getName();}

    /**
     * @return Returns the isSummary.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7c006733ecfa4830ae94a2dcb1f7bb32561" name="isSummary" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.isSummary;}

    /**
     * This method will be called by XmlAnswer
     * @param isSummary The isSummary to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5cf498f5588c435090ca5824bd403ee9561" name="setSummary" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isSummary" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.isSummary = isSummary;}
    
    /**
     * @return print out the complete information of an attribute, line by line
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8cbd0a44dded411c926f0956249be6c8561" name="print" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer(this.getClass().getName());
        buf.append(":\r\n\tname='");
        buf.append(getName());
        buf.append("'\r\n\tdisplayName='");
        buf.append(getDisplayName());
        buf.append("'\r\n\thelp='");
        buf.append(getHelp());
        buf.append("'\r\n\tisSummary?='");
        buf.append(isSummary());
        buf.append("'\r\n\tvalue='");
        buf.append(getValue());
        buf.append("'\r\n");
        return buf.toString();}

    /*
     * (non-Javadoc)
     * print out the name/value tuple only, in one line
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o26eb051d582945b482dca98d54f4411c561" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer();
        sb.append(getName());
        sb.append(" : ");
        sb.append(getValue());
        return sb.toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di625379968101075301" cid="C277" type="class" name="XmlConverter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:31">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o5f6ace7a6d714256ae4c162bdf1fef3b854" name="convert" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="inStream" type="InputStream" type-id="InputStream" default-value="" />
            <parameter id="" name="xslStream" type="InputStream" type-id="InputStream" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            OutputStream outStream, String msg) throws WdkModelException{
        TransformerFactory Factory = TransformerFactory.newInstance();

        if (!Factory.getFeature(SAXSource.FEATURE)
                || !Factory.getFeature(SAXResult.FEATURE))
            throw new WdkModelException(
                    "Unsupported XML feature. Conversion cancelled.");

        SAXTransformerFactory saxTFactory = ((SAXTransformerFactory) Factory);
        // Create an XMLFilter for each stylesheet.
        XMLFilter xmlFilter;
        try{
            xmlFilter = saxTFactory.newXMLFilter(new StreamSource(xslStream));
            XMLReader reader = XMLReaderFactory.createXMLReader();
            xmlFilter.setParent(reader);

            Properties xmlProps = OutputPropertiesFactory.getDefaultMethodProperties("xml");
            xmlProps.setProperty("indent", "yes");
            xmlProps.setProperty("standalone", "no");
            Serializer serializer = SerializerFactory.getSerializer(xmlProps);
            serializer.setOutputStream(outStream);
            xmlFilter.setContentHandler(serializer.asContentHandler());

            xmlFilter.parse(new InputSource(inStream));} catch (TransformerConfigurationException ex){
            throw new WdkModelException(msg, ex);} catch (SAXException ex){
            throw new WdkModelException(msg, ex);} catch (IOException ex){
            throw new WdkModelException(msg, ex);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5f9f354f4f1944529cb8c19aca9001f2854" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // get the file parameters
        if (args.length != 3){
            System.err.println("Usage: xmlConvert &lt;input_xml&gt; &lt;xsl&gt; &lt;output_xml&gt;");
            System.exit(-1);}

        File xmlDataDir = new File(System.getProperty("xmlDataDir"));
        File inXmlFile = new File(xmlDataDir, args[0);
        File inXslFile = new File(xmlDataDir, args[1);
        File outXmlFile = new File(xmlDataDir, args[2);

        if (!inXmlFile.exists() || !inXslFile.exists()){
            System.err.println("The input XML or XSL does not exist!");
            System.exit(-1);}

        try{
            InputStream inXmlStream = new FileInputStream(inXmlFile);
            InputStream inXslStream = new FileInputStream(inXslFile);
            OutputStream outXmlStream = new FileOutputStream(outXmlFile);

            // convert the xml
            XmlConverter.convert(inXmlStream, inXslStream, outXmlStream,
                    inXslFile.getName());

            // save the result
            outXmlStream.flush();
            outXmlStream.close();} catch (IOException ex){
            throw new WdkModelException(ex);}
        System.out.println("Xml file is converted successfully.");}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di818267206356302371" cid="C278" type="class" name="XmlDataLoader" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:32">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5e669a4df89e4829b95d95d2ef304b13245" name="schemaURL" type="URL" type-id="URL" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oa253321e0fab452d811af2a478c9972d246" name="XmlDataLoader" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schemaURL" type="URL" type-id="URL" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.schemaURL = schemaURL;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5b858ba951e64228afd462e5981bc2b0246" name="parseDataFile" type="XmlAnswerValue" type-id="XmlAnswerValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="xmlDataURL" type="URL" type-id="URL" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // validate the xml data file
        if (!validDataFile(xmlDataURL, schemaURL))
            throw new WdkModelException("Validation to data xml file failed: "
                    + xmlDataURL.toExternalForm());

        // Create the InputStream of xmlData
        InputStream xmlDataStream = null;
        try{
            xmlDataStream = xmlDataURL.openStream();
            return parseDataStream(xmlDataStream);} catch (IOException ex){
            throw new WdkModelException("Could not parse data file at "
                    + xmlDataURL, ex);} finally{
            try{
                if (xmlDataStream != null) xmlDataStream.close();} catch (IOException ex){
                throw new WdkModelException(ex);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="oa8da5cc5af54499c8ec97b141cdea482246" name="parseDataStream" type="XmlAnswerValue" type-id="XmlAnswerValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="xmlDataStream" type="InputStream" type-id="InputStream" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        // I have to bypass the validation part for stream source, since the
        // validator need to use a String or File to validate it

        // configure the digester
        Digester digester = configureDigester();

        try{
            // load and parse the data source
            XmlAnswerValue answer = (XmlAnswerValue) digester.parse(xmlDataStream);

            return answer;} catch (IOException ex){
            throw new WdkModelException(ex);} catch (SAXException ex){
            throw new WdkModelException(ex);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ofcc26d6bd280460fbc708717d9bf8643246" name="validDataFile" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataXmlURL" type="URL" type-id="URL" default-value="" />
            <parameter id="" name="schemaURL" type="URL" type-id="URL" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        System.setProperty(
                "org.apache.xerces.xni.parser.XMLParserConfiguration",
                "org.apache.xerces.parsers.XIncludeParserConfiguration");

        try{

            ErrorHandler errorHandler = new ErrorHandlerImpl(System.err);
            PropertyMap schemaProperties = new SinglePropertyMap(
                    ValidateProperty.ERROR_HANDLER, errorHandler);
            ValidationDriver vd = new ValidationDriver(schemaProperties,
                    PropertyMap.EMPTY, null);

            vd.loadSchema(ValidationDriver.uriOrFileInputSource(schemaURL.toExternalForm()));

            // validate the data xml file
            InputSource is = ValidationDriver.uriOrFileInputSource(dataXmlURL.toExternalForm());
            return vd.validate(is);} catch (SAXException e){
            throw new WdkModelException("parsing: " + dataXmlURL, e);} catch (IOException e){
            throw new WdkModelException("parsing: " + dataXmlURL, e);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o8032a688a6774d9a9cbeff51812212f3246" name="configureDigester" type="Digester" type-id="Digester" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Digester digester = new Digester();
        digester.setValidating(false);

        // set the root
        digester.addObjectCreate("xmlAnswer", XmlAnswerValue.class);
        digester.addSetProperties("xmlAnswer");

        // xmlRecord
        digester.addObjectCreate("xmlAnswer/record", XmlRecordInstance.class);
        digester.addSetProperties("xmlAnswer/record");

        // xmlAttribute
        digester.addObjectCreate("xmlAnswer/record/attribute",
                XmlAttributeValue.class);
        digester.addSetProperties("xmlAnswer/record/attribute");
        digester.addCallMethod("xmlAnswer/record/attribute", "setValue", 1);
        digester.addCallParam("xmlAnswer/record/attribute", 0);

        digester.addSetNext("xmlAnswer/record/attribute", "addAttribute");

        // xmlTable
        digester.addObjectCreate("xmlAnswer/record/table", XmlTableValue.class);
        digester.addSetProperties("xmlAnswer/record/table");

        // xmlRow
        digester.addObjectCreate("xmlAnswer/record/table/row",
                XmlRowValue.class);
        digester.addSetProperties("xmlAnswer/record/table/row");

        // xmlAttribute - columns
        digester.addObjectCreate("xmlAnswer/record/table/row/attribute",
                XmlAttributeValue.class);
        digester.addSetProperties("xmlAnswer/record/table/row/attribute");
        digester.addCallMethod("xmlAnswer/record/table/row/attribute",
                "setValue", 1);
        digester.addCallParam("xmlAnswer/record/table/row/attribute", 0);
        digester.addSetNext("xmlAnswer/record/table/row/attribute", "addColumn");

        digester.addSetNext("xmlAnswer/record/table/row", "addRow");

        digester.addSetNext("xmlAnswer/record/table", "addTable");

        digester.addSetNext("xmlAnswer/record", "addRecordInstance");

        return digester;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di459994250301895059" cid="C279" type="class" name="XmlQuestion" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:33">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7b4e985c70f84ca28e03d02cfa98eac696" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3d68505221e14827a4059e4d6d56c7b096" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a760b51a4511c48c88b0b623f6936b37596" name="recordClassRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3b211e74e58b4217994a3c6776882c5c96" name="xmlData" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3f60f77a8b334fb8a6ad5b68fc4f7d9596" name="xsl" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab77a3f467a5442359f41039e512a31b496" name="summaryAttributeNames" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a88cc1d514de94c799fb3c898d0b6ea4396" name="summaryAttributes" type="XmlAttributeField[]" type-id="XmlAttributeField[]" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a57741b62a6174ac4b1071a67956b81e996" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a60d777178ed74d50b959583be661fb8d96" name="help" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad3e71036697b4884bd6cc43d306b625096" name="questionSet" type="XmlQuestionSet" type-id="XmlQuestionSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aac906cd0269141e39f0473f73ebdb9f296" name="recordClass" type="XmlRecordClass" type-id="XmlRecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab55175870e924bbeb50f22b5e24677b796" name="loader" type="XmlDataLoader" type-id="XmlDataLoader" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad287ac8ae11e467abfd146dc8f7a684796" name="model" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0f708828b56b4b558a7cd88baa807e0a96" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.description;}

    /**
     * @param description
     *                The description to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocfad7fc9c3e24ea495dcf3e0eccea1df96" name="addDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.descriptions.add(description);}

    /**
     * @return Returns the displayName.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa6911a5bedef4726870f9cc204c3dc2396" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.displayName;}

    /**
     * @param displayName
     *                The displayName to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o18f2c6358b9748678c0f39c043524fe896" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}

    /**
     * @return Returns the help.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o67e1416dd24548eda39a41210818a5c196" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.help;}

    /**
     * @param help
     *                The help to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o99e2031b75b845f1a0f4ca7d1dc3a0ae96" name="addHelp" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="help" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.helps.add(help);}

    /**
     * @return Returns the name.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9d4caa83956140afb9c728ea1eb5729996" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7fd76dfa17b145c8bdcd6f3cae0ebd7b96" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (questionSet == null) return getName();
        else return questionSet.getName() + "." + getName();}

    /**
     * @param name
     *                The name to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o413e9ffa967b41b8952a40389f55651896" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @param summaryAttributesRef
     *                The summaryAttributesRef to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o15868d0312024b798e3990781437853b96" name="setSummaryAttributes" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="summaryAttributeNames" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.summaryAttributeNames = summaryAttributeNames;}</source-code>
          </source-codes>
        </operation>
        <operation id="off3b6e8025ba409dac45e09cca82c25296" name="getSummaryAttributes" type="XmlAttributeField[]" type-id="XmlAttributeField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return summaryAttributes;}

    /**
     * @param xmlData
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6b30ecaf1211437da03e4168280ca56596" name="setXmlDataURL" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="xmlData" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.xmlData = xmlData;}</source-code>
          </source-codes>
        </operation>
        <operation id="odf8a9834950549f6961de8b23cb624b796" name="getXmlDataURL" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return xmlData;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3f2857ba22d547eebe3cfab25d6d3f9496" name="getXslURL" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return xsl;}</source-code>
          </source-codes>
        </operation>
        <operation id="o62e89899c5044f979e2cb9e596a2eb1a96" name="setXslURL" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="xsl" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.xsl = xsl;}</source-code>
          </source-codes>
        </operation>
        <operation id="oaf1d15585088449097a48da127a9a00396" name="getQuestionSet" type="XmlQuestionSet" type-id="XmlQuestionSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionSet;}</source-code>
          </source-codes>
        </operation>
        <operation id="o704417981b9449938895310fa3bdef8296" name="setQuestionSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionSet" type="XmlQuestionSet" type-id="XmlQuestionSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.questionSet = questionSet;}

    /**
     * @return Returns the recordClass.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8b94a22f2b5243558884b0b1df7c50ce96" name="getRecordClass" type="XmlRecordClass" type-id="XmlRecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.recordClass;}

    /*
     * &lt;sanityXmlQuestion ref="XmlQuestions.News" pageStart="1" pageEnd="20"
     * minOutputLength="1" maxOutputLength="100"/&gt;
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4fb14f241bba45f8bac454718782e09796" name="getSanityTestSuggestion" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        String indent = "    ";
        String newline = System.getProperty("line.separator");
        StringBuffer buf =
                new StringBuffer(newline + newline + indent
                        + "&lt;sanityXmlQuestion ref=\"" + getFullName() + "\""
                        + newline + indent + indent + indent
                        + "minOutputLength=\"FIX_m_i_len\" "
                        + "maxOutputLength=\"FIX_m_o_len\"" + newline + indent
                        + indent + indent + "pageStart=\"1\" pageEnd=\"20\"&gt;"
                        + newline);
        buf.append(indent + "&lt;/sanityXmlQuestion&gt;");
        return buf.toString();}

    /**
     * @param recordClassRef
     *                The recordClassRef to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6ef4ae772cdb4d09b60cd00b114750aa96" name="setRecordClassRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClassRef = recordClassRef;}</source-code>
          </source-codes>
        </operation>
        <operation id="o460fd215b20946b3a36c4984ff15be5596" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // resolve the reference to XmlRecordClass
        recordClass = (XmlRecordClass) model.resolveReference(recordClassRef);

        // resolve the references to summary attributes
        if (summaryAttributeNames == null){ // default use all attribute
            // fields
            summaryAttributes = recordClass.getAttributeFields();} else{ // use a subset of attribute fields
            Map&lt;String, XmlAttributeField&gt; summaries =
                    new LinkedHashMap&lt;String, XmlAttributeField&gt;();
            String[ names = summaryAttributeNames.split(",");
            for (String name : names){
                try{
                    XmlAttributeField field =
                            recordClass.getAttributeField(name);
                    summaries.put(field.getName(), field);} catch (WdkModelException ex){
                    // TODO Auto-generated catch block
                    ex.printStackTrace();
                    // System.err.println(ex);}}
            summaryAttributes = new XmlAttributeField[summaries.size();
            summaries.values().toArray(summaryAttributes);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5620378a0d0740028346c961c9bf5d9e96" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // initialize data loader
        loader = new XmlDataLoader(model.getXmlSchemaURL());
        this.model = model;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1459628664944739838229593d0231b596" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        XmlAnswerValue answer;
        InputStream inXmlStream = null;
        InputStream inXslStream = null;
        ByteArrayOutputStream outXmlStream = null;
        InputStream convertedStream = null;
        try{
            URL xmlDataURL = createURL(xmlData);

            // check if we have the XSL assigned
            if (xsl != null &amp;&amp; xsl.length() != 0){
                // yes, convert the xml first
                URL xslURL = createURL(xsl);
                inXmlStream = xmlDataURL.openStream();
                inXslStream = xslURL.openStream();

                outXmlStream = new ByteArrayOutputStream();

                XmlConverter.convert(inXmlStream, inXslStream, outXmlStream,
                        name);

                byte[ buffer = outXmlStream.toByteArray();

                // TEST
                // System.out.println(new String(buffer));

                convertedStream = new ByteArrayInputStream(buffer);

                answer = loader.parseDataStream(convertedStream);} else{ // no, just parse the xml directly
                answer = loader.parseDataFile(xmlDataURL);}} catch (MalformedURLException ex){
            throw new WdkModelException(ex);} catch (IOException ex){
            throw new WdkModelException(ex);} finally{
            try{
                if (inXmlStream != null) inXmlStream.close();
                if (inXslStream != null) inXslStream.close();
                if (outXmlStream != null) outXmlStream.close();
                if (convertedStream != null) convertedStream.close();} catch (IOException ex){
                throw new WdkModelException(ex);}}
        // assign start &amp; end index
        answer.setStartIndex((startIndex &lt;= endIndex) ? startIndex : endIndex);
        answer.setEndIndex((startIndex &lt;= endIndex) ? endIndex : startIndex);
        answer.setQuestion(this);
        answer.resolveReferences(this.model);
        answer.setResources(this.model);

        return answer;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocf0673ad67dd4b4492bd80adc5e2e35e96" name="createURL" type="URL" type-id="URL" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="data" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws MalformedURLException{
        if (data.startsWith("http://") || data.startsWith("ftp://")
                || data.startsWith("https://")){
            return new URL(data);} else{
            File xmlDataDir = model.getXmlDataDir();
            File xmlDataFile = new File(xmlDataDir, data);
            return xmlDataFile.toURI().toURL();}}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ocdf9ff43b3fd4dce84abae020e757ef096" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer("XmlQuestion: name='");
        buf.append(name);
        buf.append("'\r\n\trecordClass='");
        buf.append(recordClassRef);
        buf.append("'\r\n\txmlDataURL='");
        buf.append(xmlData);
        buf.append("'\r\n\tdisplayName='");
        buf.append(getDisplayName());
        buf.append("'\r\n\tdescription='");
        buf.append(getDescription());
        buf.append("'\r\n\thelp='");
        buf.append(getHelp());
        buf.append("'\r\n");
        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ocdc5395f379e4d36930beff201d5ce8696" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude the descriptions
        boolean hasDescription = false;
        for (WdkModelText description : descriptions){
            if (description.include(projectId)){
                if (hasDescription){
                    throw new WdkModelException("The xmlQuestion "
                            + getFullName() + " has more than one description "
                            + "for project " + projectId);} else{
                    this.description = description.getText();
                    hasDescription = true;}}}
        descriptions = null;

        // exclude the helps
        boolean hasHelp = false;
        for (WdkModelText help : helps){
            if (help.include(projectId)){
                if (hasHelp){
                    throw new WdkModelException("The xmlQuestion "
                            + getFullName() + " has more than one help "
                            + "for project " + projectId);} else{
                    this.help = help.getText();
                    hasHelp = true;}}}
        helps = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di556175970157096008" cid="C280" type="class" name="XmlQuestionSet" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:33">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a8b2d493b6f064b12a074f2b4d319890c511" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abe93e7a1a33446968ad53ca4e0d9c0de511" name="displayName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa5f72bb5316147cf951b27da91a80edc511" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a50d4a5bc811d4084a98e17727c275db5511" name="isInternal" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o02d5bb9bf84b443bacdd7c9470f66796511" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc64a01910f254440a064ed357cceb051511" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return Returns the description.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o93ea20f3ebf0477bba3e97aedab1ad0a511" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.description;}

    /**
     * @param description
     *                The description to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o486a5f2af44c49a1832928d60567ff59511" name="addDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.descriptions.add(description);}

    /**
     * @return Returns the displayName.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o384b4223d92b4150b021401af97f1d57511" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.displayName;}

    /**
     * @param displayName
     *                The displayName to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oec4bea9d9c9941438c2d35c129766969511" name="setDisplayName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayName = displayName;}

    /**
     * @return Returns the isInternal.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocb0e138df436421e8ab45e758eed6f4d511" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.isInternal;}

    /**
     * @param isInternal
     *                The isInternal to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o605a9d41a1a1448c8081e76746042387511" name="setInternal" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isInternal" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.isInternal = isInternal;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe7d087719c9a4618ada4e20fd0fa4365511" name="getQuestion" type="XmlQuestion" type-id="XmlQuestion" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        XmlQuestion question = questions.get(name);
        if (question == null)
            throw new WdkModelException("Question " + name
                    + " not found in set " + getName());
        return question;}</source-code>
          </source-codes>
        </operation>
        <operation id="of2575834a23a4c27b8f8e6306b2b385e511" name="getQuestions" type="XmlQuestion[]" type-id="XmlQuestion[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlQuestion[ quesArray = new XmlQuestion[questions.size();
        questions.values().toArray(quesArray);
        return quesArray;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3a8be6af98a24f5484c2279599264920511" name="addQuestion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="XmlQuestion" type-id="XmlQuestion" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        questionList.add(question);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.ModelSetI#getElement(java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob5ee25a88bf240a0ab66f77770422c0c511" name="getElement" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="elementName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questions.get(elementName);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.ModelSetI#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1d39e5786df54ae097854fd1408f397f511" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // resolve the references of questions
        for (XmlQuestion question : questions.values()){
            question.resolveReferences(model);}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.ModelSetI#setResources(org.gusdb.wdk.model.WdkModel)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe46a841507a347259db274f09da020f7511" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // set resources for questions
        for (XmlQuestion question : questions.values()){
            question.setQuestionSet(this);
            question.setResources(model);}}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa6f53f88706c4f569ca35b51d79be065511" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer("QuestionSet: name='");
        buf.append(getName());
        buf.append("'\r\n\tdisplayName='");
        buf.append(getDisplayName());
        buf.append("'\r\n\tdescription='");
        buf.append(getDescription());
        buf.append("'\r\n\r\n");

        for (XmlQuestion question : questions.values()){
            buf.append("\r\n:::::::::::::::::::::::::::::::::::::::::::::\r\n");
            buf.append(question);
            buf.append("\r\n");}
        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa6074179a2ab4599b3aee8835db9f9fa511" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude descriptions
        boolean hasDescription = false;
        for (WdkModelText description : descriptions){
            if (description.include(projectId)){
                if (hasDescription){
                    throw new WdkModelException("The xmlQuestionSet "
                            + getName() + " has more than one description "
                            + "for project " + projectId);} else{
                    this.description = description.getText();
                    hasDescription = true;}}}
        descriptions = null;

        // exclude xml questions
        for (XmlQuestion question : questionList){
            if (question.include(projectId)){
                question.setQuestionSet(this);
                question.excludeResources(projectId);
                String questionName = question.getName();
                if (questions.containsKey(questionName))
                    throw new WdkModelException("The xmlQuestion "
                            + questionName + " is duplicated in the "
                            + "xmlQuestionSet " + this.name);
                questions.put(questionName, question);}}
        questionList = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di537316951269420378" cid="C281" type="class" name="XmlRecordClass" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:34">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5958f82a18c9450bb4d79c230c0e8b1a39" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a493dbf11453d42e996cc93707ef7906d39" name="type" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad52f4bb31efc45b5ac72f21bd0eb547939" name="idPrefix" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5dbe578a392c4561ba309fb47b0574e139" name="delimiter" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af73b6e7565694e48beb5a4dbcd531fc439" name="attributeOrdering" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6a3d549226b24386884f20df702bfaa439" name="recordClassSet" type="XmlRecordClassSet" type-id="XmlRecordClassSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o320bcaf89cc24a52a6ee40df058180ba39" name="getAttributeOrdering" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attributeOrdering;}

    /**
     * @param attributeOrdering
     * The attributeOrdering to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9bd78bec6de64ddab5833dc8a571896239" name="setAttributeOrdering" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeOrdering" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.attributeOrdering = attributeOrdering;}

    /**
     * @return Returns the delimiter.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc99504c6be5340ef9f691868b4be77ba39" name="getDelimiter" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.delimiter;}

    /**
     * @param delimiter
     * The delimiter to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o85830b408f234b58bf2556e87eb1cc7b39" name="setDelimiter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="delimiter" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.delimiter = delimiter;}

    /**
     * @return Returns the idPrefix.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5e26d98c28654bd39b1af7374baebdce39" name="getIdPrefix" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.idPrefix;}

    /**
     * @param idPrefix
     * The idPrefix to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9b473218b1ef4ccb82cfe05296eab92e39" name="setIdPrefix" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="idPrefix" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.idPrefix = idPrefix;}

    /**
     * @return Returns the name.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obb032888ff7345318b46158f4516f0cb39" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o109db0ca43d4418eab161d8cc2c2976b39" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (recordClassSet == null) return getName();
        else return recordClassSet.getName() + "." + getName();}

    /**
     * @param name
     * The name to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7a40d6918c2547d99df4d7b7904d420f39" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return Returns the type.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7f725c18464f4596bccf55c572b0a72a39" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.type;}

    /**
     * @param type
     * The type to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocb71d624130148f5aa062faa3d1511f639" name="setType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="type" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.type = type;}</source-code>
          </source-codes>
        </operation>
        <operation id="o11ebf71315684eeb9e60960980a07cfb39" name="addAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="XmlAttributeField" type-id="XmlAttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        attributeFieldList.add(field);}</source-code>
          </source-codes>
        </operation>
        <operation id="oacd4369ac5374c7c9dba1ba8a580b78139" name="getAttributeField" type="XmlAttributeField" type-id="XmlAttributeField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        XmlAttributeField field = attributeFields.get(name);
        if (field == null)
            throw new WdkModelException("Attempting to access an attribute '"
                    + name + "' of XmlRecordClass " + getFullName()
                    + " but it has none.");
        return field;}</source-code>
          </source-codes>
        </operation>
        <operation id="obae3ecf316884bf2b7a8c3624d7ceea239" name="getAttributeFields" type="XmlAttributeField[]" type-id="XmlAttributeField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlAttributeField[ fields = new XmlAttributeField[attributeFields.size();
        attributeFields.values().toArray(fields);
        return fields;}</source-code>
          </source-codes>
        </operation>
        <operation id="od1d0e537630742dbbd320061dacee90739" name="addTableField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="XmlTableField" type-id="XmlTableField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        tableFieldList.add(field);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc3434750a9ce4e33836ba49eabc86e8b39" name="getTableField" type="XmlTableField" type-id="XmlTableField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        XmlTableField field = tableFields.get(name);
        if (field == null)
            throw new WdkModelException("Table field not found: " + name);
        return field;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0713aae51648400f9f90465e51665f0439" name="getTableFields" type="XmlTableField[]" type-id="XmlTableField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlTableField[ fields = new XmlTableField[tableFields.size();
        tableFields.values().toArray(fields);
        return fields;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa6a6177a88724dc68f199e31166b452c39" name="getRecordClassSet" type="XmlRecordClassSet" type-id="XmlRecordClassSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClassSet;}

    /**
     * this method is called by XmlRecordClassSet in setting resource stage
     * 
     * @param recordClassSet
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7a81562aa89145afbda90fcdb2d1547c39" name="setRecordClassSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassSet" type="XmlRecordClassSet" type-id="XmlRecordClassSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClassSet = recordClassSet;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8fa2a628528c42b09dd1eec489c81cdd39" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing at this time}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o553f7db881104faab0d2e68b0bebd0e939" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer("XmlRecordClass: name='");
        buf.append(name);
        buf.append("'\r\n--- Attributes ---");
        for (XmlAttributeField attribute : attributeFields.values()){
            buf.append("\r\n");
            buf.append(attribute.getName());}
        buf.append("\r\n--- Tables ---");
        for (XmlTableField table : tableFields.values()){
            buf.append("\r\n");
            buf.append(table);}
        buf.append("\r\n");
        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o3c958794e74e41fcb705177ce7a5cd8739" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude attribute field
        for (XmlAttributeField field : attributeFieldList){
            if (field.include(projectId)){
                field.excludeResources(projectId);
                String fieldName = field.getName();
                if (attributeFields.containsKey(fieldName))
                    throw new WdkModelException("The xmlAttributeField "
                            + fieldName + " is duplicated in xmlRecordClass "
                            + this.getFullName());
                attributeFields.put(fieldName, field);}}
        attributeFieldList = null;

        // exclude table fields
        for (XmlTableField field : tableFieldList){
            if (field.include(projectId)){
                field.excludeResources(projectId);
                String fieldName = field.getName();
                if (tableFields.containsKey(fieldName))
                    throw new WdkModelException("The xmlTableField "
                            + fieldName + " is duplicated in xmlRecordClass "
                            + this.getFullName());
                tableFields.put(fieldName, field);}}
        tableFieldList = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di884720072171674905" cid="C282" type="class" name="XmlRecordClassSet" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:34">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aad7432629f8e4c21b20dfc06233acd51321" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0065c420f71d427f83b7dd81a68ff9b0321" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa1edebd01f924340aed43651b243641f321" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7fb97a5e7ce64432a9969550d230ca8f321" name="getRecordClass" type="XmlRecordClass" type-id="XmlRecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        XmlRecordClass recordClass = recordClasses.get(name);
        if (recordClass == null)
            throw new WdkModelException("RecordClass \"" + name
                    + "\" not found in set " + getName());
        return recordClass;}</source-code>
          </source-codes>
        </operation>
        <operation id="o18404ea6a10647cdafb91ada435b1479321" name="getRecordClasses" type="XmlRecordClass[]" type-id="XmlRecordClass[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlRecordClass[ rcArray = new XmlRecordClass[recordClasses.size();
        recordClasses.values().toArray(rcArray);
        return rcArray;}</source-code>
          </source-codes>
        </operation>
        <operation id="o46995c788a71404c8bc53a1bd803834f321" name="addRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="XmlRecordClass" type-id="XmlRecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        recordClassList.add(recordClass);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.ModelSetI#getElement(java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o514c9f80b2a348c8becfac718bf78430321" name="getElement" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="elementName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClasses.get(elementName);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.ModelSetI#setResources(org.gusdb.wdk.model.WdkModel)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="offa129dbbb8c42739de4cea974f2b9ec321" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (XmlRecordClass recordClass : recordClasses.values()){
            recordClass.setRecordClassSet(this);}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.ModelSetI#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2f91c16e543a4c49b8d45b50ea5a5636321" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (XmlRecordClass recordClass : recordClasses.values()){
            recordClass.resolveReferences(model);}}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o665253fa56ad406abb867235d286561b321" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer("XmlRecordClassSet: name='");
        buf.append(name);
        for (XmlRecordClass rc : recordClasses.values()){
            buf.append("\r\n:::::::::::::::::::::::::::::::::::::::::::::\r\n");
            buf.append(rc);
            buf.append("\r\n");}
        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od2b8aa9947004fccbbeb3770ddb5f4fa321" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude recordClasses
        for (XmlRecordClass recordClass : recordClassList){
            if (recordClass.include(projectId)){
                recordClass.setRecordClassSet(this);
                recordClass.excludeResources(projectId);
                String rcName = recordClass.getName();
                if (recordClasses.containsKey(rcName))
                    throw new WdkModelException("The xmlRecordClass " + rcName
                            + " is duplicated in xmlRecordClassSet "
                            + this.name);
                recordClasses.put(rcName, recordClass);}}
        recordClassList = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di131361201648862088" cid="C283" type="class" name="XmlRecordInstance" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:35">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="af4ac79d2e519493188a2ced36fc1cacb105" name="recordID" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9e0964b111de4b02a64b18cc1529da80106" name="projectID" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3bef6cab7b8c4d67b08692dbc846cb74106" name="projectName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2846d0b44e69492a8f4f695ff62086f6106" name="recordClass" type="XmlRecordClass" type-id="XmlRecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aee1d1b2ecd764e5d81166e34dc1b5317106" name="attributes" type="Map&lt;String, XmlAttributeValue&gt;" type-id="Map&lt;String, XmlAttributeValue&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a28cdbb3c63f74adeb189aea8d9b098e2106" name="tables" type="Map&lt;String, XmlTableValue&gt;" type-id="Map&lt;String, XmlTableValue&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o5a87a035c03e4339ae8123ece7e415a8106" name="XmlRecordInstance" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // initialize a unique ID for this record
        recordID = Long.toString(++recordCount);
        attributes = new LinkedHashMap&lt;String, XmlAttributeValue&gt;();
        tables = new LinkedHashMap&lt;String, XmlTableValue&gt;();}

    /**
     * @return Returns the recordClass.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oab1d734d181c44ecb2f05d04c819d31e106" name="getRecordClass" type="XmlRecordClass" type-id="XmlRecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.recordClass;}

    /**
     * this method is called by the XmlAnswer in setting resource stage
     * 
     * @param recordClass
     *          The recordClass to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe2b3404383524ae0a08dd0566a233e08106" name="setRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="XmlRecordClass" type-id="XmlRecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;}

    /**
     * @return Returns the recordID.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5f00cbdedf8847a99c92b8edff3d6fa3106" name="getId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.recordID;}

    /**
     * @param recordID
     *          The recordID to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4c6e53eecf3043e9940c427d467ab97f106" name="setId" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordID" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordID = recordID;}

    /**
     * @return Returns the projectID.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oee711c6bcb0546cb952447f10af8c77f106" name="getProjectID" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.projectID;}

    /**
     * @return Returns the projectName.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofb392aed02aa45089d806c1f506d66a3106" name="getProjectName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.projectName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6b6d980fb8d04d6180edeb0028b8c529106" name="setProject" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectID" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="projectName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.projectID = projectID;
        this.projectName = projectName;}</source-code>
          </source-codes>
        </operation>
        <operation id="odf5647d6be5e4a56834c0c2b8aa64499106" name="getAttributes" type="XmlAttributeValue[]" type-id="XmlAttributeValue[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlAttributeValue[ attrArray = new XmlAttributeValue[attributes.size();
        attributes.values().toArray(attrArray);
        return attrArray;}</source-code>
          </source-codes>
        </operation>
        <operation id="of20f051b7a114e0098ad8f4ab34c7118106" name="getAttribute" type="XmlAttributeValue" type-id="XmlAttributeValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        XmlAttributeValue attribute = attributes.get(name);
        if (attribute == null)
            throw new WdkModelException("Attribute " + name + " not found in "
                    + recordClass.getName() + "#" + recordID);
        return attribute;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa897703fb2f449c1915b9e441861e7f4106" name="addAttribute" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attribute" type="XmlAttributeValue" type-id="XmlAttributeValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.attributes.put(attribute.getName(), attribute);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa331dc0736d540f0b85b8262dc19fcb3106" name="getTables" type="XmlTableValue[]" type-id="XmlTableValue[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlTableValue[ tabArray = new XmlTableValue[tables.size();
        tables.values().toArray(tabArray);
        return tabArray;}</source-code>
          </source-codes>
        </operation>
        <operation id="o53667062b07b40bb8bd24fc28ee88eb9106" name="getTable" type="XmlTableValue" type-id="XmlTableValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        XmlTableValue table = tables.get(name);
        if (table == null)
            throw new WdkModelException("Table " + name + " not found in "
                    + recordClass.getName() + "#" + recordID);
        return table;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9784b2f8cb68403596cacc52a3fcc60e106" name="addTable" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="table" type="XmlTableValue" type-id="XmlTableValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        tables.put(table.getName(), table);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2f3ca6e74ee7497da03436420e5a303d106" name="getSummaryAttributes" type="XmlAttributeValue[]" type-id="XmlAttributeValue[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        List&lt;XmlAttributeValue&gt; summaries = new ArrayList&lt;XmlAttributeValue&gt;();
        for (XmlAttributeValue attribute : attributes.values()){
            if (attribute.isSummary()) summaries.add(attribute);}
        XmlAttributeValue[ attrArray = new XmlAttributeValue[summaries.size();
        summaries.toArray(attrArray);
        return attrArray;}</source-code>
          </source-codes>
        </operation>
        <operation id="o30d1e884a298435e98961753d4fbb5fc106" name="getNonSummaryAttributes" type="XmlAttributeValue[]" type-id="XmlAttributeValue[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        List&lt;XmlAttributeValue&gt; nonSummaries = new ArrayList&lt;XmlAttributeValue&gt;();
        for (XmlAttributeValue attribute : attributes.values()){
            if (!attribute.isSummary()) nonSummaries.add(attribute);}
        XmlAttributeValue[ attrArray = new XmlAttributeValue[nonSummaries
                .size();
        nonSummaries.toArray(attrArray);
        return attrArray;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9a8f42c231be47ffb9ae6edf02ae06ba106" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // resolve attribute fields, and reorder it
        Map&lt;String, XmlAttributeValue&gt; orderedAttributes = new LinkedHashMap&lt;String, XmlAttributeValue&gt;();
        XmlAttributeField[ attributeFields = recordClass.getAttributeFields();
        for (XmlAttributeField attributeField : attributeFields){
            String name = attributeField.getName();
            XmlAttributeValue attributeValue = attributes.get(name);
            if (attributeValue == null)
                throw new WdkModelException("The defined XML Attribute " + name
                        + " is missing in the xml source for xml record "
                        + recordClass.getName() + " .");
            attributeValue.setAttributeField(attributeField);
            orderedAttributes.put(name, attributeValue);}
        attributes.clear();
        attributes = orderedAttributes;

        // resolve table fields, and reorder it
        Map&lt;String, XmlTableValue&gt; orderedTables = new LinkedHashMap&lt;String, XmlTableValue&gt;();
        XmlTableField[ tableFields = recordClass.getTableFields();
        for (XmlTableField tableField : tableFields){
            String tableName = tableField.getName();
            XmlTableValue tableValue = tables.get(tableName);
            // check if the table exist, if not, create a empty table with no
            // rows
            if (tableValue == null){
                tableValue = new XmlTableValue();
                tableValue.setName(tableName);}
            tableValue.setTableField(tableField);
            orderedTables.put(tableName, tableValue);

            // resolve the column fields, and re-order it
            XmlAttributeField[ columnFields = tableField.getAttributeFields();
            XmlRowValue[ rows = tableValue.getRows();
            for (XmlRowValue row : rows){
                Map&lt;String, XmlAttributeValue&gt; orderedRow = new LinkedHashMap&lt;String, XmlAttributeValue&gt;();
                for (XmlAttributeField columnField : columnFields){
                    String columnName = columnField.getName();
                    XmlAttributeValue columnValue = row.columns.get(columnName);
                    if (columnValue == null)
                        throw new WdkModelException("The column '" + columnName
                                + "' is missing in Xml record "
                                + recordClass.getFullName());
                    columnValue.setAttributeField(columnField);
                    orderedRow.put(columnName, columnValue);}
                row.columns.clear();
                row.columns = orderedRow;}}
        tables.clear();
        tables = orderedTables;

        // validate the table names &amp; column names
        for (XmlTableField field : tableFields){
            if (!tables.containsKey(field.getName()))
                throw new WdkModelException("Table " + field.getName()
                        + " defined in the Record Class "
                        + recordClass.getName() + ", but "
                        + "not found in the record " + recordID);

            // check column consistency
            XmlTableValue table = tables.get(field.getName());
            XmlAttributeField[ columns = field.getAttributeFields();
            for (XmlAttributeField column : columns){
                for (XmlRowValue row : table.getRows()){
                    if (!row.hasColumn(column.getName()))
                        throw new WdkModelException("Column "
                                + column.getName() + " defined in the table "
                                + table.getName() + " of Record Class, but "
                                + "not found in the table of the record "
                                + recordID);}}}}

    /**
     * @return print out the complete information of a reord
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2341b46df03649ef9a3ebce3d411cd94106" name="print" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer(this.getClass().getName());
        sb.append(":\r\n");

        // print out summary attribute values line by line
        XmlAttributeValue[ summaries = getSummaryAttributes();
        sb.append("========== Summary Attributes ==========\r\n");
        for (XmlAttributeValue attribute : summaries){
            sb.append(attribute.toString());
            sb.append("\r\n");}

        // print out summary attribute values line by line
        XmlAttributeValue[ nonSummaries = getNonSummaryAttributes();
        sb.append("\r\n========== Non-Summary Attributes ==========\r\n");
        for (XmlAttributeValue attribute : nonSummaries){
            sb.append(attribute.toString());
            sb.append("\r\n");}

        // print out table attributes
        XmlTableValue[ tables = getTables();
        sb.append("\r\n========== Table Attributes ==========\r\n");
        for (XmlTableValue table : tables){
            sb.append("Table : ");
            sb.append(table.getName());
            sb.append("\r\n");
            sb.append(table.toString());
            sb.append("\r\n");}
        return sb.toString();}

    /**
     * @return print out the names and values of summary attributes, in tabular
     *         format
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o778bfa10ca2e4dd980d0e19e0fadbb0e106" name="printSummary" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer(this.getClass().getName());
        sb.append(":\r\n\t");

        // print out summary attribute values line by line
        XmlAttributeValue[ summaries = getSummaryAttributes();
        for (XmlAttributeValue attribute : summaries){
            sb.append(attribute.getName());
            sb.append("\t");}
        sb.append("\r\n\t");
        for (XmlAttributeValue attribute : summaries){
            sb.append(attribute.getValue());
            sb.append("\t");}
        sb.append("\r\n");
        return sb.toString();}

    /*
     * (non-Javadoc) just print out the summary attribute values, in one line,
     * split by tab
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od836df69096f4793b9351281ea412156106" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer();
        XmlAttributeValue[ summaries = getSummaryAttributes();
        for (XmlAttributeValue attribute : summaries){
            sb.append(attribute.getValue());
            sb.append("\t");}
        return sb.toString().trim();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di843772581538241156" cid="C284" type="class" name="XmlRowValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:35">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a449dec8f9c094827a981015b271ddb5f256" name="columns" type="Map&lt;String, XmlAttributeValue&gt;" type-id="Map&lt;String, XmlAttributeValue&gt;" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o44a7e9e244ba4170b4d4366a6bb1a4a5256" name="XmlRowValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        columns = new LinkedHashMap&lt;String, XmlAttributeValue&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="of21e36c7131b4a638577d77715a067f8256" name="addColumn" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="column" type="XmlAttributeValue" type-id="XmlAttributeValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        columns.put(column.getName(), column);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7c7f672afbba4086b357c7cc8afad2fc256" name="getColumns" type="XmlAttributeValue[]" type-id="XmlAttributeValue[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlAttributeValue[ colArray = new XmlAttributeValue[columns.size();
        columns.values().toArray(colArray);
        return colArray;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocd732ef982554c07b6730ca440e5f17d256" name="getColumn" type="XmlAttributeValue" type-id="XmlAttributeValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        XmlAttributeValue column = columns.get(name);
        if (column == null)
            throw new WdkModelException("The column of name " + name
                    + " not exists!");
        return column;}</source-code>
          </source-codes>
        </operation>
        <operation id="o74b9fa08ae8140f28e40f40113fc28a2256" name="hasColumn" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return columns.containsKey(name);}

    /**
     * @return print out the attribute in this row, line by line
     * 
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3a5db48a9dbe443ba1cd490db74c3b36256" name="print" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer(this.getClass().getName());
        sb.append(": ");
        for (XmlAttributeValue attribute : columns.values()){
            sb.append("\r\n\t");
            sb.append(attribute.toString()); // the name/value tuple}
        sb.append("\r\n");
        return sb.toString();}

    /*
     * (non-Javadoc) print out the values of the attributes only, in one line
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="offa1faf7a9104f1d98499ba4cf884ccf256" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer();
        for (XmlAttributeValue attribute : columns.values()){
            sb.append(attribute.getValue());
            sb.append("\t");}
        return sb.toString().trim();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di762629575240613502" cid="C285" type="class" name="XmlTableField" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:35">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o83c83574ba014cc0a5ab31ba23040952536" name="XmlTableField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        internal = false;}</source-code>
          </source-codes>
        </operation>
        <operation id="of9680d5ec2824af3bcd2decc7c1a6762536" name="addAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeField" type="XmlAttributeField" type-id="XmlAttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        attributeFieldList.add(attributeField);}</source-code>
          </source-codes>
        </operation>
        <operation id="o5007def56701451e9cd148fe15048663536" name="getAttributeField" type="XmlAttributeField" type-id="XmlAttributeField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        XmlAttributeField attributeField = attributeFields.get(name);
        if (attributeField == null)
            throw new WdkModelException("The AttributeField '" + name
                    + "' does not exist!");
        return attributeField;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0034e549ba5f42a691a1a4c9bad2e5c1536" name="getAttributeFields" type="XmlAttributeField[]" type-id="XmlAttributeField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlAttributeField[ fields = new XmlAttributeField[attributeFields.size();
        attributeFields.values().toArray(fields);
        return fields;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9c688d10b2984f2189dc5d887ce2e51d536" name="size" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return attributeFields.size();}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o882e5da68a8f49debd71c3614a3b72a7536" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer();
        sb.append(getName());
        sb.append(" : ");
        for (XmlAttributeField field : attributeFields.values()){
            sb.append(field.getName());
            sb.append(", ");}
        if (sb.toString().endsWith(", "))
            sb.delete(sb.length() - 2, sb.length());
        return sb.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od7818a4af6b043ca8b88ea9360dd8723536" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude attribute fields
        for (XmlAttributeField field : attributeFieldList){
            if (field.include(projectId)){
                field.excludeResources(projectId);
                String fieldName = field.getName();
                if (attributeFields.containsKey(fieldName))
                    throw new WdkModelException("The xmlAttributeField "
                            + fieldName + " is duplicated in xmlTable "
                            + this.name);
                attributeFields.put(fieldName, field);}}
        attributeFieldList = null;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Field#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7db126b00f62463b8991de732479d5e1536" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di402426693286643111" cid="C286" type="class" name="XmlTableValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:35">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="addea4172513041b1a30699af4d2ff334812" name="tableField" type="XmlTableField" type-id="XmlTableField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a12c6934ace534903afa53d793418a06e812" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a27cbb37903ce440dbc9fc9b534b60d91812" name="rows" type="List&lt;XmlRowValue&gt;" type-id="List&lt;XmlRowValue&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oe1d126fb21924637a811843e63be1e3a813" name="XmlTableValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();
        rows = new ArrayList&lt;XmlRowValue&gt;();}

    /**
     * @return Returns the tableField.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oaaf4a87d35b644809bc150c7c2e510a4813" name="getTableField" type="XmlTableField" type-id="XmlTableField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.tableField;}

    /**
     * this method will called by XmlRecordInstance
     * 
     * @param tableField
     *                The tableField to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o665974f209b3405b838427a0cef14d14813" name="setTableField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableField" type="XmlTableField" type-id="XmlTableField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.tableField = tableField;}</source-code>
          </source-codes>
        </operation>
        <operation id="o45ef2547fc314aff9cd3abda924c7d78813" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getColumns()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obcc9e79ff2384b4c84b0631c8fd51f82813" name="getAttributeFields" type="XmlAttributeField[]" type-id="XmlAttributeField[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.tableField.getAttributeFields();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe2ab250b3fcd4a6bb802fcb269243368813" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.tableField.getDisplayName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getHelp()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o47675ced452a42af949346d602d011ec813" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.tableField.getHelp();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getIsInternal()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o17a1cbf2e8954668a1a9ee200f48bb69813" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.tableField.isInternal();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5372892fd34746e8a5b664f5b961ac80813" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (tableField == null) return name;
        else return tableField.getName();}

    /**
     * Return an array of all rows in this table. Each row is a map of column
     * name and xmlAttribute values
     * 
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obfae0bbb0873451bbbd297e1ddde488b813" name="getRows" type="XmlRowValue[]" type-id="XmlRowValue[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlRowValue[ rowArray = new XmlRowValue[rows.size();
        rows.toArray(rowArray);
        return rowArray;}</source-code>
          </source-codes>
        </operation>
        <operation id="o283d37612afa4358b4022b2b76eba12c813" name="addRow" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="row" type="XmlRowValue" type-id="XmlRowValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.rows.add(row);}</source-code>
          </source-codes>
        </operation>
        <operation id="oecd5a85afda94f4eab94e6de0fe78f53813" name="size" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return rows.size();}

    /**
     * @return print out the complete information of the table
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3e8e34c1a5d5476a881af0c36077bf69813" name="print" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer(this.getClass().getName());
        buf.append(":\tname='");
        buf.append(getName());
        buf.append("'\r\n\tdisplayName='");
        buf.append(getDisplayName());
        buf.append("'\r\n\thelp='");
        buf.append(getHelp());
        buf.append("'\r\n");
        // print the table fields &amp; values
        buf.append(toString());
        return buf.toString();}

    /*
     * (non-Javadoc) print out the table values in tabular format
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o71ffcc5186fe494eb2440a3c3a292564813" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer();
        // print out field names
        XmlAttributeField[ fields = getAttributeFields();
        for (XmlAttributeField field : fields){
            sb.append(field.getName());
            sb.append("\t");}
        sb.append("\r\n");

        // print out the row information
        for (XmlRowValue row : rows){
            sb.append(row.toString());
            sb.append("\r\n");}
        return sb.toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di432938191289772659" cid="C287" type="class" name="RecordView" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:35">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a4a5b1ecad59e42cab1011539a779a2e2952" name="handlerClass" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8fa64a45355c4654bfedf1f616da0d5c952" name="handler" type="RecordViewHandler" type-id="RecordViewHandler" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o2239f246110241a9b6b79612d989f611952" name="createSupportedRecordViews" type="RecordView[]" type-id="RecordView[]" visibility="public" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        List&lt;RecordView&gt; views = new ArrayList&lt;RecordView&gt;();
        views.add(createDefaultRecordView());
        return views.toArray(new RecordView[0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o5737dac18958417abe24da6017f7ca24952" name="createDefaultRecordView" type="RecordView" type-id="RecordView" visibility="private" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        RecordView view = new RecordView();
        view.setName("_default");
        view.setDisplay("Default");
        view.setJsp("/wdk/jsp/records/default.jsp");
        return view;}</source-code>
          </source-codes>
        </operation>
        <operation id="o39f52a234d554d068d41c80a0b8b9d3d952" name="getHandler" type="RecordViewHandler" type-id="RecordViewHandler" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return handler;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe0af126686d44e15b578e166dee02cb5952" name="setHandlerClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="handlerClass" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.handlerClass = handlerClass;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o16514a94b8ff49848b0a3c208074d461952" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(wdkModel);

        if (handlerClass != null){ // resolve the handler class
            try{
                Class&lt;? extends RecordViewHandler&gt; hClass = Class.forName(
                        handlerClass).asSubclass(RecordViewHandler.class);
                handler = hClass.newInstance();} catch (ClassNotFoundException ex){
                throw new WdkModelException(ex);} catch (InstantiationException ex){
                throw new WdkModelException(ex);} catch (IllegalAccessException ex){
                throw new WdkModelException(ex);}}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di972828919675813156" cid="C288" type="class" name="SummaryView" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:36">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2c408ce118694eb8baee0a5a359ce564177" name="handlerClass" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9ccc7dfb17dd48e9bde660ae48ebc48e177" name="handler" type="SummaryViewHandler" type-id="SummaryViewHandler" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o624886e341634b5ab7f29d7bb8487d5d177" name="createSupportedSummaryViews" type="SummaryView[]" type-id="SummaryView[]" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        List&lt;SummaryView&gt; views = new ArrayList&lt;SummaryView&gt;();
        views.add(createDefaultSummaryView(recordClass));
        return views.toArray(new SummaryView[0);}</source-code>
          </source-codes>
        </operation>
        <operation id="of9a1874a6edf40c9adc85b92ed2dffb4177" name="createDefaultSummaryView" type="SummaryView" type-id="SummaryView" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        SummaryView view = new SummaryView();
        view.setName("_default");
        //view.setDisplay(recordClass.getDisplayName() + " Results");
	// basket shares the tab title with the results table, so the tab should say "Genes" not "Gene results"
	view.setDisplay(recordClass.getDisplayName() + "s");
        view.setJsp("/wdk/jsp/results/default.jsp");
        return view;}</source-code>
          </source-codes>
        </operation>
        <operation id="o079a38e95735437c9112a63067779784177" name="getHandler" type="SummaryViewHandler" type-id="SummaryViewHandler" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return handler;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1bc9e615c2ed46e7b3bb72ee99e69c2a177" name="setHandlerClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="handlerClass" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.handlerClass = handlerClass;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o057a8828d0d7498996259210cf3a5929177" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(wdkModel);

        if (handlerClass != null){  // resolve the handler class
            try{
                Class&lt;? extends SummaryViewHandler&gt; hClass = Class.forName(
                        handlerClass).asSubclass(SummaryViewHandler.class);
                handler = hClass.newInstance();} catch (ClassNotFoundException ex){
                throw new WdkModelException(ex);} catch (InstantiationException ex){
                throw new WdkModelException(ex);} catch (IllegalAccessException ex){
                throw new WdkModelException(ex);}}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di639261480157177736" cid="C289" type="class" name="WdkView" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:36">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a8c975bcef1f3441580b70c231edb86dc441" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a228e20423726435783f24c75f57edf93441" name="display" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af8283e5fe6404524adcbd1a3e628f182441" name="jsp" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0f773c97cda2450b8c2c8cbea8e81e73441" name="_default" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2344d18a20a74a4a9a114498d38e5cdb441" name="descriptions" type="List&lt;WdkModelText&gt;" type-id="List&lt;WdkModelText&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1f9a76d20e0d4ee2ba73af38decf45a4441" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o9bcdc092ce9640ddbd7d2be86e6ae5ef441" name="WdkView" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        description = "";
        descriptions = new ArrayList&lt;WdkModelText&gt;();}

    /**
     * @return the name
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oca103307de0a4db6b30c8a9aee99fdb2441" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     *            the name to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of0a06e35942b479d8c4948ac91deb4b6441" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return the display
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o18fe76c4378f48deb9be22ed87981d4f441" name="getDisplay" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (display == null) ? name : display;}

    /**
     * @param display
     *            the display to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o93da3b76f23f4cfd905604e8bf144336441" name="setDisplay" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="display" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.display = display;}

    /**
     * @return the jsp
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o917ae68de3d04b63850ebc5dff7096b0441" name="getJsp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return jsp;}

    /**
     * @param jsp
     *            the jsp to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of62c5fe9fb114f428590ce33292877ad441" name="setJsp" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsp" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.jsp = jsp;}

    /**
     * @return the _default
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o05fc1cd673e74575889b924d0714eef1441" name="isDefault" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return _default;}

    /**
     * @param _default
     *            the _default to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o04101c8d469c4b4bb42963ebd3c56a68441" name="setDefault" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="_default" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this._default = _default;}

    /**
     * @return the description
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob858c1dadda5495fa565605b141993f3441" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return description;}

    /**
     * @param description
     *            the description to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o41ed03d110b54e5b95d67424013aa595441" name="addDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.descriptions.add(description);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc6fa87b7a231495c8536172dc48407f4441" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude descriptions
        boolean hasDescription = false;
        for (WdkModelText description : descriptions){
            if (description.include(projectId)){
                if (hasDescription){
                    throw new WdkModelException("The view " + getName()
                            + " has more than one description for project "
                            + projectId);} else{
                    this.description = description.getText();
                    hasDescription = true;}}}
        descriptions = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di439238625143657694" cid="C290" type="class" name="Answer" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:37">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa49ddc32293a4cf19898faac810671f3666" name="answerId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a50bdda38efba4473bfde04de181c10a8667" name="answerChecksum" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9be855f213f64db88dc7615d714a13ae667" name="projectId" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7b486b97329e4d55a139d336e47a3ac0667" name="projectVersion" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a89615e3389fa4e29a87dd9470ac0c4fb667" name="questionName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa9ae24ed38e849a48605b6b0c76ac224667" name="queryChecksum" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o36b9e11383bc4f0494e5a99177c47138667" name="Answer" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.answerId = answerId;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob49dce273dfb42b99104226131bd51ea667" name="Answer" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="answerChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.projectId = projectId.intern();
        this.answerChecksum = answerChecksum.intern();}

    /**
     * @return the answerChecksum
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="of5cfbaa482f648e3950eb43a7c74544f667" name="getAnswerChecksum" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerChecksum;}

    /**
     * @param answerChecksum
     *            the answerChecksum to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o12951a60de94457da59703d44f70acd2667" name="setAnswerChecksum" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.answerChecksum = answerChecksum.intern();}

    /**
     * @return the projectId
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o3b1a71d9e61c4bf3b87da088ff462f7c667" name="getProjectId" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return projectId;}

    /**
     * @param projectId
     *            the projectId to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o852382f45862434c97098a923bf0af87667" name="setProjectId" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.projectId = projectId.intern();}

    /**
     * @return the projectVersion
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o66a7109e374244049781d5e1b013d851667" name="getProjectVersion" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return projectVersion;}

    /**
     * @param projectVersion
     *            the projectVersion to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o09dbc630cbdc413198cbcb9f90c4606f667" name="setProjectVersion" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectVersion" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.projectVersion = projectVersion.intern();}

    /**
     * @return the questionName
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od6e2e508b9be437b8e1750dcd3fba17b667" name="getQuestionName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionName;}

    /**
     * @param questionName
     *            the questionName to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od7965594e41b4dfc8bdd8fab67d0e383667" name="setQuestionName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.questionName = questionName.intern();}

    /**
     * @return the queryChecksum
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o18eac8a50bff4f08a4e2088a1711e9c9667" name="getQueryChecksum" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queryChecksum;}

    /**
     * @param queryChecksum
     *            the queryChecksum to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o0cea2e9828564bb2a24d6cee795c8e46667" name="setQueryChecksum" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.queryChecksum = queryChecksum.intern();}

    /**
     * @return the answerId
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o89b0a93e197e4ecd9ef571d0389f3847667" name="getAnswerId" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerId;}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#hashCode()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o751f15eaf3ca4a91b98d11cc2f950db8667" name="hashCode" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return projectId.hashCode() ^ answerChecksum.hashCode();}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob08f7411475249ec9cda67c730cfaceb667" name="equals" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obj" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (obj != null &amp;&amp; obj instanceof Answer){
            Answer answer = (Answer) obj;
            return answer.projectId.equals(projectId)
                    &amp;&amp; answer.answerChecksum.equals(answerChecksum);} else return false;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di461140408383851564" cid="C291" type="class" name="AnswerFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:38">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7d32772b35db4d01a8e52f7f55e59e0f228" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4b344d5854684819add2afb36b230663228" name="userPlatform" type="DBPlatform" type-id="DBPlatform" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa16e6340036d4778bfce09423d250c50228" name="wdkSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8605c6ea69be4f90afc50bcac7600011228" name="answers" type="Map&lt;Answer, Answer&gt;" type-id="Map&lt;Answer, Answer&gt;" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ob478a71f07c047b6937ae015d5a3b67f228" name="AnswerFactory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        this.wdkModel = wdkModel;
        this.userPlatform = wdkModel.getUserPlatform();
        this.wdkSchema = wdkModel.getModelConfig().getUserDB().getWdkEngineSchema();
        this.answers = new HashMap&lt;Answer, Answer&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa5791eae0de74a2986252d4bb96217ef228" name="saveAnswerValue" type="Answer" type-id="Answer" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            NoSuchAlgorithmException, WdkModelException, JSONException,
            WdkUserException{
        // use transaction
        String questionName = answerValue.getQuestion().getFullName();
        String answerChecksum = answerValue.getChecksum();

        // check if answer has been saved.
        Answer answer = getAnswer(questionName, answerChecksum);
        if (answer == null){
            Question question = answerValue.getQuestion();
            // the answer hasn't been stored, create an answerInfo, and save it
            int answerId = userPlatform.getNextId(wdkSchema, TABLE_ANSWER);
            answer = new Answer(answerId);
            answer.setAnswerChecksum(answerValue.getChecksum());
            answer.setProjectId(wdkModel.getProjectId());
            answer.setProjectVersion(wdkModel.getVersion());
            answer.setQueryChecksum(question.getQuery().getChecksum(false));
            answer.setQuestionName(question.getFullName());

            JSONObject independentValues = answerValue.getIdsQueryInstance().getIndependentParamValuesJSONObject();
            String paramClob = independentValues.toString();
            saveAnswer(answer, paramClob);}
        answerValue.setAnswer(answer);
        return answer;}

    /**
     * @param answerChecksum
     * @return an AnswerInfo object if the answer has been saved; otherwise,
     *         return null.
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o1da0968ee81c4a17b10d598facec0ad0228" name="getAnswer" type="Answer" type-id="Answer" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="answerChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        String projectId = wdkModel.getProjectId();

        // use the cache if exists.
        Answer answer = answers.get(new Answer(projectId, answerChecksum));
        if (answer != null) return answer;

        // construct the query
        String sql = "SELECT " + COLUMN_ANSWER_ID + ", "
                + COLUMN_PROJECT_VERSION + ", " + COLUMN_QUERY_CHECKSUM + ", "
                + COLUMN_QUESTION_NAME + " FROM " + wdkSchema + TABLE_ANSWER
                + " WHERE " + COLUMN_PROJECT_ID + " = ? AND "
                + COLUMN_QUESTION_NAME + " = ? AND " + COLUMN_ANSWER_CHECKSUM
                + " = ?";

        ResultSet resultSet = null;
        try{
            DataSource dataSource = userPlatform.getDataSource();
            long start = System.currentTimeMillis();
            PreparedStatement ps = SqlUtils.getPreparedStatement(dataSource,
                    sql);
            ps.setString(1, projectId);
            ps.setString(2, questionName);
            ps.setString(3, answerChecksum);
            resultSet = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-answer-factory-answer-by-checksum", start);

            if (resultSet.next()){
                answer = new Answer(resultSet.getInt(COLUMN_ANSWER_ID));
                answer.setAnswerChecksum(answerChecksum);
                answer.setProjectId(projectId);
                answer.setProjectVersion(resultSet.getString(COLUMN_PROJECT_VERSION));
                answer.setQueryChecksum(resultSet.getString(COLUMN_QUERY_CHECKSUM));
                answer.setQuestionName(resultSet.getString(COLUMN_QUESTION_NAME));}} finally{
            SqlUtils.closeResultSet(resultSet);}
        answers.put(answer, answer);
        return answer;}</source-code>
          </source-codes>
        </operation>
        <operation id="o97a00e94a0964940a81e85d777af7bc2228" name="saveAnswer" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answer" type="Answer" type-id="Answer" default-value="" />
            <parameter id="" name="paramClob" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        // prepare the sql
        StringBuffer sql = new StringBuffer("INSERT INTO ");
        sql.append(wdkSchema).append(TABLE_ANSWER).append(" (");
        sql.append(COLUMN_ANSWER_ID).append(", ");
        sql.append(COLUMN_ANSWER_CHECKSUM).append(", ");
        sql.append(COLUMN_PROJECT_ID).append(", ");
        sql.append(COLUMN_PROJECT_VERSION).append(", ");
        sql.append(COLUMN_QUESTION_NAME).append(", ");
        sql.append(COLUMN_QUERY_CHECKSUM).append(") VALUES (?, ?, ?, ?, ?, ?)");

        PreparedStatement ps = null;
        try{
            DataSource dataSource = userPlatform.getDataSource();
            long start = System.currentTimeMillis();
            ps = SqlUtils.getPreparedStatement(dataSource, sql.toString());
            ps.setInt(1, answer.getAnswerId());
            ps.setString(2, answer.getAnswerChecksum());
            ps.setString(3, answer.getProjectId());
            ps.setString(4, answer.getProjectVersion());
            ps.setString(5, answer.getQuestionName());
            ps.setString(6, answer.getQueryChecksum());

            ps.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql.toString(),
                    "wdk-answer-factory-insert", start);} finally{
            SqlUtils.closeStatement(ps);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di747009159167397305" cid="C292" type="class" name="BasketFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:40">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2af2a814110a42e886e27b74020d858f913" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a91233089875e41169b2bce2f20ed7ffc913" name="schema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ob74cce24a7334841a3a50d64156312fe913" name="BasketFactory" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;
        this.schema = wdkModel.getModelConfig().getUserDB().getUserSchema();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5d98e81474fc477eaa257d939228c92b913" name="getSchema" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return schema;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe8fb16d6b2124745a46e229e8c08fc0f913" name="addToBasket" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="step" type="Step" type-id="Step" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, JSONException,
            WdkUserException, SQLException{
        logger.debug("adding to basket from step...");

        AnswerValue answerValue = step.getAnswerValue();
        RecordClass recordClass = answerValue.getQuestion().getRecordClass();
        List&lt;String[&gt; pkValues = answerValue.getAllIds();
        addToBasket(user, recordClass, pkValues);}

    /**
     * @param user
     * @param recordClass
     * @param pkValues
     *            a list of primary key values. the inner map is a primary-key
     *            column-value map.
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8bff7d84003b47bdac214b7fd99fdaa3913" name="" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="pkValues" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        String sqlInsert = "INSERT INTO " + schema + TABLE_BASKET + " ("
                + COLUMN_USER_ID + ", " + COLUMN_PROJECT_ID + ", "
                + COLUMN_RECORD_CLASS;
        String sqlValues = "";
        String sqlCount = "SELECT count(*) FROM " + schema + TABLE_BASKET
                + " WHERE " + COLUMN_USER_ID + "= ? AND " + COLUMN_PROJECT_ID
                + " = ? AND " + COLUMN_RECORD_CLASS + " = ?";
        for (int i = 1; i &lt;= pkColumns.length; i++){
            sqlInsert += ", " + Utilities.COLUMN_PK_PREFIX + i;
            sqlValues += ", ?";
            sqlCount += " AND " + Utilities.COLUMN_PK_PREFIX + i + " = ?";}
        sqlInsert += ") VALUES (?, ?, ?" + sqlValues + ")";
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        PreparedStatement psInsert = null, psCount = null;
        try{
            psInsert = SqlUtils.getPreparedStatement(dataSource, sqlInsert);
            psCount = SqlUtils.getPreparedStatement(dataSource, sqlCount);
            int count = 0;
            for (String[ row : pkValues){
                // fill or truncate the pk columns
                String[ pkValue = new String[pkColumns.length;
                int length = Math.min(row.length, pkValue.length);
                System.arraycopy(row, 0, pkValue, 0, length);

                // check if the record already exists.
                setParams(psCount, userId, projectId, rcName, pkValue);
                boolean hasRecord = false;
                ResultSet resultSet = null;
                try{
                    long start = System.currentTimeMillis();
                    resultSet = psCount.executeQuery();
                    SqlUtils.verifyTime(wdkModel, sqlCount,
                            "wdk-basket-factory-count", start);
                    if (resultSet.next()){
                        int rsCount = resultSet.getInt(1);
                        hasRecord = (rsCount &gt; 0);}}
                finally{
                    if (resultSet != null) resultSet.close();}
                if (hasRecord) continue;

                // insert new record
                setParams(psInsert, userId, projectId, rcName, pkValue);
                psInsert.addBatch();

                count++;
                if (count % 100 == 0){
                    long start = System.currentTimeMillis();
                    psInsert.executeBatch();
                    SqlUtils.verifyTime(wdkModel, sqlInsert,
                            "wdk-basket-factory-insert", start);}}
            if (count % 100 != 0){
                long start = System.currentTimeMillis();
                psInsert.executeBatch();
                SqlUtils.verifyTime(wdkModel, sqlInsert,
                        "wdk-basket-factory-insert", start);}
            // check the remote table to solve out-dated db-link issue with
            // Oracle.
            checkRemoteTable();}
        finally{
            SqlUtils.closeStatement(psInsert);
            SqlUtils.closeStatement(psCount);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oe95d9ee5e0604556b1de5227bb13e619913" name="removeFromBasket" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="step" type="Step" type-id="Step" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, JSONException,
            WdkUserException, SQLException{
        AnswerValue answerValue = step.getAnswerValue();
        RecordClass recordClass = answerValue.getQuestion().getRecordClass();
        List&lt;String[&gt; pkValues = answerValue.getAllIds();
        removeFromBasket(user, recordClass, pkValues);}</source-code>
          </source-codes>
        </operation>
        <operation id="oac5372708cfd470a82a93bf74d72c665913" name="" type="&lt;String[]&gt;" type-id="&lt;String[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="pkValues" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        String sqlDelete = "DELETE FROM " + schema + TABLE_BASKET + " WHERE "
                + COLUMN_USER_ID + "= ? AND " + COLUMN_PROJECT_ID + " = ? AND "
                + COLUMN_RECORD_CLASS + " = ?";
        for (int i = 1; i &lt;= pkColumns.length; i++){
            sqlDelete += " AND " + Utilities.COLUMN_PK_PREFIX + i + " = ?";}

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        PreparedStatement psDelete = null;
        try{
            psDelete = SqlUtils.getPreparedStatement(dataSource, sqlDelete);
            int count = 0;
            for (String[ row : pkValues){
                // fill or truncate the pk columns
                String[ pkValue = new String[pkColumns.length;
                int length = Math.min(row.length, pkValue.length);
                System.arraycopy(row, 0, pkValue, 0, length);

                setParams(psDelete, userId, projectId, rcName, pkValue);
                psDelete.addBatch();
                count++;
                if (count % 100 == 0){
                    long start = System.currentTimeMillis();
                    psDelete.executeBatch();
                    SqlUtils.verifyTime(wdkModel, sqlDelete,
                            "wdk-basket-factory-delete", start);}}
            if (count % 100 != 0){
                long start = System.currentTimeMillis();
                psDelete.executeBatch();
                SqlUtils.verifyTime(wdkModel, sqlDelete,
                        "wdk-basket-factory-delete", start);}
            // check the remote table to solve out-dated db-link issue with
            // Oracle.
            checkRemoteTable();}
        finally{
            SqlUtils.closeStatement(psDelete);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1222b682ee50464995c6278129bb28d5913" name="clearBasket" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();
        String sqlDelete = "DELETE FROM " + schema + TABLE_BASKET + " WHERE "
                + COLUMN_USER_ID + "= ? AND " + COLUMN_PROJECT_ID + " = ? AND "
                + COLUMN_RECORD_CLASS + " = ?";

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        PreparedStatement psDelete = null;
        try{
            long start = System.currentTimeMillis();
            psDelete = SqlUtils.getPreparedStatement(dataSource, sqlDelete);
            psDelete.setInt(1, userId);
            psDelete.setString(2, projectId);
            psDelete.setString(3, rcName);
            psDelete.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sqlDelete,
                    "wdk-basket-factory-delete-all", start);

            // check the remote table to solve out-dated db-link issue with
            // Oracle.
            checkRemoteTable();}
        finally{
            SqlUtils.closeStatement(psDelete);}}</source-code>
          </source-codes>
        </operation>
        <operation id="obd8dfdced8a24b19afa8aafd8f1f1bd9913" name="getBasketCounts" type="Map&lt;RecordClass, Integer&gt;" type-id="Map&lt;RecordClass, Integer&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException{
        Map&lt;RecordClass, Integer&gt; counts = new LinkedHashMap&lt;RecordClass, Integer&gt;();
        Map&lt;String, RecordClass&gt; recordClasses = new LinkedHashMap&lt;String, RecordClass&gt;();
        for (RecordClassSet rcSet : wdkModel.getAllRecordClassSets()){
            for (RecordClass recordClass : rcSet.getRecordClasses()){
                if (recordClass.isUseBasket()){
                    counts.put(recordClass, 0);
                    recordClasses.put(recordClass.getFullName(), recordClass);}}}
        // load the unique counts
        String sql = "SELECT " + COLUMN_RECORD_CLASS
                + ", count(*) AS record_size "
                + " FROM (SELECT DISTINCT * FROM " + schema + TABLE_BASKET
                + " WHERE " + COLUMN_USER_ID + " = ? AND " + COLUMN_PROJECT_ID
                + " = ?) t " + " GROUP BY " + COLUMN_RECORD_CLASS;
        DataSource ds = wdkModel.getUserPlatform().getDataSource();
        ResultSet rs = null;
        try{
            PreparedStatement ps = SqlUtils.getPreparedStatement(ds, sql);
            ps.setInt(1, user.getUserId());
            ps.setString(2, wdkModel.getProjectId());
            rs = ps.executeQuery();
            while (rs.next()){
                String rcName = rs.getString(COLUMN_RECORD_CLASS);
                int size = rs.getInt("record_size");

                RecordClass recordClass = recordClasses.get(rcName);
                if (recordClass != null){
                    counts.put(recordClass, size);} else{
                    logger.info("Basket is disabled on record class [" + rcName
                            + "], but user #" + user.getUserId()
                            + " has basket entries on it.");}}}
        finally{
            SqlUtils.closeResultSet(rs);}
        return counts;}</source-code>
          </source-codes>
        </operation>
        <operation id="o003e5cc22dc246c1971df2346ee856e5914" name="getBasketCounts" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="records" type="List" type-id="List" default-value="" />
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        String sqlCount = "SELECT count(*) FROM " + schema + TABLE_BASKET
                + " WHERE " + COLUMN_USER_ID + "= ? AND " + COLUMN_PROJECT_ID
                + " = ? AND " + COLUMN_RECORD_CLASS + " = ?";
        for (int i = 1; i &lt;= pkColumns.length; i++){
            sqlCount += " AND " + Utilities.COLUMN_PK_PREFIX + i + " = ?";}
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        PreparedStatement psCount = null;
        try{
            psCount = SqlUtils.getPreparedStatement(dataSource, sqlCount);
            int basketCount = 0;
            for (String[ row : records){
                // fill or truncate the pk columns
                String[ pkValue = new String[pkColumns.length;
                int length = Math.min(row.length, pkValue.length);
                System.arraycopy(row, 0, pkValue, 0, length);

                // check if the record already exists.
                setParams(psCount, userId, projectId, rcName, pkValue);
                boolean hasRecord = false;
                ResultSet resultSet = null;
                try{
                    long start = System.currentTimeMillis();
                    resultSet = psCount.executeQuery();
                    SqlUtils.verifyTime(wdkModel, sqlCount,
                            "wdk-basket-factory-count", start);
                    if (resultSet.next()){
                        int rsCount = resultSet.getInt(1);
                        hasRecord = (rsCount &gt; 0);}}
                finally{
                    if (resultSet != null) resultSet.close();}
                if (hasRecord){
                    basketCount++;}}
            return basketCount;}
        finally{
            SqlUtils.closeStatement(psCount);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o9d0aa61c34b64c5cb9113db7baf6fb34914" name="getBasket" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException, SQLException,
            NoSuchAlgorithmException, JSONException{
        String sql = "SELECT * FROM " + schema + TABLE_BASKET + " WHERE "
                + COLUMN_PROJECT_ID + " = ? AND " + COLUMN_USER_ID
                + " = ? AND " + COLUMN_RECORD_CLASS + " =?";
        DataSource ds = wdkModel.getUserPlatform().getDataSource();
        ResultSet rs = null;
        try{
            long start = System.currentTimeMillis();
            PreparedStatement ps = SqlUtils.getPreparedStatement(ds, sql);
            ps.setFetchSize(100);
            ps.setString(1, wdkModel.getProjectId());
            ps.setInt(2, user.getUserId());
            ps.setString(3, recordClass.getFullName());
            rs = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-basket-factory-select-all",
                    start);

            StringBuffer buffer = new StringBuffer();
            PrimaryKeyAttributeField pkField = recordClass.getPrimaryKeyAttributeField();
            String[ columns = pkField.getColumnRefs();
            while (rs.next()){
                if (buffer.length() &gt; 0)
                    buffer.append(DatasetFactory.RECORD_DIVIDER);

                Map&lt;String, Object&gt; columnValues = new LinkedHashMap&lt;String, Object&gt;();
                for (int i = 1; i &lt;= columns.length; i++){
                    Object columnValue = rs.getObject(Utilities.COLUMN_PK_PREFIX
                            + i);
                    columnValues.put(columns[i - 1, columnValue);

                    // cannot use primary key value to format the output,
                    // otherwise we might loose information
                    if (i &gt; 1) buffer.append(DatasetFactory.COLUMN_DIVIDER);
                    buffer.append(columnValue);}

                // format the basket with a primary key value stub

                // PrimaryKeyAttributeValue pkValue = new
                // PrimaryKeyAttributeValue(
                // pkField, columnValues);
                // buffer.append(pkValue.getValue());
            }
            return buffer.toString();}
        finally{
            SqlUtils.closeResultSet(rs);}}

    /**
     * the method has to be called before the recordClasses are resolved.
     * 
     * @param recordClass
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException
     * @throws JSONException
     * @throws WdkUserException
     */
    public void createSnapshotBasketQuestion(RecordClass recordClass)
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // check if the basket question already exists
        String qname = recordClass.getFullName().replace('.', '_')
                + SNAPSHOT_BASKET_QUESTION_SUFFIX;
        QuestionSet questionSet = wdkModel.getQuestionSet(Utilities.INTERNAL_QUESTION_SET);
        if (questionSet.contains(qname)) return;

        String rcName = recordClass.getDisplayName();
        Question question = new Question();
        question.setName(qname);
        question.setDisplayName("Copy of " + rcName + " Basket");
        question.setShortDisplayName("Copy of Basket");
        question.setRecordClass(recordClass);
        Query query = getBasketSnapshotIdQuery(recordClass);
        question.setQuery(query);
        questionSet.addQuestion(question);
        question.excludeResources(wdkModel.getProjectId());}

    private Query getBasketSnapshotIdQuery(RecordClass recordClass)
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();

        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // check if the boolean query already exists
        String queryName = rcName.replace('.', '_')
                + SNAPSHOT_BASKET_ID_QUERY_SUFFIX;
        QuerySet querySet = wdkModel.getQuerySet(Utilities.INTERNAL_QUERY_SET);
        if (querySet.contains(queryName)) return querySet.getQuery(queryName);

        SqlQuery query = new SqlQuery();
        query.setName(queryName);
        // create columns
        for (String columnName : pkColumns){
            Column column = new Column();
            column.setName(columnName);
            query.addColumn(column);}
        // create params
        DatasetParam datasetParam = getDatasetParam(recordClass);
        query.addParam(datasetParam);

        // make sure we create index on primary keys
        query.setIndexColumns(pkColumns);
        query.setDoNotTest(true);
        query.setIsCacheable(true);

        // construct the sql
        StringBuilder sql = new StringBuilder("SELECT DISTINCT ");
        for (int i = 0; i &lt; pkColumns.length; i++){
            if (i &gt; 0) sql.append(", ");
            sql.append(pkColumns[i);}
        sql.append(" FROM ($$" + datasetParam.getName() + "$$)");
        query.setSql(sql.toString());
        querySet.addQuery(query);
        query.excludeResources(projectId);
        return query;}

    private DatasetParam getDatasetParam(RecordClass recordClass)
            throws WdkModelException{
        String rcName = recordClass.getFullName();
        String paramName = rcName.replace('.', '_') + PARAM_DATASET_SUFFIX;
        ParamSet paramSet = wdkModel.getParamSet(Utilities.INTERNAL_PARAM_SET);
        if (paramSet.contains(paramName))
            return (DatasetParam) paramSet.getParam(paramName);

        DatasetParam param = new DatasetParam();
        param.setName(paramName);
        param.setId(paramName);
        param.setAllowEmpty(false);
        param.setRecordClassRef(rcName);
        param.setRecordClass(recordClass);
        param.setPrompt(recordClass.getType() + "s from");
        param.setDefaultType(DatasetParam.TYPE_BASKET);
        param.setAllowEmpty(false);
        paramSet.addParam(param);
        param.excludeResources(wdkModel.getProjectId());
        return param;}

    /**
     * the method has to be called before the recordClasses are resolved.
     * 
     * @param recordClass
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException
     * @throws JSONException
     * @throws WdkUserException
     */
    public void createRealtimeBasketQuestion(RecordClass recordClass)
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // check if the basket question already exists
        String qname = recordClass.getFullName().replace('.', '_')
                + REALTIME_BASKET_QUESTION_SUFFIX;
        QuestionSet questionSet = wdkModel.getQuestionSet(Utilities.INTERNAL_QUESTION_SET);
        if (questionSet.contains(qname)) return;

        String rcName = recordClass.getDisplayName();
        Question question = new Question();
        question.setName(qname);
        question.setDisplayName("Current " + rcName + " Basket");
        question.setShortDisplayName(rcName + " Basket");
        question.setRecordClass(recordClass);
        Query query = getBasketRealtimeIdQuery(recordClass);
        question.setQuery(query);
        questionSet.addQuestion(question);
        question.excludeResources(wdkModel.getProjectId());}

    private Query getBasketRealtimeIdQuery(RecordClass recordClass)
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        String dbLink = wdkModel.getModelConfig().getAppDB().getUserDbLink();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();

        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // check if the boolean query already exists
        String queryName = rcName.replace('.', '_')
                + REALTIME_BASKET_ID_QUERY_SUFFIX;
        QuerySet querySet = wdkModel.getQuerySet(Utilities.INTERNAL_QUERY_SET);
        if (querySet.contains(queryName)) return querySet.getQuery(queryName);

        SqlQuery query = new SqlQuery();
        query.setName(queryName);
        // create columns
        for (String columnName : pkColumns){
            Column column = new Column();
            column.setName(columnName);
            query.addColumn(column);}
        // create params
        query.addParam(getSignatureParam());

        // make sure we create index on primary keys
        query.setIndexColumns(pkColumns);
        query.setDoNotTest(true);
        query.setIsCacheable(false);

        // construct the sql
        StringBuilder sql = new StringBuilder("SELECT DISTINCT ");
        for (int i = 0; i &lt; pkColumns.length; i++){
            if (i &gt; 0) sql.append(", ");
            sql.append("b." + Utilities.COLUMN_PK_PREFIX + (i + 1));
            sql.append(" AS " + pkColumns[i);}
        sql.append(" FROM " + schema + TABLE_BASKET + dbLink + " b, ");
        sql.append(schema + UserFactory.TABLE_USER + dbLink + " u ");
        sql.append(" WHERE b." + COLUMN_USER_ID + " = u." + COLUMN_USER_ID);
        sql.append(" AND u." + UserFactory.COLUMN_SIGNATURE + " = $$"
                + PARAM_USER_SIGNATURE + "$$ ");
        sql.append(" AND b." + COLUMN_PROJECT_ID + " = '" + projectId + "'");
        sql.append(" AND b." + COLUMN_RECORD_CLASS + " = '" + rcName + "'");
        query.setSql(sql.toString());
        querySet.addQuery(query);
        query.excludeResources(projectId);
        return query;}

    private Param getSignatureParam() throws WdkModelException{
        ParamSet paramSet = wdkModel.getParamSet(Utilities.INTERNAL_PARAM_SET);
        if (paramSet.contains(PARAM_USER_SIGNATURE))
            return paramSet.getParam(PARAM_USER_SIGNATURE);

        StringParam param = new StringParam();
        param.setName(PARAM_USER_SIGNATURE);
        param.setAllowEmpty(false);
        param.setId(PARAM_USER_SIGNATURE);
        param.setNumber(false);
        param.setVisible(false);
        paramSet.addParam(param);
        param.excludeResources(wdkModel.getProjectId());
        return param;}

    /**
     * the method has to be called before the recordClasses are resolved.
     * 
     * @param recordClass
     * @return
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     */
    public void createBasketAttributeQuery(RecordClass recordClass)
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        String dbLink = wdkModel.getModelConfig().getAppDB().getUserDbLink();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();

        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // check if the boolean query already exists
        String queryName = rcName.replace('.', '_')
                + BASKET_ATTRIBUTE_QUERY_SUFFIX;
        QuerySet querySet = wdkModel.getQuerySet(Utilities.INTERNAL_QUERY_SET);
        if (querySet.contains(queryName)) return;

        SqlQuery query = new SqlQuery();
        query.setName(queryName);

        // create columns
        for (String columnName : pkColumns){
            Column column = new Column();
            column.setName(columnName);
            query.addColumn(column);}
        Column column = new Column();
        column.setName(BASKET_ATTRIBUTE);
        query.addColumn(column);

        // make sure we create index on primary keys
        query.setIndexColumns(pkColumns);
        query.setDoNotTest(true);
        query.setIsCacheable(false); // cache the boolean query

        String prefix = Utilities.COLUMN_PK_PREFIX;

        // construct the sql
        StringBuilder sql = new StringBuilder("SELECT ");
        for (int i = 0; i &lt; pkColumns.length; i++){
            sql.append("i." + pkColumns[i + ", ");}
        // case clause works for both Oracle &amp; PostreSQL
        sql.append("(CASE WHEN b." + prefix + "1 IS NULL THEN 0 ELSE 1 END) ");
        sql.append(" AS " + BASKET_ATTRIBUTE);
        sql.append(" FROM (##WDK_ID_SQL##) i ");
        sql.append(" LEFT JOIN " + schema + TABLE_BASKET + dbLink + " b ");
        for (int i = 0; i &lt; pkColumns.length; i++){
            sql.append((i == 0) ? " ON " : " AND ");
            sql.append(" i." + pkColumns[i + " = b." + prefix + (i + 1));}
        sql.append(" AND b." + COLUMN_USER_ID + " = $$"
                + Utilities.PARAM_USER_ID + "$$ ");
        sql.append(" AND b." + COLUMN_PROJECT_ID + " = '" + projectId + "'");
        sql.append(" AND b." + COLUMN_RECORD_CLASS + " = '" + rcName + "'");

        query.setSql(sql.toString());
        querySet.addQuery(query);
        query.excludeResources(projectId);}

    /**
     * this method has to be called before resolving the mdoel.
     * 
     * @param recordClass
     * @throws WdkModelException
     */
    public void createAttributeQueryRef(RecordClass recordClass)
            throws WdkModelException{
        String rcName = recordClass.getFullName();
        String queryName = Utilities.INTERNAL_QUERY_SET + "."
                + rcName.replace('.', '_') + BASKET_ATTRIBUTE_QUERY_SUFFIX;

        ColumnAttributeField attribute = new ColumnAttributeField();
        attribute.setName(BASKET_ATTRIBUTE);
        attribute.setDisplayName("In Basket");
        attribute.setInternal(true);
        attribute.setInReportMaker(false);
        attribute.setSortable(true);

        AttributeQueryReference reference = new AttributeQueryReference();
        reference.setRef(queryName);
        reference.addAttributeField(attribute);
        recordClass.addAttributesQueryRef(reference);
        reference.excludeResources(wdkModel.getProjectId());}

    private void setParams(PreparedStatement ps, int userId, String projectId,
            String rcName, String[ pkValue) throws SQLException{
        ps.setInt(1, userId);
        ps.setString(2, projectId);
        ps.setString(3, rcName);
        for (int i = 0; i &lt; pkValue.length; i++){
            ps.setString(i + 4, pkValue[i);}}

    /**
     * The method is used to address out-dated db-link issue with Oracle. The
     * solution is suggested by Oracle support, that: " Since clocks are
     * synchronized at the end of a remote query, precede each remote query with
     * a dummy remote query to the same site (such as select * from
     * dual@remote)."
     * 
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws SQLException
     */
    private void checkRemoteTable() throws WdkModelException, WdkUserException,
            SQLException{
        String dblink = wdkModel.getModelConfig().getAppDB().getUserDbLink();
        StringBuilder sql = new StringBuilder("SELECT count(*) FROM ");
        sql.append(schema).append(TABLE_BASKET).append(dblink);

        // execute this dummy sql to make sure the remote table is sync-ed.
        DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
        SqlUtils.executeScalar(wdkModel, dataSource, sql.toString(),
                "wdk-remote-basket-dummy");}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di114668429812028776" cid="C293" type="class" name="BooleanExpression" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:41">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="af7a53225cab744f4b0f33b153a3a7218636" name="user" type="User" type-id="User" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6007fc53da4847939856a04103f5a4eb636" name="orgExp" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o79448e8239bc449681cf588f3e553038636" name="BooleanExpression" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.user = user;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7925cd04d89c4dceb99b01a959a215dd636" name="parseExpression" type="Step" type-id="Step" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="expression" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="useBooleanFilter" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        this.orgExp = expression;
        // TEST
        // System.out.println("Expression: " + expression);

        // replace the literals in the expression
        Map&lt;String, String&gt; replace = new LinkedHashMap&lt;String, String&gt;();
        expression = replaceLiterals(expression, replace).trim();

        // validate the expression by number of parentheses
        int count = 0;
        for (int i = 0; i &lt; expression.length(); i++){
            if (expression.charAt(i) == '(') count++;
            else if (expression.charAt(i) == ')') count--;
            if (count &lt; 0)
                throw new WdkUserException("Bad parentheses: " + orgExp);}
        if (count != 0)
            throw new WdkUserException("Bad parentheses: " + orgExp);

        // insert a space before open parenthes; it's used when getting operator
        expression = expression.replaceAll("\\(",
                Matcher.quoteReplacement(" ("));
        expression = expression.replaceAll("\\+", " + ");
        expression = expression.replaceAll("\\-", " - ");
        // delete extra white spaces
        expression = expression.replaceAll("\\s", " ").trim();

        // build the BooleanQuestionNode tree
        return parseBlock(expression, replace, useBooleanFilter);}</source-code>
          </source-codes>
        </operation>
        <operation id="o429a651d623e40bb851d9983edb42e98636" name="replaceLiterals" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="expression" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="replace" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException{
        // split the expression by quotes, and literals are the even items. If
        // the expression ends with a quote, the String.split() won't be able to
        // separate an extra part beyond the last quote. I have to append a
        // space to get an odd number of parts. It's weird, but works.
        String[ parts = (expression + " ").split("\"");

        // no quote involved, no need for replacement
        if (parts.length == 1) return expression;

        // validate the expression by number of quotes; there are odd parts
        if (parts.length % 2 == 0)
            throw new WdkUserException("Odd number of quotes in: " + orgExp);

        // replace literals with stub
        StringBuffer sb = new StringBuffer(parts[0);
        int stubIndex = 0;
        for (int i = 1; i &lt; parts.length; i += 2){
            String stub = STUB_PREFIX + (stubIndex++);
            replace.put(stub.intern(), parts[i.intern());
            sb.append(stub);
            sb.append(parts[i + 1);}
        return sb.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o12f7851b45d24c96aec3d846b2595817637" name="Step" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="useBooleanFilter" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException{
        // check if the expression can be divided further
        // to do so, just need to check if there're spaces
        int spaces = block.indexOf(" ");
        int parenthese = block.indexOf("(");
        // it's a leaf node
        if (spaces &lt; 0 &amp;&amp; parenthese &lt; 0) return buildLeaf(block, replace);

        // otherwise, need to divide further
        String[ triplet = getTriplet(block);

        if (triplet.length == 1){ // only remove one pair of parentheses
            return parseBlock(triplet[0, replace, useBooleanFilter);} else{ // a triplet
            // get the answers that represents each piece
            Step left = parseBlock(triplet[0, replace, useBooleanFilter);
            Step right = parseBlock(triplet[2, replace, useBooleanFilter);

            String operator = triplet[1.trim();

            // create boolean answer that wraps the children
            Question question = left.getQuestion();
	    String filterName = null;
            AnswerFilterInstance filter = question.getRecordClass().getDefaultFilter();
	    if (filter != null){
		filterName = filter.getName();}
            return user.createBooleanStep(left, right, operator,
                    useBooleanFilter, filterName);}}</source-code>
          </source-codes>
        </operation>
        <operation id="od6d12f617f1b49f0b4b387d53fa86c96637" name="buildLeaf" type="Step" type-id="Step" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="block" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="replace" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException, SQLException,
            JSONException, NoSuchAlgorithmException{
        // the block must be a history id or an id starting with '#'
        String strId = (block.charAt(0) == '#') ? block.substring(1) : block;
        int stepDisplayId;
        try{
            stepDisplayId = Integer.parseInt(strId);} catch (NumberFormatException ex){
            throw new WdkUserException("Invalid Step Id: " + orgExp);}

        // get history
        Step step = user.getStep(stepDisplayId);
        // if (!step.isValid())
        // throw new WdkUserException("The Step #" + stepDisplayId
        // + " is invalid.");

        return step;}

    /**
     * Split the block into left operand, operator, right operand. If it cannot
     * be divided into three part, there should be only one part, put in [0].
     * 
     * @param block
     * @return
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7100e9ef649940c18795ac30fc64e245637" name="getTriplet" type="String[]" type-id="String[]" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="block" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException{
        int pos;

        // get the right part
        if (block.charAt(block.length() - 1) == ')'){
            int parenthese = 1;
            pos = block.length() - 2;
            // find the paired closing parenthese
            while (pos &gt;= 0 &amp;&amp; parenthese &gt; 0){
                if (block.charAt(pos) == '(') parenthese--;
                if (block.charAt(pos) == ')') parenthese++;
                if (parenthese &lt; 0)
                    throw new WdkUserException("Bad parentheses: " + orgExp);
                pos--;}
            if (parenthese != 0)
                throw new WdkUserException("Bad parentheses: " + orgExp);} else{ // no parenthese, then must be separated with space
            pos = block.lastIndexOf(" ");}
        String right = block.substring(pos).trim();
        // remove parenthese if necessary
        int bound = right.length() - 1;
        if (right.charAt(0) == '(' &amp;&amp; right.charAt(bound) == ')')
            right = right.substring(1, bound).trim();

        // there's only one part
        if (pos == 0) return new String[{ right};

        // grab operator
        String remain = block.substring(0, pos).trim();
        int start = remain.lastIndexOf(" ");
        if (start &lt; 0)
            throw new WdkUserException("Incomplete expression: " + orgExp);
        String operator = remain.substring(start).trim();

        // grab left piece
        String left = remain.substring(0, start).trim();
        // remove parenthese if necessary
        bound = left.length() - 1;
        if (left.charAt(0) == '(' &amp;&amp; left.charAt(bound) == ')')
            left = left.substring(1, bound).trim();
        return new String[{ left, operator, right};}</source-code>
          </source-codes>
        </operation>
        <operation id="oe8e47ba63ed244ee9ed682d39340f002637" name="getOperands" type="Set&lt;Integer&gt;" type-id="Set&lt;Integer&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="expression" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Set&lt;Integer&gt; operands = new LinkedHashSet&lt;Integer&gt;();
        // assuming operands are all digits, or digits heading with #
        Pattern pattern = Pattern.compile("\\b#?(\\d+?)\\b");
        Matcher matcher = pattern.matcher(expression);
        while (matcher.find()){
            String strId = matcher.group(1);
            operands.add(Integer.parseInt(strId));}
        return operands;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di143988146517197783" cid="C294" type="class" name="Dataset" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:42">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5f107be762674d488fe7437911782e55157" name="factory" type="DatasetFactory" type-id="DatasetFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a61f28a41bc2645828e66c0f1e691511d157" name="datasetId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab0a9a8825f5a495bb3eb450d7ea70b90157" name="userDatasetId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac6e01aa0881244b78e8be4e1472dcec0157" name="user" type="User" type-id="User" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac472c83cfd224a95bab0ef8f25f21003157" name="uploadFile" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5dc4be248c7c4719857d30a1de519395157" name="createTime" type="Date" type-id="Date" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aaa7303dbcb27451cb62aa1ff15eeb4b2157" name="summary" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a36755d8e5a4541cda70bdea4890bbc47157" name="size" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a53af45d698d04cbdbcc0bfeb9bd2a692157" name="checksum" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8a0ae7e2878b46ac8c4207be42d2044e157" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o7a6dcdd0d67b4b9fab19f29673fac445157" name="Dataset" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="factory" type="DatasetFactory" type-id="DatasetFactory" default-value="" />
            <parameter id="" name="datasetId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.factory = factory;
        this.datasetId = datasetId;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7cce2312c33a4889a99cd0bce6a4d74b157" name="getUser" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return user;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofd4e4c799c194c628c1eaf1c49b7c886157" name="setUser" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.user = user;}</source-code>
          </source-codes>
        </operation>
        <operation id="o080b3246d26e4094b70078f0756001d1158" name="getUploadFile" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return uploadFile;}

    /**
     * @return the createTime
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe7fcb1e8de3949f192f2d4f5d9131f76158" name="getCreateTime" type="Date" type-id="Date" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return createTime;}

    /**
     * @return the datasetId
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0873913bfc97447a83ab54ba2818e57f158" name="getDatasetId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return datasetId;}

    /**
     * @return the checksum
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o333c803fe4a1427788109753cde9a26e158" name="getChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return checksum;}

    /**
     * @return the size
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o41c62bf1184d4aea8f859a70ded26565158" name="getSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return size;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1ba66119242f46ac9ad5e127559013b1158" name="setSize" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="size" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.size = size;}

    /**
     * @return the summary
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2b9d5ef999d241b5a7a683e901f85422158" name="getSummary" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return summary;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6b7f1275e21a45109edf3be1f5b9b241158" name="setSummary" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="summary" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.summary = summary;}

    /**
     * @param createTime
     *            the createTime to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8d2616ec08b84babb8384f6f05d05aa3158" name="setCreateTime" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="createTime" type="Date" type-id="Date" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.createTime = createTime;}

    /**
     * @param values
     *            the summary to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob969a1082ec54a19bbc7b4b16aa29c3b158" name="setSummary" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="values" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.size = values.size();
        // compute summary
        StringBuffer sbSummary = new StringBuffer();
        int maxLength = Utilities.MAX_PARAM_VALUE_SIZE;
        for (String[ value : values){
            if (sbSummary.length() != 0) sbSummary.append(DatasetFactory.RECORD_DIVIDER);
            boolean first = true;
            for (String column : value){
                if (column != null &amp;&amp; column.length() &gt; 0){
                    if (first) first = false;
                    else sbSummary.append(DatasetFactory.COLUMN_DIVIDER);
                    sbSummary.append(column);}}
            if (sbSummary.length() &gt; maxLength) break;}
        summary = sbSummary.toString();
        if (summary.length() &gt; maxLength){
            int pos = summary.lastIndexOf(DatasetFactory.RECORD_DIVIDER, maxLength - 3);
            summary = summary.substring(0, (pos &gt; 0) ? pos + 1 : maxLength - 3);
            summary += "...";}}

    /**
     * @param uploadFile
     *            the uploadFile to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4471da9c25f14fb789abf6661f27b9e4158" name="setUploadFile" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="uploadFile" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (uploadFile != null &amp;&amp; uploadFile.length() &gt; UPLOAD_FILE_MAX_SIZE)
            uploadFile = uploadFile.substring(0, UPLOAD_FILE_MAX_SIZE - 3)
                    + "...";
        this.uploadFile = uploadFile;}

    /**
     * @return
     * @throws WdkUserException
     * @throws SQLException
     * @throws WdkModelException
     * @throws JSONException 
     * @throws NoSuchAlgorithmException 
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oac8e75beca874e819ef2e47e4076a304158" name="getValues" type="List&lt;String&gt;" type-id="List&lt;String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, SQLException,
            WdkModelException, NoSuchAlgorithmException, JSONException{
        return factory.getDatasetValues(this);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0f5505dc400b458d93a981708dca65ec160" name="getValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        List&lt;String&gt; values =factory.getDatasetValues(this);
        StringBuffer sb = new StringBuffer();
        for (String value : values){
            if (sb.length() &gt; 0) sb.append(DatasetFactory.RECORD_DIVIDER + " ");
            sb.append(value);}
        return sb.toString();}

    /**
     * @return the userDatasetId
     */</source-code>
          </source-codes>
        </operation>
        <operation id="odcddc533be004f2d9f37de5ea0a4848c160" name="getUserDatasetId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return userDatasetId;}

    /**
     * @param userDatasetId
     *            the userDatasetId to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o409a1a80cbd945f8bdb628fe918d7eac160" name="setUserDatasetId" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userDatasetId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.userDatasetId = userDatasetId;}

    /**
     * @param checksum
     *            the checksum to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6c5988ca39a842a4a8d3b63ccbe5167f160" name="setChecksum" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="checksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.checksum = checksum;}</source-code>
          </source-codes>
        </operation>
        <operation id="o02cf72ea6e4047e8a3eb3a08c1f29f53160" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass;}</source-code>
          </source-codes>
        </operation>
        <operation id="o44baa45b19b249c5b44dfe0c5b38c90c160" name="setRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di848785778594118597" cid="C295" type="class" name="DatasetFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:44">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ac5574b94c81041a6aa8e837a1723dac3663" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af20fc50f138d43c08264d44e37c2f3dd663" name="userPlatform" type="DBPlatform" type-id="DBPlatform" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="afec27288802f435da2ecd838d43ed9bb663" name="dataSource" type="DataSource" type-id="DataSource" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab78435cdcaad4584950135d4861a2237663" name="userSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a84b9c12178da40fbbf4357f6568a0272663" name="wdkSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o7c37906d5418427a8d4f05993950580c663" name="DatasetFactory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;
        this.userPlatform = this.wdkModel.getUserPlatform();
        this.dataSource = userPlatform.getDataSource();

        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        this.userSchema = userDB.getUserSchema();
        this.wdkSchema = userDB.getWdkEngineSchema();}</source-code>
          </source-codes>
        </operation>
        <operation id="od6663e4f049741929710ba905c3ceacf663" name="Dataset" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="uploadFile" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="strValues" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        List&lt;String[&gt; values = parseValues(recordClass, strValues);
        return getDataset(user, recordClass, uploadFile, values);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa75ced993a3d44d9a498facebd1296ac663" name="getDataset" type="Dataset" type-id="Dataset" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            String uploadFile, List&lt;String[&gt; values)
            throws WdkModelException, WdkUserException{
        if (values.size() == 0)
            throw new WdkDatasetException("The dataset is empty. User #"
                    + user.getUserId());

        Connection connection = null;
        try{
            // remove duplicates
            removeDuplicates(values);
        
            String checksum = getChecksum(values);
            connection = userPlatform.getDataSource().getConnection();
            Dataset dataset;
            connection.setAutoCommit(false);

            boolean needRefresh = false;
            // check if dataset exists
            try{
                // get dataset id, catch WdkModelException if it doesn't exist
                int datasetId = getDatasetId(connection, checksum);
                dataset = new Dataset(this, datasetId);
                dataset.setRecordClass(recordClass);
                loadDatasetIndex(connection, dataset);}
            catch (WdkModelException ex){
                logger.debug("Creating dataset for user #" + user.getUserId());

                // doesn't exist, create one
                dataset = insertDatasetIndex(recordClass, connection, checksum,
                        values);
                dataset.setChecksum(checksum);

                // and save the values
                insertDatasetValues(recordClass, connection, dataset, values);
                needRefresh = true;}
            dataset.setUser(user);

            // check if user dataset exists
            try{
                int userDatasetId = getUserDatasetId(connection, user,
                        dataset.getDatasetId());
                logger.debug("user dataset exist: " + userDatasetId);
                dataset.setUserDatasetId(userDatasetId);
                loadUserDataset(connection, dataset);}
            catch (WdkModelException ex){
                // user-dataset doesn't exist, insert it
                dataset.setUploadFile(uploadFile);
                insertUserDataset(connection, dataset);
                needRefresh = true;}
            connection.commit();

            if (needRefresh){
                // check remote table to solve out-dated db-link issue with Oracle.
                checkRemoteTable();}

            return dataset;}
        catch (NoSuchAlgorithmException e){
        	throw new WdkRuntimeException(e);}
        catch (SQLException e){
        	try{
        		if (connection != null) connection.rollback();}
        	catch(SQLException e2){
        		logger.error("Unable to roll back exception after SQL error during processing.", e2);}
            throw new WdkRuntimeException("Error while retrieving dataset.", e);}
        finally{
        	try{
        		if (connection != null){
        			connection.setAutoCommit(true);
        			connection.close();}}
        	catch(SQLException e2){
        		logger.error("Unable to close DB connection.", e2);}}}

    /**
     * Get dataset by userDatasetId;
     * 
     * @param user
     * @param userDatasetId
     * @return
     * @throws SQLException
     * @throws WdkModelException
     *             throws if the userDatasetId doesn't exist or doesn't belong
     *             to the given user.
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc7fcd825377244d88da2d19c9cc109cc663" name="getDataset" type="Dataset" type-id="Dataset" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="userDatasetId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
	        StringBuffer sql = new StringBuffer("SELECT ");
	        sql.append(COLUMN_DATASET_ID);
	        sql.append(" FROM ").append(userSchema).append(TABLE_USER_DATASET);
	        sql.append(" WHERE ").append(Utilities.COLUMN_USER_ID);
	        sql.append(" = ").append(user.getUserId());
	        sql.append(" AND ").append(COLUMN_USER_DATASET_ID);
	        sql.append(" = ").append(userDatasetId);
	
	        DataSource dataSource = userPlatform.getDataSource();
	        Connection connection = null;
	        try{
	        	Object result = SqlUtils.executeScalar(wdkModel, dataSource,
	        			sql.toString(), "wdk-dataset-factory-dataset-by-user-dataset");
	        	int datasetId = Integer.parseInt(result.toString());
	
	        	Dataset dataset = new Dataset(this, datasetId);
	        	dataset.setUser(user);
	        	dataset.setUserDatasetId(userDatasetId);
	
	        	connection = dataSource.getConnection();
	            loadDatasetIndex(connection, dataset);
	            loadUserDataset(connection, dataset);
	            return dataset;}
	        catch (SQLException e){
	        	throw new WdkUserException("Unable to get data set with ID: " + userDatasetId, e);}
	        finally{
	            if (connection != null)
	            	try{ connection.close();}
	            	catch (SQLException e){ logger.error("Unable to close DB conection!", e);}}}

    /**
     * Get a dataset from checksum; if the dataset exists but userDataset
     * doesn't, a new user dataset will be created
     * 
     * @param user
     * @param datasetChecksum
     * @return
     * @throws SQLException
     * @throws WdkModelException
     *             throws if the dataset doesn't exist;
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8f37f53d8312457fbcf91b60c37ad9de663" name="getDataset" type="Dataset" type-id="Dataset" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="datasetChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
    	try{
	        // get dataset id
	        StringBuffer sqlDatasetId = new StringBuffer("SELECT ");
	        sqlDatasetId.append(COLUMN_DATASET_ID);
	        sqlDatasetId.append(" FROM ").append(wdkSchema).append(
	                TABLE_DATASET_INDEX);
	        sqlDatasetId.append(" WHERE ").append(COLUMN_DATASET_CHECKSUM).append(
	                " = ?");
	        int datasetId;
	        ResultSet resultSet = null;
	        try{
	            long start = System.currentTimeMillis();
	            String sql = sqlDatasetId.toString();
	            PreparedStatement psQuery = SqlUtils.getPreparedStatement(dataSource, sql);
	            psQuery.setString(1, datasetChecksum);
	            resultSet = psQuery.executeQuery();
	            SqlUtils.verifyTime(wdkModel, sql,
	                    "wdk-dataset-factory-dataset-by-checksum", start);
	            if (!resultSet.next())
	                throw new WdkModelException("The dataset with checksum '"
	                        + datasetChecksum + "' doesn't exist.");
	            datasetId = resultSet.getInt(COLUMN_DATASET_ID);}
	        finally{
	            SqlUtils.closeResultSet(resultSet);}
	
	        // try to get a user dataset id
	        Connection connection = dataSource.getConnection();
	        try{
	            connection.setAutoCommit(false);
	
	            Dataset dataset = new Dataset(this, datasetId);
	            dataset.setUser(user);
	            loadDatasetIndex(connection, dataset);
	            try{
	                int userDatasetId = getUserDatasetId(connection, user,
	                        datasetId);
	                dataset.setUserDatasetId(userDatasetId);
	                loadUserDataset(connection, dataset);}
	            catch (WdkModelException ex){
	                // user data set doesn't exist
	                dataset.setUploadFile("");
	                insertUserDataset(connection, dataset);}
	            return dataset;}
	        catch (SQLException ex){
	            connection.rollback();
	            throw ex;}
	        finally{
	            connection.setAutoCommit(true);
	            connection.close();}}
    	catch (SQLException e){
    		throw new WdkUserException("Unable to retrieve data set.", e);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o23fb64be3baf45fe984ab82de7a78e53663" name="getDatasetValues" type="List&lt;String&gt;" type-id="List&lt;String&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataset" type="Dataset" type-id="Dataset" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        String columnPrefx = Utilities.COLUMN_PK_PREFIX;
        int columnCount = Utilities.MAX_PK_COLUMN_COUNT;
        StringBuffer sql = new StringBuffer();
        for (int i = 1; i &lt;= columnCount; i++){
            if (sql.length() == 0) sql.append("SELECT ");
            else sql.append(", ");
            sql.append(columnPrefx + i);}
        sql.append(" FROM ").append(wdkSchema).append(TABLE_DATASET_VALUE);
        sql.append(" WHERE ").append(COLUMN_DATASET_ID);
        sql.append(" = ").append(dataset.getDatasetId());

        ResultSet resultSet = null;
        DataSource dataSource = userPlatform.getDataSource();
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource,
                    sql.toString(), "wdk-dataset-factory-dataset-by-id");

            RecordClass recordClass = dataset.getRecordClass();
            PrimaryKeyAttributeField pkField = recordClass.getPrimaryKeyAttributeField();
            String[ pkColumns = pkField.getColumnRefs();

            List&lt;String&gt; values = new ArrayList&lt;String&gt;();
            while (resultSet.next()){
                Map&lt;String, Object&gt; columnValues = new LinkedHashMap&lt;String, Object&gt;();
                for (int i = 1; i &lt;= pkColumns.length; i++){
                    String column = pkColumns[i - 1;
                    Object columnValue = resultSet.getObject(Utilities.COLUMN_PK_PREFIX
                            + i);
                    columnValues.put(column, columnValue);}
                // create primary key value stub to format the primary key
                PrimaryKeyAttributeValue pkValue = new PrimaryKeyAttributeValue(
                        pkField, columnValues);
                values.add(pkValue.getValue().toString());}
            return values;}
        catch (SQLException e){
        	throw new WdkModelException("Could not retrieve dataset values.", e);}
        finally{
            SqlUtils.closeResultSet(resultSet);}}

    /**
     * @param connection
     * @param datasetChecksum
     * @return returns dataset Id.
     * @throws WdkModelException
     *             the dataset does not exist
     * @throws SQLException
     *             the database or query failure
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o461b340667fe453ebd506d8ea39c860f663" name="getDatasetId" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="connection" type="Connection" type-id="Connection" default-value="" />
            <parameter id="" name="datasetChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException, WdkUserException{
        StringBuffer sql = new StringBuffer("SELECT ");
        sql.append(COLUMN_DATASET_ID);
        sql.append(" FROM ").append(wdkSchema).append(TABLE_DATASET_INDEX);
        sql.append(" WHERE ").append(COLUMN_DATASET_CHECKSUM);
        sql.append(" = '").append(datasetChecksum).append("'");

        Object result = SqlUtils.executeScalar(wdkModel, dataSource,
                sql.toString(), "wdk-dataset-factory-id-by-checksum");
        return Integer.parseInt(result.toString());}

    /**
     * @param connection
     * @param datasetId
     * @return the user-dataset-id.
     * @throws WdkModelException
     *             the userDataset does not exist
     * @throws SQLException
     *             the database or query failure
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o57ed3aca921246df97a7e8d60838a7d5663" name="getUserDatasetId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="connection" type="Connection" type-id="Connection" default-value="" />
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="datasetId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException, WdkUserException{
        StringBuffer sql = new StringBuffer("SELECT ");
        sql.append(COLUMN_USER_DATASET_ID);
        sql.append(" FROM ").append(userSchema).append(TABLE_USER_DATASET);
        sql.append(" WHERE ").append(COLUMN_DATASET_ID).append(" = ").append(
                datasetId);
        sql.append(" AND ").append(Utilities.COLUMN_USER_ID).append(" = ").append(
                user.getUserId());

        Object result = SqlUtils.executeScalar(wdkModel, dataSource,
                sql.toString(), "wdk-dataset-factory-user-dataset-id");
        return Integer.parseInt(result.toString());}</source-code>
          </source-codes>
        </operation>
        <operation id="oe4d6eb2902424b13bee312e24eb9689b663" name="insertDatasetIndex" type="Dataset" type-id="Dataset" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
            <parameter id="" name="connection" type="Connection" type-id="Connection" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String checksum, List&lt;String[&gt; values)
            throws SQLException, WdkModelException, WdkUserException{
        // get a new dataset id
        int datasetId = userPlatform.getNextId(wdkSchema, TABLE_DATASET_INDEX);
        Dataset dataset = new Dataset(this, datasetId);
        dataset.setChecksum(checksum);
        dataset.setRecordClass(recordClass);

        // set summary
        dataset.setSummary(values);

        StringBuffer sql = new StringBuffer("INSERT INTO ");
        sql.append(wdkSchema).append(TABLE_DATASET_INDEX).append(" (");
        sql.append(COLUMN_DATASET_ID).append(", ");
        sql.append(COLUMN_DATASET_CHECKSUM).append(", ");
        sql.append(COLUMN_DATASET_SIZE).append(", ");
        sql.append(COLUMN_RECORD_CLASS).append(", ");
        sql.append(COLUMN_SUMMARY).append(") VALUES (?, ?, ?, ?, ?)");
        PreparedStatement psInsert = connection.prepareStatement(sql.toString());
        try{
            psInsert.setInt(1, datasetId);
            psInsert.setString(2, checksum);
            psInsert.setInt(3, dataset.getSize());
            psInsert.setString(4, recordClass.getFullName());
            psInsert.setString(5, dataset.getSummary());
            psInsert.execute();}
        finally{
            if (psInsert != null) psInsert.close();}
        return dataset;}</source-code>
          </source-codes>
        </operation>
        <operation id="obd648f3700a7408b9dfa23fc793611c1663" name="insertDatasetValues" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
            <parameter id="" name="connection" type="Connection" type-id="Connection" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> Dataset dataset, List&lt;String[&gt; values)
            throws SQLException{
        int columnCount = recordClass.getPrimaryKeyAttributeField().getColumnRefs().length;

        StringBuffer sql = new StringBuffer("INSERT INTO ");
        sql.append(wdkSchema).append(TABLE_DATASET_VALUE);
        sql.append(" (").append(COLUMN_DATASET_ID);
        for (int i = 1; i &lt;= columnCount; i++){
            sql.append(", ").append(Utilities.COLUMN_PK_PREFIX + i);}
        sql.append(") VALUES (?");
        for (int i = 1; i &lt;= columnCount; i++){
            sql.append(", ?");}
        sql.append(")");

        PreparedStatement psInsert = connection.prepareStatement(sql.toString());
        try{
            for (int i = 0; i &lt; values.size(); i++){
                String[ value = values.get(i);
                psInsert.setInt(1, dataset.getDatasetId());
                for (int j = 0; j &lt; columnCount; j++){
                    String val = (j &lt; value.length) ? value[j : null;
                    psInsert.setString(j + 2, val);}
                psInsert.addBatch();

                if ((i + 1) % 1000 == 0) psInsert.executeBatch();}
            if (values.size() % 1000 != 0) psInsert.executeBatch();}
        catch (BatchUpdateException ex){
            logger.error(ex);
            ex.getNextException().printStackTrace();
            throw ex;}
        finally{
            if (psInsert != null) psInsert.close();}}</source-code>
          </source-codes>
        </operation>
        <operation id="o7877fcae51924cea848926f5f6ecccf2664" name="insertUserDataset" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="connection" type="Connection" type-id="Connection" default-value="" />
            <parameter id="" name="dataset" type="Dataset" type-id="Dataset" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException, WdkUserException{
        // get new user dataset id
        int userDatasetId = userPlatform.getNextId(userSchema,
                TABLE_USER_DATASET);

        logger.debug("Inserting new user dataset id: " + userDatasetId);
        dataset.setUserDatasetId(userDatasetId);
        dataset.setCreateTime(new Date());

        StringBuffer sql = new StringBuffer("INSERT INTO ");
        sql.append(userSchema).append(TABLE_USER_DATASET).append(" (");
        sql.append(COLUMN_USER_DATASET_ID).append(", ");
        sql.append(COLUMN_DATASET_ID).append(", ");
        sql.append(Utilities.COLUMN_USER_ID).append(", ");
        sql.append(COLUMN_CREATE_TIME).append(", ");
        sql.append(COLUMN_UPLOAD_FILE).append(") VALUES (?, ?, ?, ?, ?)");

        PreparedStatement psInsert = connection.prepareStatement(sql.toString());
        try{
            psInsert.setInt(1, userDatasetId);
            psInsert.setInt(2, dataset.getDatasetId());
            psInsert.setInt(3, dataset.getUser().getUserId());
            psInsert.setTimestamp(4, new Timestamp(
                    dataset.getCreateTime().getTime()));
            psInsert.setString(5, dataset.getUploadFile());
            psInsert.executeUpdate();}
        finally{
            if (psInsert != null) psInsert.close();}}</source-code>
          </source-codes>
        </operation>
        <operation id="o30257d4fb4f847309d56af403e81abc6664" name="loadDatasetIndex" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="connection" type="Connection" type-id="Connection" default-value="" />
            <parameter id="" name="dataset" type="Dataset" type-id="Dataset" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException{
        StringBuffer sql = new StringBuffer("SELECT * ");
        sql.append(" FROM ").append(wdkSchema).append(TABLE_DATASET_INDEX);
        sql.append(" WHERE ").append(COLUMN_DATASET_ID).append(" = ");
        sql.append(dataset.getDatasetId());

        Statement stmt = null;
        ResultSet resultSet = null;
        try{
          stmt = connection.createStatement();
          resultSet = stmt.executeQuery(sql.toString());
            if (!resultSet.next())
                throw new WdkModelException("The dataset ("
                        + dataset.getDatasetId() + ") does not exist.");
            dataset.setChecksum(resultSet.getString(COLUMN_DATASET_CHECKSUM));
            dataset.setSize(resultSet.getInt(COLUMN_DATASET_SIZE));
            dataset.setSummary(resultSet.getString(COLUMN_SUMMARY));

            String rcName = resultSet.getString(COLUMN_RECORD_CLASS);
            // the recordClass might be determined by the datasetParam later
            if (dataset.getRecordClass() == null){
                dataset.setRecordClass((RecordClass) wdkModel.resolveReference(rcName));}}
        finally{
            try{
                if (resultSet != null) resultSet.close();}
            finally{
                if (stmt != null) stmt.close();}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5f3c16e3589045589d76db8825984767664" name="loadUserDataset" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="connection" type="Connection" type-id="Connection" default-value="" />
            <parameter id="" name="dataset" type="Dataset" type-id="Dataset" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException{
        StringBuffer sql = new StringBuffer("SELECT ");
        sql.append(COLUMN_CREATE_TIME).append(", ").append(COLUMN_UPLOAD_FILE);
        sql.append(" FROM ").append(userSchema).append(TABLE_USER_DATASET);
        sql.append(" WHERE ").append(COLUMN_USER_DATASET_ID).append(" = ");
        sql.append(dataset.getUserDatasetId());

        Statement stmt = null;
        ResultSet resultSet = null;
        try{
           stmt = connection.createStatement();
           resultSet = stmt.executeQuery(sql.toString());
            if (!resultSet.next())
                throw new WdkModelException("The userDataset ("
                        + dataset.getUserDatasetId() + ") does not exist.");
            dataset.setCreateTime(resultSet.getTimestamp(COLUMN_CREATE_TIME));
            dataset.setUploadFile(resultSet.getString(COLUMN_UPLOAD_FILE));}
        finally{
            try{
                if (resultSet != null) resultSet.close();}
            finally{
                if (stmt != null) stmt.close();}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o12aa4272276f4d4d9277dc70a26b7a7c664" name="getChecksum" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="values" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException{
        // sort the value list
        Collections.sort(values, new Comparator&lt;String[&gt;(){
            public int compare(String[ o1, String[ o2){
                int limit = Math.min(o1.length, o2.length);
                for (int i = 0; i &lt; limit; i++){
                    if (o1[i == null || o2[i == null) break;
                    int result = o1[i.compareTo(o2[i);
                    if (result != 0) return result;}
                return 0;}});
        JSONArray records = new JSONArray();
        for (String[ value : values){
            JSONArray record = new JSONArray();
            for (String column : value){
                record.put(column);}
            records.put(record);}
        return Utilities.encrypt(records.toString());}</source-code>
          </source-codes>
        </operation>
        <operation id="od846b3cf26314d21b6ee80e98d0ea1b2664" name="parseValues" type="List&lt;String[]&gt;" type-id="List&lt;String[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
            <parameter id="" name="strValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException{
        String[ rows = strValue.split(REGEX_RECORD_DIVIDER);
        List&lt;String[&gt; records = new ArrayList&lt;String[&gt;();
        int length = recordClass.getPrimaryKeyAttributeField().getColumnRefs().length;
        for (String row : rows){
            row = row.trim();
            if (row.length() == 0) continue;
            String[ columns = row.split(REGEX_COLUMN_DIVIDER);
            if (columns.length &gt; length)
                throw new WdkDatasetException("The dataset raw value of "
                        + "recordClass '" + recordClass.getFullName()
                        + "' has more columns than expected: '" + row + "'");

            // check if the value is too long, throw an exception if it is.
            for (String column : columns){
                if (column.length() &gt; MAX_VALUE_LENGTH)
                    throw new WdkUserException("The dataset raw value is too "
                            + " big to be an id for the recordClass "
                            + recordClass.getFullName() + ": " + column);}

            String[ record = new String[length;
            System.arraycopy(columns, 0, record, 0, columns.length);
            records.add(record);}
        return records;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8a013a56e8b3414d8c650ac0f95a7a7d664" name="removeDuplicates" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="values" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Set&lt;String&gt; set = new HashSet&lt;String&gt;();
        for (int i = values.size() - 1; i &gt;= 0; i--){
            String[ value = values.get(i);
            StringBuilder builder = new StringBuilder();
            for (String val : value){
                builder.append(val).append(COLUMN_DIVIDER);}
            String key = builder.toString();
            if (set.contains(key)) values.remove(i);
            else set.add(key);}}

    /**
     * The method is used to address out-dated db-link issue with Oracle. The
     * solution is suggested by Oracle support, that: " Since clocks are
     * synchronized at the end of a remote query, precede each remote query with
     * a dummy remote query to the same site (such as select * from
     * dual@remote)."
     * 
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws SQLException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob38991c425c14b30bc05f01e480d8c0d664" name="checkRemoteTable" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            SQLException{
        String dblink = wdkModel.getModelConfig().getAppDB().getUserDbLink();
        StringBuilder sql = new StringBuilder("SELECT count(*) FROM ");
        sql.append(wdkSchema).append(TABLE_DATASET_VALUE).append(dblink);

        // execute this dummy sql to make sure the remote table is sync-ed.
        DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
        SqlUtils.executeScalar(wdkModel, dataSource, sql.toString(),
                "wdk-remote-dataset-dummy");}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di647687675545681665" cid="C296" type="class" name="Favorite" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:44">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a1a0f0cfea93947a38008188b8ae9f5c0773" name="user" type="User" type-id="User" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a482dc28688e24c6d8bb9d08839c20b4e774" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6eb6408c91ab44f383fc2b486201c343774" name="recordInstance" type="RecordInstance" type-id="RecordInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a735b691a175d48ea9ac56e68fcbb7d82774" name="note" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6e047685701f409b91c6d7059e935645774" name="group" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o22feec6a655047118f64d4b780da6fae774" name="Favorite" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.user = user;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob404f3fbb7ba4d51a09919f4078ef820774" name="getUser" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return user;}</source-code>
          </source-codes>
        </operation>
        <operation id="obd5af4c6b03444d38fd723921e6d6662774" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9b0f8ba8295b460fa8f0409ad5b0d225774" name="getRecordInstance" type="RecordInstance" type-id="RecordInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordInstance;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc56c09c6696e46c3a55ae6f3cc2194ab774" name="setRecordInstance" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordInstance" type="RecordInstance" type-id="RecordInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordInstance = recordInstance;
        this.recordClass = recordInstance.getRecordClass();}

    /**
     * @return the note
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o3263ee63047e4c82aef69d36fe899b6d774" name="getNote" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return note;}

    /**
     * @param note
     *            the note to set
     */
    void</source-code>
          </source-codes>
        </operation>
        <operation id="o0f5bd88d19654ca8ae650ba40d8f77c6774" name="setNote" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="note" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.note = note;}

    /**
     * @return the group
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o11ec0c1a0a0e4670888ed603c1759e94774" name="getGroup" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return group;}

    /**
     * @param group
     *            the group to set
     */
    void</source-code>
          </source-codes>
        </operation>
        <operation id="o1ef60cf61e8e47408c580b7d9145061b774" name="setGroup" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="group" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.group = group;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di142561903670901247" cid="C297" type="class" name="FavoriteFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:46">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a12c2c81dad5b47138ca0f19ba5f676df673" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a840cf1b512f54feabec7ff17f41c5f4d673" name="schema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o427c224bc16e4150935f4d40a2b135e6673" name="FavoriteFactory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;
        this.schema = wdkModel.getModelConfig().getUserDB().getUserSchema();}

    /**
     * @param user
     * @param recordClass
     * @param recordIds
     *            a list of primary key values. the inner map is a primary-key
     *            column-value map.
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws JSONException
     * @throws NoSuchAlgorithmException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o61fe000b7a234640b0ec5c1b282b7652673" name="" type="&lt;Map&lt;String, Object&gt;&gt;" type-id="&lt;Map&lt;String, Object&gt;&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordIds" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException, NoSuchAlgorithmException,
            JSONException{
        logger.debug("adding favorite...");
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        String sqlInsert = "INSERT INTO " + schema + TABLE_FAVORITES + " ("
                + COLUMN_USER_ID + ", " + COLUMN_PROJECT_ID + ", "
                + COLUMN_RECORD_CLASS;
        String sqlValues = "";
        String sqlCount = "SELECT count(*) FROM " + schema + TABLE_FAVORITES
                + " WHERE " + COLUMN_USER_ID + "= ? AND " + COLUMN_PROJECT_ID
                + " = ? AND " + COLUMN_RECORD_CLASS + " = ?";
        for (int i = 1; i &lt;= pkColumns.length; i++){
            sqlInsert += ", " + Utilities.COLUMN_PK_PREFIX + i;
            sqlValues += ", ?";
            sqlCount += " AND " + Utilities.COLUMN_PK_PREFIX + i + " = ?";}
        sqlInsert += ", " + COLUMN_RECORD_NOTE + ") VALUES (?, ?, ?"
                + sqlValues + ", ?)";
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        PreparedStatement psInsert = null, psCount = null;
        try{
            psInsert = SqlUtils.getPreparedStatement(dataSource, sqlInsert);
            psCount = SqlUtils.getPreparedStatement(dataSource, sqlCount);
            int count = 0;
            for (Map&lt;String, Object&gt; recordId : recordIds){
                // check if the record already exists.
                setParams(psCount, userId, projectId, rcName, pkColumns,
                        recordId, 1);
                boolean hasRecord = false;
                ResultSet resultSet = null;
                try{
                    long start = System.currentTimeMillis();
                    resultSet = psCount.executeQuery();
                    SqlUtils.verifyTime(wdkModel, sqlCount,
                            "wdk-favorite-count", start);
                    if (resultSet.next()){
                        int rsCount = resultSet.getInt(1);
                        hasRecord = (rsCount &gt; 0);}} finally{
                    if (resultSet != null) resultSet.close();}
                if (hasRecord) continue;

                // get the default favorite note
                AttributeField noteField = recordClass.getFavoriteNoteField();
                String note = null;
                if (noteField != null){
                    RecordInstance instance = new RecordInstance(user,
                            recordClass, recordId);
                    AttributeValue noteValue = instance.getAttributeValue(noteField.getName());
                    Object value = noteValue.getValue();
                    note = (value != null) ? value.toString() : "";}

                // insert new record
                setParams(psInsert, userId, projectId, rcName, pkColumns,
                        recordId, 1);
                psInsert.setString(4 + pkColumns.length, note);
                psInsert.addBatch();

                count++;
                if (count % 100 == 0){
                    long start = System.currentTimeMillis();
                    psInsert.executeBatch();
                    SqlUtils.verifyTime(wdkModel, sqlInsert,
                            "wdk-favorite-insert", start);}}
            if (count % 100 != 0){
                long start = System.currentTimeMillis();
                psInsert.executeBatch();
                SqlUtils.verifyTime(wdkModel, sqlInsert, "wdk-favorite-insert",
                        start);}} finally{
            SqlUtils.closeStatement(psInsert);
            SqlUtils.closeStatement(psCount);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob40d611f1f7744deb6a699b460506ea2673" name="" type="&lt;Map&lt;String, Object&gt;&gt;" type-id="&lt;Map&lt;String, Object&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordIds" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        String sqlDelete = "DELETE FROM " + schema + TABLE_FAVORITES
                + " WHERE " + COLUMN_USER_ID + "= ? AND " + COLUMN_PROJECT_ID
                + " = ? AND " + COLUMN_RECORD_CLASS + " = ?";
        for (int i = 1; i &lt;= pkColumns.length; i++){
            sqlDelete += " AND " + Utilities.COLUMN_PK_PREFIX + i + " = ?";}

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        PreparedStatement psDelete = null;
        try{
            psDelete = SqlUtils.getPreparedStatement(dataSource, sqlDelete);
            int count = 0;
            for (Map&lt;String, Object&gt; recordId : recordIds){
                setParams(psDelete, userId, projectId, rcName, pkColumns,
                        recordId, 1);
                psDelete.addBatch();
                count++;
                if (count % 100 == 0){
                    long start = System.currentTimeMillis();
                    psDelete.executeBatch();
                    SqlUtils.verifyTime(wdkModel, sqlDelete,
                            "wdk-favorite-delete", start);}}
            if (count % 100 != 0){
                long start = System.currentTimeMillis();
                psDelete.executeBatch();
                SqlUtils.verifyTime(wdkModel, sqlDelete, "wdk-favorite-delete",
                        -start);}} finally{
            SqlUtils.closeStatement(psDelete);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o0d5eb09cad3942fa8dd25d2caa5e6585674" name="clearFavorite" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String sqlDelete = "DELETE FROM " + schema + TABLE_FAVORITES
                + " WHERE " + COLUMN_USER_ID + "= ? AND " + COLUMN_PROJECT_ID
                + " = ?";

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        PreparedStatement psDelete = null;
        try{
            long start = System.currentTimeMillis();
            psDelete = SqlUtils.getPreparedStatement(dataSource, sqlDelete);
            psDelete.setInt(1, userId);
            psDelete.setString(2, projectId);
            psDelete.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sqlDelete, "wdk-favorite-delete-all",
                    start);} finally{
            SqlUtils.closeStatement(psDelete);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o441b7e5e5517411c874409bbcabc7ac7674" name="getFavoriteCounts" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        // load the unique counts
        String sql = "SELECT count(*) AS fav_size FROM " + schema
                + TABLE_FAVORITES + " WHERE " + COLUMN_USER_ID + " = ? AND "
                + COLUMN_PROJECT_ID + " = ?";
        DataSource ds = wdkModel.getUserPlatform().getDataSource();
        ResultSet rs = null;
        int count = 0;
        try{
            long start = System.currentTimeMillis();
            PreparedStatement ps = SqlUtils.getPreparedStatement(ds, sql);
            ps.setInt(1, user.getUserId());
            ps.setString(2, wdkModel.getProjectId());
            rs = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-favorite-count", start);
            if (rs.next()){
                count = rs.getInt("fav_size");}} finally{
            SqlUtils.closeResultSet(rs);}
        return count;}</source-code>
          </source-codes>
        </operation>
        <operation id="o243eac9dd1cb4dd5ace6c5160dd07b0a674" name="getFavorites" type="Map&lt;RecordClass, List&lt;Favorite&gt;&gt;" type-id="Map&lt;RecordClass, List&lt;Favorite&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException, SQLException,
            NoSuchAlgorithmException, JSONException{
        String sql = "SELECT * FROM " + schema + TABLE_FAVORITES + " WHERE "
                + COLUMN_PROJECT_ID + " = ? AND " + COLUMN_USER_ID + " =?"
                + " ORDER BY " + COLUMN_RECORD_CLASS + " ASC, lower("
                + COLUMN_RECORD_GROUP + ") ASC, " + Utilities.COLUMN_PK_PREFIX
                + "1 ASC";
        DataSource ds = wdkModel.getUserPlatform().getDataSource();
        ResultSet rs = null;
        try{
            long start = System.currentTimeMillis();
            PreparedStatement ps = SqlUtils.getPreparedStatement(ds, sql);
            ps.setFetchSize(100);
            ps.setString(1, wdkModel.getProjectId());
            ps.setInt(2, user.getUserId());
            rs = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-favorite-select-all", start);

            Map&lt;RecordClass, List&lt;Favorite&gt;&gt; favorites = new LinkedHashMap&lt;RecordClass, List&lt;Favorite&gt;&gt;();
            while (rs.next()){
                String rcName = rs.getString(COLUMN_RECORD_CLASS);
                RecordClass recordClass = (RecordClass) wdkModel.getRecordClass(rcName);
                List&lt;Favorite&gt; list;
                if (favorites.containsKey(recordClass)){
                    list = favorites.get(recordClass);} else{
                    list = new ArrayList&lt;Favorite&gt;();
                    favorites.put(recordClass, list);}

                String[ columns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
                Map&lt;String, Object&gt; primaryKeys = new LinkedHashMap&lt;String, Object&gt;();
                for (int i = 1; i &lt;= columns.length; i++){
                    Object value = rs.getObject(Utilities.COLUMN_PK_PREFIX + i);
                    primaryKeys.put(columns[i - 1, value);}
                RecordInstance instance = new RecordInstance(user, recordClass,
                        primaryKeys);
                Favorite favorite = new Favorite(user);
                favorite.setRecordInstance(instance);
                favorite.setNote(rs.getString(COLUMN_RECORD_NOTE));
                favorite.setGroup(rs.getString(COLUMN_RECORD_GROUP));
                list.add(favorite);}
            return favorites;} finally{
            SqlUtils.closeResultSet(rs);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob4d51c63221d4993a066c7b5578f9559676" name="isInFavorite" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
            <parameter id="" name="recordId" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        String sqlCount = "SELECT count(*) FROM " + schema + TABLE_FAVORITES
                + " WHERE " + COLUMN_USER_ID + "= ? AND " + COLUMN_PROJECT_ID
                + " = ? AND " + COLUMN_RECORD_CLASS + " = ?";
        for (int i = 1; i &lt;= pkColumns.length; i++){
            sqlCount += " AND " + Utilities.COLUMN_PK_PREFIX + i + " = ?";}
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        ResultSet resultSet = null;
        try{
            PreparedStatement psCount = SqlUtils.getPreparedStatement(
                    dataSource, sqlCount);
            // check if the record already exists.
            setParams(psCount, userId, projectId, rcName, pkColumns, recordId,
                    1);
            boolean hasRecord = false;
            long start = System.currentTimeMillis();
            resultSet = psCount.executeQuery();
            SqlUtils.verifyTime(wdkModel, sqlCount, "wdk-favorite-count", start);
            if (resultSet.next()){
                int rsCount = resultSet.getInt(1);
                hasRecord = (rsCount &gt; 0);}
            return hasRecord;} finally{
            SqlUtils.closeResultSet(resultSet);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o36f6cfe73795446c9ac8217a0cf2a122677" name="setNotes" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
            <parameter id="" name="note" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        String sql = "UPDATE " + schema + TABLE_FAVORITES + " SET "
                + COLUMN_RECORD_NOTE + " = ? WHERE " + COLUMN_USER_ID
                + "= ? AND " + COLUMN_PROJECT_ID + " = ? AND "
                + COLUMN_RECORD_CLASS + " = ?";
        for (int i = 1; i &lt;= pkColumns.length; i++){
            sql += " AND " + Utilities.COLUMN_PK_PREFIX + i + " = ?";}
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        PreparedStatement psUpdate = null;
        try{
            psUpdate = SqlUtils.getPreparedStatement(dataSource, sql);

            int count = 0;
            for (Map&lt;String, Object&gt; recordId : recordIds){
                // check if the record already exists.
                psUpdate.setString(1, note);
                setParams(psUpdate, userId, projectId, rcName, pkColumns,
                        recordId, 2);
                psUpdate.addBatch();
                count++;
                if (count % 100 == 0){
                    long start = System.currentTimeMillis();
                    psUpdate.executeBatch();
                    SqlUtils.verifyTime(wdkModel, sql, "wdk-favorite-update-note", start);}}
            if (count % 100 != 0){
                long start = System.currentTimeMillis();
                psUpdate.executeBatch();
                SqlUtils.verifyTime(wdkModel, sql, "wdk-favorite-update-note", -start);}} finally{
            SqlUtils.closeStatement(psUpdate);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ocb3856deedb6483d9b47b6839033aff0677" name="setGroups" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            List&lt;Map&lt;String, Object&gt;&gt; recordIds, String group)
            throws SQLException, WdkUserException, WdkModelException{
        int userId = user.getUserId();
        String projectId = wdkModel.getProjectId();
        String rcName = recordClass.getFullName();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        String sql = "UPDATE " + schema + TABLE_FAVORITES + " SET "
                + COLUMN_RECORD_GROUP + " = ? WHERE " + COLUMN_USER_ID
                + "= ? AND " + COLUMN_PROJECT_ID + " = ? AND "
                + COLUMN_RECORD_CLASS + " = ?";
        for (int i = 1; i &lt;= pkColumns.length; i++){
            sql += " AND " + Utilities.COLUMN_PK_PREFIX + i + " = ?";}
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        PreparedStatement psUpdate = null;
        try{
            psUpdate = SqlUtils.getPreparedStatement(dataSource, sql);

            int count = 0;
            for (Map&lt;String, Object&gt; recordId : recordIds){
                // check if the record already exists.
                psUpdate.setString(1, group);
                setParams(psUpdate, userId, projectId, rcName, pkColumns,
                        recordId, 2);
                psUpdate.addBatch();
                count++;
                if (count % 100 == 0){
                    long start = System.currentTimeMillis();
                    psUpdate.executeBatch();
                    SqlUtils.verifyTime(wdkModel, sql, "wdk-favorite-update-group", start);}}
            if (count % 100 != 0){
                long start = System.currentTimeMillis();
                psUpdate.executeBatch();
                SqlUtils.verifyTime(wdkModel, sql, "wdk-favorite-update-group", -start);}} finally{
            SqlUtils.closeStatement(psUpdate);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o7a5b3dbfe10c4f29bd946ae52ae33a55677" name="getGroups" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        String sql = "SELECT " + COLUMN_RECORD_GROUP + " FROM " + schema
                + TABLE_FAVORITES + " WHERE " + COLUMN_USER_ID + "= ? AND "
                + COLUMN_PROJECT_ID + " = ?";
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        ResultSet resultSet = null;
        try{
            PreparedStatement psSelect = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psSelect.setInt(1, user.getUserId());
            psSelect.setString(2, wdkModel.getProjectId());

            long start = System.currentTimeMillis();
            resultSet = psSelect.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-favorite-select-group", start);
            Set&lt;String&gt; groups = new HashSet&lt;String&gt;();
            while (resultSet.next()){
                String group = resultSet.getString(COLUMN_RECORD_GROUP);
                if (group == null || group.trim().length() == 0) continue;
                group = group.trim();
                groups.add(group);}
            String[ array = new String[groups.size();
            groups.toArray(array);
            Arrays.sort(array);
            return array;} finally{
            SqlUtils.closeResultSet(resultSet);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o88c16892ce894a6f8078303ccf84bf4c677" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            String rcName, String[ pkColumns, Map&lt;String, Object&gt; recordId,
            int index) throws SQLException{
        ps.setInt(index++, userId);
        ps.setString(index++, projectId);
        ps.setString(index++, rcName);
        for (String column : pkColumns){
            ps.setObject(index++, recordId.get(column));}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di881123676981734242" cid="C298" type="class" name="QueryFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:47">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a641fb2043cc94469948aab7079cbf435855" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a808fad185ad44428bba3a42e224fc34c855" name="wdkSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6b05bf9ddeaa4e2382bfc2607eb7baaf855" name="userPlatform" type="DBPlatform" type-id="DBPlatform" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab91104a775ac4fbc80f018cc652c3f7b855" name="dataSource" type="DataSource" type-id="DataSource" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oea6e39b303b849c2ad90ff5a79ad3727855" name="QueryFactory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;
        this.userPlatform = this.wdkModel.getUserPlatform();
        this.dataSource = userPlatform.getDataSource();
        this.wdkSchema = wdkModel.getModelConfig().getUserDB().getWdkEngineSchema();}</source-code>
          </source-codes>
        </operation>
        <operation id="obea188b7b5f044e782a3bf368e3a96d6855" name="makeSummaryChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="summaryAttributes" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException{
        Set&lt;String&gt; usedAttributes = new HashSet&lt;String&gt;();
        // create checksum for config columns
        StringBuffer sb = new StringBuffer();
        for (String attribute : summaryAttributes){
            // skip redundant attributes
            if (usedAttributes.contains(attribute)) continue;

            if (sb.length() &gt; 0) sb.append(", ");
            sb.append(attribute);
            usedAttributes.add(attribute);}
        String summaryContent = sb.toString();
        // System.err.println("saving summary: " + summaryContent);
        String checksum = Utilities.encrypt(summaryContent);

        // check if the configuration exists
        PreparedStatement psInsert = null;
        try{
            if (null != getSummaryAttributes(checksum)) return checksum;

            // configuration not exists, add one
            String sql = "INSERT INTO" + " " + wdkSchema + TABLE_CLOB_VALUES
                    + " (" + COLUMN_CLOB_CHECKSUM + ", " + COLUMN_CLOB_VALUE
                    + ") VALUES (?, ?)";
            long start = System.currentTimeMillis();
            psInsert = SqlUtils.getPreparedStatement(dataSource, sql);
            psInsert.setString(1, checksum);
            psInsert.setString(2, summaryContent);
            psInsert.execute();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-query-factory-insert-clob",
                    start);
            return checksum;} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeStatement(psInsert);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o6c9a215d3f2e465b9d8e981eed29b6a9855" name="getSummaryAttributes" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="summaryChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        ResultSet rsSelect = null;
        try{
            String sql = "SELECT " + COLUMN_CLOB_VALUE + " FROM " + wdkSchema
                    + TABLE_CLOB_VALUES + " WHERE " + COLUMN_CLOB_CHECKSUM
                    + " = ?";
            long start = System.currentTimeMillis();
            PreparedStatement psSelect = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psSelect.setString(1, summaryChecksum);
            rsSelect = psSelect.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-query-factory-select-clob",
                    start);
            if (!rsSelect.next()) return null;

            // get the configuration
            String summaryContent = rsSelect.getString(COLUMN_CLOB_VALUE);
            // System.err.println("getting summary: " + summaryContent);

            String[ attributes = summaryContent.split(",");
            for (int i = 0; i &lt; attributes.length; i++){
                attributes[i = attributes[i.trim();}
            return attributes;} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rsSelect);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oa90342a72d284253ad3ffd0b82dccb90855" name="makeSortingChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="columns" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException{
        // create checksum for sorting columns
        StringBuffer sb = new StringBuffer();
        int i = 0;
        for (String colName : columns.keySet()){
            // only use a limit number of attribtues in sorting
            if (i &gt;= Utilities.SORTING_LEVEL) break;

            boolean ascend = columns.get(colName);
            if (sb.length() &gt; 0) sb.append(", ");
            sb.append(colName);
            sb.append(ascend ? " ASC" : " DESC");
            i++;}
        String columnsContent = sb.toString();
        String checksum = Utilities.encrypt(columnsContent);

        // check if the sorting exists
        PreparedStatement psInsert = null;
        try{
            if (null != getSortingAttributes(checksum)) return checksum;

            // sorting not exists, add one
            String sql = "INSERT INTO" + " " + wdkSchema + TABLE_CLOB_VALUES
                    + " (" + COLUMN_CLOB_CHECKSUM + ", " + COLUMN_CLOB_VALUE
                    + ") VALUES (?, ?)";
            long start = System.currentTimeMillis();
            psInsert = SqlUtils.getPreparedStatement(dataSource, sql);
            psInsert.setString(1, checksum);
            psInsert.setString(2, columnsContent);
            psInsert.execute();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-query-factory-insert-clob",
                    start);
            return checksum;} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeStatement(psInsert);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1d0d56b312394cd9a48577f04aafe510855" name="getSortingAttributes" type="Map&lt;String, Boolean&gt;" type-id="Map&lt;String, Boolean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sortingChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        ResultSet rsSelect = null;
        try{
            String sql = "SELECT " + COLUMN_CLOB_VALUE + " FROM " + wdkSchema
                    + TABLE_CLOB_VALUES + " WHERE " + COLUMN_CLOB_CHECKSUM
                    + " = ?";
            long start = System.currentTimeMillis();
            PreparedStatement psSelect = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psSelect.setString(1, sortingChecksum);
            rsSelect = psSelect.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-query-factory-select-clob",
                    start);

            if (!rsSelect.next()) return null;

            // get the sorting attributes
            String sortingContent = rsSelect.getString(COLUMN_CLOB_VALUE);
            String[ sortingPairs = sortingContent.split(",");
            Map&lt;String, Boolean&gt; attributes = new LinkedHashMap&lt;String, Boolean&gt;();
            for (String sortingPair : sortingPairs){
                String[ pair = sortingPair.trim().split("\\s+");

                // validate the format of the pair
                if (pair.length != 2
                        || (!"ASC".equalsIgnoreCase(pair[1) &amp;&amp; !"DESC".equalsIgnoreCase(pair[1)))
                    throw new WdkUserException(
                            "Invalid sorting attribute format: '" + sortingPair
                                    + "'");
                String attribute = pair[0;
                boolean ascend = pair[1.equalsIgnoreCase("asc");
                attributes.put(attribute, ascend);}
            return attributes;} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rsSelect);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o29094a495fe14c9e89fc1a67cd891dd4855" name="makeClobChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        // make the checksum
        String checksum = Utilities.encrypt(paramValue);

        PreparedStatement psInsert = null;
        try{
            // get the clob with the new checksum
            if (null != getClobValue(checksum)) return checksum;

            // clob value does not exist, add one
            String sql = "INSERT INTO" + " " + wdkSchema + TABLE_CLOB_VALUES
                    + " (" + COLUMN_CLOB_CHECKSUM + ", " + COLUMN_CLOB_VALUE
                    + ") VALUES (?, ?)";
            long start = System.currentTimeMillis();
            psInsert = SqlUtils.getPreparedStatement(dataSource, sql);
            psInsert.setString(1, checksum);
            psInsert.setString(2, paramValue);
            psInsert.execute();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-query-factory-insert-clob",
                    start);

            return checksum;} catch (SQLException ex){
            throw new WdkModelException(ex);} finally{
            SqlUtils.closeStatement(psInsert);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1dfab1b5d74a4fbeb76ceb73d02780e3855" name="getClobValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException{
        ResultSet rs = null;
        try{
            long start = System.currentTimeMillis();
            String sql = "SELECT " + COLUMN_CLOB_VALUE + " FROM " + wdkSchema
                    + TABLE_CLOB_VALUES + " WHERE " + COLUMN_CLOB_CHECKSUM
                    + " = ?";
            PreparedStatement ps = SqlUtils.getPreparedStatement(dataSource,
                    sql);
            ps.setString(1, paramChecksum);
            rs = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-query-factory-select-clob",
                    start);
            if (!rs.next()) return null;

            String clobValue = userPlatform.getClobData(rs, COLUMN_CLOB_VALUE);
            return clobValue;} catch (SQLException ex){
            throw new WdkModelException(ex);} finally{
            SqlUtils.closeResultSet(rs);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di636050527309270781" cid="C299" type="class" name="Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5e5930b0fa904cbcb3180f9477a057d7257" name="stepFactory" type="StepFactory" type-id="StepFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa51fc5539def44d39bc73aa8725fb1ae257" name="user" type="User" type-id="User" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a574dfaa05e6b41fdac7d206e486362bb257" name="displayId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac2ffa3c7866a4c5e91a3d0dfb8bc6a49257" name="internalId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa5b167de01f24b26ae956f1cf078a691257" name="createdTime" type="Date" type-id="Date" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a85efc205cc9f462b8ac7b3282967b0e2257" name="lastRunTime" type="Date" type-id="Date" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa3c467b62b2641ad895e1730eeaa81d7257" name="customName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1e3261dc66cc40d9b0d84fe6afd3edc8257" name="answer" type="Answer" type-id="Answer" visibility="private" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
        <attribute id="a4095af2bc2cd4a5e9b6bbe077c07c496257" name="deleted" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="ad7502c01ed19459281e199abf9dfea33257" name="collapsible" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="ab72b81bb52494f17800b97249bcde95c257" name="collapsedName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
        <attribute id="a934c619bbcef42979e76dd601e663a4e257" name="booleanExpression" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae6ca89a9fd324f1fb9a262185fa19e0c257" name="valid" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="a05f5f7605e4e4c79be2f94044756a416257" name="validationMessage" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a91e6441b281f4b6eb9ddcc11e228ea6d257" name="estimateSize" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="adc178c0da05540cea051990acf06a62d257" name="filterName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9cf6c2f2b85a42999738dc5220ff5aa0257" name="answerValue" type="AnswerValue" type-id="AnswerValue" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a94cf46a90d9b4b84b4204fddd704ace8257" name="assignedWeight" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="acfc525c650e1465cb75dc7fa989af861257" name="previousStepId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aeec9f55e02c849f3b31ad134654b738a257" name="childStepId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2239572c02e7429ba249680cc65bbfc1257" name="nextStepId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa2f6e6b09b7349889466cd72a1ad95f6257" name="parentStepId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a48365928713a4e8286d62779005aeb6a257" name="revisable" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="a674dfc1fe4f040a98a259e45e7ee1839257" name="exception" type="Exception" type-id="Exception" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="of9e4f24f3d9c470a8f62ccce8351b753257" name="Step" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="stepFactory" type="StepFactory" type-id="StepFactory" default-value="" />
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="displayId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> int internalId){
        this.stepFactory = stepFactory;
        this.user = user;
        this.displayId = displayId;
        this.internalId = internalId;
        deleted = false;
        assignedWeight = 0;}
    
    public synchronized Step getPreviousStep() throws WdkUserException, WdkModelException, SQLException, JSONException  {
        return getStepByDisplayId(previousStepId);</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di225363594424697498" cid="C300" type="class" name="StepCache" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab2213498a2a64eb79c4215e10e2b1e2d717" name="running" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2a819e84f4e44a69963bd820ab1d3f97717" name="node" type="StepNode" type-id="StepNode" visibility="package" abstract="false" virtual="false" default-value="steps.get">
          <stereotypes />
        </attribute>
        <attribute id="a1fad5e62e7284f3e8f5e342ff547062c717" name="threshold" type="long" type-id="long" visibility="package" abstract="false" virtual="false" default-value="System.currentTimeMillis">
          <stereotypes />
        </attribute>
        <attribute id="a66a1e6e6e1834ba7a8ee556545c5cfab718" name="MAX_LIFE" type="-" type-id="-" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o4a31bb6fd5ea46f4b7cc2216b5b382c0717" name="StepCache" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.steps = new HashMap&lt;StepKey, StepNode&gt;();}

    public synchronized void stop(){
        running = false;}

    public synchronized Step getStep(int userId, int displayId){
        StepKey key = new StepKey(userId, displayId);(key);
        if (node == null) return null;
        node.setLastAccessed(System.currentTimeMillis());

        logger.debug("Step #" + displayId + " of user #" + userId
                + " retrieved from cache.");
        return</source-code>
          </source-codes>
        </operation>
        <operation id="o3ae8107a8ad4467786f822f49b8877a2717" name="node.getStep" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes />
        </operation>
        <operation id="o04455c9664f348f0b4b4aeefbc2d7d87717" name="step.getDisplayId" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> + " of user #" + step.getUser().getUserId()
                + " added to cache.");
        User user = step.getUser();
        StepKey key = new StepKey(user.getUserId(), step.getDisplayId());
        StepNode node = new StepNode(step);
        node.setLastAccessed(System.currentTimeMillis());
        steps.put(key, node);</source-code>
          </source-codes>
        </operation>
        <operation id="o9f307b313455437b812b6cd533d1e81e717" name="steps.keySet" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">){
            StepNode node = steps.get(key);
            if (node.getStep().getUser().getUserId() == userId) keys.add(key);}
        for (StepKey key : keys){
            steps.remove(key);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c59ef67037348878835eb7326cdf49b717" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        running = true;
        while (running){
            purgeCache();
            try{
                Thread.sleep(INTERVAL);}
            catch (InterruptedException e){}}}

    private synchronized void purgeCache(){
        List&lt;StepKey&gt; keys = new ArrayList&lt;StepKey&gt;();()
        // find expired steps
        for (StepKey key :</source-code>
          </source-codes>
        </operation>
        <operation id="oe7679e226b284e24a9fcb0992036d28e718" name="steps.keySet" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">){
            StepNode node = steps.get(key);
            if (node.getLastAccessed() &lt; threshold) keys.add(key);}
        // remove expired steps
        if (</source-code>
          </source-codes>
        </operation>
        <operation id="oec2f51fecfa14f59a4fec97bcca83185718" name="keys.size" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> &gt; 0)
            logger.debug(keys.size()  + "/" + steps.size() + " steps expired.");
        for (StepKey key : keys){
            steps.remove(key);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di940015277815504329" cid="C301" type="class" name="StepKey" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o9b07ff24cba0471289baaebeeabc0932717" name="StepKey" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userId" type="int" type-id="int" default-value="" />
            <parameter id="" name="displayId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.userId = userId;
            this.displayId = displayId;}

        /*
         * (non-Javadoc)
         * 
         * @see java.lang.Object#hashCode()
         */
        @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6d3980f897db457aa06c1da584a7324e717" name="hashCode" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return userId ^ displayId;}

        /*
         * (non-Javadoc)
         * 
         * @see java.lang.Object#equals(java.lang.Object)
         */
        @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0846d2c45cb3409d9044b637b2c1332a717" name="equals" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obj" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            if (obj != null &amp;&amp; obj instanceof StepKey){
                StepKey key = (StepKey) obj;
                return (key.userId == userId &amp;&amp; key.displayId == displayId);} else return false;}}{

        private final Step step;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di494206295440045751" cid="C302" type="class" name="StepNode" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a980cd593c2174584a2aab155965fbdd2717" name="lastAccessed" type="long" type-id="long" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ofeb180fb4a054bf29f0b6ced4244b604717" name="StepNode" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="step" type="Step" type-id="Step" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            super();
            this.step = step;}

        /**
         * @return the step
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o2e23d3641e7645759118599e6e0dbc52717" name="getStep" type="Step" type-id="Step" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return step;}

        /**
         * @return the lastAccessed
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o86f6c41957af4ba5a4c088a1e81fb638717" name="getLastAccessed" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return lastAccessed;}

        /**
         * @param lastAccessed
         *            the lastAccessed to set
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o458705ea453849aea156c62d2d25525f717" name="setLastAccessed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="lastAccessed" type="long" type-id="long" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.lastAccessed = lastAccessed;}}

    private final Map&lt;StepKey, StepNode&gt; steps;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di837278424433303236" cid="C303" type="class" name="StepFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:34:59">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o27e977f0680f4225adccd6e520f0e064658" name="StepFactory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;
        this.stepCache = new StepCache();
        this.userPlatform = wdkModel.getUserPlatform();
        dataSource = userPlatform.getDataSource();

        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        this.userSchema = userDB.getUserSchema();
        this.wdkSchema = userDB.getWdkEngineSchema();
        
        // construct sql for selecting steps &amp; strategies
        String projectId = wdkModel.getProjectId();
        String answerTable = wdkSchema + AnswerFactory.TABLE_ANSWER;
        String stepTable = userSchema + TABLE_STEP;
        String strategyTable =  userSchema + TABLE_STRATEGY;
        
        selectSteps = "(SELECT s.*, a.question_name , a.answer_checksum, " 
            + "   (SELECT ps.display_id FROM " + stepTable + " ps " 
            + "    WHERE ps.user_id = s.user_id " 
            + "      AND ps.right_child_id = s.display_id) AS parent_id, "
            + "   (SELECT ns.display_id FROM "+stepTable+" ns " 
            + "    WHERE ns.user_id = s.user_id " 
            + "      AND ns.left_child_id = s.display_id) AS next_id "
            + " FROM " + stepTable + " s, "+answerTable+" a "
            + " WHERE s.answer_id = a.answer_id " 
            + "   AND a.project_id = '" + projectId + "')";
        
        selectStrategies = "(SELECT sr.* FROM " + strategyTable + " sr " 
              + "WHERE sr.project_id = '" + projectId + "')";
        
        // start the purge thread for the cache
        new Thread(stepCache).start();}

    // parse boolexp to pass left_child_id, right_child_id to loadAnswer</source-code>
          </source-codes>
        </operation>
        <operation id="o976a09182aa14cbfa2704c6b26a820c5658" name="Step" type="&lt;String, String&gt;" type-id="&lt;String, String&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependentValues" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="filter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            int pageStart, int pageEnd, boolean deleted, boolean validate,
            int assignedWeight) throws SQLException, WdkModelException,
            NoSuchAlgorithmException, WdkUserException, JSONException{

        // get summary list and sorting list
        String questionName = question.getFullName();
        Map&lt;String, Boolean&gt; sortingAttributes = user.getSortingAttributes(questionName);

        // create answer
        AnswerValue answerValue = question.makeAnswerValue(user,
                dependentValues, pageStart, pageEnd, sortingAttributes, filter,
                validate, assignedWeight);
        Answer answer = answerValue.getAnswer();

        logger.debug("id query name  :"
                + answerValue.getIdsQueryInstance().getQuery().getFullName());
        logger.debug("answer checksum:" + answerValue.getChecksum());
        logger.debug("question name:  " + question.getFullName());
        logger.debug("answer question:" + answer.getQuestionName());

        // prepare the values to be inserted.
        int userId = user.getUserId();

        String filterName = null;
        int estimateSize;
        Exception exception = null;
        try{
            if (filter != null){
                filterName = filter.getName();
                estimateSize = answerValue.getFilterSize(filterName);} else estimateSize = answerValue.getResultSize();}
        catch (Exception ex){
            estimateSize = 0;
            logger.error(ex);
            exception = ex;}

        String displayParamContent = getParamContent(dependentValues);

        // prepare SQLs
        String userIdColumn = Utilities.COLUMN_USER_ID;
        String answerIdColumn = AnswerFactory.COLUMN_ANSWER_ID;

        StringBuffer sqlMaxId = new StringBuffer("SELECT max(");
        sqlMaxId.append(COLUMN_DISPLAY_ID).append(") AS max_id FROM ");
        sqlMaxId.append(userSchema).append(TABLE_STEP).append(" s, ");
        sqlMaxId.append(wdkSchema).append(AnswerFactory.TABLE_ANSWER).append(
                " a ");
        sqlMaxId.append("WHERE s.").append(userIdColumn).append(" = ").append(
                userId);
        sqlMaxId.append(" AND s.").append(answerIdColumn);
        sqlMaxId.append(" = a.").append(answerIdColumn);

        StringBuffer sqlInsertStep = new StringBuffer("INSERT INTO ");
        sqlInsertStep.append(userSchema).append(TABLE_STEP).append(" (");
        sqlInsertStep.append(COLUMN_STEP_INTERNAL_ID).append(", ");
        sqlInsertStep.append(COLUMN_DISPLAY_ID).append(", ");
        sqlInsertStep.append(userIdColumn).append(", ");
        sqlInsertStep.append(answerIdColumn).append(", ");
        sqlInsertStep.append(COLUMN_CREATE_TIME).append(", ");
        sqlInsertStep.append(COLUMN_LAST_RUN_TIME).append(", ");
        sqlInsertStep.append(COLUMN_ESTIMATE_SIZE).append(", ");
        sqlInsertStep.append(COLUMN_ANSWER_FILTER).append(", ");
        sqlInsertStep.append(COLUMN_IS_DELETED).append(", ");
        sqlInsertStep.append(COLUMN_ASSIGNED_WEIGHT).append(", ");
        sqlInsertStep.append(COLUMN_DISPLAY_PARAMS).append(") ");
        sqlInsertStep.append("VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

        // Now that we have the Answer, create the Step
        Date createTime = new Date();
        Date lastRunTime = new Date(createTime.getTime());

        int displayId = 0;
        int stepId = userPlatform.getNextId(userSchema, TABLE_STEP);
        Connection connection = dataSource.getConnection();

        PreparedStatement psInsertStep = null;
        ResultSet rsMax = null;
        Step step = null;
        try{
            connection.setAutoCommit(false);

            // get the current display id
            Statement statement = connection.createStatement();
            rsMax = statement.executeQuery(sqlMaxId.toString());
            if (rsMax.next()) // has old steps, get the max of it
                displayId = rsMax.getInt("max_id");
            rsMax.close();
            displayId++;

            // create the Step
            step = new Step(this, user, displayId, stepId);
            step.setAnswer(answer);
            step.setCreatedTime(createTime);
            step.setLastRunTime(lastRunTime);
            step.setDeleted(deleted);
            step.setParamValues(dependentValues);
            step.setAnswerValue(answerValue);
            step.setEstimateSize(estimateSize);
            step.setAssignedWeight(assignedWeight);
            step.setFilterName(filterName);
            step.setException(exception);

            psInsertStep = connection.prepareStatement(sqlInsertStep.toString());
            psInsertStep.setInt(1, step.getInternalId());
            psInsertStep.setInt(2, step.getDisplayId());
            psInsertStep.setInt(3, step.getUser().getUserId());
            psInsertStep.setInt(4, step.getAnswerId());
            psInsertStep.setTimestamp(5, new Timestamp(step.getCreatedTime().getTime()));
            psInsertStep.setTimestamp(6, new Timestamp(step.getLastRunTime().getTime()));
            psInsertStep.setInt(7, step.getEstimateSize());
            psInsertStep.setString(8, step.getFilterName());
            psInsertStep.setBoolean(9, step.isDeleted());
            psInsertStep.setInt(10, step.getAssignedWeight());
            userPlatform.setClobData(psInsertStep, 11, displayParamContent,
                    false);
            psInsertStep.executeUpdate();

            connection.commit();}
        catch (SQLException ex){
            connection.rollback();
            throw ex;}
        finally{
            connection.setAutoCommit(true);
            SqlUtils.closeResultSet(rsMax);
            SqlUtils.closeStatement(psInsertStep);}
        
        stepCache.addStep(step);

        // update step dependencies
        updateStepDescendents(user, step);

        return step;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7490063541794b6d9960e970b9ac7347658" name="deleteStep" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="displayId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            SQLException, WdkModelException{
        PreparedStatement psHistory = null;
        String sql;
        try{
            long start = System.currentTimeMillis();
            if (!isStepDepended(user, displayId)){
                // remove step
                sql = "DELETE FROM " + userSchema + TABLE_STEP + " WHERE "
                        + Utilities.COLUMN_USER_ID + " = ? AND "
                        + COLUMN_DISPLAY_ID + " = ?";
                psHistory = SqlUtils.getPreparedStatement(dataSource, sql);} else{ // hide the step
                sql = "UPDATE " + userSchema + TABLE_STEP + " SET "
                        + COLUMN_IS_DELETED + " = 1 WHERE "
                        + Utilities.COLUMN_USER_ID + " = ? " + " AND "
                        + COLUMN_DISPLAY_ID + " = ?";
                psHistory = SqlUtils.getPreparedStatement(dataSource, sql);}
            psHistory.setInt(1, user.getUserId());
            psHistory.setInt(2, displayId);
            int result = psHistory.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-step-factory-delete-step",
                    start);
            if (result == 0)
                throw new WdkUserException("The Step #" + displayId
                        + " of user " + user.getEmail() + " cannot be found.");
            
            stepCache.removeStep(user.getUserId(), displayId);}
        finally{
            SqlUtils.closeStatement(psHistory);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o37574fe6353247a88b206409a7b292cd658" name="isStepDepended" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="displayId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException{
        String answerIdColumn = AnswerFactory.COLUMN_ANSWER_ID;
        StringBuffer sql = new StringBuffer("SELECT count(*) FROM ");
        sql.append(userSchema).append(TABLE_STEP).append(" s, ");
        sql.append(wdkSchema).append(AnswerFactory.TABLE_ANSWER).append(" a ");
        sql.append(" WHERE s.").append(Utilities.COLUMN_USER_ID);
        sql.append(" = ").append(user.getUserId());
        sql.append(" AND s.").append(answerIdColumn);
        sql.append(" = a.").append(answerIdColumn);
        sql.append(" AND (").append(COLUMN_LEFT_CHILD_ID);
        sql.append(" = ").append(displayId);
        sql.append(" OR ").append(COLUMN_RIGHT_CHILD_ID);
        sql.append(" = ").append(displayId).append(")");

        Object result = SqlUtils.executeScalar(wdkModel, dataSource,
                sql.toString(), "wdk-step-factory-check-depended");
        int count = Integer.parseInt(result.toString());
        return (count &gt; 0);}</source-code>
          </source-codes>
        </operation>
        <operation id="ocdd09bc2aa7d4510a7fe89af0a126d8a658" name="deleteSteps" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="allProjects" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            SQLException, WdkModelException{
        PreparedStatement psDeleteSteps = null;
        String stepTable = userSchema + TABLE_STEP;
        String answerTable = wdkSchema + AnswerFactory.TABLE_ANSWER;
        String strategyTable = userSchema + TABLE_STRATEGY;
        String userIdColumn = Utilities.COLUMN_USER_ID;
        String answerIdColumn = AnswerFactory.COLUMN_ANSWER_ID;
        String projectIdColumn = AnswerFactory.COLUMN_PROJECT_ID;
        try{
            StringBuffer sql = new StringBuffer("DELETE FROM ");
            sql.append(stepTable).append(" WHERE ");
            sql.append(userIdColumn).append(" = ? ");
            if (!allProjects){
                sql.append(" AND ").append(answerIdColumn).append(" IN (");
                sql.append(" SELECT s.").append(answerIdColumn);
                sql.append(" FROM ").append(stepTable).append(" s, ");
                sql.append(answerTable).append(" a ");
                sql.append(" WHERE s.").append(answerIdColumn);
                sql.append(" = a.").append(answerIdColumn);
                sql.append(" AND a.").append(projectIdColumn).append(" = ?) ");}
            sql.append(" AND ").append(COLUMN_DISPLAY_ID);
            sql.append(" NOT IN (SELECT ").append(COLUMN_ROOT_STEP_ID);
            sql.append(" FROM ").append(strategyTable);
            if (!allProjects){
                sql.append(" WHERE ").append(COLUMN_PROJECT_ID).append(" = ? ");
                sql.append(" AND ").append(userIdColumn).append(" = ? ");}
            sql.append(") ");

            long start = System.currentTimeMillis();
            psDeleteSteps = SqlUtils.getPreparedStatement(dataSource,
                    sql.toString());
            psDeleteSteps.setInt(1, user.getUserId());
            if (!allProjects){
                String projectId = wdkModel.getProjectId();
                psDeleteSteps.setString(2, projectId);
                psDeleteSteps.setString(3, projectId);
                psDeleteSteps.setInt(4, user.getUserId());}
            psDeleteSteps.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql.toString(),
                    "wdk-step-factory-delete-all-steps", start);
            
            stepCache.removeSteps(user.getUserId());}
        finally{
            SqlUtils.closeStatement(psDeleteSteps);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ofb1ca2ac27004be381a3228c13a6d324658" name="deleteStrategy" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="displayId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, SQLException, WdkModelException{
        PreparedStatement psStrategy = null;
        String sql = "UPDATE " + userSchema + TABLE_STRATEGY + " SET "
                + COLUMN_IS_DELETED + " = ? WHERE " + Utilities.COLUMN_USER_ID
                + " = ? " + "AND " + COLUMN_PROJECT_ID + " = ? AND "
                + COLUMN_DISPLAY_ID + " = ?";
        try{
            // remove history
            /*
             * psStrategy = SqlUtils.getPreparedStatement(dataSource, "DELETE "
             * + "FROM " + userSchema + TABLE_STRATEGY + " WHERE " +
             * Utilities.COLUMN_USER_ID + " = ? " + "AND " + COLUMN_PROJECT_ID +
             * " = ? AND " + COLUMN_DISPLAY_ID + " = ?"); psStrategy.setInt(1,
             * user.getUserId()); psStrategy.setString(2,
             * wdkModel.getProjectId()); psStrategy.setInt(3, displayId); int
             * result = psStrategy.executeUpdate(); if (result == 0) throw new
             * WdkUserException("The strategy #" + displayId + " of user " +
             * user.getEmail() + " cannot be found.");
             */
            long start = System.currentTimeMillis();
            psStrategy = SqlUtils.getPreparedStatement(dataSource, sql);
            psStrategy.setBoolean(1, true);
            psStrategy.setInt(2, user.getUserId());
            psStrategy.setString(3, wdkModel.getProjectId());
            psStrategy.setInt(4, displayId);
            int result = psStrategy.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-delete-strategy", start);
            if (result == 0)
                throw new WdkUserException("The strategy #" + displayId
                        + " of user " + user.getEmail() + " cannot be found.");}
        finally{
            SqlUtils.closeStatement(psStrategy);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1fcf39128ac343708410f8c06c426a61658" name="deleteStrategies" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="allProjects" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        PreparedStatement psDeleteStrategies = null;
        try{
            StringBuffer sql = new StringBuffer("DELETE FROM ");
            sql.append(userSchema).append(TABLE_STRATEGY).append(" WHERE ");
            sql.append(Utilities.COLUMN_USER_ID).append(" = ?");
            if (!allProjects){
                sql.append(" AND ").append(COLUMN_PROJECT_ID).append(" = ?");}
            long start = System.currentTimeMillis();
            psDeleteStrategies = SqlUtils.getPreparedStatement(dataSource,
                    sql.toString());

            psDeleteStrategies.setInt(1, user.getUserId());
            if (!allProjects)
                psDeleteStrategies.setString(2, wdkModel.getProjectId());
            psDeleteStrategies.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql.toString(),
                    "wdk-step-factory-delete-all-strategies", start);}
        finally{
            SqlUtils.closeStatement(psDeleteStrategies);}}</source-code>
          </source-codes>
        </operation>
        <operation id="off436507c28643e99a3d7caabbfbc6c6658" name="deleteInvalidSteps" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        // get invalid histories
        Map&lt;Integer, Step&gt; invalidSteps = new LinkedHashMap&lt;Integer, Step&gt;();
        loadSteps(user, invalidSteps);
        for (int displayId : invalidSteps.keySet()){
            deleteStep(user, displayId);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o021ef3bcea3f4712af1251dd40883347659" name="deleteInvalidStrategies" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException,
            NoSuchAlgorithmException{
        // get invalid histories
        Map&lt;Integer, Strategy&gt; invalidStrategies = new LinkedHashMap&lt;Integer, Strategy&gt;();
        loadStrategies(user, invalidStrategies);
        for (int displayId : invalidStrategies.keySet()){
            deleteStep(user, displayId);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o9267c8d2c276486a8f7d4aedb5131b56659" name="getStepCount" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        String stepTable = userSchema + TABLE_STEP;
        String answerTable = wdkSchema + AnswerFactory.TABLE_ANSWER;
        String answerIdColumn = AnswerFactory.COLUMN_ANSWER_ID;
        ResultSet rsHistory = null;
        String sql = "SELECT count(h." + COLUMN_STEP_INTERNAL_ID + ") AS num"
                + " FROM " + stepTable + " h, " + answerTable + " a WHERE h."
                + answerIdColumn + " = a." + answerIdColumn + " AND h."
                + Utilities.COLUMN_USER_ID + " = ? AND a."
                + AnswerFactory.COLUMN_PROJECT_ID + " = ? "
                + " AND is_deleted = " + userPlatform.convertBoolean(false);
        try{
            long start = System.currentTimeMillis();
            PreparedStatement psHistory = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psHistory.setInt(1, user.getUserId());
            psHistory.setString(2, wdkModel.getProjectId());
            rsHistory = psHistory.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-step-factory-step-count",
                    start);
            rsHistory.next();
            return rsHistory.getInt("num");}
        catch (SQLException ex){
            throw new WdkUserException(ex);}
        finally{
            SqlUtils.closeResultSet(rsHistory);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oa014ac6b3fcb42fab54d34dc0c0593ae659" name="loadSteps" type="Map&lt;Integer, Step&gt;" type-id="Map&lt;Integer, Step&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="invalidSteps" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException, JSONException,
            WdkUserException{
        Map&lt;Integer, Step&gt; steps = new LinkedHashMap&lt;Integer, Step&gt;();

        ResultSet rsStep = null;
        String sql = "SELECT s.* FROM " + selectSteps + " s " +
        		" WHERE s.user_id = ? ORDER BY s."
                + COLUMN_LAST_RUN_TIME + " DESC";
        try{
            long start = System.currentTimeMillis();
            PreparedStatement psStep = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psStep.setInt(1, user.getUserId());
            rsStep = psStep.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-load-all-steps", start);

            while (rsStep.next()){
                Step step = loadStep(user, rsStep);
                int stepId = step.getDisplayId();
                // if (step.isValid()) {
                steps.put(stepId, step);
                // } else {
                // invalidSteps.put(stepId, step);
                // }
            }
        }
        finally{
            SqlUtils.closeResultSet(rsStep);}
        logger.debug("Steps: " + steps.size());
        logger.debug("Invalid: " + invalidSteps.size());
        return steps;}
      
    // get left child id, right child id in here
    Step loadStep(User user, int displayId) throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        Step step = stepCache.getStep(user.getUserId(), displayId);
        if (step != null) return step;
        
        ResultSet rsStep = null;
        String sql = "SELECT s.* FROM " + selectSteps + " s " +
        		"WHERE s.user_id = ? AND s.display_id = ?";
        try{
            long start = System.currentTimeMillis();
            PreparedStatement psStep = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psStep.setInt(1, user.getUserId());
            psStep.setInt(2, displayId);
            rsStep = psStep.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-step-factory-load-step",
                    start);
            if (!rsStep.next())
                throw new WdkUserException("The Step #" + displayId
                        + " of user " + user.getEmail() + " doesn't exist.");

            return loadStep(user, rsStep);}
        finally{
            SqlUtils.closeResultSet(rsStep);}}

    private Step loadStep(User user, ResultSet rsStep)
            throws WdkModelException, WdkUserException, SQLException,
            JSONException{
        int displayId = rsStep.getInt(COLUMN_DISPLAY_ID);
        Step step = stepCache.getStep(user.getUserId(), displayId);
        if (step != null) return step;

        // load Step info
        int stepId = rsStep.getInt(COLUMN_STEP_INTERNAL_ID);
        String questionName = rsStep.getString(AnswerFactory.COLUMN_QUESTION_NAME);

        step = new Step(this, user, displayId, stepId);
        step.setCreatedTime(rsStep.getTimestamp(COLUMN_CREATE_TIME));
        step.setLastRunTime(rsStep.getTimestamp(COLUMN_LAST_RUN_TIME));
        step.setCustomName(rsStep.getString(COLUMN_CUSTOM_NAME));
        step.setDeleted(rsStep.getBoolean(COLUMN_IS_DELETED));
        step.setCollapsible(rsStep.getBoolean(COLUMN_IS_COLLAPSIBLE));
        step.setCollapsedName(rsStep.getString(COLUMN_COLLAPSED_NAME));
        step.setEstimateSize(rsStep.getInt(COLUMN_ESTIMATE_SIZE));
        step.setFilterName(rsStep.getString(COLUMN_ANSWER_FILTER));
        if (rsStep.getObject(COLUMN_IS_VALID) != null)
            step.setValid(rsStep.getBoolean(COLUMN_IS_VALID));
        if (rsStep.getObject(COLUMN_ASSIGNED_WEIGHT) != null)
            step.setAssignedWeight(rsStep.getInt(COLUMN_ASSIGNED_WEIGHT));

        // load left and right child
        int previousId = 0, childId = 0, parentId = 0, nextId = 0;
        if (rsStep.getObject(COLUMN_LEFT_CHILD_ID) != null) 
            previousId = rsStep.getInt(COLUMN_LEFT_CHILD_ID);
        if (rsStep.getObject(COLUMN_RIGHT_CHILD_ID) != null) 
            childId = rsStep.getInt(COLUMN_RIGHT_CHILD_ID);
        if (rsStep.getObject("parent_id") != null) 
          parentId = rsStep.getInt("parent_id");
      if (rsStep.getObject("next_id") != null) 
          nextId = rsStep.getInt("next_id");
        step.setRelatedSteps(previousId, childId, parentId, nextId);

        String dependentParamContent = userPlatform.getClobData(rsStep,
                COLUMN_DISPLAY_PARAMS);
        logger.debug("step #" + displayId + " (" + stepId + ")");
        Map&lt;String, String&gt; dependentValues = parseParamContent(dependentParamContent);

        String answerChecksum = rsStep.getString(AnswerFactory.COLUMN_ANSWER_CHECKSUM);

        try{
            // load Answer
            AnswerFactory answerFactory = wdkModel.getAnswerFactory();
            Answer answer = answerFactory.getAnswer(questionName,
                    answerChecksum);
            step.setAnswer(answer);
            step.setParamValues(dependentValues);}
        catch (Exception ex){
            step.setValid(false);
            step.setValidationMessage(ex.getMessage());}
        
        // do not update the flag here, it's redundant.
        //if (!step.isValid()) setStepValidFlag(step);
        
        stepCache.addStep(step);
        return step;}

    private void updateStepDescendents(User user, Step step) throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        Question question = step.getQuestion();
        Map&lt;String, String&gt; displayParams = step.getParamValues();

        Query query = question.getQuery();
        int leftStepId = 0;
        int rightStepId = 0;
        String customName;
        if (query.isBoolean()){
            // boolean result, set the left and right step ids accordingly, and
            // set the constructed boolean expression to custom name.
            BooleanQuery booleanQuery = (BooleanQuery) query;

            AnswerParam leftParam = booleanQuery.getLeftOperandParam();
            String leftKey = displayParams.get(leftParam.getName());
            String leftStepKey = leftKey.substring(leftKey.indexOf(":") + 1);
            leftStepId = Integer.parseInt(leftStepKey);

            AnswerParam rightParam = booleanQuery.getRightOperandParam();
            String rightKey = displayParams.get(rightParam.getName());
            String rightStepKey = rightKey.substring(rightKey.indexOf(":") + 1);
            rightStepId = Integer.parseInt(rightStepKey);

            StringParam operatorParam = booleanQuery.getOperatorParam();
            String operator = displayParams.get(operatorParam.getName());

            customName = leftStepId + " " + operator + " " + rightKey;} else if (query.isCombined()){
            // transform result, set the first two params
            for (Param param : question.getParams()){
                if (param instanceof AnswerParam){
                    AnswerParam answerParam = (AnswerParam) param;
                    String stepId = displayParams.get(answerParam.getName());
                    // put the first child into left, the second into right
                    if (leftStepId == 0) leftStepId = Integer.valueOf(stepId);
                    else{
                        rightStepId = Integer.valueOf(stepId);
                        break;}}}
            customName = step.getBaseCustomName();} else customName = step.getBaseCustomName();

        // update the reference of steps. and it will also update the previously
        // loaded left &amp; right steps to keep the cached objects consistent.
        step.setPreviousStep(loadStep(user, leftStepId));
        step.setChildStep(loadStep(user, rightStepId));

        // construct the update sql
        StringBuffer sql = new StringBuffer("UPDATE ");
        sql.append(userSchema).append(TABLE_STEP).append(" SET ");
        sql.append(COLUMN_CUSTOM_NAME).append(" = ? ");
        if (query.isCombined()){
            sql.append(", ").append(COLUMN_LEFT_CHILD_ID);
            sql.append(" = ").append(leftStepId);
            if (rightStepId != 0){
                sql.append(", ").append(COLUMN_RIGHT_CHILD_ID);
                sql.append(" = ").append(rightStepId);}}
        sql.append(" WHERE ").append(COLUMN_STEP_INTERNAL_ID);
        sql.append(" = ").append(step.getInternalId());

        step.setCustomName(customName);
        PreparedStatement psUpdateStepTree = null;
        try{
            long start = System.currentTimeMillis();
            psUpdateStepTree = SqlUtils.getPreparedStatement(dataSource,
                    sql.toString());
            psUpdateStepTree.setString(1, customName);
            psUpdateStepTree.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql.toString(),
                    "wdk-step-factory-update-step-tree", start);}
        catch (SQLException e){
            throw new WdkUserException("Could not update step tree.", e);}
        finally{
            SqlUtils.closeStatement(psUpdateStepTree);}}

    /**
     * This method updates the custom name, the time stamp of last running,
     * isDeleted, isCollapsible, and collapsed name
     * 
     * @param user
     * @param step
     * @throws WdkUserException
     * @throws SQLException
     * @throws JSONException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     */
    void updateStep(User user, Step step, boolean updateTime)
            throws WdkUserException, WdkModelException, SQLException, JSONException{
        logger.debug("step #" + step.getDisplayId() + " new custom name: '"
                + step.getBaseCustomName() + "'");
        // update custom name
        Date lastRunTime = (updateTime) ? new Date() : step.getLastRunTime();
        int estimateSize = step.getEstimateSize();
        PreparedStatement psStep = null;
        String sql = "UPDATE " + userSchema + TABLE_STEP + " SET "
                + COLUMN_CUSTOM_NAME + " = ?, " + COLUMN_LAST_RUN_TIME
                + " = ?, " + COLUMN_IS_DELETED + " = ?, "
                + COLUMN_IS_COLLAPSIBLE + " = ?, " + COLUMN_COLLAPSED_NAME
                + " = ?, " + COLUMN_ESTIMATE_SIZE + " = ?, " + COLUMN_IS_VALID
                + " = ?, " + COLUMN_ASSIGNED_WEIGHT + " = ? WHERE "
                + COLUMN_STEP_INTERNAL_ID + " = ?";
        try{
            long start = System.currentTimeMillis();
            psStep = SqlUtils.getPreparedStatement(dataSource, sql);
            psStep.setString(1, step.getBaseCustomName());
            psStep.setTimestamp(2, new Timestamp(lastRunTime.getTime()));
            psStep.setBoolean(3, step.isDeleted());
            psStep.setBoolean(4, step.isCollapsible());
            psStep.setString(5, step.getCollapsedName());
            psStep.setInt(6, estimateSize);
            psStep.setBoolean(7, step.isValid());
            psStep.setInt(8, step.getAssignedWeight());
            psStep.setInt(9, step.getInternalId());
            int result = psStep.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-step-factory-update-step",
                    start);
            if (result == 0)
                throw new WdkUserException("The Step #" + step.getDisplayId()
                        + " of user " + user.getEmail() + " cannot be found.");

            // update the last run stamp
            step.setLastRunTime(lastRunTime);
            step.setEstimateSize(estimateSize);

            // update dependencies
            // if (step.isCombined()) updateStepDescendents(user, step);
        }
        finally{
            SqlUtils.closeStatement(psStep);}}

    Map&lt;Integer, Strategy&gt; loadStrategies(User user,
            Map&lt;Integer, Strategy&gt; invalidStrategies) throws WdkUserException,
            WdkModelException, JSONException, SQLException,
            NoSuchAlgorithmException{
        Map&lt;Integer, Strategy&gt; userStrategies = new LinkedHashMap&lt;Integer, Strategy&gt;();

        ResultSet resultSet = null;
        String sql = "SELECT sr.* FROM " + selectStrategies + " sr "
                + " WHERE sr.user_id = ? AND s.is_deleted = ? "
                + " ORDER BY sr." + COLUMN_LAST_RUN_TIME + " DESC";
        try{
            long start = System.currentTimeMillis();
            PreparedStatement ps = SqlUtils.getPreparedStatement(dataSource, sql);
            ps.setInt(1, user.getUserId());
            ps.setBoolean(2, false);
            resultSet = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-load-all-strategies", start);
            while (resultSet.next()){
              Strategy strategy = loadStrategy(user, resultSet);
                userStrategies.put(strategy.getStrategyId(), strategy);}
            return userStrategies;}
        finally{
            SqlUtils.closeResultSet(resultSet);}}

    List&lt;Strategy&gt; loadStrategies(User user, boolean saved, boolean recent)
            throws SQLException, WdkUserException, WdkModelException,
            JSONException, NoSuchAlgorithmException{
        String sql = "SELECT sr.* FROM " + selectStrategies + " sr "
                + " WHERE sr.user_id = ? AND sr.is_saved = ?"
                + "   AND sr.is_deleted = ?";
        if (recent) sql += " AND sr." + COLUMN_LAST_VIEWED_TIME + " &gt;= ?";
        sql += " ORDER BY sr." + COLUMN_LAST_VIEWED_TIME + " DESC";

        List&lt;Strategy&gt; strategies = new ArrayList&lt;Strategy&gt;();
        ResultSet resultSet = null;
        try{
            long start = System.currentTimeMillis();
            PreparedStatement ps = SqlUtils.getPreparedStatement(dataSource,
                    sql.toString());
            ps.setInt(1, user.getUserId());
            ps.setBoolean(2, saved);
            ps.setBoolean(3, false);
            if (recent){
                Calendar calendar = Calendar.getInstance();
                calendar.add(Calendar.DATE, -1);
                Date date = new Date();
                ps.setTimestamp(4, new Timestamp(date.getTime()));}
            resultSet = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql.toString(),
                    "wdk-step-factory-load-strategies", start);
            while (resultSet.next()){
                // ignore the invalid strategies caused by missing steps.
                // it was caused by replication failure. need to investigate
                // it further.
                try{
                    Strategy strategy = loadStrategy(user, resultSet);
                    strategies.add(strategy);}
                catch (WdkException ex){
                    logger.error("ignore strategy #"
                            + resultSet.getInt("strategy_id") + ", cause: "
                            + ex);}}}
        finally{
            SqlUtils.closeResultSet(resultSet);}
        return strategies;}

    private Strategy loadStrategy(User user, ResultSet resultSet)
            throws SQLException, WdkUserException, WdkModelException,
            JSONException, NoSuchAlgorithmException{
        int internalId = resultSet.getInt(COLUMN_STRATEGY_INTERNAL_ID);
        int strategyId = resultSet.getInt(COLUMN_DISPLAY_ID);

        Strategy strategy = new Strategy(this, user, strategyId, internalId);
        strategy.setName(resultSet.getString(COLUMN_NAME));
        strategy.setCreatedTime(resultSet.getTimestamp(COLUMN_CREATE_TIME));
        strategy.setIsSaved(resultSet.getBoolean(COLUMN_IS_SAVED));
        strategy.setDeleted(resultSet.getBoolean(COLUMN_IS_DELETED));
        strategy.setSavedName(resultSet.getString(COLUMN_SAVED_NAME));
        strategy.setLastModifiedTime(resultSet.getTimestamp(COLUMN_LAST_MODIFIED_TIME));
        strategy.setLastViewedTime(resultSet.getTimestamp(COLUMN_LAST_VIEWED_TIME));
        strategy.setSignature(resultSet.getString(COLUMN_SIGNATURE));
        strategy.setDescription(resultSet.getString(COLUMN_DESCRIPTION));
        strategy.setVersion(resultSet.getString(COLUMN_VERSION));


        String signature = strategy.getSignature();
        if (signature == null || signature.trim().length() == 0){
            signature = getStrategySignature(user.getUserId(), internalId);
            String sql = "UPDATE " + userSchema + "strategies SET signature = "
                    + "'" + signature + "' WHERE strategy_id = " + internalId;
            SqlUtils.executeUpdate(wdkModel, dataSource, sql,
                    "wdk-step-factory-update-strategy-signature");
            strategy.setSignature(signature);}

        return strategy;}

    Strategy importStrategy(User user, Strategy oldStrategy,
            Map&lt;Integer, Integer&gt; stepIdsMap) throws WdkUserException,
            WdkModelException, SQLException, NoSuchAlgorithmException,
            JSONException{
        logger.debug("import strategy #" + oldStrategy.getInternalId()
                + "(internal) to user #" + user.getUserId());

        if (stepIdsMap == null)
            stepIdsMap = new LinkedHashMap&lt;Integer, Integer&gt;();

        Step oldRootStep = oldStrategy.getLatestStep();
        String name = getNextName(user, oldStrategy.getName(), false);

        // If user does not already have a copy of this strategy, need to
        // look up the answers recursively, construct step objects.
        Step latestStep = importStep(user, oldRootStep, stepIdsMap);
        
        // Need to create strategy &amp; then load it so that all AnswerValues
        // are created properly
        // Jerric - the imported strategy should always be unsaved.
        Strategy strategy = createStrategy(user, latestStep, name, null, false,
                oldStrategy.getDescription(), false);
        return loadStrategy(user, strategy.getStrategyId(), false);}

    Step importStep(User newUser, Step oldStep, Map&lt;Integer, Integer&gt; stepIdsMap)
            throws WdkUserException, WdkModelException, SQLException,
            NoSuchAlgorithmException, JSONException{
        User oldUser = oldStep.getUser();

        // Is this answer a boolean? Import depended steps first.
        Question question = oldStep.getQuestion();
        AnswerFilterInstance filter = oldStep.getFilter();

        Map&lt;String, Param&gt; params = question.getParamMap();

        Map&lt;String, String&gt; paramValues = oldStep.getParamValues();
        for (String paramName : paramValues.keySet()){
            Param param = params.get(paramName);
            String paramValue = paramValues.get(paramName);

            if (param instanceof AnswerParam){
                int oldStepId = Integer.parseInt(paramValue);
                Step oldChildStep = oldUser.getStep(oldStepId);
                Step newChildStep = importStep(newUser, oldChildStep,
                        stepIdsMap);
                paramValue = Integer.toString(newChildStep.getDisplayId());} else if (param instanceof DatasetParam){
                DatasetParam datasetParam = (DatasetParam) param;
                int oldUserDatasetId = Integer.parseInt(paramValue);
                Dataset oldDataset = oldUser.getDataset(oldUserDatasetId);
                oldDataset.setRecordClass(datasetParam.getRecordClass());
                Dataset newDataset = newUser.getDataset(oldDataset.getChecksum());
                newDataset.setRecordClass(datasetParam.getRecordClass());
                paramValue = Integer.toString(newDataset.getUserDatasetId());}
            paramValues.put(paramName, paramValue);}

        int startIndex = 1;
        int endIndex = oldStep.getUser().getItemsPerPage();
        boolean deleted = oldStep.isDeleted();
        int assignedWeight = oldStep.getAssignedWeight();
        Step newStep = newUser.createStep(question, paramValues, filter,
                startIndex, endIndex, deleted, false, assignedWeight);
        stepIdsMap.put(oldStep.getDisplayId(), newStep.getDisplayId());
        newStep.setCollapsedName(oldStep.getCollapsedName());
        newStep.setCollapsible(oldStep.isCollapsible());
        String customName = oldStep.getBaseCustomName();
        if (customName != null) newStep.setCustomName(customName);
        newStep.setValid(oldStep.isValid());
        newStep.update(false);
        return newStep;}

    Strategy loadStrategy(User user, int displayId, boolean allowDeleted)
            throws WdkUserException, WdkModelException, JSONException,
            SQLException, NoSuchAlgorithmException{
        ResultSet rsStrategy = null;
        try{
            String sql = "SELECT sr.* FROM " + selectStrategies + " sr "
                    +" WHERE sr.user_id = ? AND sr.display_id = ?";
            if (!allowDeleted)
                sql += " AND sr.is_deleted = ?";
            
            long start = System.currentTimeMillis();
            PreparedStatement psStrategy = SqlUtils.getPreparedStatement(dataSource,
                    sql.toString());
            psStrategy.setInt(1, user.getUserId());
            psStrategy.setInt(2, displayId);
            if (!allowDeleted){
                psStrategy.setBoolean(3, false);}
            rsStrategy = psStrategy.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql.toString(),
                    "wdk-step-factory-load-strategy-by-id", start);
            if (!rsStrategy.next()){
                throw new WdkUserException("The strategy " + displayId
                        + " does not exist " + "for user " + user.getEmail());}

            Strategy strategy = loadStrategy(user, rsStrategy);
            // Set saved name, if any
            /*
             * if
             * (!strategy.getName().matches("^New Strategy(\\([\\d]+\\))?\\*$"))
             * { // System.out.println("Name does not match: " + //
             * strategy.getName()); // Remove any (and everything after it) from
             * name, set as // saved name
             * strategy.setSavedName(strategy.getName().replaceAll(
             * "(\\([\\d]+\\))?\\*$", "")); }
             */
            return strategy;}
        finally{
            SqlUtils.closeResultSet(rsStrategy);}}

    Strategy loadStrategy(String strategySignature) throws WdkUserException,
            SQLException, WdkModelException, JSONException,
            NoSuchAlgorithmException{
        String sql = "SELECT sr.* FROM " + selectStrategies + " sr "
                + " WHERE sr.signature = ? ";
        ResultSet resultSet = null;
        PreparedStatement ps = null;
        try{
            long start = System.currentTimeMillis();
            ps = SqlUtils.getPreparedStatement(dataSource, sql.toString());
            ps.setString(1, strategySignature);
            resultSet = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql.toString(),
                    "wdk-step-factory-load-strategy-by-signature", start);
            if (!resultSet.next())
                throw new WdkUserException("The strategy " + strategySignature
                        + " does not exist");
            int userId = resultSet.getInt(Utilities.COLUMN_USER_ID);
            User user = wdkModel.getUserFactory().getUser(userId);
            Strategy strategy = loadStrategy(user, resultSet);
            return strategy;}
        finally{
            SqlUtils.closeStatement(ps);
            SqlUtils.closeResultSet(resultSet);}}

    // This function only updates the strategies table
    void updateStrategy(User user, Strategy strategy, boolean overwrite)
            throws WdkUserException, WdkModelException, SQLException,
            JSONException, NoSuchAlgorithmException{
        logger.debug("Updating strategy internal#=" + strategy.getInternalId()
                + ", overwrite=" + overwrite);

        // update strategy name, saved, step_id
        PreparedStatement psStrategy = null;
        ResultSet rsStrategy = null;

        int userId = user.getUserId();

        String userIdColumn = Utilities.COLUMN_USER_ID;
        try{
            if (overwrite){
                String sql = "SELECT " + COLUMN_STRATEGY_INTERNAL_ID + ", "
                        + COLUMN_DISPLAY_ID + ", " + COLUMN_SIGNATURE
                        + " FROM " + userSchema + TABLE_STRATEGY + " WHERE "
                        + userIdColumn + " = ? AND " + COLUMN_PROJECT_ID
                        + " = ? AND " + COLUMN_NAME + " = ? AND "
                        + COLUMN_IS_SAVED + " = ? AND " + COLUMN_IS_DELETED
                        + " = ? "; // AND " + COLUMN_DISPLAY_ID + " &lt;&gt; ?";
                // If we're overwriting, need to look up saved strategy id by
                // name (only if the saved strategy is not the one we're
                // updating, i.e. the saved strategy id != this strategy id)

                // jerric - will also find the saved copy of itself, so that we
                // can keep the signature.
                long start = System.currentTimeMillis();
                PreparedStatement psCheck = SqlUtils.getPreparedStatement(
                        dataSource, sql);
                psCheck.setInt(1, userId);
                psCheck.setString(2, wdkModel.getProjectId());
                psCheck.setString(3, strategy.getName());
                psCheck.setBoolean(4, true);
                psCheck.setBoolean(5, false);
                // psCheck.setInt(6, strategy.getStrategyId());
                rsStrategy = psCheck.executeQuery();
                SqlUtils.verifyTime(wdkModel, sql,
                        "wdk-step-factory-check-strategy-name", start);

                // If there's already a saved strategy with this strategy's
                // name,
                // we need to write the new saved strategy &amp; mark the old
                // saved strategy as deleted
                if (rsStrategy.next()){
                    int idToDelete = rsStrategy.getInt(COLUMN_DISPLAY_ID);
                    String signature = rsStrategy.getString(COLUMN_SIGNATURE);
                    strategy.setIsSaved(true);
                    strategy.setSignature(signature);
                    strategy.setSavedName(strategy.getName());
                    // jerric - only delete the strategy if it's a different one
                    if (strategy.getStrategyId() != idToDelete)
                        user.deleteStrategy(idToDelete);}} else if (strategy.getIsSaved()){
                // If we're not overwriting a saved strategy, then we're
                // modifying
                // it. We need to get an unsaved copy to modify. Generate
                // unsaved name
                String name = getNextName(user, strategy.getName(), false);
                Strategy newStrat = createStrategy(user,
                        strategy.getLatestStep(), name, strategy.getName(),
                        false, strategy.getDescription(), false);
                strategy.setName(newStrat.getName());
                strategy.setSavedName(newStrat.getSavedName());
                strategy.setDisplayId(newStrat.getStrategyId());
                strategy.setInternalId(newStrat.getInternalId());
                strategy.setSignature(newStrat.getSignature());
                strategy.setIsSaved(false);}

            Date modifiedTime = new Date();
            String sql = "UPDATE " + userSchema + TABLE_STRATEGY + " SET "
                    + COLUMN_NAME + " = ?, " + COLUMN_ROOT_STEP_ID + " = ?, "
                    + COLUMN_SAVED_NAME + " = ?, " + COLUMN_IS_SAVED + " = ?, "
                    + COLUMN_DESCRIPTION + " = ?, " + COLUMN_LAST_MODIFIED_TIME
                    + " = ?, " + COLUMN_SIGNATURE + "= ? WHERE "
                    + COLUMN_STRATEGY_INTERNAL_ID + " = ?";
            long start = System.currentTimeMillis();
            psStrategy = SqlUtils.getPreparedStatement(dataSource, sql);
            psStrategy.setString(1, strategy.getName());
            psStrategy.setInt(2, strategy.getLatestStep().getDisplayId());
            psStrategy.setString(3, strategy.getSavedName());
            psStrategy.setBoolean(4, strategy.getIsSaved());
            psStrategy.setString(5, strategy.getDescription());
            psStrategy.setTimestamp(6, new Timestamp(modifiedTime.getTime()));
            psStrategy.setString(7, strategy.getSignature());
            psStrategy.setInt(8, strategy.getInternalId());
            int result = psStrategy.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-update-strategy", start);

            strategy.setLastModifiedTime(modifiedTime);

            if (result == 0)
                throw new WdkUserException("The strategy #"
                        + strategy.getStrategyId() + " of user "
                        + user.getEmail() + " cannot be found.");}
        finally{
            SqlUtils.closeStatement(psStrategy);
            SqlUtils.closeResultSet(rsStrategy);}}

    // Note: this function only adds the necessary row in strategies; updating
    // of answers
    // and steps tables is handled in other functions. Once the Step
    // object exists, all of this data is already in the db.
    Strategy createStrategy(User user, Step root, String name,
            String savedName, boolean saved, String description, boolean hidden)
            throws SQLException, WdkUserException, WdkModelException,
            JSONException, NoSuchAlgorithmException{
        logger.debug("creating strategy, saved=" + saved);
        int userId = user.getUserId();

        String userIdColumn = Utilities.COLUMN_USER_ID;
        ResultSet rsCheckName = null;
        PreparedStatement psCheckName;

        String sql = "SELECT " + COLUMN_DISPLAY_ID + " FROM " + userSchema
                + TABLE_STRATEGY + " WHERE " + userIdColumn + " = ? AND "
                + COLUMN_PROJECT_ID + " = ? AND " + COLUMN_NAME + " = ? AND "
                + COLUMN_IS_SAVED + "= ? AND " + COLUMN_IS_DELETED + "= ?";
        try{
            // If name is not null, check if strategy exists
            if (name != null){
                if (name.length() &gt; COLUMN_NAME_LIMIT){
                    name = name.substring(0, COLUMN_NAME_LIMIT - 1);}
                long start = System.currentTimeMillis();
                psCheckName = SqlUtils.getPreparedStatement(dataSource, sql);
                psCheckName.setInt(1, userId);
                psCheckName.setString(2, wdkModel.getProjectId());
                psCheckName.setString(3, name);
                psCheckName.setBoolean(4, saved);
                psCheckName.setBoolean(5, hidden);
                rsCheckName = psCheckName.executeQuery();
                SqlUtils.verifyTime(wdkModel, sql,
                        "wdk-step-factory-check-strategy-name", start);

                if (rsCheckName.next())
                    return loadStrategy(user,
                            rsCheckName.getInt(COLUMN_DISPLAY_ID), false);} else{// otherwise, generate default name
                name = getNextName(user, root.getCustomName(), saved);}}
        finally{
            SqlUtils.closeResultSet(rsCheckName);}

        int displayId;
        PreparedStatement psMax = null;
        PreparedStatement psStrategy = null;
        ResultSet rsMax = null;
        Connection connection = dataSource.getConnection();

        int internalId = userPlatform.getNextId(userSchema, TABLE_STRATEGY);
        String signature = getStrategySignature(user.getUserId(), internalId);
        sql = "SELECT max(" + COLUMN_DISPLAY_ID + ") max_id FROM " + userSchema
                + TABLE_STRATEGY + " WHERE " + userIdColumn + " = ? AND "
                + COLUMN_PROJECT_ID + " = ?";
        try{
            connection.setAutoCommit(false);

            // get the current max strategy id
            long start = System.currentTimeMillis();
            psMax = connection.prepareStatement(sql);
            psMax.setInt(1, userId);
            psMax.setString(2, wdkModel.getProjectId());
            rsMax = psMax.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-get-next-strategy-id", start);

            if (rsMax.next()) displayId = rsMax.getInt("max_id") + 1;
            else displayId = 1;

            // insert the row into strategies
            sql = "INSERT INTO " + userSchema + TABLE_STRATEGY + " ("
                    + COLUMN_DISPLAY_ID + ", " + COLUMN_STRATEGY_INTERNAL_ID
                    + ", " + userIdColumn + ", " + COLUMN_ROOT_STEP_ID + ", "
                    + COLUMN_IS_SAVED + ", " + COLUMN_NAME + ", "
                    + COLUMN_SAVED_NAME + ", " + COLUMN_PROJECT_ID + ", "
                    + COLUMN_IS_DELETED + ", " + COLUMN_SIGNATURE + ", "
                    + COLUMN_DESCRIPTION + ", " + COLUMN_VERSION
                    + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            start = System.currentTimeMillis();
            psStrategy = SqlUtils.getPreparedStatement(dataSource, sql);
            psStrategy.setInt(1, displayId);
            psStrategy.setInt(2, internalId);
            psStrategy.setInt(3, userId);
            psStrategy.setInt(4, root.getDisplayId());
            psStrategy.setBoolean(5, saved);
            psStrategy.setString(6, name);
            psStrategy.setString(7, savedName);
            psStrategy.setString(8, wdkModel.getProjectId());
            psStrategy.setBoolean(9, false);
            psStrategy.setString(10, signature);
            psStrategy.setString(11, description);
            psStrategy.setString(12, wdkModel.getVersion());
            psStrategy.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-insert-strategy", start);

            logger.debug("new strategy created, internal#=" + internalId);
            connection.commit();}
        catch (SQLException ex){
            connection.rollback();
            throw ex;}
        finally{
            connection.setAutoCommit(true);
            SqlUtils.closeStatement(psStrategy);
            SqlUtils.closeResultSet(rsMax);}

        Strategy strategy = loadStrategy(user, displayId, false);
        strategy.setLatestStep(root);
        return strategy;}

    int getStrategyCount(User user) throws WdkUserException, SQLException,
            WdkModelException{
        ResultSet rsStrategy = null;
        String sql = "SELECT count(*) AS num FROM " + userSchema
                + TABLE_STRATEGY + " WHERE " + Utilities.COLUMN_USER_ID
                + " = ? AND " + COLUMN_IS_DELETED + " = ? AND "
                + COLUMN_PROJECT_ID + " = ? ";
        try{
            long start = System.currentTimeMillis();
            PreparedStatement psStrategy = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psStrategy.setInt(1, user.getUserId());
            psStrategy.setBoolean(2, false);
            psStrategy.setString(3, wdkModel.getProjectId());
            rsStrategy = psStrategy.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-strategy-count", start);
            rsStrategy.next();
            return rsStrategy.getInt("num");}
        finally{
            SqlUtils.closeResultSet(rsStrategy);}}

    private String getParamContent(Map&lt;String, String&gt; params)
            throws JSONException{
        JSONObject json = new JSONObject();
        for (String paramName : params.keySet()){
            json.put(paramName, params.get(paramName));}
        return json.toString();}

    public Map&lt;String, String&gt; parseParamContent(String paramContent)
            throws JSONException{
        Map&lt;String, String&gt; params = new LinkedHashMap&lt;String, String&gt;();
        if (paramContent != null &amp;&amp; paramContent.length() &gt; 0){
            JSONObject json = new JSONObject(paramContent);
            String[ paramNames = JSONObject.getNames(json);
            if (paramNames != null){
                for (String paramName : paramNames){
                    String paramValue = json.getString(paramName);
                    logger.trace("param '" + paramName + "' = '" + paramValue
                            + "'");
                    params.put(paramName, paramValue);}}}
        return params;}

    boolean checkNameExists(Strategy strategy, String name, boolean saved)
            throws SQLException, WdkUserException, WdkModelException{
        ResultSet rsCheckName = null;
        String sql = "SELECT display_id FROM " + userSchema + TABLE_STRATEGY
                + " WHERE " + Utilities.COLUMN_USER_ID + " = ? AND "
                + COLUMN_PROJECT_ID + " = ? AND " + COLUMN_NAME + " = ? AND "
                + COLUMN_IS_SAVED + " = ? AND " + COLUMN_IS_DELETED
                + " = ? AND " + COLUMN_DISPLAY_ID + " &lt;&gt; ?";
        try{
            long start = System.currentTimeMillis();
            PreparedStatement psCheckName = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psCheckName.setInt(1, strategy.getUser().getUserId());
            psCheckName.setString(2, wdkModel.getProjectId());
            psCheckName.setString(3, name);
            psCheckName.setBoolean(4, (saved || strategy.getIsSaved()));
            psCheckName.setBoolean(5, false);
            psCheckName.setInt(6, strategy.getStrategyId());
            rsCheckName = psCheckName.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-strategy-name-exist", start);

            if (rsCheckName.next()) return true;

            return false;}
        finally{
            SqlUtils.closeResultSet(rsCheckName);}}

    /**
     * Copy is different from import strategy in that the copy will replicate
     * every setting of the strategy, and the new name is different with a
     * " copy" suffix.
     * 
     * @param strategy
     * @return
     * @throws JSONException
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     */
    Strategy copyStrategy(Strategy strategy) throws SQLException,
            WdkUserException, WdkModelException, JSONException,
            NoSuchAlgorithmException{
        User user = strategy.getUser();
        Step root = strategy.getLatestStep().deepClone();
        String name = strategy.getName();
        if (!name.toLowerCase().endsWith(", copy of")) name += ", Copy of";
        name = getNextName(user, name, false);
        return createStrategy(user, root, name, null, false,
                strategy.getDescription(), false);}

    /**
     * copy a branch of strategy from the given step to the beginning of the
     * strategy, can make an unsaved strategy from it.
     * 
     * @param strategy
     * @param stepId
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws JSONException
     * @throws WdkUserException
     */
    Strategy copyStrategy(Strategy strategy, int stepId) throws SQLException,
            WdkModelException, NoSuchAlgorithmException, JSONException,
            WdkUserException{
        User user = strategy.getUser();
        Step step = strategy.getStepById(stepId).deepClone();
        String name = step.getCustomName();
        if (!name.toLowerCase().endsWith(", copy of")) name += ", Copy of";
        name = getNextName(user, name, false);
        return createStrategy(user, step, name, null, false,
                strategy.getDescription(), false);}

    private String getNextName(User user, String oldName, boolean saved)
            throws SQLException, WdkUserException, WdkModelException{
        ResultSet rsNames = null;
        String sql = "SELECT " + COLUMN_NAME + " FROM " + userSchema
                + TABLE_STRATEGY + " WHERE " + Utilities.COLUMN_USER_ID
                + " = ? AND " + COLUMN_PROJECT_ID + " = ? AND " + COLUMN_NAME
                + " LIKE ? AND " + COLUMN_IS_SAVED + "= ? AND "
                + COLUMN_IS_DELETED + "= ?";
        try{
            // get the existing names
            long start = System.currentTimeMillis();
            PreparedStatement psNames = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psNames.setInt(1, user.getUserId());
            psNames.setString(2, wdkModel.getProjectId());
            psNames.setString(3, SqlUtils.escapeWildcards(oldName) + "%");
            psNames.setBoolean(4, saved);
            psNames.setBoolean(5, false);
            rsNames = psNames.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-strategy-next-name", start);

            Set&lt;String&gt; names = new LinkedHashSet&lt;String&gt;();
            while (rsNames.next())
                names.add(rsNames.getString(COLUMN_NAME));

            String name = oldName;
            Pattern pattern = Pattern.compile("(.+?)\\((\\d+)\\)");
            while (names.contains(name)){
                Matcher matcher = pattern.matcher(name);
                if (matcher.matches() &amp;&amp; !name.equals(oldName)){
                    int number = Integer.parseInt(matcher.group(2));
                    name = matcher.group(1).trim();
                    name += "(" + (++number) + ")";} else{ // the initial name, no tailing serial number
                    name += "(2)";}}
            return name;}
        finally{
            SqlUtils.closeResultSet(rsNames);}}

    void updateStrategyViewTime(User user, int strategyId) throws SQLException,
            WdkUserException, WdkModelException{
        StringBuffer sql = new StringBuffer("UPDATE ");
        sql.append(userSchema).append(TABLE_STRATEGY);
        sql.append(" SET ").append(COLUMN_LAST_VIEWED_TIME + " = ?, ");
        sql.append(COLUMN_VERSION + " = ? ");
        sql.append(" WHERE ").append(COLUMN_PROJECT_ID).append(" = ? ");
        sql.append(" AND ").append(Utilities.COLUMN_USER_ID).append(" = ? ");
        sql.append(" AND ").append(COLUMN_DISPLAY_ID).append(" = ?");
        PreparedStatement psUpdate = null;
        try{
            long start = System.currentTimeMillis();
            psUpdate = SqlUtils.getPreparedStatement(dataSource, sql.toString());
            psUpdate.setTimestamp(1, new Timestamp(new Date().getTime()));
            psUpdate.setString(2, wdkModel.getVersion());
            psUpdate.setString(3, wdkModel.getProjectId());
            psUpdate.setInt(4, user.getUserId());
            psUpdate.setInt(5, strategyId);
            psUpdate.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql.toString(),
                    "wdk-step-factory-update-strategy-time", start);}
        finally{
            SqlUtils.closeStatement(psUpdate);}}

    public String getStrategySignature(int userId, int internalId)
            throws NoSuchAlgorithmException, WdkModelException{
        String project_id = wdkModel.getProjectId();
        String content = project_id + "_" + userId + "_" + internalId
                + "_6276406938881110742";
        return Utilities.encrypt(content, true);}

    void setStepValidFlag(Step step) throws SQLException, WdkUserException,
            WdkModelException, JSONException{
        String sql = "UPDATE " + userSchema + TABLE_STEP + " SET "
                + COLUMN_IS_VALID + " = ? WHERE step_id = ?";
        PreparedStatement psUpdate = null;
        try{
            long start = System.currentTimeMillis();
            psUpdate = SqlUtils.getPreparedStatement(dataSource, sql);
            psUpdate.setBoolean(1, step.isValid());
            psUpdate.setInt(2, step.getInternalId());
            psUpdate.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-step-factory-update-strategy-signature", start);}
        finally{
            SqlUtils.closeStatement(psUpdate);}}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di258546705435607308" cid="C304" type="class" name="Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:01">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab5306846110d473ba79acade07fdbc41845" name="stepFactory" type="StepFactory" type-id="StepFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abff993fe20aa4c939cca562db91bfbe6845" name="user" type="User" type-id="User" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aeb1d4f4693c94b90bd87539198570121845" name="displayId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a94655b2fb1df429aa558ab864f9628be845" name="internalId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a884b267940f54f138eb1a4a42b749f26845" name="isSaved" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6cf8f2ed41be41d8b2ad4b0642508f01845" name="isDeleted" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a8ed930cadbdd4cbcac42c27704f764be845" name="createdTime" type="Date" type-id="Date" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9e617314c127458db7f74fc80bb97f82845" name="lastModifiedTime" type="Date" type-id="Date" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abdab4f5dc35a44c2918e85f092e1e5c1845" name="lastViewedTime" type="Date" type-id="Date" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a88db7a4f32384c52b78c21f48ceb1294846" name="signature" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae173566eff0c44a5b960a8349c96344c846" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac6200663bcc24abea73289ccc146ef31846" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a77cede575e9d4684991e3c77bc1ce205846" name="savedName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
        <attribute id="a3b01bfc00bd54d0798480458e5041ef5846" name="version" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a68ef69bd80b04fa5901893bf78cd12cf846" name="rootStepId" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o8b0cdcad5f9642478fed2f46af0107d3846" name="Strategy" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="factory" type="StepFactory" type-id="StepFactory" default-value="" />
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="displayId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> int internalId){
        this.stepFactory = factory;
        this.user = user;
        this.displayId = displayId;
        this.internalId = internalId;
        isSaved = false;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0f30a7ed3dcc4fafa7dab3475434f218846" name="getUser" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return user;}</source-code>
          </source-codes>
        </operation>
        <operation id="o88b7b06a18054687a8fe3e8dfc9b0fc8846" name="isDeleted" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return isDeleted;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5b8602dcda0f41a59812c5cbbdef3ed7846" name="setDeleted" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isDeleted" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.isDeleted = isDeleted;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocf6835bd62b74149b67c411e4a249abc846" name="getVersion" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
       return version;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofc3238368e7c4d8d988ec36cdbb46c9b846" name="setVersion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="version" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
      this.version = version;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c7908bf85f148db80f6d234baac59eb846" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (name != null &amp;&amp; name.length() &gt; StepFactory.COLUMN_NAME_LIMIT){
            name = name.substring(0, StepFactory.COLUMN_NAME_LIMIT - 1);}
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oce8c1a36e87e4d0cae5c7c79e57e3b60846" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o178157f27daa4638b6f910bee65d5b49846" name="setSavedName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="savedName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (savedName != null
                &amp;&amp; savedName.length() &gt; StepFactory.COLUMN_NAME_LIMIT){
            savedName = savedName.substring(0,
                    StepFactory.COLUMN_NAME_LIMIT - 1);}
        this.savedName = savedName;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofb92d8860cfa479bb2551adf76ec5a74846" name="getSavedName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return savedName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5f7b6eaa230f496f88973b22615de089846" name="setIsSaved" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="saved" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.isSaved = saved;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa47cc0e0448847c3929854ddaddf4a34846" name="getIsSaved" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return isSaved;}

    public synchronized Step getLatestStep() throws WdkUserException, WdkModelException,
            SQLException, JSONException {
        return stepFactory.loadStep(user, rootStepId);</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di128246380242454050" cid="C305" type="class" name="User" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:09">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="affc9e42011744983a69cadc8d3b89d20131" name="logger" type="Logger" type-id="Logger" visibility="private" abstract="false" virtual="false" default-value="Logger.getLogger">
          <stereotypes />
        </attribute>
        <attribute id="ab70d5e95259d4a3aa200f045dd314921131" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac0ec5a9baea54d69ac6aa8ed41f3f1a8131" name="userFactory" type="UserFactory" type-id="UserFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2fb72948423a42c4bcde673ed86a7f05131" name="stepFactory" type="StepFactory" type-id="StepFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a065b5a28209a4b0eaa75eb0dbd17d1ea131" name="datasetFactory" type="DatasetFactory" type-id="DatasetFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="adc257d4b566848c1bd091f0cef52fd24131" name="userId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a92930054a1a5474389f51584dd75ede6131" name="signature" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6b45c17d6e18444e934092298b97f8a2131" name="email" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="adb93781ab81a46658a80df7ecc2265ab131" name="lastName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0a98e28dad094f368fdd64022a3f2101131" name="firstName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1cbc47e6457d45098dc78cafda353d31131" name="middleName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abe910605d1b94f4f9195670afb63dff9131" name="title" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7d5b3e1bab704b4397140ca6714842bc131" name="organization" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a038a785086144ed79ae0012b4f866664131" name="department" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a78f330cbcdf94a68bcb41af2c5508af8131" name="address" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a642c8d4c3305489dbe385655d9b152eb131" name="city" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a384e86757e1d479983b072668eafb32d131" name="state" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9f516923c2354bbf8efcf04aef0009f9131" name="zipCode" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a076ba4ae79f44901886c98050eebe739131" name="phoneNumber" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a71a8806fb8894dddb4cba1cf167b3a37131" name="country" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a467a3671ee3f437bbbf0a3d132221676131" name="userRoles" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4f339cdf82f54758b3684c6b08e29a14131" name="guest" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="a43b08b6bbe9446bf8a7773e3761b2778131" name="globalPreferences" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aca81f4871b404f30a3f58d4925dff2eb131" name="projectPreferences" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9a8f40e6ffe44943bf6b258e24a7ea67131" name="frontAction" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
        <attribute id="a9e5d297b712b4eb49d200522e941ac98132" name="frontStrategy" type="Integer" type-id="Uml.Integer" visibility="private" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
        <attribute id="a011df6e32e094f19917e24f5bffab476132" name="frontStep" type="Integer" type-id="Uml.Integer" visibility="private" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ob10c749814834c4fbcad93dd79223e8c132" name="User" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="userId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String email, String signature)
            throws WdkUserException{
        this.userId = userId;
        this.email = email;
        this.signature = signature;

        userRoles = new LinkedHashSet&lt;String&gt;();

        globalPreferences = new LinkedHashMap&lt;String, String&gt;();
        projectPreferences = new LinkedHashMap&lt;String, String&gt;();

        setWdkModel(model);

        activeStrategyFactory = new ActiveStrategyFactory(this);}

    /**
     * The setter is called when the session is restored (deserialized)
     * 
     * @param wdkModel
     * @throws WdkUserException
     */
    public void setWdkModel(WdkModel wdkModel) throws WdkUserException{
        this.wdkModel = wdkModel;
        this.userFactory = wdkModel.getUserFactory();
        this.stepFactory = wdkModel.getStepFactory();
        this.datasetFactory = wdkModel.getDatasetFactory();}

    public WdkModel getWdkModel(){
        return this.wdkModel;}

    /**
     * @return Returns the userId.
     */
    public int getUserId(){
        return userId;}

    /**
     * @return Returns the signature.
     */
    public String getSignature(){
        return signature;}

    /**
     * @return Returns the email.
     */
    public String getEmail(){
        return email;}

    public void setEmail(String email){
        this.email = email;}

    /**
     * @return Returns the address.
     */
    public String getAddress(){
        return address;}

    /**
     * @param address
     *            The address to set.
     */
    public void setAddress(String address){
        this.address = address;}

    /**
     * @return Returns the city.
     */
    public String getCity(){
        return city;}

    /**
     * @param city
     *            The city to set.
     */
    public void setCity(String city){
        this.city = city;}

    /**
     * @return Returns the country.
     */
    public String getCountry(){
        return country;}

    /**
     * @param country
     *            The country to set.
     */
    public void setCountry(String country){
        this.country = country;}

    /**
     * @return Returns the department.
     */
    public String getDepartment(){
        return department;}

    /**
     * @param department
     *            The department to set.
     */
    public void setDepartment(String department){
        this.department = department;}

    /**
     * @return Returns the firstName.
     */
    public String getFirstName(){
        return firstName;}

    /**
     * @param firstName
     *            The firstName to set.
     */
    public void setFirstName(String firstName){
        this.firstName = firstName;}

    /**
     * @return Returns the lastName.
     */
    public String getLastName(){
        return lastName;}

    /**
     * @param lastName
     *            The lastName to set.
     */
    public void setLastName(String lastName){
        this.lastName = lastName;}

    /**
     * @return Returns the middleName.
     */
    public String getMiddleName(){
        return middleName;}

    /**
     * @param middleName
     *            The middleName to set.
     */
    public void setMiddleName(String middleName){
        this.middleName = middleName;}

    /**
     * @return Returns the organization.
     */
    public String getOrganization(){
        return organization;}

    /**
     * @param organization
     *            The organization to set.
     */
    public void setOrganization(String organization){
        this.organization = organization;}

    /**
     * @return Returns the phoneNumber.
     */
    public String getPhoneNumber(){
        return phoneNumber;}

    /**
     * @param phoneNumber
     *            The phoneNumber to set.
     */
    public void setPhoneNumber(String phoneNumber){
        this.phoneNumber = phoneNumber;}

    /**
     * @return Returns the state.
     */
    public String getState(){
        return state;}

    /**
     * @param state
     *            The state to set.
     */
    public void setState(String state){
        this.state = state;}

    /**
     * @return Returns the title.
     */
    public String getTitle(){
        return title;}

    /**
     * @param title
     *            The title to set.
     */
    public void setTitle(String title){
        this.title = title;}

    /**
     * @return Returns the zipCode.
     */
    public String getZipCode(){
        return zipCode;}

    /**
     * @param zipCode
     *            The zipCode to set.
     */
    public void setZipCode(String zipCode){
        this.zipCode = zipCode;}

    /**
     * @return Returns the guest.
     * @throws WdkUserException
     */
    public boolean isGuest() throws WdkUserException{
        return guest;}

    /**
     * @return Returns the userRole.
     */
    public String[ getUserRoles(){
        String[ roles = new String[userRoles.size();
        userRoles.toArray(roles);
        return roles;}

    /**
     * @param userRole
     *            The userRole to set.
     */
    public void addUserRole(String userRole){
        this.userRoles.add(userRole);}

    public void removeUserRole(String userRole){
        userRoles.remove(userRole);}

    public boolean containsUserRole(String userRole){
        return userRoles.contains(userRole);}

    void setUserRole(Set&lt;String&gt; roles){
        this.userRoles.clear();
        this.userRoles.addAll(roles);}

    public String getFrontAction(){
        return frontAction;}

    public Integer getFrontStrategy(){
        return frontStrategy;}

    public Integer getFrontStep(){
        return frontStep;}

    public void setFrontAction(String frontAction){
        this.frontAction = frontAction;}

    public void setFrontStrategy(int frontStrategy){
        System.out.println("Setting frontStrategy.");
        this.frontStrategy = Integer.valueOf(frontStrategy);
        System.out.println("Done.");}

    public void setFrontStep(int frontStep){
        this.frontStep = Integer.valueOf(frontStep);}

    public void resetFrontAction(){
        frontAction = null;
        frontStrategy = null;
        frontStep = null;}

    /**
     * @param guest
     *            The guest to set.
     */
    void setGuest(boolean guest){
        this.guest = guest;}

    /**
     * Create a step from the existing answerValue
     * 
     * @param answerValue
     * @return
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws NoSuchAlgorithmException
     */
    synchronized Step createStep(AnswerValue answerValue, boolean deleted,
            int assignedWeight) throws NoSuchAlgorithmException,
            WdkUserException, WdkModelException, SQLException, JSONException{
        Question question = answerValue.getQuestion();
        Map&lt;String, String&gt; paramValues = answerValue.getIdsQueryInstance().getValues();
        AnswerFilterInstance filter = answerValue.getFilter();
        int startIndex = answerValue.getStartIndex();
        int endIndex = answerValue.getEndIndex();

        return createStep(question, paramValues, filter, startIndex, endIndex,
                deleted, true, assignedWeight);}

    public synchronized Step createStep(Question question,
            Map&lt;String, String&gt; paramValues, String filterName,
            boolean deleted, boolean validate, int assignedWeight)
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        AnswerFilterInstance filter = null;
        RecordClass recordClass = question.getRecordClass();
        if (filterName != null){
            filter = recordClass.getFilter(filterName);} else filter = recordClass.getDefaultFilter();
        return createStep(question, paramValues, filter, deleted, validate,
                assignedWeight);}

    public synchronized Step createStep(Question question,
            Map&lt;String, String&gt; paramValues, AnswerFilterInstance filter,
            boolean deleted, boolean validate, int assignedWeight)
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        int endIndex = getItemsPerPage();
        return createStep(question, paramValues, filter, 1, endIndex, deleted,
                validate, assignedWeight);}

    public synchronized Step createStep(Question question,
            Map&lt;String, String&gt; paramValues, AnswerFilterInstance filter,
            int pageStart, int pageEnd, boolean deleted, boolean validate,
            int assignedWeight) throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        Step step = stepFactory.createStep(this, question, paramValues, filter,
                pageStart, pageEnd, deleted, validate, assignedWeight);
        return step;}

    public synchronized Strategy createStrategy(Step step, boolean saved)
            throws WdkUserException, WdkModelException, SQLException,
            JSONException, NoSuchAlgorithmException{
        return createStrategy(step, null, null, saved, null, false);}

    public synchronized Strategy createStrategy(Step step, boolean saved,
            boolean hidden) throws WdkUserException, WdkModelException,
            SQLException, JSONException, NoSuchAlgorithmException{
        return createStrategy(step, null, null, saved, null, hidden);}

    // Transitional method...how to handle savedName properly?
    // Probably by expecting it if a name is given?
    public synchronized Strategy createStrategy(Step step, String name,
            boolean saved) throws WdkUserException, WdkModelException,
            SQLException, JSONException, NoSuchAlgorithmException{
        return createStrategy(step, name, null, saved, null, false);}

    public synchronized Strategy createStrategy(Step step, String name,
            String savedName, boolean saved, String description, boolean hidden)
            throws WdkUserException, WdkModelException, SQLException,
            JSONException, NoSuchAlgorithmException{
        Strategy strategy = stepFactory.createStrategy(this, step, name,
                savedName, saved, description, hidden);

        // set the view to this one
        String strategyKey = Integer.toString(strategy.getStrategyId());
        this.activeStrategyFactory.openActiveStrategy(strategyKey);
        if (strategy.isValid()){
            this.activeStrategyFactory.setViewStrategyKey(strategyKey);
            this.activeStrategyFactory.setViewStepId(step.getDisplayId());}
        return strategy;}

    /**
     * this method is only called by UserFactory during the login process, it
     * merges the existing history of the current guest user into the logged-in
     * user.
     * 
     * @param user
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     */
    void mergeUser(User user) throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        // TEST
        logger.debug("Merging user #" + user.getUserId() + " into user #"
                + userId + "...");

        // first of all we import all the strategies
        Set&lt;Integer&gt; importedSteps = new LinkedHashSet&lt;Integer&gt;();
        Map&lt;Integer, Integer&gt; strategiesMap = new LinkedHashMap&lt;Integer, Integer&gt;();
        Map&lt;Integer, Integer&gt; stepsMap = new LinkedHashMap&lt;Integer, Integer&gt;();
        for (Strategy strategy : user.getStrategies()){
            // the root step is considered as imported
            Step rootStep = strategy.getLatestStep();

            // import the strategy
            Strategy newStrategy = this.importStrategy(strategy, stepsMap);

            importedSteps.add(rootStep.getDisplayId());
            strategiesMap.put(strategy.getStrategyId(),
                    newStrategy.getStrategyId());}

        // the current implementation can only keep the root level of the
        // imported strategies open;
        int[ oldActiveStrategies = user.activeStrategyFactory.getRootStrategies();
        for (int oldStrategyId : oldActiveStrategies){
            int newStrategyId = strategiesMap.get(oldStrategyId);
            activeStrategyFactory.openActiveStrategy(Integer.toString(newStrategyId));}

        // then import the steps that do not belong to any strategies; that is,
        // only the root steps who are not imported yet.
        for (Step step : user.getSteps()){
            if (stepFactory.isStepDepended(user, step.getDisplayId()))
                continue;
            if (importedSteps.contains(step.getDisplayId())) continue;

            stepFactory.importStep(this, step, stepsMap);}

        // if a front action is specified, copy it over and update ids

        if (user.getFrontAction() != null){
            setFrontAction(user.getFrontAction());
            if (strategiesMap.containsKey(user.getFrontStrategy())){
                setFrontStrategy(strategiesMap.get(user.getFrontStrategy()));}
            if (stepsMap.containsKey(user.getFrontStep())){
                setFrontStep(stepsMap.get(user.getFrontStep()));}}}

    public Map&lt;Integer, Step&gt; getStepsMap() throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        logger.debug("loading steps...");
        Map&lt;Integer, Step&gt; invalidSteps = new LinkedHashMap&lt;Integer, Step&gt;();
        Map&lt;Integer, Step&gt; allSteps = stepFactory.loadSteps(this, invalidSteps);

        return allSteps;}

    public Map&lt;Integer, Strategy&gt; getStrategiesMap() throws WdkUserException,
            WdkModelException, JSONException, SQLException,
            NoSuchAlgorithmException{
        logger.debug("loading strategies...");
        Map&lt;Integer, Strategy&gt; invalidStrategies = new LinkedHashMap&lt;Integer, Strategy&gt;();
        Map&lt;Integer, Strategy&gt; strategies = stepFactory.loadStrategies(this,
                invalidStrategies);

        return strategies;}

    public Map&lt;String, List&lt;Step&gt;&gt; getStepsByCategory()
            throws WdkUserException, WdkModelException, SQLException,
            JSONException, NoSuchAlgorithmException{
        Map&lt;Integer, Step&gt; steps = getStepsMap();
        Map&lt;String, List&lt;Step&gt;&gt; category = new LinkedHashMap&lt;String, List&lt;Step&gt;&gt;();
        for (Step step : steps.values()){
            // not include the histories marked as 'deleted'
            if (step.isDeleted()) continue;

            String type = step.getType();
            List&lt;Step&gt; list;
            if (category.containsKey(type)){
                list = category.get(type);} else{
                list = new ArrayList&lt;Step&gt;();
                category.put(type, list);}
            list.add(step);}
        return category;}

    public Strategy[ getInvalidStrategies() throws WdkUserException,
            WdkModelException, JSONException, SQLException,
            NoSuchAlgorithmException{
        try{
            Map&lt;Integer, Strategy&gt; strategies = new LinkedHashMap&lt;Integer, Strategy&gt;();
            stepFactory.loadStrategies(this, strategies);

            Strategy[ array = new Strategy[strategies.size();
            strategies.values().toArray(array);
            return array;} catch (WdkUserException ex){
            System.out.println(ex);
            throw ex;} catch (WdkModelException ex){
            System.out.println(ex);
            throw ex;}}

    public Strategy[ getStrategies() throws WdkUserException,
            WdkModelException, JSONException, SQLException,
            NoSuchAlgorithmException{
        Map&lt;Integer, Strategy&gt; map = getStrategiesMap();
        Strategy[ array = new Strategy[map.size();
        map.values().toArray(array);
        return array;}

    public Map&lt;String, List&lt;Strategy&gt;&gt; getStrategiesByCategory()
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        Map&lt;Integer, Strategy&gt; strategies = getStrategiesMap();
        return formatStrategiesByRecordClass(strategies.values());}

    public Map&lt;String, List&lt;Strategy&gt;&gt; getUnsavedStrategiesByCategory()
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        List&lt;Strategy&gt; strategies = stepFactory.loadStrategies(this, false,
                false);
        return formatStrategiesByRecordClass(strategies);}

    /**
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws JSONException
     * @throws SQLException
     */
    public Map&lt;String, List&lt;Strategy&gt;&gt; getSavedStrategiesByCategory()
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        List&lt;Strategy&gt; strategies = stepFactory.loadStrategies(this, true,
                false);
        return formatStrategiesByRecordClass(strategies);}

    public Map&lt;String, List&lt;Strategy&gt;&gt; getRecentStrategiesByCategory()
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        List&lt;Strategy&gt; strategies = stepFactory.loadStrategies(this, false,
                true);
        return formatStrategiesByRecordClass(strategies);}

    public Map&lt;String, List&lt;Strategy&gt;&gt; getActiveStrategiesByCategory()
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        Strategy[ strategies = getActiveStrategies();
        List&lt;Strategy&gt; list = new ArrayList&lt;Strategy&gt;();
        for (Strategy strategy : strategies)
            list.add(strategy);
        return formatStrategiesByRecordClass(list);}

    private Map&lt;String, List&lt;Strategy&gt;&gt; formatStrategiesByRecordClass(
            Collection&lt;Strategy&gt; strategies) throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        Map&lt;String, List&lt;Strategy&gt;&gt; category = new LinkedHashMap&lt;String, List&lt;Strategy&gt;&gt;();
        for (RecordClassSet rcSet : wdkModel.getAllRecordClassSets()){
            for (RecordClass recordClass : rcSet.getRecordClasses()){
                String type = recordClass.getFullName();
                category.put(type, new ArrayList&lt;Strategy&gt;());}}
        for (Strategy strategy : strategies){
            String type = strategy.getType();
            List&lt;Strategy&gt; list;
            if (category.containsKey(type)){
                list = category.get(type);} else{
                list = new ArrayList&lt;Strategy&gt;();
                category.put(type, list);}
            category.get(type).add(strategy);}
        return category;}

    public Map&lt;Integer, Step&gt; getStepsMap(String dataType)
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        Map&lt;Integer, Step&gt; steps = getStepsMap();
        Map&lt;Integer, Step&gt; selected = new LinkedHashMap&lt;Integer, Step&gt;();
        for (int stepDisplayId : steps.keySet()){
            Step step = steps.get(stepDisplayId);
            if (dataType.equalsIgnoreCase(step.getType()))
                selected.put(stepDisplayId, step);}
        return selected;}

    public Step[ getSteps(String dataType) throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, JSONException,
            SQLException{
        Map&lt;Integer, Step&gt; map = getStepsMap(dataType);
        Step[ array = new Step[map.size();
        map.values().toArray(array);
        return array;}

    public Step[ getSteps() throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        Map&lt;Integer, Step&gt; map = getStepsMap();
        Step[ array = new Step[map.size();
        map.values().toArray(array);
        return array;}

    public Step[ getInvalidSteps() throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        Map&lt;Integer, Step&gt; steps = new LinkedHashMap&lt;Integer, Step&gt;();
        stepFactory.loadSteps(this, steps);

        Step[ array = new Step[steps.size();
        steps.values().toArray(array);
        return array;}

    public Map&lt;Integer, Strategy&gt; getStrategiesMap(String dataType)
            throws WdkUserException, WdkModelException, JSONException,
            SQLException, NoSuchAlgorithmException{
        Map&lt;Integer, Strategy&gt; strategies = getStrategiesMap();
        Map&lt;Integer, Strategy&gt; selected = new LinkedHashMap&lt;Integer, Strategy&gt;();
        for (int strategyId : strategies.keySet()){
            Strategy strategy = strategies.get(strategyId);
            if (dataType.equalsIgnoreCase(strategy.getType()))
                selected.put(strategyId, strategy);}
        return selected;}

    public Strategy[ getStrategies(String dataType) throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, JSONException,
            SQLException{
        Map&lt;Integer, Strategy&gt; map = getStrategiesMap(dataType);
        Strategy[ array = new Strategy[map.size();
        map.values().toArray(array);
        return array;}

    public Step getStep(int displayId) throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        return stepFactory.loadStep(this, displayId);}

    public Strategy getStrategy(int userStrategyId) throws WdkUserException,
            WdkModelException, JSONException, SQLException,
            NoSuchAlgorithmException{
        return getStrategy(userStrategyId, true);}

    public Strategy getStrategy(int userStrategyId, boolean allowDeleted)
            throws WdkUserException, WdkModelException, JSONException,
            SQLException, NoSuchAlgorithmException{
        return stepFactory.loadStrategy(this, userStrategyId, allowDeleted);}

    public void deleteSteps() throws WdkUserException, SQLException,
            WdkModelException{
        deleteSteps(false);}

    public void deleteSteps(boolean allProjects) throws WdkUserException,
            SQLException, WdkModelException{
        stepFactory.deleteSteps(this, allProjects);}

    public void deleteInvalidSteps() throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        stepFactory.deleteInvalidSteps(this);}

    public void deleteInvalidStrategies() throws WdkUserException,
            WdkModelException, SQLException, JSONException,
            NoSuchAlgorithmException{
        stepFactory.deleteInvalidStrategies(this);}

    public void deleteStep(int displayId) throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException{
        stepFactory.deleteStep(this, displayId);}

    public void deleteStrategy(int strategyId) throws WdkUserException,
            WdkModelException, SQLException{
        String strategyKey = Integer.toString(strategyId);
        int order = activeStrategyFactory.getOrder(strategyKey);
        if (order &gt; 0) activeStrategyFactory.closeActiveStrategy(strategyKey);
        stepFactory.deleteStrategy(this, strategyId);}

    public void deleteStrategies() throws SQLException, WdkUserException,
            WdkModelException{
        activeStrategyFactory.clear();
        deleteStrategies(false);}

    public void deleteStrategies(boolean allProjects) throws SQLException,
            WdkUserException, WdkModelException{
        activeStrategyFactory.clear();
        stepFactory.deleteStrategies(this, allProjects);}

    public int getStepCount() throws WdkUserException, WdkModelException{
        return stepFactory.getStepCount(this);}

    public int getStrategyCount() throws WdkUserException, SQLException,
            WdkModelException{
        return stepFactory.getStrategyCount(this);}

    public void setProjectPreference(String prefName, String prefValue){
        if (prefValue == null) prefValue = prefName;
        projectPreferences.put(prefName, prefValue);}

    public void unsetProjectPreference(String prefName){
        projectPreferences.remove(prefName);}

    public Map&lt;String, String&gt; getProjectPreferences(){
        return new LinkedHashMap&lt;String, String&gt;(projectPreferences);}

    public String getProjectPreference(String key){
        return projectPreferences.get(key);}

    public void setGlobalPreference(String prefName, String prefValue){
        if (prefValue == null) prefValue = prefName;
        globalPreferences.put(prefName, prefValue);}

    public String getGlobalPreference(String key){
        return globalPreferences.get(key);}

    public void unsetGlobalPreference(String prefName){
        globalPreferences.remove(prefName);}

    public Map&lt;String, String&gt; getGlobalPreferences(){
        return new LinkedHashMap&lt;String, String&gt;(globalPreferences);}

    public void clearPreferences(){
        globalPreferences.clear();
        projectPreferences.clear();}

    void setPreferences(List&lt;Map&lt;String, String&gt;&gt; preferences){
        clearPreferences();
        globalPreferences.putAll(preferences.get(0));
        projectPreferences.putAll(preferences.get(1));}

    public void changePassword(String oldPassword, String newPassword,
            String confirmPassword) throws WdkUserException, WdkModelException{
        userFactory.changePassword(email, oldPassword, newPassword,
                confirmPassword);}

    DatasetFactory getDatasetFactory(){
        return datasetFactory;}

    public Dataset getDataset(String datasetChecksum) throws WdkUserException, WdkModelException{
        return datasetFactory.getDataset(this, datasetChecksum);}

    public Dataset getDataset(int userDatasetId) throws WdkModelException, WdkUserException{
        return datasetFactory.getDataset(this, userDatasetId);}

    public Dataset createDataset(RecordClass recordClass, String uploadFile,
            String strValues) throws WdkUserException, WdkModelException{
        return datasetFactory.getDataset(this, recordClass, uploadFile,
                strValues);}

    public Dataset createDataset(RecordClass recordClass, String uploadFile,
            List&lt;String[&gt; values) throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException{
        return datasetFactory.getDataset(this, recordClass, uploadFile, values);}

    /**
     * set this method synchronized to make sure the preferences are not 
     * updated at the same time.
     */
    public synchronized void save() throws WdkUserException, WdkModelException{
        userFactory.saveUser(this);}

    public int getItemsPerPage(){
        String prefValue = getGlobalPreference(User.PREF_ITEMS_PER_PAGE);
        int itemsPerPage = (prefValue == null) ? 20
                : Integer.parseInt(prefValue);
        return itemsPerPage;}

    public void setItemsPerPage(int itemsPerPage) throws WdkUserException,
            WdkModelException{
        if (itemsPerPage &lt;= 0) itemsPerPage = 20;
        else if (itemsPerPage &gt; 1000) itemsPerPage = 1000;
        setGlobalPreference(User.PREF_ITEMS_PER_PAGE,
                Integer.toString(itemsPerPage));
        save();}

    public void updateStep(Step step, String expression,
            boolean useBooleanFilter) throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException{
        // get a new hidden step, in order to get the new answer
        Step newStep = combineStep(expression, useBooleanFilter, true);
        step.setAnswer(newStep.getAnswer());
        stepFactory.deleteStep(this, newStep.getDisplayId());
        stepFactory.updateStep(this, step, true);}

    public Step combineStep(String expression) throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException{
        return combineStep(expression, false, false);}

    public Step combineStep(String expression, boolean useBooleanFilter,
            boolean deleted) throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        logger.debug("Boolean expression: " + expression);
        BooleanExpression exp = new BooleanExpression(this);
        Step step = exp.parseExpression(expression, useBooleanFilter);
        step.setBooleanExpression(expression);
        AnswerValue answerValue = step.getAnswerValue();

        logger.debug("Boolean answer size: " + answerValue.getResultSize());

        // save summary list, if no summary list exists
        String summaryKey = answerValue.getQuestion().getFullName()
                + SUMMARY_ATTRIBUTES_SUFFIX;
        if (!projectPreferences.containsKey(summaryKey)){
            Map&lt;String, AttributeField&gt; summary = answerValue.getSummaryAttributeFieldMap();
            StringBuffer sb = new StringBuffer();
            for (String attrName : summary.keySet()){
                if (sb.length() != 0) sb.append(",");
                sb.append(attrName);}
            projectPreferences.put(summaryKey, sb.toString());
            save();}

        return step;}

    public void validateExpression(String expression) throws WdkModelException,
            NoSuchAlgorithmException, WdkUserException, SQLException,
            JSONException{
        // construct BooleanQuestionNode
        BooleanExpression be = new BooleanExpression(this);
        be.parseExpression(expression, false);}

    public Map&lt;String, Boolean&gt; getSortingAttributes(String questionFullName)
            throws WdkUserException, WdkModelException{
        Question question = wdkModel.getQuestion(questionFullName);

        String sortKey = questionFullName + SORTING_ATTRIBUTES_SUFFIX;
        String sortingChecksum = projectPreferences.get(sortKey);
        if (sortingChecksum == null) return null;

        QueryFactory queryFactory = wdkModel.getQueryFactory();
        Map&lt;String, Boolean&gt; sortingAttributes = queryFactory.getSortingAttributes(sortingChecksum);
        if (sortingAttributes != null){
            // remove invalid columns
            Map&lt;String, AttributeField&gt; attributes = question.getAttributeFieldMap();
            String[ names = new String[sortingAttributes.size();
            sortingAttributes.keySet().toArray(names);
            for (String name : names){
                if (!attributes.containsKey(name))
                    sortingAttributes.remove(name);}

            return sortingAttributes;}

        // user doesn't have preference, use the default one of the question
        return question.getSortingAttributeMap();}

    public Map&lt;String, Boolean&gt; getSortingAttributesByChecksum(
            String sortingChecksum) throws WdkUserException, WdkModelException{
        if (sortingChecksum == null) return null;
        QueryFactory queryFactory = wdkModel.getQueryFactory();
        return queryFactory.getSortingAttributes(sortingChecksum);}

    public String addSortingAttribute(String questionFullName, String attrName,
            boolean ascending) throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        Map&lt;String, Boolean&gt; sortingMap = new LinkedHashMap&lt;String, Boolean&gt;();
        sortingMap.put(attrName, ascending);
        Map&lt;String, Boolean&gt; previousMap = getSortingAttributes(questionFullName);
        if (previousMap == null)
            previousMap = new LinkedHashMap&lt;String, Boolean&gt;();
        for (String aName : previousMap.keySet()){
            if (!sortingMap.containsKey(aName))
                sortingMap.put(aName, previousMap.get(aName));}

        // save and get sorting checksum
        QueryFactory queryFactory = wdkModel.getQueryFactory();
        String sortingChecksum = queryFactory.makeSortingChecksum(sortingMap);

        applySortingChecksum(questionFullName, sortingChecksum);
        return sortingChecksum;}

    public void applySortingChecksum(String questionFullName,
            String sortingChecksum){
        String sortKey = questionFullName + SORTING_ATTRIBUTES_SUFFIX;
        projectPreferences.put(sortKey, sortingChecksum);}

    public String[ getSummaryAttributes(String questionFullName)
            throws WdkUserException, WdkModelException{
        Question question = wdkModel.getQuestion(questionFullName);

        String summaryKey = questionFullName + SUMMARY_ATTRIBUTES_SUFFIX;
        String summaryChecksum = projectPreferences.get(summaryKey);
        String[ summary = null;
        boolean savedSummary = false;
        if (summaryChecksum != null &amp;&amp; summaryChecksum.length() &gt; 0){
            // get summary list
            QueryFactory queryFactory = wdkModel.getQueryFactory();
            summary = queryFactory.getSummaryAttributes(summaryChecksum);
            if (summary != null &amp;&amp; summary.length &gt; 0){
                savedSummary = true;

                // ignore invalid attribute names
                Map&lt;String, AttributeField&gt; attributes = question.getAttributeFieldMap();
                List&lt;String&gt; list = new ArrayList&lt;String&gt;();
                for (String attribute : summary){
                    if (attributes.containsKey(attribute)) list.add(attribute);}
                summary = new String[list.size();
                list.toArray(summary);}}

        // if user does't have preference, use the default of the question
        if (!savedSummary){
            Map&lt;String, AttributeField&gt; attributes = question.getSummaryAttributeFieldMap();
            summary = new String[attributes.size();
            attributes.keySet().toArray(summary);}

        // always display weight for combined questions
        // if (question.getQuery().isCombined()) {
        // // check if weight already exists
        // boolean hasWeight = false;
        // for (String name : summary) {
        // if (name.equals(Utilities.COLUMN_WEIGHT)) {
        // hasWeight = true;
        // break;
        // }
        // }
        //
        // // add weight to the last item if it's not included
        // if (!hasWeight) {
        // String[] array = new String[summary.length + 1];
        // System.arraycopy(summary, 0, array, 0, summary.length);
        // array[summary.length] = Utilities.COLUMN_WEIGHT;
        // summary = array;
        // summaryChecksum = null;
        // }
        // }

        return summary;}

    public void resetSummaryAttributes(String questionFullName){
        String summaryKey = questionFullName + SUMMARY_ATTRIBUTES_SUFFIX;
        projectPreferences.remove(summaryKey);
        logger.debug("reset used weight to false");}

    public String setSummaryAttributes(String questionFullName,
            String[ summaryNames) throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        // make sure all the attribute names exist
        Question question = (Question) wdkModel.resolveReference(questionFullName);
        Map&lt;String, AttributeField&gt; attributes = question.getAttributeFieldMap();

        // instead throwing out an error, just ignore the invalid columns
        List&lt;String&gt; validNames = new ArrayList&lt;String&gt;();
        for (String name : summaryNames){
            if (attributes.containsKey(name)) validNames.add(name);}
        summaryNames = validNames.toArray(new String[0);

        logger.debug("Saving Valid summary names: " + validNames);
        // create checksum
        QueryFactory queryFactory = wdkModel.getQueryFactory();
        String summaryChecksum = queryFactory.makeSummaryChecksum(summaryNames);

        applySummaryChecksum(questionFullName, summaryChecksum);
        return summaryChecksum;}

    /**
     * The method replace the previous checksum with the given one.
     * 
     * @param summaryChecksum
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     */
    public void applySummaryChecksum(String questionFullName,
            String summaryChecksum) throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException{
        String summaryKey = questionFullName + SUMMARY_ATTRIBUTES_SUFFIX;
        projectPreferences.put(summaryKey, summaryChecksum);}

    public String createRemoteKey() throws WdkUserException, WdkModelException{
        // user can remote key only if he/she is logged in
        if (isGuest())
            throw new WdkUserException("Guest user cannot create remote key.");

        // the key is a combination of user id and current time
        Date now = new Date();

        String key = Long.toString(now.getTime()) + "-&gt;"
                + Integer.toString(userId);
        key = UserFactory.encrypt(key);
        // save the remote key
        String saveKey = Long.toString(now.getTime()) + "&lt;-" + key;
        globalPreferences.put(PREF_REMOTE_KEY, saveKey);
        save();

        return key;}

    public void verifyRemoteKey(String remoteKey) throws WdkUserException{
        // get save key and creating time
        String saveKey = globalPreferences.get(PREF_REMOTE_KEY);
        if (saveKey == null)
            throw new WdkUserException(
                    "Remote login failed. The remote key doesn't exist.");
        String[ parts = saveKey.split("&lt;-");
        if (parts.length != 2)
            throw new WdkUserException(
                    "Remote login failed. The remote key is invalid.");
        long createTime = Long.parseLong(parts[0);
        String createKey = parts[1.trim();

        // verify remote key
        if (!createKey.equals(remoteKey))
            throw new WdkUserException(
                    "Remote login failed. The remote key doesn't match.");

        // check if the remote key is expired. There is an mandatory 10 minutes
        // expiration time for the remote key
        long now = (new Date()).getTime();
        if (Math.abs(now - createTime) &gt;= (10 * 60 * 1000))
            throw new WdkUserException(
                    "Remote login failed. The remote key is expired.");}

    public synchronized Strategy importStrategy(String strategyKey)
            throws NoSuchAlgorithmException, WdkModelException,
            WdkUserException, SQLException, JSONException{
        Strategy oldStrategy;
        String[ parts = strategyKey.split(":");
        if (parts.length == 1){
            // new strategy export url
            String strategySignature = parts[0;
            oldStrategy = stepFactory.loadStrategy(strategySignature);} else{
            String userSignature = parts[0;
            int displayId = Integer.parseInt(parts[1);
            User user = userFactory.getUser(userSignature);
            oldStrategy = user.getStrategy(displayId, true);}
        return importStrategy(oldStrategy, null);}

    public synchronized Strategy importStrategy(Strategy oldStrategy,
            Map&lt;Integer, Integer&gt; stepIdsMap) throws WdkModelException,
            WdkUserException, NoSuchAlgorithmException, SQLException,
            JSONException{
        Strategy newStrategy = stepFactory.importStrategy(this, oldStrategy,
                stepIdsMap);
        // highlight the imported strategy
        int rootStepId = newStrategy.getLatestStepId();
        String strategyKey = Integer.toString(newStrategy.getStrategyId());
        if (newStrategy.isValid()) setViewResults(strategyKey, rootStepId, 0);
        return newStrategy;}

    public Strategy[ getActiveStrategies() throws WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        int[ ids = activeStrategyFactory.getRootStrategies();
        List&lt;Strategy&gt; strategies = new ArrayList&lt;Strategy&gt;();
        for (int id : ids){
            try{
                Strategy strategy = getStrategy(id);
                strategies.add(strategy);} catch (WdkUserException ex){
                // something wrong with loading a strat, probably the strategy
                // doesn't exist anymore
                logger.warn("something wrong with loading a strat, probably "
                        + "the strategy doesn't exist anymore. Please "
                        + "investigate:\nUser #" + userId
                        + ", strategy display Id: " + id + "\nException: " + ex);}}
        Strategy[ array = new Strategy[strategies.size();
        strategies.toArray(array);
        return array;}

    public void addActiveStrategy(String strategyKey)
            throws NumberFormatException, WdkUserException, WdkModelException,
            JSONException, SQLException, NoSuchAlgorithmException{
        activeStrategyFactory.openActiveStrategy(strategyKey);
        int pos = strategyKey.indexOf('_');
        if (pos &gt;= 0) strategyKey = strategyKey.substring(0, pos);
        int strategyId = Integer.parseInt(strategyKey);
        stepFactory.updateStrategyViewTime(this, strategyId);}

    public void removeActiveStrategy(String strategyKey)
            throws WdkUserException{
        activeStrategyFactory.closeActiveStrategy(strategyKey);}

    public void replaceActiveStrategy(int oldStrategyId, int newStrategyId,
            Map&lt;Integer, Integer&gt; stepIdsMap) throws WdkUserException,
            WdkModelException, JSONException, SQLException,
            NoSuchAlgorithmException{
        activeStrategyFactory.replaceStrategy(this, oldStrategyId,
                newStrategyId, stepIdsMap);}

    public void setViewResults(String strategyKey, int stepId, int pagerOffset){
        this.activeStrategyFactory.setViewStrategyKey(strategyKey);
        this.activeStrategyFactory.setViewStepId(stepId);
        this.activeStrategyFactory.setViewPagerOffset(pagerOffset);}

    public void resetViewResults(){
        this.activeStrategyFactory.setViewStrategyKey(null);
        this.activeStrategyFactory.setViewStepId(null);
        this.activeStrategyFactory.setViewPagerOffset(null);}

    public String getViewStrategyKey(){
        return this.activeStrategyFactory.getViewStrategyKey();}

    public int getViewStepId(){
        return this.activeStrategyFactory.getViewStepId();}

    public Integer getViewPagerOffset(){
        return this.activeStrategyFactory.getViewPagerOffset();}

    public boolean checkNameExists(Strategy strategy, String name, boolean saved)
            throws SQLException, WdkUserException, WdkModelException{
        return stepFactory.checkNameExists(strategy, name, saved);}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj){
        if (obj instanceof User){
            User user = (User) obj;
            if (user.userId != userId) return false;
            if (!email.equals(user.email)) return false;
            if (!signature.equals(user.signature)) return false;

            return true;} else return false;}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode(){
        return userId;}

    public Step createBooleanStep(Step leftStep, Step rightStep,
            String booleanOperator, boolean useBooleanFilter, String filterName)
            throws WdkModelException, NoSuchAlgorithmException,
            WdkUserException, SQLException, JSONException{
        BooleanOperator operator = BooleanOperator.parse(booleanOperator);
        Question question = null;
        try{
            question = leftStep.getQuestion();} catch (WdkModelException ex){
            // in case the left step has an invalid question, try the right
            question = rightStep.getQuestion();}
        AnswerFilterInstance filter = null;
        if (filterName != null)
            filter = question.getRecordClass().getFilter(filterName);
        return createBooleanStep(leftStep, rightStep, operator,
                useBooleanFilter, filter);}

    public Step createBooleanStep(Step leftStep, Step rightStep,
            BooleanOperator operator, boolean useBooleanFilter,
            AnswerFilterInstance filter) throws WdkModelException,
            NoSuchAlgorithmException, WdkUserException, SQLException,
            JSONException{
        // make sure the left &amp; right step belongs to the user
        if (leftStep.getUser().getUserId() != userId)
            throw new WdkUserException("The Left Step ["
                    + leftStep.getDisplayId()
                    + "] doesn't belong to the user #" + userId);
        if (rightStep.getUser().getUserId() != userId)
            throw new WdkUserException("The Right Step ["
                    + rightStep.getDisplayId()
                    + "] doesn't belong to the user #" + userId);

        // verify the record type of the operands
        RecordClass leftRecordClass = leftStep.getQuestion().getRecordClass();
        RecordClass rightRecordClass = rightStep.getQuestion().getRecordClass();
        if (!leftRecordClass.getFullName().equals(
                rightRecordClass.getFullName()))
            throw new WdkUserException("Boolean operation cannot be applied "
                    + "to results of different record types. Left operand is "
                    + "of type " + leftRecordClass.getFullName() + ", but the"
                    + " right operand is of type "
                    + rightRecordClass.getFullName());

        Question question = wdkModel.getBooleanQuestion(leftRecordClass);
        BooleanQuery booleanQuery = (BooleanQuery) question.getQuery();

        Map&lt;String, String&gt; params = new LinkedHashMap&lt;String, String&gt;();

        String leftName = booleanQuery.getLeftOperandParam().getName();
        String leftKey = Integer.toString(leftStep.getDisplayId());
        params.put(leftName, leftKey);

        String rightName = booleanQuery.getRightOperandParam().getName();
        String rightKey = Integer.toString(rightStep.getDisplayId());
        params.put(rightName, rightKey);

        String operatorString = operator.getBaseOperator();
        params.put(booleanQuery.getOperatorParam().getName(), operatorString);
        params.put(booleanQuery.getUseBooleanFilter().getName(),
                Boolean.toString(useBooleanFilter));

        Step booleanStep = createStep(question, params, filter, false, false, 0);
        return booleanStep;}

    public int getStrategyOrder(String strategyKey){
        int order = activeStrategyFactory.getOrder(strategyKey);
        System.out.println("strat " + strategyKey + " order: " + order);
        return order;}

    public int[ getActiveStrategyIds(){
        return activeStrategyFactory.getRootStrategies();}

    public Strategy copyStrategy(Strategy strategy)
            throws NoSuchAlgorithmException, SQLException, WdkUserException,
            WdkModelException, JSONException{
        Strategy copy = stepFactory.copyStrategy(strategy);
        return copy;}

    public Strategy copyStrategy(Strategy strategy, int stepId)
            throws NoSuchAlgorithmException, SQLException, WdkModelException,
            JSONException, WdkUserException{
        Strategy copy = stepFactory.copyStrategy(strategy, stepId);
        return copy;}

    public void addToFavorite(RecordClass recordClass,
            List&lt;Map&lt;String, Object&gt;&gt; pkValues) throws WdkUserException,
            WdkModelException, SQLException, NoSuchAlgorithmException,
            JSONException{
        FavoriteFactory favoriteFactory = wdkModel.getFavoriteFactory();
        favoriteFactory.addToFavorite(this, recordClass, pkValues);}

    public void clearFavorite() throws WdkUserException, WdkModelException,
            SQLException{
        wdkModel.getFavoriteFactory().clearFavorite(this);}

    public int getFavoriteCount() throws SQLException, WdkUserException,
            WdkModelException{
        return wdkModel.getFavoriteFactory().getFavoriteCounts(this);}

    public Map&lt;RecordClass, List&lt;Favorite&gt;&gt; getFavorites()
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        return wdkModel.getFavoriteFactory().getFavorites(this);}

    public void removeFromFavorite(RecordClass recordClass,
            List&lt;Map&lt;String, Object&gt;&gt; pkValues) throws WdkUserException,
            WdkModelException, SQLException{
        FavoriteFactory favoriteFactory = wdkModel.getFavoriteFactory();
        favoriteFactory.removeFromFavorite(this, recordClass, pkValues);}

    public boolean isInFavorite(RecordClass recordClass,
            Map&lt;String, Object&gt; pkValue) throws WdkUserException,
            WdkModelException, SQLException{
        FavoriteFactory favoriteFactory = wdkModel.getFavoriteFactory();
        return favoriteFactory.isInFavorite(this, recordClass, pkValue);}

    public void setFavoriteNotes(RecordClass recordClass,
            List&lt;Map&lt;String, Object&gt;&gt; pkValues, String note)
            throws WdkUserException, WdkModelException, SQLException{
        FavoriteFactory favoriteFactory = wdkModel.getFavoriteFactory();
        favoriteFactory.setNotes(this, recordClass, pkValues, note);}

    public void setFavoriteGroups(RecordClass recordClass,
            List&lt;Map&lt;String, Object&gt;&gt; pkValues, String group)
            throws WdkUserException, WdkModelException, SQLException{
        FavoriteFactory favoriteFactory = wdkModel.getFavoriteFactory();
        favoriteFactory.setGroups(this, recordClass, pkValues, group);}

    public String[ getFavoriteGroups() throws WdkUserException,
            WdkModelException, SQLException{
        FavoriteFactory favoriteFactory = wdkModel.getFavoriteFactory();
        return favoriteFactory.getGroups(this);}

    public Map&lt;RecordClass, Integer&gt; getBasketCounts() throws SQLException{
        BasketFactory basketFactory = wdkModel.getBasketFactory();
        return basketFactory.getBasketCounts(this);}

    public int getBasketCounts(List&lt;String[&gt; records, RecordClass recordClass)
            throws WdkUserException, WdkModelException, SQLException{
        int count = wdkModel.getBasketFactory().getBasketCounts(this, records,
                recordClass);
        if (logger.isDebugEnabled()){
            logger.debug("How many of " + convert(records) + " in basket? "
                    + count);}
        return count;}

    private String convert(List&lt;String[&gt; records){
        StringBuilder sb = new StringBuilder("List { ");
        for (String[ item : records){
            sb.append("[ ");
            for (String s : item){
                sb.append(s).append(", ");}
            sb.append(" ],");}
        sb.append(" }");
        return sb.toString();}

    public int getFavoriteCount(List&lt;Map&lt;String, Object&gt;&gt; records,
            RecordClass recordClass) throws WdkUserException,
            WdkModelException, SQLException{
        FavoriteFactory favoriteFactory = wdkModel.getFavoriteFactory();
        int count = 0;
        for (Map&lt;String, Object&gt; item : records){
            boolean inFavs = favoriteFactory.isInFavorite(this, recordClass,
                    item);
            if (logger.isDebugEnabled()){
                logger.debug("Is " + convert(item) + " in favorites? " + inFavs);}
            if (inFavs){
                count++;}}
        return count;}

    private String convert(Map&lt;String, Object&gt; item){
        StringBuilder sb = new StringBuilder("Map { ");
        for (String s : item.keySet()){
            sb.append("{ ").append(s).append(", ").append(item.get(s)).append(
                    " },");}
        sb.append(" }");
        return sb.toString();}

    public SummaryView getCurrentSummaryView(Question question)
            throws WdkModelException, WdkUserException{
        String key = SUMMARY_VIEW_PREFIX + question.getFullName();
        String viewName = projectPreferences.get(key);
        SummaryView view;
        if (viewName == null){ // no summary view set, use the default one
            view = question.getDefaultSummaryView();} else{
            view = question.getSummaryView(viewName);}
        return view;}

    public void setCurrentSummaryView(Question question, SummaryView summaryView)
            throws WdkUserException, WdkModelException{
        String key = SUMMARY_VIEW_PREFIX + question.getFullName();
        if (summaryView == null){ // remove the current summary view
            projectPreferences.remove(key);} else{ // store the current summary view
            String viewName = summaryView.getName();
            projectPreferences.put(key, viewName);}
        save();}

    public RecordView getCurrentRecordView(RecordClass recordClass)
            throws WdkUserException{
        String key = RECORD_VIEW_PREFIX + recordClass.getFullName();
        String viewName = projectPreferences.get(key);
        RecordView view;
        if (viewName == null){ // no record view set, use the default one
            view = recordClass.getDefaultRecordView();} else{
            view = recordClass.getRecordView(viewName);}
        return view;}

    public void setCurrentRecordView(RecordClass recordClass,
            RecordView recordView) throws WdkUserException, WdkModelException{
        String key = RECORD_VIEW_PREFIX + recordClass.getFullName();
        if (recordView == null){ // remove the current record view
            projectPreferences.remove(key);} else{ // store the current record view
            String viewName = recordView.getName();
            projectPreferences.put(key, viewName);}
        save();}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di717040889402816513" cid="C306" type="class" name="UserFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:14">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5556f5f1357e4b91be8525ef77a5ed29908" name="platform" type="DBPlatform" type-id="DBPlatform" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5d0114195926448fb829f338de68698f908" name="dataSource" type="DataSource" type-id="DataSource" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a00735f179bb24a678f91b1d1939d3df2908" name="userSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a605bcf02f06a4059b4d48c2d4253ac7c908" name="defaultRole" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aac9cc41bd7014cf78f2a5ec201206882908" name="projectId" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6f5a3a0aa4e747a4b1ad5bbd2dc38a36908" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o2f112fa7bb034fc9a593bf253c794007908" name="encrypt" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="str" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // convert each byte into hex format
        StringBuffer buffer = new StringBuffer();
        for (byte code : Utilities.getEncryptedBytes(str)){
            buffer.append(Integer.toHexString(code &amp; 0xFF));}
        return buffer.toString();}

	/**
     * md5 checksum algorithm. encrypt(String) drops leading zeros of hex codes
     * so is not compatible with md5
     **/</source-code>
          </source-codes>
        </operation>
        <operation id="o25be0489cc5448e8b761319a34b1fb56908" name="md5" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="str" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException{
        StringBuffer buffer = new StringBuffer();
        for (byte code : Utilities.getEncryptedBytes(str)){
            buffer.append(Integer.toString((code &amp; 0xff) + 0x100, 16).substring(1));}
        return buffer.toString();}

    // -------------------------------------------------------------------------
    // member variables
    // -------------------------------------------------------------------------

    // WdkModel is used by the legacy code, may consider to be removed</source-code>
          </source-codes>
        </operation>
        <operation id="o68f424a395a942579059ae8dcc2fad13908" name="UserFactory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;
        this.platform = wdkModel.getUserPlatform();
        this.dataSource = platform.getDataSource();
        this.projectId = wdkModel.getProjectId();

        ModelConfig modelConfig = wdkModel.getModelConfig();
        ModelConfigUserDB userDB = modelConfig.getUserDB();
        this.userSchema = userDB.getUserSchema();
        this.defaultRole = modelConfig.getDefaultRole();}

    /**
     * @return Returns the userRole.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o15f524655d7343c280f8a875620e5f42908" name="getDefaultRole" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return defaultRole;}</source-code>
          </source-codes>
        </operation>
        <operation id="o64ac612f7fcc434fa6b948450ae59270908" name="getProjectId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return projectId;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5a88f080a27141139c0c62ff5268c62c908" name="User" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="title" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="address" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String city, String state,
            String zipCode, String phoneNumber, String country,
            Map&lt;String, String&gt; globalPreferences,
            Map&lt;String, String&gt; projectPreferences) throws WdkUserException,
            WdkModelException{
        return createUser(email, lastName, firstName, middleName, title,
                organization, department, address, city, state, zipCode,
                phoneNumber, country, globalPreferences, projectPreferences,
                true);}</source-code>
          </source-codes>
        </operation>
        <operation id="od9e69536f5c64faa8ea3908f7d006fd4908" name="createUser" type="User" type-id="User" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="lastName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String firstName,
            String middleName, String title, String organization,
            String department, String address, String city, String state,
            String zipCode, String phoneNumber, String country,
            Map&lt;String, String&gt; globalPreferences,
            Map&lt;String, String&gt; projectPreferences, boolean resetPwd)
            throws WdkUserException, WdkModelException{
        if (email == null)
            throw new WdkUserException("The user's email cannot be empty.");
        // format the info
        email = email.trim();
        if (email.length() == 0)
            throw new WdkUserException("The user's email cannot be empty.");

        PreparedStatement psUser = null;
        try{
            // check whether the user exist in the database already exist.
            // if loginId exists, the operation failed
            if (isExist(email))
                throw new WdkUserException("The email '" + email
                        + "' has already been registered. "
                        + "Please choose another one.");

            // get a new userId
            int userId = platform.getNextId(userSchema, "users");
            String signature = encrypt(userId + "_" + email);
            Date registerTime = new Date();

            String sql = "INSERT INTO " + userSchema + TABLE_USER + " ("
                    + Utilities.COLUMN_USER_ID + ", " + COLUMN_EMAIL
                    + ", passwd, is_guest, "
                    + "register_time, last_name, first_name, "
                    + "middle_name, title, organization, department, address, "
                    + "city, state, zip_code, phone_number, country,signature)"
                    + " VALUES (?, ?, ' ', ?, ?, ?, ?, ?, ?, ?, ?,"
                    + "?, ?, ?, ?, ?, ?, ?)";
            long start = System.currentTimeMillis();
            psUser = SqlUtils.getPreparedStatement(dataSource, sql);
            psUser.setInt(1, userId);
            psUser.setString(2, email);
            psUser.setBoolean(3, false);
            psUser.setTimestamp(4, new Timestamp(registerTime.getTime()));
            psUser.setString(5, lastName);
            psUser.setString(6, firstName);
            psUser.setString(7, middleName);
            psUser.setString(8, title);
            psUser.setString(9, organization);
            psUser.setString(10, department);
            psUser.setString(11, address);
            psUser.setString(12, city);
            psUser.setString(13, state);
            psUser.setString(14, zipCode);
            psUser.setString(15, phoneNumber);
            psUser.setString(16, country);
            psUser.setString(17, signature);
            psUser.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-register", start);

            // create user object
            User user = new User(wdkModel, userId, email, signature);
            user.setLastName(lastName);
            user.setFirstName(firstName);
            user.setMiddleName(middleName);
            user.setTitle(title);
            user.setOrganization(organization);
            user.setDepartment(department);
            user.setAddress(address);
            user.setCity(city);
            user.setState(state);
            user.setZipCode(zipCode);
            user.setPhoneNumber(phoneNumber);
            user.setCountry(country);
            user.addUserRole(defaultRole);
            user.setGuest(false);

            // save user's roles
            saveUserRoles(user);

            // save preferences
            if (globalPreferences == null)
                globalPreferences = new LinkedHashMap&lt;String, String&gt;();
            for (String param : globalPreferences.keySet()){
                user.setGlobalPreference(param, globalPreferences.get(param));}
            if (projectPreferences == null)
                projectPreferences = new LinkedHashMap&lt;String, String&gt;();
            for (String param : projectPreferences.keySet()){
                user.setProjectPreference(param, projectPreferences.get(param));}
            savePreferences(user);

            // generate a random password, and send to the user via email
            if (resetPwd)
                resetPassword(user);

            return user;} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeStatement(psUser);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5d110a6dc36940f2986cd0cc01baa5d8908" name="createGuestUser" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        PreparedStatement psUser = null;
        try{
            // get a new user id
            int userId = platform.getNextId(userSchema, "users");
            String email = GUEST_USER_PREFIX + userId;
            Date registerTime = new Date();
            Date lastActiveTime = new Date();
            String signature = encrypt(userId + "_" + email);
            String firstName = "Guest #" + userId;
            String sql = "INSERT INTO " + userSchema
                    + "users (user_id, email, passwd, is_guest, "
                    + "register_time, last_active, first_name, signature) "
                    + "VALUES (?, ?, ' ', ?, ?, ?, ?, ?)";
            long start = System.currentTimeMillis();
            psUser = SqlUtils.getPreparedStatement(dataSource, sql);
            psUser.setInt(1, userId);
            psUser.setString(2, email);
            psUser.setBoolean(3, true);
            psUser.setTimestamp(4, new Timestamp(registerTime.getTime()));
            psUser.setTimestamp(5, new Timestamp(lastActiveTime.getTime()));
            psUser.setString(6, firstName);
            psUser.setString(7, signature);
            psUser.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-create-guest", start);

            User user = new User(wdkModel, userId, email, signature);
            user.setFirstName(firstName);
            user.addUserRole(defaultRole);
            user.setGuest(true);

            // save user's roles
            saveUserRoles(user);

            logger.info("Guest user #" + userId + " created.");

            return user;}
        catch (SQLException e){
        	throw new WdkUserException("Unable to create guest user.", e);}
        finally{
            SqlUtils.closeStatement(psUser);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oa454fca5b1be4d7db7a5dd4613dd3e53908" name="login" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="guest" type="User" type-id="User" default-value="" />
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="password" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        // make sure the guest is really a guest
        if (!guest.isGuest())
            throw new WdkUserException("User has been logged in.");

        // authenticate the user; if fails, a WdkUserException will be thrown
        // out
        User user = authenticate(email, password);

        // merge the history of the guest into the user
        user.mergeUser(guest);

        // update user active timestamp
        updateUser(user);

        return user;}</source-code>
          </source-codes>
        </operation>
        <operation id="oae140eb767d6406f96078e8dc0225101908" name="authenticate" type="User" type-id="User" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="password" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        // convert email to lower case
        email = email.trim();
        ResultSet rs = null;
        String sql = "SELECT user_id " + "FROM " + userSchema + "users WHERE "
                + "email = ? AND passwd = ?";
        try{
            // encrypt password
            password = encrypt(password);

            // query on the database to see if the pair match
            long start = System.currentTimeMillis();
            PreparedStatement ps = SqlUtils.getPreparedStatement(dataSource,
                    sql);
            ps.setString(1, email);
            ps.setString(2, password);
            rs = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-login", start);
            if (!rs.next())
                throw new WdkUserException("Invalid email or password.");
            int userId = rs.getInt("user_id");

            // passed validation, load user information
            return getUser(userId);} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rs);}}

    /**
     * Only load the basic information of the user
     * 
     * @param email
     * @return
     * @throws WdkUserException
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o94b11cf0dcf54d8887441f16a72288e3908" name="getUserByEmail" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            SQLException, WdkModelException{
        email = email.trim();

        ResultSet rsUser = null;
        String sql = "SELECT " + Utilities.COLUMN_USER_ID + " FROM "
                + userSchema + TABLE_USER + " WHERE email = ?";
        try{
            // get user information
            long start = System.currentTimeMillis();
            PreparedStatement psUser = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psUser.setString(1, email);
            rsUser = psUser.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-get-id-by-email",
                    start);
            if (!rsUser.next())
                throw new WdkUserException("The user with email '" + email
                        + "' doesn't exist.");

            // read user info
            int userId = rsUser.getInt("user_id");
            return getUser(userId);} finally{
            SqlUtils.closeResultSet(rsUser);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o6aa10d808da3468ba69ffe557a088bc1908" name="getUser" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="signature" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException{
        ResultSet rsUser = null;
        String sql = "SELECT user_id FROM " + userSchema
                + "users WHERE signature = ?";
        try{
            // get user information
            long start = System.currentTimeMillis();
            PreparedStatement psUser = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psUser.setString(1, signature);
            rsUser = psUser.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-get-id-by-signature",
                    start);
            if (!rsUser.next())
                throw new WdkUserException("The user with signature '"
                        + signature + "' doesn't exist.");

            // read user info
            int userId = rsUser.getInt("user_id");
            return getUser(userId);} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rsUser);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob99ad8d052d541db9bea34a2b50f0abf908" name="getUser" type="User" type-id="User" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, SQLException,
            WdkModelException{
        ResultSet rsUser = null;
        String sql = "SELECT email, signature, is_guest, last_name, "
                + "first_name, middle_name, title, organization, "
                + "department, address, city, state, zip_code, "
                + "phone_number, country FROM " + userSchema
                + "users WHERE user_id = ?";
        try{
            // get user information
            long start = System.currentTimeMillis();
            PreparedStatement psUser = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psUser.setInt(1, userId);
            rsUser = psUser.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-get-user-by-id", start);
            if (!rsUser.next())
                throw new WdkUserException("The user with id " + userId
                        + " doesn't exist.");

            // read user info
            String email = rsUser.getString("email");
            String signature = rsUser.getString("signature");
            User user = new User(wdkModel, userId, email, signature);
            user.setGuest(rsUser.getBoolean("is_guest"));
            user.setLastName(rsUser.getString("last_name"));
            user.setFirstName(rsUser.getString("first_name"));
            user.setMiddleName(rsUser.getString("middle_name"));
            user.setTitle(rsUser.getString("title"));
            user.setOrganization(rsUser.getString("organization"));
            user.setDepartment(rsUser.getString("department"));
            user.setAddress(rsUser.getString("address"));
            user.setCity(rsUser.getString("city"));
            user.setState(rsUser.getString("state"));
            user.setZipCode(rsUser.getString("zip_code"));
            user.setPhoneNumber(rsUser.getString("phone_number"));
            user.setCountry(rsUser.getString("country"));

            // load the user's roles
            user.setUserRole(getUserRoles(user));

            // load user's preferences
            user.setPreferences(getPreferences(user));

            return user;} finally{
            SqlUtils.closeResultSet(rsUser);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o75b261336d714e0c972efa49719f8037908" name="queryUsers" type="User[]" type-id="User[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="emailPattern" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException{
        String sql = "SELECT user_id, email FROM " + userSchema + "users";

        if (emailPattern != null &amp;&amp; emailPattern.length() &gt; 0){
            emailPattern = emailPattern.replace('*', '%');
            emailPattern = emailPattern.replaceAll("'", "");
            sql += " WHERE email LIKE '" + emailPattern + "'";}
        sql += " ORDER BY email";
        List&lt;User&gt; users = new ArrayList&lt;User&gt;();
        ResultSet rs = null;
        try{
            rs = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                    "wdk-user-query-users-by-email");
            while (rs.next()){
                int userId = rs.getInt("user_id");
                User user = getUser(userId);
                users.add(user);}} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rs);}
        User[ array = new User[users.size();
        users.toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc07bfa316eb64ee7a56e5e1cb6fd8ff8908" name="checkConsistancy" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        ResultSet rs = null;
        PreparedStatement psUser = null;
        try{
            // update user's register time
            int count = SqlUtils.executeUpdate(wdkModel, dataSource, "UPDATE "
                    + userSchema + "users SET register_time = last_active "
                    + "WHERE register_time is null",
                    "wdk-user-update-register-time");
            System.out.println(count + " users with empty register_time have "
                    + "been updated");

            // update history's is_delete field
            count = SqlUtils.executeUpdate(wdkModel, dataSource, "UPDATE "
                    + userSchema + "histories SET is_deleted = 0 "
                    + "WHERE is_deleted is null", "wdk-user-update-deleted");
            System.out.println(count + " histories with empty is_deleted have "
                    + "been updated");

            // update user's signature
            String sql = "Update " + userSchema
                    + "users SET signature = ? WHERE user_id = ?";
            psUser = SqlUtils.getPreparedStatement(dataSource, sql);
            rs = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                    "wdk-user-update-signature");
            while (rs.next()){
                int userId = rs.getInt("user_id");

                String email = rs.getString("email");
                String signature = encrypt(userId + "_" + email);
                psUser.setString(1, signature);
                psUser.setInt(2, userId);
                psUser.executeUpdate();
                System.out.println("User [" + userId + "] " + email
                        + "'s signature is updated");}} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rs);
            SqlUtils.closeStatement(psUser);}}</source-code>
          </source-codes>
        </operation>
        <operation id="odf81c6b5e21b4fd8a28a426a262dbcb2908" name="getUserRoles" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException{
        Set&lt;String&gt; roles = new LinkedHashSet&lt;String&gt;();
        ResultSet rsRole = null;
        String sql = "SELECT user_role from " + userSchema + "user_roles "
                + "WHERE user_id = ?";
        try{
            // load the user's roles
            long start = System.currentTimeMillis();
            PreparedStatement psRole = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psRole.setInt(1, user.getUserId());
            rsRole = psRole.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-get-roles", start);
            while (rsRole.next()){
                roles.add(rsRole.getString("user_role"));}} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rsRole);}
        return roles;}</source-code>
          </source-codes>
        </operation>
        <operation id="o81fd97a851454ae994cfa3ed94c420a4908" name="saveUserRoles" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException{
        // get a list of original roles, and find the roles to be deleted and
        // added
        Set&lt;String&gt; oldRoles = getUserRoles(user);
        List&lt;String&gt; toDelete = new ArrayList&lt;String&gt;();
        List&lt;String&gt; toInsert = new ArrayList&lt;String&gt;();
        for (String role : user.getUserRoles()){
            if (!oldRoles.contains(role))
                toInsert.add(role);}
        for (String role : oldRoles){
            if (user.containsUserRole(role))
                toDelete.add(role);}

        int userId = user.getUserId();
        PreparedStatement psDelete = null, psInsert = null;
        try{
            String sqlDelete = "DELETE FROM " + userSchema + "user_roles "
                    + " WHERE user_id = ? AND user_role = ?";
            psDelete = SqlUtils.getPreparedStatement(dataSource, sqlDelete);
            String sqlInsert = "INSERT INTO " + userSchema
                    + "user_roles (user_id, user_role)" + " VALUES (?, ?)";
            psInsert = SqlUtils.getPreparedStatement(dataSource, sqlInsert);

            // delete roles
            long start = System.currentTimeMillis();
            for (String role : toDelete){
                psDelete.setInt(1, userId);
                psDelete.setString(2, role);
                psDelete.addBatch();}
            psDelete.executeBatch();
            SqlUtils.verifyTime(wdkModel, sqlDelete, "wdk-user-delete-roles",
                    start);

            // insert roles
            start = System.currentTimeMillis();
            for (String role : toInsert){
                psInsert.setInt(1, userId);
                psInsert.setString(2, role);
                psInsert.addBatch();}
            psInsert.executeBatch();
            SqlUtils.verifyTime(wdkModel, sqlInsert, "wdk-user-insert-roles",
                    start);} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeStatement(psDelete);
            SqlUtils.closeStatement(psInsert);}}

    /**
     * Save the basic information of a user
     * 
     * @param user
     * @throws WdkUserException
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9d3ba73e34e94375a57542daec80526b908" name="saveUser" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        int userId = user.getUserId();
        // check if user exists in the database. if not, fail and ask to create
        // the user first
        PreparedStatement psUser = null;
        String sqlUser = "UPDATE " + userSchema + "users SET is_guest = ?, "
                + "last_active = ?, last_name = ?, first_name = ?, "
                + "middle_name = ?, organization = ?, department = ?, "
                + "title = ?,  address = ?, city = ?, state = ?, "
                + "zip_code = ?, phone_number = ?, country = ?, "
                + "email = ? " + "WHERE user_id = ?";
        try{
            Date lastActiveTime = new Date();

            // save the user's basic information
            long start = System.currentTimeMillis();
            psUser = SqlUtils.getPreparedStatement(dataSource, sqlUser);
            psUser.setBoolean(1, user.isGuest());
            psUser.setTimestamp(2, new Timestamp(lastActiveTime.getTime()));
            psUser.setString(3, user.getLastName());
            psUser.setString(4, user.getFirstName());
            psUser.setString(5, user.getMiddleName());
            psUser.setString(6, user.getOrganization());
            psUser.setString(7, user.getDepartment());
            psUser.setString(8, user.getTitle());
            psUser.setString(9, user.getAddress());
            psUser.setString(10, user.getCity());
            psUser.setString(11, user.getState());
            psUser.setString(12, user.getZipCode());
            psUser.setString(13, user.getPhoneNumber());
            psUser.setString(14, user.getCountry());
            psUser.setString(15, user.getEmail());
            psUser.setInt(16, userId);
            psUser.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sqlUser, "wdk-user-update-user",
                    start);

            // save user's roles
            // saveUserRoles(user);

            // save preference
            savePreferences(user);} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeStatement(psUser);}}

    /**
     * update the time stamp of the activity
     * 
     * @param user
     * @throws WdkUserException
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oed8f90d91a394fe3af290a5562a5e944908" name="updateUser" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException{
        PreparedStatement psUser = null;
        String sql = "UPDATE " + userSchema
                + "users SET last_active = ? WHERE user_id = ?";
        try{
            Date lastActiveTime = new Date();
            long start = System.currentTimeMillis();
            psUser = SqlUtils.getPreparedStatement(dataSource, sql);
            psUser.setTimestamp(1, new Timestamp(lastActiveTime.getTime()));
            psUser.setInt(2, user.getUserId());
            int result = psUser.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-user-update-user-last-active", start);
            if (result == 0)
                throw new WdkUserException("User " + user.getEmail()
                        + " cannot be found.");} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeStatement(psUser);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o2240fb7e6f2041dbb931284e9ceb4b48908" name="deleteExpiredUsers" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="hoursSinceActive" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        ResultSet rsUser = null;
        String sql = "SELECT email FROM " + userSchema + "users "
                + "WHERE email " + "LIKE '" + GUEST_USER_PREFIX
                + "%' AND last_active &lt; ?";
        try{
            // construct time
            Calendar calendar = Calendar.getInstance();
            calendar.add(Calendar.HOUR_OF_DAY, -hoursSinceActive);
            Timestamp timestamp = new Timestamp(calendar.getTime().getTime());

            long start = System.currentTimeMillis();
            PreparedStatement psUser = SqlUtils.getPreparedStatement(
                    dataSource, sql);
            psUser.setTimestamp(1, timestamp);
            rsUser = psUser.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-select-expired-user",
                    start);
            int count = 0;
            while (rsUser.next()){
                deleteUser(rsUser.getString("email"));
                count++;}
            System.out.println("Deleted " + count + " expired users.");} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rsUser);}}</source-code>
          </source-codes>
        </operation>
        <operation id="of737dd2c1d184c6fa0cdaf3ad2d4f7a6909" name="savePreferences" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        // get old preferences and determine what to delete, update, insert
        int userId = user.getUserId();
        List&lt;Map&lt;String, String&gt;&gt; oldPreferences = getPreferences(user);
        Map&lt;String, String&gt; oldGlobal = oldPreferences.get(0);
        Map&lt;String, String&gt; newGlobal = user.getGlobalPreferences();
        updatePreferences(userId, GLOBAL_PREFERENCE_KEY, oldGlobal, newGlobal);

        Map&lt;String, String&gt; oldSpecific = oldPreferences.get(1);
        Map&lt;String, String&gt; newSpecific = user.getProjectPreferences();
        logger.debug("old pref: " + oldSpecific);
        logger.debug("new pref: " + newSpecific);
        updatePreferences(userId, projectId, oldSpecific, newSpecific);}</source-code>
          </source-codes>
        </operation>
        <operation id="odd19f7d8679845728655a34c27d6a8c2909" name="updatePreferences" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userId" type="int" type-id="int" default-value="" />
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="oldPreferences" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="newPreferences" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        // determine whether to delete, insert or update
        Set&lt;String&gt; toDelete = new LinkedHashSet&lt;String&gt;();
        Map&lt;String, String&gt; toUpdate = new LinkedHashMap&lt;String, String&gt;();
        Map&lt;String, String&gt; toInsert = new LinkedHashMap&lt;String, String&gt;();
        for (String key : oldPreferences.keySet()){
            if (!newPreferences.containsKey(key)){
                toDelete.add(key);} else{ // key exist, check if need to update
                String newValue = newPreferences.get(key);
                if (!oldPreferences.get(key).equals(newValue))
                    toUpdate.put(key, newValue);}}
        for (String key : newPreferences.keySet()){
            if (!oldPreferences.containsKey(key))
                toInsert.put(key, newPreferences.get(key));}
        logger.debug("to insert: " + toInsert);
        logger.debug("to update: " + toUpdate);
        logger.debug("to delete: " + toDelete);

        PreparedStatement psDelete = null, psInsert = null, psUpdate = null;
        try{
            // delete preferences
            String sqlDelete = "DELETE FROM " + userSchema + "preferences "
                    + " WHERE user_id = ? AND project_id = ? "
                    + " AND preference_name = ?";
            psDelete = SqlUtils.getPreparedStatement(dataSource, sqlDelete);
            long start = System.currentTimeMillis();
            for (String key : toDelete){
                psDelete.setInt(1, userId);
                psDelete.setString(2, projectId);
                psDelete.setString(3, key);
                psDelete.addBatch();}
            psDelete.executeBatch();
            SqlUtils.verifyTime(wdkModel, sqlDelete,
                    "wdk-user-delete-preference", start);

            // insert preferences
            String sqlInsert = "INSERT INTO " + userSchema + "preferences "
                    + " (user_id, project_id, preference_name, "
                    + " preference_value)" + " VALUES (?, ?, ?, ?)";
            psInsert = SqlUtils.getPreparedStatement(dataSource, sqlInsert);
            start = System.currentTimeMillis();
            for (String key : toInsert.keySet()){
                start = System.currentTimeMillis();
                psInsert.setInt(1, userId);
                psInsert.setString(2, projectId);
                psInsert.setString(3, key);
                psInsert.setString(4, toInsert.get(key));
                psInsert.addBatch();}
            psInsert.executeBatch();
            SqlUtils.verifyTime(wdkModel, sqlInsert,
                    "wdk-user-insert-preference", start);

            // update preferences
            String sqlUpdate = "UPDATE " + userSchema + "preferences "
                    + " SET preference_value = ? WHERE user_id = ? "
                    + " AND project_id = ? AND preference_name = ?";
            psUpdate = SqlUtils.getPreparedStatement(dataSource, sqlUpdate);
            start = System.currentTimeMillis();
            for (String key : toUpdate.keySet()){
                start = System.currentTimeMillis();
                psUpdate.setString(1, toUpdate.get(key));
                psUpdate.setInt(2, userId);
                psUpdate.setString(3, projectId);
                psUpdate.setString(4, key);
                psUpdate.addBatch();}
            psUpdate.executeBatch();
            SqlUtils.verifyTime(wdkModel, sqlUpdate,
                    "wdk-user-update-preference", start);} finally{
            SqlUtils.closeStatement(psDelete);
            SqlUtils.closeStatement(psInsert);
            SqlUtils.closeStatement(psUpdate);}}

    /**
     * @param user
     * @return a list of 2 elements, the first is a map of global preferences,
     *         the second is a map of project-specific preferences.
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oea98deda57ef4a81bd62aff242af4417909" name="getPreferences" type="List&lt;Map&lt;String, String&gt;&gt;" type-id="List&lt;Map&lt;String, String&gt;&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException, SQLException{
        Map&lt;String, String&gt; global = new LinkedHashMap&lt;String, String&gt;();
        Map&lt;String, String&gt; specific = new LinkedHashMap&lt;String, String&gt;();
        int userId = user.getUserId();
        PreparedStatement psSelect = null;
        ResultSet resultSet = null;
        String sql = "SELECT * FROM " + userSchema + "preferences "
                + " WHERE user_id = ?";
        try{
            // load preferences
            long start = System.currentTimeMillis();
            psSelect = SqlUtils.getPreparedStatement(dataSource, sql);
            psSelect.setInt(1, userId);
            resultSet = psSelect.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-select-preference",
                    start);
            while (resultSet.next()){
                String projectId = resultSet.getString("project_id");
                String prefName = resultSet.getString("preference_name");
                String prefValue = resultSet.getString("preference_value");
                if (projectId.equals(GLOBAL_PREFERENCE_KEY))
                    global.put(prefName, prefValue);
                else if (projectId.equals(this.projectId))
                    specific.put(prefName, prefValue);}} finally{
            SqlUtils.closeResultSet(resultSet);
            if (resultSet == null)
                SqlUtils.closeStatement(psSelect);}
        List&lt;Map&lt;String, String&gt;&gt; preferences = new ArrayList&lt;Map&lt;String, String&gt;&gt;();
        preferences.add(global);
        preferences.add(specific);
        return preferences;}</source-code>
          </source-codes>
        </operation>
        <operation id="o29505599a23443fabfaeaf95bb72226f909" name="resetPassword" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        User user = getUserByEmail(email);
        resetPassword(user);}</source-code>
          </source-codes>
        </operation>
        <operation id="o578aa2464c5049f09fdabce79380d314909" name="resetPassword" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException{
        String email = user.getEmail();

        // generate a random password of 8 characters long, the range will be
        // [0-9A-Za-z]
        StringBuffer buffer = new StringBuffer();
        Random rand = new Random();
        for (int i = 0; i &lt; 8; i++){
            int value = rand.nextInt(36);
            if (value &lt; 10){ // number
                buffer.append(value);} else{ // lower case letters
                buffer.append((char) ('a' + value - 10));}}
        String password = buffer.toString();

        savePassword(email, password);

        ModelConfig modelConfig = wdkModel.getModelConfig();
        String emailContent = modelConfig.getEmailContent();
        String supportEmail = modelConfig.getSupportEmail();
        String emailSubject = modelConfig.getEmailSubject();

        // send an email to the user
        String pattern = "\\$\\$" + EMAIL_MACRO_USER_NAME + "\\$\\$";
        String name = user.getFirstName() + " " + user.getLastName();
        String message = emailContent.replaceAll(pattern,
                Matcher.quoteReplacement(name));

        pattern = "\\$\\$" + EMAIL_MACRO_EMAIL + "\\$\\$";
        message = message.replaceAll(pattern, Matcher.quoteReplacement(email));

        pattern = "\\$\\$" + EMAIL_MACRO_PASSWORD + "\\$\\$";
        message = message.replaceAll(pattern,
                Matcher.quoteReplacement(password));

        Utilities.sendEmail(wdkModel, user.getEmail(), supportEmail,
                emailSubject, message);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8a438c19859e4398b3a102285e2cb3c9909" name="changePassword" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="oldPassword" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="newPassword" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="confirmPassword" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        email = email.trim();

        if (newPassword == null || newPassword.trim().length() == 0)
            throw new WdkUserException("The new password cannot be empty.");

        // check if the new password matches
        if (!newPassword.equals(confirmPassword))
            throw new WdkUserException("The new password doesn't match, "
                    + "please type them again. It's case sensitive.");

        // encrypt password
        PreparedStatement ps = null;
        ResultSet rs = null;
        String sql = "SELECT count(*) " + "FROM " + userSchema
                + "users WHERE email =? " + "AND passwd = ?";
        try{
            oldPassword = encrypt(oldPassword);

            // check if the old password matches
            long start = System.currentTimeMillis();
            ps = SqlUtils.getPreparedStatement(dataSource, sql);
            ps.setString(1, email);
            ps.setString(2, oldPassword);
            rs = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql,
                    "wdk-user-count-user-by-email-password", start);
            rs.next();
            int count = rs.getInt(1);
            if (count &lt;= 0)
                throw new WdkUserException("The current password is incorrect.");

            // passed check, then save the new password
            savePassword(email, newPassword);} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rs);
            // SqlUtils.closeStatement(ps);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob71eac1e6fe843218cd34e4deca0b140909" name="savePassword" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="password" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        email = email.trim();
        PreparedStatement ps = null;
        String sql = "UPDATE " + userSchema
                + "users SET passwd = ? WHERE email = ?";
        try{
            // encrypt the password, and save it
            String encrypted = encrypt(password);
            long start = System.currentTimeMillis();
            ps = SqlUtils.getPreparedStatement(dataSource, sql);
            ps.setString(1, encrypted);
            ps.setString(2, email);
            ps.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-update-password",
                    start);} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeStatement(ps);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o8f3c2bec566240a986cbfa994190d875909" name="isExist" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException{
        email = email.trim();
        // check if user exists in the database. if not, fail and ask to create
        // the user first
        ResultSet rs = null;
        String sql = "SELECT count(*) " + "FROM " + userSchema
                + "users WHERE email = ?";
        try{
            long start = System.currentTimeMillis();
            PreparedStatement ps = SqlUtils.getPreparedStatement(dataSource,
                    sql);
            ps.setString(1, email);
            rs = ps.executeQuery();
            SqlUtils.verifyTime(wdkModel, sql, "wdk-user-select-user-by-email",
                    start);
            rs.next();
            int count = rs.getInt(1);
            return (count &gt; 0);} catch (SQLException ex){
            throw new WdkUserException(ex);} finally{
            SqlUtils.closeResultSet(rs);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o3305246f37494e5e9084f23a1639180d909" name="deleteUser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        // get user id
        User user = getUserByEmail(email);

        // delete strategies and steps from all projects
        user.deleteStrategies(true);
        user.deleteSteps(true);

        String where = " WHERE user_id = " + user.getUserId();
        try{
            // delete preference
            String sql = "DELETE FROM " + userSchema + "preferences" + where;
            SqlUtils.executeUpdate(wdkModel, dataSource, sql,
                    "wdk-user-delete-preference");

            // delete user roles
            sql = "DELETE FROM " + userSchema + "user_roles" + where;
            SqlUtils.executeUpdate(wdkModel, dataSource, sql,
                    "wdk-user-delete-role");

            // delete user
            sql = "DELETE FROM " + userSchema + "users" + where;
            SqlUtils.executeUpdate(wdkModel, dataSource, sql,
                    "wdk-user-delete-user");} catch (SQLException ex){
            throw new WdkUserException(ex);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o2051b39b23e24c898a05f5bb8a84715f909" name="getWdkModel" type="WdkModel" type-id="WdkModel" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di862656433512518275" cid="C307" type="class" name="WdkDatasetException" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:15">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o07cb58928f9e437bad9055f2f3c4186d41" name="WdkDatasetException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // TODO Auto-generated constructor stub}

    /**
     * @param message
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o0608d890bb76406dbc413ba0fcc341fa41" name="WdkDatasetException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(message);
        // TODO Auto-generated constructor stub}

    /**
     * @param cause
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o916383f874d94f94958d3e02c422913841" name="WdkDatasetException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(cause);
        // TODO Auto-generated constructor stub}

    /**
     * @param msg
     * @param cause
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o87be6a026c544d4ba78ccca16001e67641" name="WdkDatasetException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg, cause);
        // TODO Auto-generated constructor stub}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di695955599253465387" cid="C308" type="class" name="CacheCLI" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o7cf3a2736aa644bba8be9ebf3cf3f2926" name="main" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        CacheCLI cacher = new CacheCLI(cmdName);
        try{
            cacher.invoke(args);} finally{
            System.exit(0);}}

    /**
     * @param command
     * @param description
     */
    protected</source-code>
          </source-codes>
        </operation>
        <operation id="o1e6db37085d74febaa5cf341337c60936" name="CacheCLI" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command == null) ? "wdkCache" : command,
                "Manages the cache tables of WDK");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#declareOptions()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5173af162dda49d8bb963d92ef9f07e26" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "The ProjectId, which"
                + " should match the directory name under $GUS_HOME, where "
                + "model-config.xml is stored.");

        addNonValueOption(ARG_CREATE, false, "create new WDK cache index and "
                + "sorting tables and sequences. It fails if the cache index "
                + "or sorting table already exists.");
        addNonValueOption(ARG_DROP, false, "drop existing WDK cache tables, "
                + "cache index table, sorting table, and sequences.");
        addSingleValueOption(ARG_DROP_SINGLE, false, null, "drop a single "
                + "cache table or a group of cache tables with the same query "
                + "name. The input can be a cache id (query_instance_id, to "
                + "drop a single cache table), or a full queryName (to drop "
                + "all cache table created by the same query).");
        addNonValueOption(ARG_DROP_PURGE, false, "Optional argument, it will "
                + "affect the WDK behavior when dropping cache tables. This "
                + "option works on Oracle component database only, which "
                + "purges the cache tables on drop table. PostgreSQL will "
                + "ignore this option.");
        addNonValueOption(ARG_RESET, false, "drop existing WDK cache tables, "
                + "delete rows from cache index and sorting table, but it "
                + "won't reset sequences.");
        addNonValueOption(ARG_RECREATE, false, "drop any existing cache tables"
                + ", and drop cache index table, sorting table and sequences, "
                + "and then recreate them.");
        addNonValueOption(ARG_SHOW, false, "display the cache usage.");
        addGroup(true, ARG_CREATE, ARG_DROP, ARG_RESET, ARG_RECREATE,
                ARG_DROP_SINGLE, ARG_SHOW);

        addNonValueOption(ARG_FORCE_DROP, false, "this optional argument "
                + "will be ignored when [" + ARG_CREATE + "] or ["
                + ARG_DROP_SINGLE + "] is used. It drops all index tables and "
                + "cache tables, including dangling cache "
                + "tables, that is, the cache tables who does not have a "
                + "reference in the cache index table.");

        addNonValueOption(ARG_NO_SCHEMA, false, "remove references to the "
                + "schema when printing out messages regarding a table");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#invoke()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of3ae7f2e87f64751aa50583642b13af76" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String projectId = (String) getOptionValue(ARG_PROJECT_ID);

        boolean newCache = (Boolean) getOptionValue(ARG_CREATE);
        boolean resetCache = (Boolean) getOptionValue(ARG_RESET);
        boolean dropCache = (Boolean) getOptionValue(ARG_DROP);
        boolean dropSingleCache = (getOptionValue(ARG_DROP_SINGLE) != null);
        boolean purgeCache = (Boolean) getOptionValue(ARG_DROP_PURGE);
        boolean recreateCache = (Boolean) getOptionValue(ARG_RECREATE);
        boolean showCache = (Boolean) getOptionValue(ARG_SHOW);
        // boolean noSchemaOutput = (Boolean) getOptionValue(ARG_NO_SCHEMA);
        boolean forceDrop = (Boolean) getOptionValue(ARG_FORCE_DROP);

        try{
            // read config info
            String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
            WdkModel wdkModel = WdkModel.construct(projectId, gusHome);
            CacheFactory factory = wdkModel.getResultFactory().getCacheFactory();

            long start = System.currentTimeMillis();
            if (newCache) factory.createCache();
            else if (resetCache) factory.resetCache(purgeCache, forceDrop);
            else if (dropCache) factory.dropCache(purgeCache, forceDrop);
            else if (recreateCache) factory.recreateCache(purgeCache, recreateCache);
            else if (showCache) factory.showCache();
            else if (dropSingleCache){
                String value = (String) getOptionValue(ARG_DROP_SINGLE);
                if (value.matches("\\d+")){
                    factory.dropCache(Integer.parseInt(value), purgeCache);} else factory.dropCache(value, purgeCache);}
            long end = System.currentTimeMillis();
            System.out.println("Command succeeded in "
                    + ((end - start) / 1000.0) + " seconds");} catch (Exception e){
            System.err.println("FAILED");
            System.err.println("");
            e.printStackTrace();
            System.exit(1);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di522411218817322767" cid="C309" type="class" name="CommandHelper" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="od4792cced7334648bf937fb3e1c92209494" name="parseOptions" type="CommandLine" type-id="CommandLine" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            String[ args){

        CommandLineParser parser = new BasicParser();
        CommandLine cmdLine = null;
        try{
            // parse the command line arguments
            cmdLine = parser.parse(options, args);} catch (ParseException exp){
            // oops, something went wrong
            System.err.println("");
            System.err.println("Parsing failed.  Reason: " + exp.getMessage());
            System.err.println("");
            usage(cmdName, options);}

        return cmdLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="o22fc567bf01141f18a6c4bbbad79b085495" name="declareOptions" type="Options" type-id="Options" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="names" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="descs" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            boolean[ required, int[ args){
        Options options = new Options();

        // get the minimal size
        int min = (names.length &lt; descs.length) ? names.length : descs.length;
        if (min &gt; required.length) min = required.length;
        if (min &gt; args.length) min = args.length;

        // model name
        for (int i = 0; i &lt; min; i++){
            addOption(options, required[i, names[i, descs[i, args[i);}

        // verbose
        Option verbose = new Option("verbose",
                "Print out more information while running test.");
        options.addOption(verbose);

        return options;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe9b7e2e0ef4c40e6b64a3f43a86d04af495" name="addOption" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="required" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            String argName, String desc, int arg){

        Option option = new Option(argName, true, desc);
        option.setRequired(required);
        option.setArgName(argName);
        if (arg != 0) option.setArgs(arg);
        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6ccdd0fd30b5488a980ad98b3726abf9495" name="usage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        String newline = System.getProperty("line.separator");

        StringBuffer sb = new StringBuffer();

        // add command name
        sb.append(cmdName);

        // add command syntax
        for (Object objOption : options.getOptions()){
            Option option = (Option) objOption;
            if (option.isRequired()) sb.append(" -");
            else sb.append(" [-");
            sb.append(option.getOpt());
            sb.append(' ');
            sb.append(option.getOpt());
            if (!option.isRequired()) sb.append(']');}
        sb.append(newline);

        String cmdlineSyntax = sb.toString();

        String header = "Run Unit test cases. Options:";

        String footer = " ";

        // PrintWriter stderr = new PrintWriter(System.err);
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(75, cmdlineSyntax, header, options, footer);
        System.exit(1);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di157006475319332423" cid="C310" type="class" name="HistoryRecycler" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="af8dd2ae37a644b7ca75c09aac8dc3e8b255" name="modelName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af55697dab70843c8a7697100491ea6ef255" name="interval" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o49d2553716104459abce72618386d8fe255" name="HistoryRecycler" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="modelName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="interval" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.modelName = modelName;
        this.interval = interval;}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Runnable#run()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa43cacc9f69c45828ab3403fca6f5f74255" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        while (!isStopping()){
            try{
                // recycle the histories periodically
                long start = System.currentTimeMillis();
                recycle();
                long end = System.currentTimeMillis();
                System.out.println("spent " + ((end - start) / 1000.0)
                        + " seconds.");

                // then sleep for a total interval time, but quit if necessary
                for (int i = 0; i &lt; interval * 12; i++){
                    // check every 5 seconds
                    try{
                        Thread.sleep(5000);} catch (InterruptedException ex){}
                    if (isStopping()) break;}} catch (Exception ex){
                ex.printStackTrace();
                System.exit(-1);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o804c5b97dea94c1f86eb6ef461c295ca255" name="isStopping" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        File stopFile = new File(gusHome, "/config/" + STOP_SIGNAL_FILE);
        return stopFile.exists();}</source-code>
          </source-codes>
        </operation>
        <operation id="o64656e55b5ad47df9cbcb4560cfe3dc8255" name="recycle" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, JSONException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, IOException, SAXException, SQLException,
            InstantiationException, IllegalAccessException,
            ClassNotFoundException{
        System.out.println("========== Start recycling histories on "
                + modelName + " ==========");
        // construct model
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        WdkModel wdkModel = WdkModel.construct(modelName, gusHome);
        UserFactory factory = wdkModel.getUserFactory();

        // construct query signature
        Map&lt;String, String&gt; signatures = new LinkedHashMap&lt;String, String&gt;();
        QuestionSet[ qsets = wdkModel.getAllQuestionSets();
        for (QuestionSet qset : qsets){
            Question[ questions = qset.getQuestions();
            for (Question question : questions){
                signatures.put(question.getFullName(),
                        question.getQuery().getChecksum(false));}}

        // in this version, do not delete invalid histories
        // remove invalid histories
        // factory.deleteInvalidHistories(signatures);

        // remove expired users
        System.out.println("Deleting expired guest users...");
        factory.deleteExpiredUsers(USER_EXPIRE_TIME);

        System.out.println("========== Finished recycling histories on "
                + modelName + " ==========");}</source-code>
          </source-codes>
        </operation>
        <operation id="o2ba5e08ff45c43d5b1e6396e58d04306255" name="printUsage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String command = System.getProperty("cmdName");

        System.err.println("Usage: " + command + " -model &lt;model_name&gt; "
                + "[-interval &lt;minutes&gt;]");
        System.err.println("\t\t&lt;model_name&gt;\t\tthe name of the WDK model "
                + "that this command works on;");
        System.err.println("\t\t&lt;interval&gt;\t\tthe interval between each "
                + "recycling of the histories, in minute.");
        System.err.println();
        System.exit(-1);}

    /**
     * @param args
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od3f75a29a28f43eeac62901411b7e31b255" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String modelName = null;
        int interval = 0;

        // validate input parameters
        if (args.length == 2){
            if (!args[0.equalsIgnoreCase("-model")) printUsage();
            modelName = args[1;
            interval = 60;} else if (args.length == 4){
            if (args[0.equalsIgnoreCase("-model")
                    &amp;&amp; args[2.equalsIgnoreCase("-interval")){
                modelName = args[1;
                interval = Integer.parseInt(args[3);} else if (args[2.equalsIgnoreCase("-model")
                    &amp;&amp; args[0.equalsIgnoreCase("-interval")){
                modelName = args[3;
                interval = Integer.parseInt(args[1);} else{
                printUsage();}} else{
            printUsage();}

        HistoryRecycler recycler = new HistoryRecycler(modelName, interval);
        recycler.run();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di604873942426574797" cid="C311" type="class" name="QueryTester" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a860f6c13133143d5acd442dae8898e18300" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aecc242068af1484e87d5e17aebe026fb300" name="user" type="User" type-id="User" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oc97b6d553926468c954d10813a54a01e300" name="QueryTester" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkUserException, WdkModelException, SQLException{
        this.wdkModel = wdkModel;
        user = wdkModel.getSystemUser();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1e5dbb0b8517432ea069d17bb8656540300" name="showSql" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
            <parameter id="" name="paramHash" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        QueryInstance instance = query.makeInstance(user, paramHash, true, 0, new LinkedHashMap&lt;String, String&gt;());
        if (instance instanceof SqlQueryInstance){
            return ((SqlQueryInstance) instance).getUncachedSql();} else return instance.getSql();}</source-code>
          </source-codes>
        </operation>
        <operation id="o806f3a900ae4456e927f4fdb15607ba6300" name="showResultTable" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
            <parameter id="" name="paramHash" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        QueryInstance instance = query.makeInstance(user, paramHash, true, 0, new LinkedHashMap&lt;String, String&gt;());
        ResultFactory resultFactory = wdkModel.getResultFactory();
        CacheFactory cacheFactory = resultFactory.getCacheFactory();
        QueryInfo queryInfo = cacheFactory.getQueryInfo(instance.getQuery());
        String cacheTable = queryInfo.getCacheTable();
        int instanceId = instance.getInstanceId();
        return cacheTable + ":" + instanceId;}

    // ////////////////////////////////////////////////////////////////////
    // /////////// protected methods //////////////////////////////////
    // ////////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="o3ef290419607438fb247c4fa62f49c4c300" name="displayParams" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        String newline = System.getProperty("line.separator");
        System.out.println(newline + "Query: " + query.getFullName() + newline);

        System.out.println("Parameters");

        Param[ params = query.getParams();

        for (int i = 0; i &lt; params.length; i++){
            System.out.println(formatParamPrompt(params[i));}
        System.out.println("");}</source-code>
          </source-codes>
        </operation>
        <operation id="o63bb590e5b8e4e21ac8f005ccd8f9c69301" name="" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{

        Map&lt;String, String&gt; h = new LinkedHashMap&lt;String, String&gt;();

        if (params.length % 2 != 0){
            throw new IllegalArgumentException(
                    "The -params option must be followed by key value pairs only");}
        for (int i = 0; i &lt; params.length; i += 2){
            h.put(params[i, params[i + 1);}
        if (useDefaults &amp;&amp; !query.getParamValuesSets().isEmpty()){
            ParamValuesSet pvs = query.getParamValuesSets().get(0);
            Map&lt;String, String&gt; map = pvs.getParamValues();
            for (String paramName : map.keySet()){
                if (!h.containsKey(paramName)){
                    h.put(paramName, map.get(paramName));}}}
        return h;}</source-code>
          </source-codes>
        </operation>
        <operation id="o23aa86367b1d4e888c278aa9e2ebacaa301" name="formatParamPrompt" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="Param" type-id="Param" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        String newline = System.getProperty("line.separator");

        String prompt = "  " + param.getPrompt();

        if (param instanceof FlatVocabParam){
            FlatVocabParam enumParam = (FlatVocabParam) param;
            prompt += " (choose one";
            if (enumParam.getMultiPick().booleanValue()) prompt += " or more";
            prompt += "):";
            Map&lt;String, String&gt; vocabs = enumParam.getVocabMap(null); // assume independent param
            for (String term : vocabs.keySet()){
                String internal = vocabs.get(term);
                prompt += newline + "    " + term + " (" + internal + ")";}}

        else if (param instanceof StringParam){
            StringParam stringParam = (StringParam) param;
            if (stringParam.getSample() != null)
                prompt += " (" + stringParam.getSample() + ")";
            prompt += ":";}

        else{
            prompt = param.getPrompt() + ":";}

        return prompt;}

    // ////////////////////////////////////////////////////////////////////
    // /////////// static methods /////////////////////////////////////
    // ////////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="o4a0cb3e441794eb4b2e924f2d36342c6301" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException, NoSuchAlgorithmException, SQLException,
            JSONException, ParserConfigurationException,
            TransformerFactoryConfigurationError, TransformerException,
            IOException, SAXException, InstantiationException,
            IllegalAccessException, ClassNotFoundException{
        String cmdName = System.getProperty("cmdName");

        // process args
        Options options = declareOptions();
        CommandLine cmdLine = parseOptions(cmdName, options, args);

        String modelName = cmdLine.getOptionValue("model");

        String fullQueryName = cmdLine.getOptionValue("query");
        boolean returnResultAsTable = cmdLine.hasOption("returnTable");
        boolean showQuery = cmdLine.hasOption("showQuery");
        boolean showParams = cmdLine.hasOption("showParams");
        boolean useDefaults = cmdLine.hasOption("d");
        boolean haveParams = cmdLine.hasOption("params");
        // boolean paging = cmdLine.hasOption("rows");
        String[ params = new String[0;
        if (haveParams) params = cmdLine.getOptionValues("params");

        Reference ref = new Reference(fullQueryName);
        String querySetName = ref.getSetName();
        String queryName = ref.getElementName();

        // read config info
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        WdkModel wdkModel = WdkModel.construct(modelName, gusHome);

        QueryTester tester = new QueryTester(wdkModel);
        QuerySet querySet = wdkModel.getQuerySet(querySetName);
        Query query = querySet.getQuery(queryName);

        if (showParams){
            tester.displayParams(query);} else{
            Map&lt;String, String&gt; rawValues = QueryTester.parseParamArgs(params,
                    useDefaults, query);
            Map&lt;String, String&gt; dependentValues = query.rawOrDependentValuesToDependentValues(
                    tester.user, rawValues);
            if (showQuery){
                String querySql = tester.showSql(query, dependentValues);
                String newline = System.getProperty("line.separator");
                String newlineQuery = querySql.replaceAll("^\\s\\s\\s", newline);
                newlineQuery = newlineQuery.replaceAll("(\\S)\\s\\s\\s", "$1"
                        + newline);
                System.out.println(newline + newlineQuery + newline);} else if (returnResultAsTable){
                String table = tester.showResultTable(query, dependentValues);
                System.out.println(table);} else{
                QueryInstance instance = query.makeInstance(tester.user,
                        dependentValues, true, 0, new LinkedHashMap&lt;String, String&gt;());
                ResultList rs = instance.getResults();
                print(query, rs);}}
        System.exit(0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o9bf913d0754f4d118ff8089a1779ff51301" name="print" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
            <parameter id="" name="resultList" type="ResultList" type-id="ResultList" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        // print out the column headers
        Column[ columns = query.getColumns();
        System.out.print("No.");
        for (Column column : columns)
            System.out.print("\t| &lt;" + column.getName() + "&gt;");
        System.out.println();

        // print out the rows
        int row = 1;
        while (resultList.next()){
            System.out.print(row++);
            for (Column column : columns){
                Object value = resultList.get(column.getName());
                System.out.print("\t| " + value);}
            System.out.println();}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5b9b4a3df89840638295cc10af8fb1b0301" name="addOption" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="argName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="desc" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addOption(options, argName, true, desc, true);}</source-code>
          </source-codes>
        </operation>
        <operation id="ode93ac6fa1be4077bb8c7f10cdaca9de301" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="desc" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> boolean required){
        Option option = new Option(argName, hasArg, desc);
        option.setRequired(required);
        option.setArgName(argName);

        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe969db866d184b0c97aee7e1f00a0f7c301" name="declareOptions" type="Options" type-id="Options" visibility="package" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Options options = new Options();

        // model name
        addOption(
                options,
                "model",
                "the name of the model.  This is used to find the Model XML file ($GUS_HOME/config/model_name.xml) the Model property file ($GUS_HOME/config/model_name.prop) and the Model config file ($GUS_HOME/config/model_name-config.xml)");

        // query name
        addOption(options, "query",
                "The full name (set.element) of the query to run.");

        // show params
        addOption(options, "showParams", false,
                "Show the names of the parameters expected by the query", false);

        // show params
        addOption(options, "d", false,
                "Use default values for unprovided parameters", false);

        OptionGroup specialOperations = new OptionGroup();

        // return only the sql
        Option showQuery = new Option("showQuery",
                "Show the query as it will be run (with parameter values in place).");
        specialOperations.addOption(showQuery);

        // return table
        Option returnTable = new Option("returnTable",
                "Place the result in a table and return the name of the table.");
        specialOperations.addOption(returnTable);

        // return result size
        Option returnSize = new Option("returnSize",
                "For pageable queries only: return the total size of the result.");
        specialOperations.addOption(returnSize);

        // rows to return
        Option rows = new Option("rows",
                "For pageable queries only: provide the start and end rows to return.");
        rows.setArgs(2);
        specialOperations.addOption(rows);

        options.addOptionGroup(specialOperations);

        // params
        Option params = new Option("params", true,
                "space delimited list of param_name param_value ....");
        params.setArgName("params");
        params.setArgs(Option.UNLIMITED_VALUES);
        options.addOption(params);

        return options;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8dc7799c45674ce2b4ef7be130cd1a01301" name="parseOptions" type="CommandLine" type-id="CommandLine" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        CommandLineParser parser = new BasicParser();
        CommandLine cmdLine = null;
        try{
            // parse the command line arguments
            cmdLine = parser.parse(options, args);} catch (ParseException exp){
            // oops, something went wrong
            System.err.println("");
            System.err.println("Parsing failed.  Reason: " + exp.getMessage());
            System.err.println("");
            usage(cmdName, options);}

        return cmdLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc3ffa348b0bd4c18b4425f3023a3961a301" name="usage" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        String newline = System.getProperty("line.separator");
        String cmdlineSyntax = cmdName + " -model model_name"
                + " -query full_query_name" + " [-d | -showParams]"
                + " [-returnTable -rows start end | -returnSize | -showQuery]"
                + " [-params param_1_name param_1_value ...]";

        String header = newline
                + "Run a query found in a WDK Model xml file. Specify -d to use default parameter values for all unprovided parameters.  Specify -showParams to display the namew of the parameters the query takes"
                + newline + newline + "Options:";

        String footer = " ";

        // PrintWriter stderr = new PrintWriter(System.err);
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(cmdlineSyntax, header, options, footer);
        System.exit(1);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di689455376268510978" cid="C312" type="class" name="RecordTester" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:20">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o61ad01e4409e4e9c9d132e250a398289243" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException, NoSuchAlgorithmException, SQLException,
            JSONException, SAXException, IOException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, InstantiationException,
            IllegalAccessException, ClassNotFoundException{
        String cmdName = System.getProperty("cmdName");

        // process args
        Options options = declareOptions();
        CommandLine cmdLine = parseOptions(cmdName, options, args);

        // get arguments
        String modelName = cmdLine.getOptionValue("model");
        String recordClassFullName = cmdLine.getOptionValue("record");
        String[ primaryKeyArray = cmdLine.getOptionValues("primaryKey");

        long start = System.currentTimeMillis();
        long st = System.currentTimeMillis();

        // initialize the model
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        WdkModel wdkModel = WdkModel.construct(modelName, gusHome);

        System.out.println("Model initialization took: "
                + ((System.currentTimeMillis() - st) / 1000F) + " seconds.");
        st = System.currentTimeMillis();

        // create instance
        RecordClass recordClass = (RecordClass) wdkModel.resolveReference(recordClassFullName);
        Map&lt;String, Object&gt; pkValues = parsePrimaryKeyArgs(primaryKeyArray);
        User user = wdkModel.getSystemUser();
        RecordInstance recordInstance = new RecordInstance(user, recordClass,
                pkValues);

        // try to get all attributes
        recordInstance.getAttributeValueMap();

        // try to get all tables
        recordInstance.getTables();

        System.out.println("Record creation took: "
                + ((System.currentTimeMillis() - st) / 1000F) + " seconds.");
        st = System.currentTimeMillis();

        System.out.println(recordInstance.print());

        System.out.println("Fields retrieval took: "
                + ((System.currentTimeMillis() - st) / 1000F) + " seconds.");
        long end = System.currentTimeMillis();
        System.out.println("Total time spent: " + ((end - start) / 1000F)
                + " seconds.");
        // System.exit(0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o730aa5a72c7b435fa95aacd42ce5d666243" name="parsePrimaryKeyArgs" type="Map&lt;String, Object&gt;" type-id="Map&lt;String, Object&gt;" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="array" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, Object&gt; map = new LinkedHashMap&lt;String, Object&gt;();

        if (array.length % 2 != 0){
            throw new IllegalArgumentException(
                    "The -primaryKey option must be followed by column key value pairs only");}
        for (int i = 0; i &lt; array.length; i += 2){
            map.put(array[i, array[i + 1);}
        return map;}</source-code>
          </source-codes>
        </operation>
        <operation id="of439d2c1c30c426192539341832e13a1243" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="desc" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        Option option = new Option(argName, true, desc);
        option.setRequired(true);
        option.setArgName(argName);

        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3dac9316651949f9b532edf8315b743f243" name="declareOptions" type="Options" type-id="Options" visibility="package" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Options options = new Options();

        // model name
        addOption(
                options,
                "model",
                "the name of the model.  This is used to find the Model XML file ($GUS_HOME/config/model_name.xml) the Model property file ($GUS_HOME/config/model_name.prop) and the Model config file ($GUS_HOME/config/model_name-config.xml)");

        // record name
        addOption(options, "record",
                "The full name (set.element) of the record to print.");

        // primary key columns
        Option primaryKey = new Option("primaryKey", true,
                "space delimited list of column_name column_value ....");
        primaryKey.setArgName("primaryKey");
        primaryKey.setArgs(Option.UNLIMITED_VALUES);
        primaryKey.setRequired(true);
        options.addOption(primaryKey);

        return options;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocef38b6e6fac43b08f0104981f9a56f9243" name="parseOptions" type="CommandLine" type-id="CommandLine" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        CommandLineParser parser = new BasicParser();
        CommandLine cmdLine = null;
        try{
            // parse the command line arguments
            cmdLine = parser.parse(options, args);} catch (ParseException exp){
            // oops, something went wrong
            System.err.println("");
            System.err.println("Parsing failed.  Reason: " + exp.getMessage());
            System.err.println("");
            usage(cmdName, options);}

        return cmdLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="od641b03b5e334b8aba32fae57b5069c5243" name="usage" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        String newline = System.getProperty("line.separator");
        String cmdlineSyntax = cmdName + " -model model_name"
                + " -record full_record_name"
                + " -primaryKey column_name column_value...";

        String header = newline
                + "Print a record found in a WDK Model xml file. Options:";

        String footer = "";

        // PrintWriter stderr = new PrintWriter(System.err);
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(75, cmdlineSyntax, header, options, footer);
        System.exit(1);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di592925825856745026" cid="C313" type="class" name="SanityTester" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:24">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2e8be1ce745c4fe7b879f492e24f6333491" name="queriesPassed" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="a48c255689c26429e8ca36e28d6482ae4491" name="queriesFailed" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="a571ba8b2864c467e8165ec2126740bb2491" name="recordsPassed" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="a555ff88ff03b414cbe0006b5f0b913d5491" name="recordsFailed" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="a03342dae572146539a6e774ed3731767492" name="questionsPassed" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="aa47ac9935b5e42c1adae72a60c81eac0492" name="questionsFailed" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="ae571e87db0a643fdba12e8c8c22950ef492" name="testCount" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="a49523558eead453584145d45ae8b555d492" name="testFilter" type="boolean[]" type-id="boolean[]" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa46a19303445448ea83f91e01500cf89492" name="testFilterString" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a85ff86a0380b4dba98837d1855b570c2493" name="user" type="User" type-id="User" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a27074f061d4c49519dc8379f9b00d614493" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4a1d111cd74744429efaaa3e576e7444493" name="verbose" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a696e8e16682b4541af524250adb07f0b493" name="failuresOnly" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1bc0349c386444ef844cb29f02d0e2a4493" name="indexOnly" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="add440e22d03f4308a7617af658958d43493" name="skipWebSvcQueries" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a20c8e574d67d4114b9e13c50c3a09627493" name="modelName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oda8b1626b2ad4289b4d5e4c6c333c5a9493" name="SanityTester" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="modelName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="verbose" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="testFilterString" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="failuresOnly" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> boolean indexOnly,
            boolean skipWebSvcQueries) throws WdkModelException,
            WdkUserException, NoSuchAlgorithmException,
            ParserConfigurationException, TransformerException, IOException,
            SAXException, SQLException, JSONException, InstantiationException,
            IllegalAccessException, ClassNotFoundException{
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        this.wdkModel = WdkModel.construct(modelName, gusHome);
        this.verbose = verbose;
        this.failuresOnly = failuresOnly;
        this.indexOnly = indexOnly;
        this.skipWebSvcQueries = skipWebSvcQueries;
        this.modelName = modelName;
        this.testFilterString = testFilterString;
        this.user = wdkModel.getSystemUser();
        testFilter = parseTestFilter(testFilterString);}

    // ------------------------------------------------------------------
    // Private Methods
    // ------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="od355eceb1d0a4b0187a879ce37c5ff78493" name="testQuestionSets" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkModelException,
            NoSuchAlgorithmException, JSONException, WdkUserException{

        System.out.println("Sanity Test:  Checking questions" + newline);

        for (QuestionSet questionSet : wdkModel.getAllQuestionSets()){
            if (questionSet.getDoNotTest())
                continue;

            for (Question question : questionSet.getQuestions()){
                Query query = question.getQuery();
                if (query.getDoNotTest() || query.getQuerySet().getDoNotTest())
                    continue;
                if (skipWebSvcQueries &amp;&amp; query instanceof ProcessQuery)
                    continue;
                for (ParamValuesSet paramValuesSet : query.getParamValuesSets()){
                    testQuestion(question, paramValuesSet);}}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o00c52264de1449518787f52a31a28fde493" name="testQuestion" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
            <parameter id="" name="paramValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (!checkTestFilter(testCount++))
            return;
        if (indexOnly){
            System.out.println(" [test: " + testCount + "]" + " QUESTION "
                    + question.getFullName() + " (query "
                    + question.getQuery().getFullName() + ")" + newline);
            return;}
        long start = System.currentTimeMillis();
        int sanityMin = paramValuesSet.getMinRows();
        int sanityMax = paramValuesSet.getMaxRows();
        boolean passed = false;
        String status = " FAILED!";
        String prefix = "***";
        String returned = "";
        String expected = "";
        Exception caughtException = null;

        try{
            question.getQuery().setIsCacheable(false);
            AnswerValue answerValue = question.makeAnswerValue(user,
                    paramValuesSet.getParamValues(), 0);

            int resultSize = answerValue.getResultSize();

            // get the summary attribute list
            Map&lt;String, AttributeField&gt; summary = answerValue
                    .getSummaryAttributeFieldMap();

            // iterate through the page and try every summary attribute of
            // each record
            for (RecordInstance record : answerValue.getRecordInstances()){
                StringBuffer sb = new StringBuffer();
                for (String attrName : summary.keySet()){
                    sb.append(record.getAttributeValue(attrName));
                    sb.append('\t');}
                logger.debug("Record: " + sb.toString());}

            passed = (resultSize &gt;= sanityMin &amp;&amp; resultSize &lt;= sanityMax);

            returned = " It returned " + resultSize + " rows. ";
            if (sanityMin != 1 || sanityMax != ParamValuesSet.MAXROWS)
                expected = "Expected (" + sanityMin + " - " + sanityMax + ") ";} catch (Exception e){
            returned = " It threw an exception.";
            caughtException = e;} finally{
            long end = System.currentTimeMillis();
            if (passed){
                questionsPassed++;
                prefix = "";
                status = " passed.";} else{
                questionsFailed++;}
            if (!passed)
                System.out.println(BANNER_LINE_top);
            String cmd = " [ wdkSummary -model " + wdkModel.getProjectId()
                    + " -question " + question.getFullName() + " -rows 1 100"
                    + " -params " + paramValuesSet.getCmdLineString() + " ] ";

            String msg = prefix + ((end - start) / 1000F) + " [test: "
                    + testCount + "]" + " QUESTION " + question.getFullName()
                    + " (query " + question.getQuery().getFullName() + ")"
                    + status + returned + expected + cmd + newline;
            if (!passed || !failuresOnly)
                System.out.println(msg);
            if (caughtException != null)
                caughtException.printStackTrace(System.err);
            if (!passed)
                System.out.println(BANNER_LINE_bot + newline);

            // check the connection usage
            DBPlatform platform = wdkModel.getQueryPlatform();
            if (platform.getActiveCount() &gt; 0){
                System.err.println("Connection leak ("
                        + platform.getActiveCount() + ") for question: "
                        + question.getFullName());}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o025d1a9b08a94df59b1bc6d7607a6c32493" name="testQuerySets" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, NoSuchAlgorithmException, JSONException,
            WdkUserException{

        System.out.println("Sanity Test:  Checking " + queryType + " queries"
                + newline);

        for (QuerySet querySet : wdkModel.getAllQuerySets()){
            if (!querySet.getQueryType().equals(queryType)
                    || querySet.getDoNotTest())
                continue;

            int minRows = -1;
            int maxRows = -1;
            if (queryType.equals(QuerySet.TYPE_ATTRIBUTE)){
                // discover number of entities expected in each attribute query
                String testRowCountSql = querySet.getTestRowCountSql();
                if (testRowCountSql != null){
                    ResultSet rs = SqlUtils.executeQuery(wdkModel, wdkModel
                            .getQueryPlatform().getDataSource(),
                            testRowCountSql, querySet.getName()
                                    + "-test-row-count");
                    rs.next();
                    minRows = maxRows = rs.getInt(1);
                    SqlUtils.closeResultSet(rs);}}

            for (Query query : querySet.getQueries()){
                if (query.getDoNotTest())
                    continue;
                for (ParamValuesSet paramValuesSet : query.getParamValuesSets()){
                    if (!queryType.equals(QuerySet.TYPE_ATTRIBUTE)){
                        minRows = paramValuesSet.getMinRows();
                        maxRows = paramValuesSet.getMaxRows();}
                    testQuery(querySet, query, queryType, minRows, maxRows,
                            paramValuesSet);}
                if (queryType.equals(QuerySet.TYPE_TABLE)){
                    testQuery(querySet, query, queryType + "TOTAL", minRows,
                            maxRows, null);}}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o6982907215c248319cf5c9873d635852493" name="testQuery" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="querySet" type="QuerySet" type-id="QuerySet" default-value="" />
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
            <parameter id="" name="queryType" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="minRows" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> int maxRows, ParamValuesSet paramValuesSet){

        String typeUpperCase = queryType.toUpperCase();

        if (!checkTestFilter(testCount++))
            return;
        if (indexOnly){
            System.out.println(" [test: " + testCount + "] " + typeUpperCase
                    + " QUERY " + query.getFullName() + newline);
            return;}

        boolean passed = false;
        String prefix = "***";
        String status = " FAILED!";
        int sanityMin = minRows;
        int sanityMax = maxRows;
        int count = 0;
        long start = System.currentTimeMillis();
        String returned = "";
        String expected = "";
        String params = "";
        Exception caughtException = null;

        try{
            if (queryType.equals(QuerySet.TYPE_ATTRIBUTE)){
                count = testAttributeQuery_Count(query, paramValuesSet);
                start = System.currentTimeMillis();
                testAttributeQuery_Time(query, paramValuesSet, count);} else if (queryType.equals(QuerySet.TYPE_TABLE + "TOTAL")){
                count = testTableQuery_TotalTime(query);} else{
                if (queryType.equals(QuerySet.TYPE_TABLE)){
                    query = RecordClass.prepareQuery(wdkModel, query,
                            paramValuesSet.getParamNames());}
                params = " -params " + paramValuesSet.getCmdLineString();
                start = System.currentTimeMillis();
                count = testNonAttributeQuery(querySet, query, paramValuesSet);}

            passed = (count &gt;= sanityMin &amp;&amp; count &lt;= sanityMax);

            returned = " It returned " + count + " rows. ";
            if (sanityMin != 1 || sanityMax != ParamValuesSet.MAXROWS)
                expected = "Expected (" + sanityMin + " - " + sanityMax + ") ";} catch (Exception e){
            returned = " It threw an exception.";
            caughtException = e;} finally{
            long end = System.currentTimeMillis();
            if (passed){
                queriesPassed++;
                prefix = "";
                status = " passed.";} else{
                queriesFailed++;}
            if (!passed)
                System.out.println(BANNER_LINE_top);

            String cmd = " [ wdkQuery -model " + wdkModel.getProjectId()
                    + " -query " + query.getFullName() + params + " ] ";

            String msg = prefix + ((end - start) / 1000F) + " [test: "
                    + testCount + "]" + " " + typeUpperCase + " QUERY "
                    + query.getFullName() + status + returned + expected + cmd
                    + newline;
            if (!passed || !failuresOnly)
                System.out.println(msg);
            if (caughtException != null)
                caughtException.printStackTrace(System.err);
            if (!passed)
                System.out.println(BANNER_LINE_bot + newline);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ofaca72e3f8a34edda46ac3b6aff75d1a493" name="testNonAttributeQuery" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="querySet" type="QuerySet" type-id="QuerySet" default-value="" />
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            ParamValuesSet paramValuesSet) throws SQLException,
            WdkModelException, NoSuchAlgorithmException, JSONException,
            WdkUserException{

        int count = 0;

        QueryInstance instance = query.makeInstance(user,
                paramValuesSet.getParamValues(), true, 0,
                new LinkedHashMap&lt;String, String&gt;());
        ResultList rs = instance.getResults();

        while (rs.next()){
            count++;}
        rs.close();
        return count;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2a9a116a531b450aa10ab2b9c30a714b493" name="testAttributeQuery_Count" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
            <parameter id="" name="paramValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            SQLException, WdkModelException, JSONException, WdkUserException{
        // put user id into the param
        Map&lt;String, String&gt; params = new LinkedHashMap&lt;String, String&gt;();
        params.put(Utilities.PARAM_USER_ID, Integer.toString(user.getUserId()));

        SqlQueryInstance instance = (SqlQueryInstance) query.makeInstance(user,
                params, true, 0, new LinkedHashMap&lt;String, String&gt;());

        if (paramValuesSet.getParamValues().size() != 2){
            throw new WdkUserException(
                    "missing &lt;defaultTestParamValues&gt; for querySet "
                            + query.getQuerySet().getName());}
        String sql = "select count (*) from (select distinct "
                + paramValuesSet.getNamesAsString() + " from ("
                + instance.getUncachedSql() + "))";

        DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                query.getFullName() + "-test-count");
        resultSet.next();
        int count = resultSet.getInt(1);
        SqlUtils.closeResultSet(resultSet);
        return count;}</source-code>
          </source-codes>
        </operation>
        <operation id="o97479483f54a41d29c9aa330daf71cb3493" name="testAttributeQuery_Time" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
            <parameter id="" name="paramValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> int count)
            throws NoSuchAlgorithmException, SQLException, WdkModelException,
            JSONException, WdkUserException{
        // put user id into the param
        Map&lt;String, String&gt; params = new LinkedHashMap&lt;String, String&gt;();
        params.put(Utilities.PARAM_USER_ID, Integer.toString(user.getUserId()));

        SqlQueryInstance instance = (SqlQueryInstance) query.makeInstance(user,
                params, true, 0, new LinkedHashMap&lt;String, String&gt;());

        String sql = "select * from (" + instance.getUncachedSql() + ") "
                + paramValuesSet.getWhereClause();

        DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                query.getFullName() + "-test-time");
        if (count &gt; 0 &amp;&amp; !resultSet.next()){
            String msg = "no row returned for " + query.getFullName()
                    + " using where clause (" + paramValuesSet.getWhereClause()
                    + ")";
            throw new WdkModelException(msg);}
        while (resultSet.next())
            ; // bring full result over to test speed
        SqlUtils.closeResultSet(resultSet);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6b50d67e649a4a6990b52d4cfc3e642e493" name="testTableQuery_TotalTime" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, SQLException, WdkModelException,
            JSONException, WdkUserException{
        // put user id into the param
        Map&lt;String, String&gt; params = new LinkedHashMap&lt;String, String&gt;();
        params.put(Utilities.PARAM_USER_ID, Integer.toString(user.getUserId()));

        SqlQueryInstance instance = (SqlQueryInstance) query.makeInstance(user,
                params, true, 0, new LinkedHashMap&lt;String, String&gt;());

        String sql = instance.getUncachedSql();

        DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                query.getFullName() + "-test-total-time");
        int count = 0;
        while (resultSet.next())
            count++; // bring full result over to test speed
        SqlUtils.closeResultSet(resultSet);
        return count;}</source-code>
          </source-codes>
        </operation>
        <operation id="o971604fdbbf746179b2d5c840f68e753493" name="testRecordSets" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkModelException,
            NoSuchAlgorithmException, JSONException, WdkUserException{

        System.out.println("Sanity Test:  Checking records" + newline);

        for (RecordClassSet recordClassSet : wdkModel.getAllRecordClassSets()){
            for (RecordClass recordClass : recordClassSet.getRecordClasses()){
                if (recordClass.getDoNotTest())
                    continue;
                testRecordClass(recordClass, recordClass.getParamValuesSet());}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o3d43261b5c214a56b18a274bf3dac979493" name="checkTestFilter" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="testIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return testFilter == null || testFilter[testIndex;}</source-code>
          </source-codes>
        </operation>
        <operation id="o105bfa4012c64cb69ba1b38994f7145d493" name="testRecordClass" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
            <parameter id="" name="paramValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        if (!checkTestFilter(testCount++))
            return;
        if (indexOnly){
            System.out.println(" [test: " + testCount + "]" + " RECORD "
                    + recordClass.getFullName() + newline);
            return;}
        long start = System.currentTimeMillis();
        boolean passed = false;
        String status = " FAILED!";
        String prefix = "***";
        Exception caughtException = null;

        try{
            Map&lt;String, String&gt; paramValues = paramValuesSet.getParamValues();
            Map&lt;String, Object&gt; pkValues = new LinkedHashMap&lt;String, Object&gt;();
            for (String key : paramValues.keySet()){
                pkValues.put(key, paramValues.get(key));}
            RecordInstance recordInstance = new RecordInstance(user,
                    recordClass, pkValues);
            recordInstance.print();
            passed = true;} catch (Exception e){
            caughtException = e;} finally{
            long end = System.currentTimeMillis();
            if (passed){
                recordsPassed++;
                prefix = "";
                status = " passed.";} else{
                recordsFailed++;}

            if (!passed)
                System.out.println(BANNER_LINE_top);
            String cmd = " [ wdkRecord -model " + wdkModel.getProjectId()
                    + " -record " + recordClass.getFullName() + " -primaryKey "
                    + paramValuesSet.getCmdLineString() + " ] ";

            String msg = prefix + ((end - start) / 1000F) + " [test: "
                    + testCount + "]" + " RECORD " + recordClass.getFullName()
                    + status + cmd + newline;
            if (!passed || !failuresOnly)
                System.out.println(msg);
            if (caughtException != null)
                caughtException.printStackTrace(System.err);
            if (!passed)
                System.out.println(BANNER_LINE_bot + newline);}}

    /**
     * @param queryResult
     *            a two-value array where the first entry is the number of
     *            queries that passed the test and the second is the number of
     *            queries that failed.
     * 
     * @param recordResult
     *            a two-value array where the first entry is the number of
     *            records that passed the test and the second is the number of
     *            records that failed.
     * 
     * @param return true if one or more tests failed; false otherwise.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o46a50de15fe24184b7b5201a82eea2a2493" name="printSummaryLine" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        boolean failedOverall = (queriesFailed &gt; 0 || recordsFailed &gt; 0 || questionsFailed &gt; 0);
        String result = failedOverall ? "FAILED" : "PASSED";

        int totalPassed = queriesPassed + recordsPassed + questionsPassed;
        int totalFailed = queriesFailed + recordsFailed + questionsFailed;

        StringBuffer resultLine = new StringBuffer("***Sanity test summary***"
                + newline);
        resultLine.append("TestFilter: " + testFilterString + newline);
        resultLine.append("Total Passed: " + totalPassed + newline);
        resultLine.append("Total Failed: " + totalFailed + newline);
        resultLine.append("   " + queriesPassed + " queries passed, "
                + queriesFailed + " queries failed" + newline);
        resultLine.append("   " + recordsPassed + " records passed, "
                + recordsFailed + " records failed" + newline);
        resultLine.append("   " + questionsPassed + " questions passed, "
                + questionsFailed + " questions failed" + newline);
        resultLine.append("Sanity Test " + result + newline);
        System.out.println(resultLine.toString());
        return failedOverall;}</source-code>
          </source-codes>
        </operation>
        <operation id="o83a46bc5747d431ebc733f239909b3a0493" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="desc" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        Option option = new Option(argName, true, desc);
        option.setRequired(true);
        option.setArgName(argName);
        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="o24ae06a4a9e64115bb742a36af58e702493" name="declareOptions" type="Options" type-id="Options" visibility="package" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Options options = new Options();

        // model name
        addOption(
                options,
                "model",
                "the name of the model.  This is used to find the Model XML file ($GUS_HOME/config/model_name.xml), the Model property file ($GUS_HOME/config/model_name.prop) and the Model config file ($GUS_HOME/config/model_name-config.xml)");

        // verbose
        Option verbose = new Option("verbose",
                "Print out more information while running test.");
        options.addOption(verbose);

        // verbose
        Option filter = new Option("t", true,
                "Optional list of tests to run (default=all).  E.g., 1,4-17,62");
        options.addOption(filter);

        Option failuresOnly = new Option("failuresOnly",
                "Only print failures only.");
        options.addOption(failuresOnly);

        Option indexOnly = new Option("indexOnly",
                "Only print an index of the tests.");
        options.addOption(indexOnly);

        Option skipWebSvcQueries = new Option("skipWebSvcQueries",
                "Skip all questions and queries that use web service queries.");
        options.addOption(skipWebSvcQueries);

        return options;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofba3439bc64241cca6ac918a5a21f5c5493" name="parseOptions" type="CommandLine" type-id="CommandLine" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        CommandLineParser parser = new BasicParser();
        CommandLine cmdLine = null;
        try{
            // parse the command line arguments
            cmdLine = parser.parse(options, args);} catch (ParseException exp){
            // oops, something went wrong
            System.out.println("");
            System.out.println("Parsing failed.  Reason: " + exp.getMessage());
            System.out.println("");
            usage(cmdName, options);}

        return cmdLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe0f83edb04a649ce8b843c3415ff0851494" name="parseTestFilter" type="boolean[]" type-id="boolean[]" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="listStr" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (listStr == null)
            return null;

        String[ ranges = listStr.split(",");
        boolean[ filter = new boolean[1000; // assume no more than 1000
        // tests
        Arrays.fill(filter, false);
        for (String range : ranges){
            String[ points = range.split("-");
            int min = Integer.parseInt(points[0) - 1;
            int max = points.length == 1 ? min
                    : Integer.parseInt(points[1) - 1;
            Arrays.fill(filter, min, max + 1, true);}
        return filter;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc87bc67ad6b940ff8a20c1a90b8feaf6494" name="usage" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        String newline = System.getProperty("line.separator");
        String cmdlineSyntax = cmdName
                + " -model model_name"
                + " [-verbose] [-t testfilter] [-failuresOnly | -indexOnly] [-skipWebSvcQueries]";

        String header = newline
                + "Run a test on all queries and records in a wdk model."
                + newline + newline + "Options:";

        String footer = "";

        // PrintWriter stderr = new PrintWriter(System.err);
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(75, cmdlineSyntax, header, options, footer);
        System.exit(1);}

    // private static Logger logger = Logger.getLogger(SanityTester.class);</source-code>
          </source-codes>
        </operation>
        <operation id="o03f84d6b23924851aa7d6209166dd89a494" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            SAXException, IOException, ParserConfigurationException,
            TransformerFactoryConfigurationError, TransformerException,
            NoSuchAlgorithmException, SQLException, JSONException,
            InstantiationException, IllegalAccessException, WdkUserException,
            ClassNotFoundException{
        String cmdName = System.getProperty("cmdName");

        Options options = declareOptions();
        CommandLine cmdLine = parseOptions(cmdName, options, args);

        String modelName = cmdLine.getOptionValue("model");

        String testFilterString = cmdLine.getOptionValue("t");

        boolean verbose = cmdLine.hasOption("verbose");

        boolean failuresOnly = cmdLine.hasOption("failuresOnly");

        boolean indexOnly = cmdLine.hasOption("indexOnly");

        boolean skipWebSvcQueries = cmdLine.hasOption("skipWebSvcQueries");

        SanityTester sanityTester = new SanityTester(modelName, verbose,
                testFilterString, failuresOnly, indexOnly, skipWebSvcQueries);

        String dbConnectionUrl = sanityTester.wdkModel
                .getQueryPlatform().getDbConfig().getConnectionUrl();                

        System.out.println("Sanity Test: ");
        System.out.println(" [Database] " + dbConnectionUrl);
        SimpleDateFormat sdFormat =
            new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
        System.out.println(" [Time] " + sdFormat.format(new Date()));
        System.out.println();

	//System.out.println(" MODEL: " + modelName + "\n\n");

        sanityTester.testQuerySets(QuerySet.TYPE_VOCAB);
        sanityTester.testQuerySets(QuerySet.TYPE_ATTRIBUTE);
        if ( !modelName.equals("EuPathDB") ){ sanityTester.testQuerySets(QuerySet.TYPE_TABLE);}
        sanityTester.testQuestionSets();
        sanityTester.testRecordSets();
        if (!indexOnly){
            if (sanityTester.printSummaryLine()){
                System.exit(1);}}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di244081208762036942" cid="C314" type="class" name="SummaryTester" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:26">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o036440a5b8594920bd0adbb6ab9f6f0e626" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{

        String cmdName = System.getProperty("cmdName");

        // process args
        Options options = declareOptions();
        CommandLine cmdLine = parseOptions(cmdName, options, args);

        String questionFullName = cmdLine.getOptionValue("question");

        String[ params = null;
        boolean haveParams = cmdLine.hasOption("params");
        if (haveParams) params = cmdLine.getOptionValues("params");
        boolean useDefaults = cmdLine.hasOption("d");

        boolean toXml = cmdLine.hasOption("toXml");
        String xmlFileName = cmdLine.getOptionValue("toXml");
        String[ rows = cmdLine.getOptionValues("rows");

        boolean hasFormat = cmdLine.hasOption("format");
        String format = cmdLine.getOptionValue("format");

        boolean hasFormatConfig = cmdLine.hasOption("config");
        String configFile = cmdLine.getOptionValue("config");

        if (!hasFormat &amp;&amp; hasFormatConfig){
            throw new IllegalArgumentException(
                    "Please specify the output format before providing the configuration file for that format.");}

        if (toXml){
            if (xmlFileName == null || xmlFileName.equals(""))
                usage(cmdName, options);} else{
            if (rows == null || rows.length == 0) usage(cmdName, options);
            validateRowCount(rows);}

        // variable never used
        Reference ref = new Reference(questionFullName);
        String questionSetName = ref.getSetName();
        String questionName = ref.getElementName();
        try{
            String modelName = cmdLine.getOptionValue("model");
            String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
            WdkModel wdkModel = WdkModel.construct(modelName, gusHome);

            QuestionSet questionSet = wdkModel.getQuestionSet(questionSetName);
            Question question = questionSet.getQuestion(questionName);
            Query query = question.getQuery();

            Map&lt;String, String&gt; paramValues = new LinkedHashMap&lt;String, String&gt;();
            if (haveParams){
                paramValues = QueryTester.parseParamArgs(params, useDefaults,
                        query);}

            // get filter
            AnswerFilterInstance filter = null;
            if (cmdLine.hasOption(ARG_FILTER)){
                String filterName = cmdLine.getOptionValue(ARG_FILTER);
                filter = question.getRecordClass().getFilter(filterName);
                if (filter == null)
                    throw new WdkUserException(
                            "Given filter name doesn't exist: " + filterName);}

            User user = wdkModel.getSystemUser();
            // this is suspicious
            // Query query = question.getQuery();
            // query.setIsCacheable(new Boolean(true));
            int pageCount = 1;

            if (toXml){
                writeSummaryAsXml(user, question, paramValues, xmlFileName,
                        filter);
                return;}

            Map&lt;String, Boolean&gt; sortingMap = question.getSortingAttributeMap();

            for (int i = 0; i &lt; rows.length; i += 2){
                int nextStartRow = Integer.parseInt(rows[i);
                int nextEndRow = Integer.parseInt(rows[i + 1);

                AnswerValue answerValue = question.makeAnswerValue(user,
                        paramValues, nextStartRow, nextEndRow, sortingMap,
                        filter, 0);

                // this is wrong. it only shows one attribute query, not
                // all. Fix this in Answer by saving a list of attribute
                // queries, not just one.
                if (cmdLine.hasOption("showQuery")){
                    System.out.println(getLowLevelQuery(answerValue));
                    System.exit(0);}

                if (rows.length != 2) System.out.println("page " + pageCount);

                // print the size of the answer
                System.out.println("Total # of records: "
                        + answerValue.getResultSize());
                System.out.println("Answer Checksum: "
                        + answerValue.getAnswer().getAnswerChecksum());

                AnswerValueBean answerValueBean = new AnswerValueBean(
                        answerValue);
                answerValueBean.getResultSizesByProject();

                // load configuration for output format
                if (!hasFormat) format = "tabular";
                Map&lt;String, String&gt; config = loadConfiguration(configFile);

                Reporter reporter = answerValue.createReport(format, config,
                        nextStartRow, nextEndRow);

                reporter.report(System.out);
                System.out.println();

                pageCount++;}}
        catch (Exception ex){
            ex.printStackTrace();
            // System.exit(-1);}
        // System.exit(0);}</source-code>
          </source-codes>
        </operation>
        <operation id="obfd2e3db737e4ba8a3c66650841c4350626" name="loadConfiguration" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="configFileName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws IOException{
        Map&lt;String, String&gt; config = new LinkedHashMap&lt;String, String&gt;();

        if (configFileName == null || configFileName.length() == 0)
            return config;

        InputStream stream = new FileInputStream(configFileName);
        Properties properties = new Properties();
        if (configFileName.toLowerCase().endsWith(".xml")){
            properties.loadFromXML(stream);} else properties.load(stream);
        stream.close();

        for (Object obj : properties.keySet()){
            String key = (String) obj;
            config.put(key, properties.getProperty(key));}
        return config;}</source-code>
          </source-codes>
        </operation>
        <operation id="od844408a12604ab48df0275ace3727d4626" name="writeSummaryAsXml" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
            <parameter id="" name="xmlFile" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            AnswerFilterInstance filter) throws WdkModelException,
            WdkUserException, IOException, NoSuchAlgorithmException,
            SQLException, JSONException{

        Map&lt;String, Boolean&gt; sortingMap = question.getSortingAttributeMap();

        AnswerValue answerValue = question.makeAnswerValue(user, paramValues,
                1, 2, sortingMap, filter, 0);
        int resultSize = answerValue.getResultSize();
        answerValue = question.makeAnswerValue(user, paramValues, 1,
                resultSize, sortingMap, filter, 0);
        FileWriter fw = new FileWriter(new File(xmlFile), false);

        String newline = System.getProperty("line.separator");
        String ident = "    ";

        fw.write("&lt;" + question.getFullName() + "&gt;" + newline);
        fw.close();
        fw = new FileWriter(new File(xmlFile), true);
        for (RecordInstance ri : answerValue.getRecordInstances()){
            fw.write(ri.toXML(ident) + newline);}
        fw.write("&lt;/" + question.getFullName() + "&gt;" + newline);
        fw.close();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa4ae93f491854f9793d2fdc74bbfa675626" name="getLowLevelQuery" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // QueryInstance instance = answer.getAttributesQueryInstance();
        QueryInstance instance = answerValue.getIdsQueryInstance();
        String query = (instance instanceof SqlQueryInstance) ? ((SqlQueryInstance) instance).getUncachedSql()
                : instance.getSql();
        String newline = System.getProperty("line.separator");
        String newlineQuery = query.replaceAll("^\\s\\s\\s", newline);
        newlineQuery = newlineQuery.replaceAll("(\\S)\\s\\s\\s", "$1" + newline);
        return newline + newlineQuery + newline;}</source-code>
          </source-codes>
        </operation>
        <operation id="od4145f574bf548f2ae32ec78e109ef12626" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="desc" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        Option option = new Option(argName, true, desc);
        option.setRequired(true);
        option.setArgName(argName);

        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3a6d225c59864f0895a2730433fbd85c626" name="declareOptions" type="Options" type-id="Options" visibility="package" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Options options = new Options();

        // model name
        addOption(options, "model", "the name of the model.  This is used to "
                + "find the Model XML file ($GUS_HOME/config/model_name.xml) "
                + "the Model property file ($GUS_HOME/config/model_name.prop) "
                + "and the Model config file "
                + "($GUS_HOME/config/model_name-config.xml)");

        // question name
        addOption(options, "question", "The full name (set.element) of the "
                + "question to run.");

        // rows to return
        Option rows = new Option("rows", "The start and end pairs of the "
                + "summary rows to return. Ignored when toXml is turned on, "
                + "but required otherwise.");
        rows.setArgs(2);
        options.addOption(rows);

        // use defaults
        Option useDefaults = new Option("d",
                "Use default values for unprovided parameters");
        options.addOption(useDefaults);

        // show query
        Option showQuery = new Option("showQuery", "Show the query as it will "
                + "be run (with parameter values in place).");
        options.addOption(showQuery);

        // output XML
        Option toXml = new Option("toXml", true, "output summary in XML format"
                + " to given file");
        options.addOption(toXml);

        // output XML
        Option fullRecords = new Option("fullRecords", "output full records");
        options.addOption(fullRecords);

        // output format
        Option format = new Option("format", true, "the output format, which "
                + "is record type specific (defined in the model file)");
        options.addOption(format);

        // the config file for output format
        Option config = new Option("config", true, "The configuration file "
                + "for the output format");
        options.addOption(config);

        // the sub type input
        Option filter = new Option(ARG_FILTER, true, "The filter to be used "
                + "to filter out the result");
        options.addOption(filter);

        // params
        Option params = new Option("params", true,
                "Space delimited list of param_name param_value ....");
        params.setArgName("params");
        params.setArgs(Option.UNLIMITED_VALUES);
        options.addOption(params);
        return options;}</source-code>
          </source-codes>
        </operation>
        <operation id="o55c75353f5924d7abf3db8a26824446b626" name="parseOptions" type="CommandLine" type-id="CommandLine" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        CommandLineParser parser = new BasicParser();
        CommandLine cmdLine = null;
        try{
            // parse the command line arguments
            cmdLine = parser.parse(options, args);}
        catch (ParseException exp){
            // oops, something went wrong
            System.err.println("");
            System.err.println("Parsing failed.  Reason: " + exp.getMessage());
            System.err.println("");
            usage(cmdName, options);}

        return cmdLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob31c6122067447c285531a327b7fba3c626" name="validateRowCount" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="rows" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (rows.length % 2 != 0){
            throw new IllegalArgumentException(
                    "The -rows option must be followed by pairs of row numbers (each pair representing the start and end of a page");}}</source-code>
          </source-codes>
        </operation>
        <operation id="od4bf3efc2abb425fa6ff6d93a81a68f7626" name="parseParamArgs" type="Map&lt;String, Object&gt;" type-id="Map&lt;String, Object&gt;" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="params" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        Map&lt;String, Object&gt; h = new LinkedHashMap&lt;String, Object&gt;();
        if (params[0.equals("NONE")){
            return h;} else{
            if (params.length % 2 != 0){
                throw new IllegalArgumentException(
                        "The -params option must be followed by key value pairs only");}
            for (int i = 0; i &lt; params.length; i += 2){
                h.put(params[i, params[i + 1);}
            return h;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o7664f7feba6d4feb875fb253544ba3b4626" name="usage" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        String newline = System.getProperty("line.separator");
        String cmdlineSyntax = cmdName
                + " -model model_name\n"
                + " -question full_question_name\n"
                + " -rows start end\n"
                + " [-showQuery]\n"
                + " [-toXml &lt;xmlFile&gt;|-fullRecords]\n"
                + " [-format tabular | gff3 | fullRecords [-config &lt;config_file&gt;]]\n"
                + " [-" + ARG_FILTER + " &lt;filter_name&gt;]\n"
                + " -params param_1_name param_1_value ...\n";

        String header = newline
                + "Print a summary found in a WDK Model xml file. Options:";

        String footer = "";

        // PrintWriter stderr = new PrintWriter(System.err);
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(75, cmdlineSyntax, header, options, footer);
        System.exit(1);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di408648982991094676" cid="C315" type="class" name="TestDBManager" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:28">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ad036edfa6f6941348f2436e2255c600795" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ob8a64381e5204d9abae932aed34adad295" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        TestDBManager testDb = new TestDBManager(cmdName);
        try{
            testDb.invoke(args);} finally{
            System.exit(0);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o83e91673a79040bdb41f72d2c955589896" name="TestDBManager" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command == null) ? "wdkTestDb" : command,
                "Create or delete test toy db");}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o20a1c8e3e5a043f9bab4e8e94a9a62e296" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "The ProjectId, which"
                + " should match the directory name under $GUS_HOME, where "
                + "model-config.xml is stored.");

        addNonValueOption(ARG_CREATE, false, "create new WDK ToyDB and load "
                + "test data.");
        addNonValueOption(ARG_DROP, false, "drop existing WDK ToyDB test "
                + "tables.");
        addGroup(true, ARG_CREATE, ARG_DROP);

        addSingleValueOption(ARG_TABLE_DIR, false, null, "give the absolute"
                + " path to the directory where test data are stored.");}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o3c05680d854e4a16956fd65c0b5814b396" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String projectId = (String) getOptionValue(ARG_PROJECT_ID);

        boolean newCache = (Boolean) getOptionValue(ARG_CREATE);
        boolean dropCache = (Boolean) getOptionValue(ARG_DROP);

        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        String tableDir = (String) getOptionValue(ARG_TABLE_DIR);
        if (tableDir == null)
            tableDir = gusHome + "/data/WDKTemplateSite/Model/testTables";
        String[ tables = getTableNames(tableDir);

        try{
            // read config info
            wdkModel = WdkModel.construct(projectId, gusHome);
            DBPlatform platform = wdkModel.getQueryPlatform();

            long start = System.currentTimeMillis();
            if (newCache) createTables(platform, tables);
            else if (dropCache) dropTables(platform, tables);
            long end = System.currentTimeMillis();
            System.out.println("Command succeeded in "
                    + ((end - start) / 1000.0) + " seconds");} catch (Exception e){
            System.err.println("FAILED");
            System.err.println("");
            e.printStackTrace();
            System.exit(1);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o848aecff5ced40a9a2985d6ef1c8874f96" name="dropTables" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="platform" type="DBPlatform" type-id="DBPlatform" default-value="" />
            <parameter id="" name="tables" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws Exception{
        for (int t = 0; t &lt; tables.length; t++){
            File nextTable = new File(tables[t);
            if ("CVS".equals(nextTable.getName())) continue;

            String tableName = nextTable.getName();
            try{
                System.err.println("Dropping table " + tableName);
                String dropTable = "drop table " + tableName;
                SqlUtils.executeUpdate(wdkModel, platform.getDataSource(),
                        dropTable, "wdk-drop-table");} catch (SQLException ex){
                System.err.println("Dropping table '" + tableName + "' failed.");
                ex.printStackTrace();}}}</source-code>
          </source-codes>
        </operation>
        <operation id="ofe209776c8944f429c55ec5eee4ad3f696" name="createTables" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="platform" type="DBPlatform" type-id="DBPlatform" default-value="" />
            <parameter id="" name="tables" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws Exception{
        for (int t = 0; t &lt; tables.length; t++){
            File nextTable = new File(tables[t);
            if (!nextTable.isFile()) continue;
            
            String tableName = nextTable.getName();
            if ("CVS".equals(tableName) || tableName.startsWith(".")) continue;

            BufferedReader reader = new BufferedReader(
                    new FileReader(nextTable));
            String firstLine = reader.readLine();
            if (firstLine == null){
              reader.close();
              throw new WdkModelException("File should not be empty:" + nextTable.getAbsolutePath());}

            try{
                Map&lt;String, String&gt; columnTypes = createTable(tableName,
                        firstLine, platform);
                Map&lt;Integer, String&gt; columnIds = new LinkedHashMap&lt;Integer, String&gt;();

                // prepare the statement
                StringBuffer sql = new StringBuffer("INSERT INTO ");
                sql.append(tableName).append(" (");
                StringBuffer sqlPiece = new StringBuffer();
                int columnId = 0;
                for (String column : columnTypes.keySet()){
                    if (sqlPiece.length() &gt; 0){
                        sql.append(", ");
                        sqlPiece.append(", ");}
                    sql.append(column);
                    sqlPiece.append("?");

                    columnIds.put(columnId++, column);}
                sql.append(") VALUES (").append(sqlPiece).append(")");
                PreparedStatement ps = SqlUtils.getPreparedStatement(
                        platform.getDataSource(), sql.toString());

                System.err.println("Loading table " + tableName
                        + " to database from file\n");
                String nextLine;
                while ((nextLine = reader.readLine()) != null){
                    String[ parts = nextLine.split("\t", columnIds.size());
                    for (int i = 0; i &lt; parts.length; i++){
                        String nextValue = parts[i;
                        String columnName = columnIds.get(i);
                        String typeString = columnTypes.get(columnName);
                        ColumnType type = ColumnType.parse(typeString);

                        if (nextValue.trim().equals("") &amp;&amp; !type.isText())
                            nextValue = "0";

                        if (!type.isText()){
                            ps.setObject(i + 1, Integer.parseInt(nextValue));} else{
                            ps.setObject(i + 1, nextValue);}}
                    ps.executeUpdate();}
                SqlUtils.closeStatement(ps);} catch (SQLException ex){
                System.err.println("Create table " + tableName + " failed");
                ex.printStackTrace();}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o88ccf291be1649eb9d14d2aece2c784996" name="getTableNames" type="String[]" type-id="String[]" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableDir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        File dir = new File(tableDir);
        File[ files = dir.listFiles();
        String[ tables = new String[files.length;
        for (int i = 0; i &lt; files.length; i++){
            tables[i = files[i.getAbsolutePath();}
        return tables;}</source-code>
          </source-codes>
        </operation>
        <operation id="o17413c2b54674d2eb8845189b89925ac96" name="createTable" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="firstLine" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="platform" type="DBPlatform" type-id="DBPlatform" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        DataSource dataSource = platform.getDataSource();

        StringBuffer sql = new StringBuffer("CREATE TABLE ");
        sql.append(tableName).append(" (");

        // parse the first line, which holds the column definition
        String[ columns = firstLine.split(",");
        Map&lt;String, String&gt; columnTypes = new LinkedHashMap&lt;String, String&gt;();
        boolean firstColumn = true;
        for (String column : columns){
            if (firstColumn) firstColumn = false;
            else sql.append(", ");

            String[ pieces = column.trim().split("\\s+");
            sql.append(pieces[0).append(" "); // column name
            String type = pieces[1.trim().toLowerCase();
            if (type.startsWith("varchar") || type.startsWith("char")){
                int quoteStart = type.indexOf('(');
                int quoteEnd = type.indexOf(')');
                int length = Integer.parseInt(type.substring(quoteStart + 1,
                        quoteEnd));
                sql.append(platform.getStringDataType(length));} else if (type.startsWith("number")){
                int quoteStart = type.indexOf('(');
                int quoteEnd = type.indexOf(')');
                int length = Integer.parseInt(type.substring(quoteStart + 1,
                        quoteEnd));
                sql.append(platform.getNumberDataType(length));} else if (type.startsWith("clob")){
                sql.append(platform.getClobDataType());} else{
                sql.append(type);}
            for (int i = 2; i &lt; pieces.length; i++){
                sql.append(" ").append(pieces[i);}

            // decide the type
            if (type.startsWith("number")){
                columnTypes.put(pieces[0, ColumnType.NUMBER.getType());} else{
                columnTypes.put(pieces[0, ColumnType.STRING.getType());}}
        sql.append(")");

        // System.err.println("creating test table with sql " + createTable);

        SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
                "wdk-create-table");

        return columnTypes;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di139762628429990698" cid="C316" type="class" name="WsfClientCLI" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="oa958f1cfecb446829aa42dd67404584a27" name="main" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        WsfClientCLI client = new WsfClientCLI(cmdName,
                "Invoke a WSF web service directly");
        try{
            client.invoke(args);} finally{
            System.exit(0);}}

    /**
     * @param command
     * @param description
     */
    protected</source-code>
          </source-codes>
        </operation>
        <operation id="o533878e12c7c4d68a8575b7319d14e3927" name="WsfClientCLI" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="description" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command == null) ? "wdkCache" : command, description);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#declareOptions()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oab9eb705c394447c856c39661296008c27" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_WEB_SERVICE_URL, true, null, "Url to the Web"
                + "Service, for example, "
                + "http://localhost/webapp/services/WsfService.");
        addSingleValueOption(ARG_PROCESS_NAME, true, null, "The process, or "
                + "the WSF plugin full name.");
        addMultiValueOption(ARG_CONTEXT, true, Option.UNLIMITED_VALUES, null,
                "The context info for the invocation. It must be key value "
                        + "pairs, for example, key1 value1 key2 value2...");
        addMultiValueOption(ARG_PARAMS, true, Option.UNLIMITED_VALUES, null,
                "The parameter and value pairs, for example: "
                        + "param1 value1 param2 value2...");
        addMultiValueOption(ARG_COLUMNS, true, Option.UNLIMITED_VALUES, null,
                "The columns definition in the results. The order in this "
                        + "column list will be applied into the results, for "
                        + "example: column1 column2 column3...");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#invoke()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o46b54ab0fdef47a5910007c5156156fc27" name="execute" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String serviceUrl = (String) getOptionValue(ARG_WEB_SERVICE_URL);
        String processName = (String) getOptionValue(ARG_PROCESS_NAME);

        WsfRequest request = new WsfRequest();

        String[ contextValues = (String[) getOptionValue(ARG_COLUMNS);
        String[ columns = (String[) getOptionValue(ARG_COLUMNS);

        // convert the paramErrors into params
        String[ paramValues = (String[) getOptionValue(ARG_PARAMS);
        HashMap&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
        for (int i = 0; i &lt; paramValues.length; i += 2){
            String paramName = paramValues[i;
            String paramValue = (i + 1 &lt; paramValues.length) ? paramValues[i + 1
                    : "";
            params.put(paramName, paramValue);}
        request.setParams(params);

        request.setOrderedColumns(columns);

        // prepare context
        HashMap&lt;String, String&gt; context = new HashMap&lt;String, String&gt;();
        for (int i = 0; i &lt; contextValues.length; i += 2){
            String key = contextValues[i;
            String value = (i + 1 &lt; contextValues.length) ? contextValues[i + 1
                    : "";
            context.put(key, value);}
        request.setContext(context);

        printParams(serviceUrl, processName, request);
        try{
            System.out.println("Invoking web service...");
            long start = System.currentTimeMillis();

            // invoke web service
            WsfServiceServiceLocator locator = new WsfServiceServiceLocator();
            WsfService client = locator.getWsfService(new URL(serviceUrl));

            // get the response from the web service
            WsfResponse result = client.invoke(request.toString());
            long end = System.currentTimeMillis();

            printResult(result, columns);

            System.out.println("Invocation took: " + ((end - start) / 1000.0)
                    + " seconds.");} catch (Exception ex){
            throw ex;}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob35bc6ac86df4ab58fcbba2fe648025327" name="printParams" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="serviceUrl" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="processName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="request" type="WsfRequest" type-id="WsfRequest" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        System.out.println("============== Input ==============");
        System.out.println("Service Url:\t" + serviceUrl);
        System.out.println("Process Name:\t" + processName);

        Map&lt;?, ?&gt; params = request.getParams();
        System.out.println("Parameters:\n");
        for (Object param : params.keySet()){
            System.out.println("\t" + param + "=" + params.get(param));}

        String[ columns = request.getOrderedColumns();
        System.out.println("Columns:\t" + Utilities.fromArray(columns));

        Map&lt;String, String&gt; context = request.getContext();
        System.out.println("Context:\n");
        for (String key : context.keySet()){
            System.out.println("\t" + key + "=" + context.get(key));}

        System.out.println("===================================");}</source-code>
          </source-codes>
        </operation>
        <operation id="oe687bf3f39aa46079e214a870258837627" name="printResult" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="result" type="WsfResponse" type-id="WsfResponse" default-value="" />
            <parameter id="" name="columns" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        System.out.println("============== Results ==============");
        System.out.println("Signal: " + result.getSignal());
        System.out.println("Message: " + result.getMessage());
        String[[ data = result.getResult();
        for (String column : columns){
            System.out.print(column + "\t");}
        System.out.println();
        for (int row = 0; row &lt; data.length; row++){
            for (int col = 0; col &lt; data[0.length; col++){
                System.out.print(data[row[col + "\t");}
            System.out.println();}
        System.out.println("=====================================");}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di931814141114541126" cid="C317" type="class" name="XmlQuestionTester" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="of7de068d41ea4424905bf5274f8d25a8606" name="Logger.getRootLogger" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes />
        </operation>
        <operation id="o1c1f3246ee5941b2a2f1bc50c6746bb6606" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            SAXException, IOException, NoSuchAlgorithmException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, SQLException, JSONException,
            WdkUserException, InstantiationException, IllegalAccessException,
            ClassNotFoundException{
        String cmdName = System.getProperty("cmdName");

        // process args
        Options options = declareOptions();
        CommandLine cmdLine = CommandHelper.parseOptions(cmdName, options, args);

        String questionFullName = cmdLine.getOptionValue("question");
        String[ rows = cmdLine.getOptionValues("rows");
        String xmlData = null;
        if (cmdLine.hasOption("basename"))
            xmlData = cmdLine.getOptionValue("basename");

        validateRowCount(rows);

        String modelName = cmdLine.getOptionValue("model");

        Reference ref = new Reference(questionFullName);
        String questionSetName = ref.getSetName();
        String questionName = ref.getElementName();

        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        WdkModel wdkModel = WdkModel.construct(modelName, gusHome);

        XmlQuestionSet questionSet = wdkModel.getXmlQuestionSet(questionSetName);
        XmlQuestion question = questionSet.getQuestion(questionName);

        // use external data source
        if (xmlData != null) question.setXmlDataURL(xmlData);

        int pageCount = 1;

        for (int i = 0; i &lt; rows.length; i += 2){
            int nextStartRow = Integer.parseInt(rows[i);
            int nextEndRow = Integer.parseInt(rows[i + 1);

            XmlAnswerValue answer = question.makeAnswer(null, nextStartRow,
                    nextEndRow);

            System.out.println("Printing Record Instances on page " + pageCount);
            System.out.println(answer.print());
            pageCount++;}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob1101f56552741dbb9b3651b53c3c801606" name="declareOptions" type="Options" type-id="Options" visibility="private" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ names ={ "model", "question", "rows", "basename"};
        String[ descs ={
                "the name of the model.  This is used to find the Model XML file ($GUS_HOME/config/model_name.xml) the Model property file ($GUS_HOME/config/model_name.prop) and the Model config file ($GUS_HOME/config/model_name-config.xml)",
                "The full name (set.element) of the question to run.",
                "The start and end pairs of the summary rows to return",
                "(Optional) The URL to the xml data source"};
        boolean[ required ={ true, true, true, false};
        int[ args ={ 0, 0, Option.UNLIMITED_VALUES, 0};

        return CommandHelper.declareOptions(names, descs, required, args);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3c8b315f39e44386942792c46067fe81606" name="validateRowCount" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="rows" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (rows.length % 2 != 0){
            throw new IllegalArgumentException(
                    "The -rows option must be followed by pairs of row numbers (each pair representing the start and end of a page");}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di203642415645636077" cid="C318" type="class" name="InvalidStatusException" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o786e045444a44ca38838c5c3b59e4201725" name="InvalidStatusException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();}

    /**
     * @param arg0
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o40d4537635294ffaae7b1373315dc38a725" name="InvalidStatusException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg);}

    /**
     * @param arg0
     * @param arg1
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o38e012483c8d43c58a95e59d0c6c381c725" name="InvalidStatusException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="internal" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg, internal);}

    /**
     * @param arg0
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7d7ba071efe347b1ba08ca3d38a3511d725" name="InvalidStatusException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="internal" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(internal);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di889645267406963407" cid="C319" type="class" name="StressTemplater" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:32">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ac39026ce5b344e15859e07ff02cb6133132" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aef90970180ed49d7a47092c54c1e1c29132" name="questionItems" type="Map&lt;String, QuestionItem&gt;" type-id="Map&lt;String, QuestionItem&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a29980d36ca274421a5df44b59ad3b832132" name="recordItems" type="Map&lt;String, RecordItem&gt;" type-id="Map&lt;String, RecordItem&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o069c3749393a481fbb2d0643cd3e9b91132" name="StressTemplater" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;
//        this.sanityModel = sanityModel;

        questionItems = new LinkedHashMap&lt;String, QuestionItem&gt;();
        recordItems = new LinkedHashMap&lt;String, RecordItem&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="o9a39ec5783114cd19d9218be15019348132" name="makeTemplate" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        // load the info from the model
        logger.info("Loading info from the model...");
        loadFromModel();

        // if the file exists, load the info from the file
        if (file.exists() &amp;&amp; file.isFile() &amp;&amp; file.canRead()){
            logger.info("Loading info from the file...");
            loadFromFile(file);}

        // load the info from the sanity model
        logger.info("Loading info from the sanity model...");
//        loadFromSanityModel();

        // generate the template file
        logger.info("Generating template file...");
        generateTemplate(file);}</source-code>
          </source-codes>
        </operation>
        <operation id="od751ba97f40040b5b3a19bf4d3b71b47132" name="loadFromModel" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        // get questions
        QuestionSet[ qsets = wdkModel.getAllQuestionSets();
        for (QuestionSet qset : qsets){
            // ignore the internal questions
            if (qset.isInternal()){
                logger.info("Skip question set: " + qset.getName());
                continue;}

            Question[ questions = qset.getQuestions();
            for (Question question : questions){
                String questionName = question.getFullName();
                QuestionItem questionItem = new QuestionItem(questionName);

                // list all params
                Param[ params = question.getParams();
                boolean unusable = false;
                for (Param param : params){
                    if (param instanceof FlatVocabParam){
                        // skip it} else if (param instanceof AnswerParam
                            || param instanceof DatasetParam){
                        // unusable question
                        unusable = true;
                        break;} else{ // add the param into the list
                        String paramName = param.getName();
                        String paramValue = param.getDefault();
                        questionItem.addParamValue(paramName, paramValue);}}
                // add the question only if it has some params that requires
                // user's input
                if (!unusable &amp;&amp; questionItem.getParams().size() &gt; 0)
                    questionItems.put(questionName, questionItem);}}

        // get records
        RecordClassSet[ rcsets = wdkModel.getAllRecordClassSets();
        for (RecordClassSet rcset : rcsets){
            RecordClass[ rcs = rcset.getRecordClasses();
            for (RecordClass recordClass : rcs){
                String recordName = recordClass.getFullName();
                RecordItem recordItem = new RecordItem(recordName);
                recordItems.put(recordName, recordItem);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1c4d011f62134e27a7d1b009a73f5bd6132" name="loadFromFile" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        try{
            BufferedReader reader = new BufferedReader(new FileReader(file));

            String line = null;
            QuestionItem questionItem = null;
            while ((line = reader.readLine()) != null){
                line = line.trim();
                String lowerCase = line.toLowerCase();
                if (lowerCase.startsWith("question")){
                    questionItem = null; // clear the old question
                    int pos = line.indexOf(":");
                    if (pos &gt; 0){
                        String questionName = line.substring(pos + 1).trim();
                        questionItem = questionItems.get(questionName);}} else if (lowerCase.startsWith("param")){
                    if (questionItem != null){
                        int pos = line.indexOf(":");
                        if (pos &gt; 0){
                            line = line.substring(pos + 1).trim();
                            pos = line.indexOf("=");
                            if (pos &gt; 0){
                                String paramName = line.substring(0, pos).trim();
                                if (questionItem.getParams().containsKey(
                                        paramName)){
                                    String valueString = line.substring(pos + 1).trim();
                                    String[ values = valueString.split(",");
                                    for (String value : values){
                                        questionItem.addParamValue(paramName,
                                                value.trim());}}}}}} else if (lowerCase.startsWith("record")){
                    int pos = line.indexOf(":");
                    if (pos &gt; 0){
                        line = line.substring(pos + 1).trim();
                        pos = line.indexOf("=");
                        if (pos &gt; 0){
                            String recordName = line.substring(0, pos).trim();
                            RecordItem recordItem = recordItems.get(recordName);

                            if (recordItem != null){
                                String idString = line.substring(pos + 1).trim();
                                String[ ids = idString.split(",");
                                for (String id : ids){
                                    recordItem.addRecordId(id);}}}}} // other line types are ignored}

            reader.close();} catch (IOException ex){
            throw new WdkModelException(ex);}}

//    private void loadFromSanityModel() {
//        // get sanity questions
//        SanityQuestion[] questions = sanityModel.getAllSanityQuestions();
//        for (SanityQuestion question : questions) {
//            String questioName = question.getName();
//            QuestionItem questionItem = questionItems.get(questioName);
//            if (questionItem != null) {
//                Map&lt;String, Object&gt; params = question.getParamHash();
//                for (String paramName : params.keySet()) {
//                    if (questionItem.getParams().containsKey(paramName)) {
//                        String paramValue = (String) params.get(paramName);
//                        questionItem.addParamValue(paramName, paramValue);
//                    }
//                }
//            }
//        }
//
//        // get records
//        SanityRecord[] records = sanityModel.getAllSanityRecords();
//        for (SanityRecord record : records) {
//            String recordName = record.getName();
//            RecordItem recordItem = recordItems.get(recordName);
//            if (recordItem != null) {
//                String recordId = record.getPrimaryKey();
//                recordItem.addRecordId(recordId);
//            }
//        }
//    }</source-code>
          </source-codes>
        </operation>
        <operation id="o1626aabd652d4370a06558dbcf27b23d132" name="generateTemplate" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        try{
            PrintWriter writer = new PrintWriter(new FileWriter(file));

            // output the questions
            for (String questionName : questionItems.keySet()){
                writer.println("Question: " + questionName);
                QuestionItem questionItem = questionItems.get(questionName);
                Map&lt;String, Set&lt;String&gt;&gt; params = questionItem.getParams();
                for (String paramName : params.keySet()){
                    Set&lt;String&gt; values = params.get(paramName);
                    StringBuffer sb = new StringBuffer();
                    for (String value : values){
                        if (sb.length() &gt; 0) sb.append(", ");
                        sb.append(value);}
                    writer.println("    Param: " + paramName + " = "
                            + sb.toString());}
                writer.println("//");}
            writer.flush();

            // output the records
            for (String recordName : recordItems.keySet()){
                RecordItem recordItem = recordItems.get(recordName);
                Set&lt;String&gt; recordIds = recordItem.getRecordIds();
                StringBuffer sb = new StringBuffer();
                for (String recordId : recordIds){
                    if (sb.length() &gt; 0) sb.append(", ");
                    sb.append(recordId);}
                writer.println("Record: " + recordName + " = " + sb.toString());
                writer.println("//");}
            writer.flush();
            writer.close();} catch (IOException ex){
            throw new WdkModelException(ex);}}

    // ////////////////////////////////////////////////////////////////////
    // /////////// static methods /////////////////////////////////////
    // ////////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="o2b8fb67cc984494ca0575cf73bee3898132" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws IOException,
            WdkModelException, NoSuchAlgorithmException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, SAXException, SQLException, JSONException,
            WdkUserException, InstantiationException, IllegalAccessException,
            ClassNotFoundException{

        String cmdName = System.getProperty("cmdName");
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        // process args
        Options options = declareOptions();
        CommandLine cmdLine = parseOptions(cmdName, options, args);

        String modelName = cmdLine.getOptionValue("model");

        WdkModel wdkModel = WdkModel.construct(modelName, gusHome);
//        SanityTestXmlParser sanityParser = new SanityTestXmlParser(gusHome);
//        SanityModel sanityModel = sanityParser.parseModel(modelName, wdkModel);

        StressTemplater tester = new StressTemplater(wdkModel);

        // open the input/output file
        File outFile = new File(gusHome, "/config/" + modelName
                + "/stress.template");
        tester.makeTemplate(outFile);

        System.out.println("The template file for " + modelName
                + " has been saved at " + outFile.getAbsolutePath());
        System.exit(0);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc3729e7817384f9392102e7441e5ea50132" name="addOption" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="argName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="desc" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        Option option = new Option(argName, true, desc);
        option.setRequired(true);
        option.setArgName(argName);

        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0079b5c5a3e24007a713d98ea53edbb9132" name="declareOptions" type="Options" type-id="Options" visibility="package" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Options options = new Options();

        // model name
        addOption(
                options,
                "model",
                "the name of the model.  This is used to find the Model XML file ($GUS_HOME/config/model_name.xml) the Model property file ($GUS_HOME/config/model_name.prop) and the Model config file ($GUS_HOME/config/model_name-config.xml)");

        return options;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0271b52e70614c5f95c616b3d99111f9132" name="parseOptions" type="CommandLine" type-id="CommandLine" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        CommandLineParser parser = new BasicParser();
        CommandLine cmdLine = null;
        try{
            // parse the command line arguments
            cmdLine = parser.parse(options, args);} catch (ParseException exp){
            // oops, something went wrong
            System.err.println("");
            System.err.println("Parsing failed.  Reason: " + exp.getMessage());
            System.err.println("");
            usage(cmdName, options);}

        return cmdLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="o705104720a984835bf85742f9f154c05132" name="usage" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        String newline = System.getProperty("line.separator");
        String cmdlineSyntax = cmdName + " -model model_name";

        String header = newline + "Preparing the template file for stress test"
                + newline + newline + "Options:";

        String footer = "";

        // PrintWriter stderr = new PrintWriter(System.err);
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(75, cmdlineSyntax, header, options, footer);
        System.exit(1);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di330118879681365192" cid="C320" type="class" name="QuestionItem" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:32">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a65decd3c4ce34919a24b104550cdf64b132" name="questionName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad448bae28e1948789a1226ec15cec043132" name="params" type="Map&lt;String, Set&lt;String&gt;&gt;" type-id="Map&lt;String, Set&lt;String&gt;&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o9d3706b3ca8d449fa596afaa3102c235132" name="QuestionItem" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.questionName = questionName;
            this.params = new LinkedHashMap&lt;String, Set&lt;String&gt;&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="o493fc892ff974e5fb3fe21ce525c0518132" name="getQuestionName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return this.questionName;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa3e982a7493f44a19d4e9c8621f57200132" name="addParamValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="paramValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            Set&lt;String&gt; values = params.get(paramName);
            if (values == null){
                values = new LinkedHashSet&lt;String&gt;();
                params.put(paramName, values);}
            if (paramValue != null &amp;&amp; paramValue.length() &gt; 0)
                values.add(paramValue);}</source-code>
          </source-codes>
        </operation>
        <operation id="o10d3765e377c4d98b16bf37ad5660cb7132" name="getParams" type="Map&lt;String, Set&lt;String&gt;&gt;" type-id="Map&lt;String, Set&lt;String&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return this.params;}}{</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di653482070708380836" cid="C321" type="class" name="RecordItem" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:32">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa277ad5084164e17af7ebb174857973d132" name="recordName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0162fe70de4f41658ca3bd65ab6e624f132" name="recordIds" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oaee214587634455a9e89b6231e213c80132" name="RecordItem" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.recordName = recordName;
            this.recordIds = new LinkedHashSet&lt;String&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1278d442d04247f28edcd5eb03816cbe132" name="getRecordName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return this.recordName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7bf82ef3c7e640ee87f18a60263fb9e3132" name="addRecordId" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            recordIds.add(recordId);}</source-code>
          </source-codes>
        </operation>
        <operation id="o63627f196ea9474b9290849dd2f3dfb0132" name="getRecordIds" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return recordIds;}}

    private static final Logger logger = Logger.getLogger(StressTemplater.class);
//    private SanityModel sanityModel;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di488951402706331728" cid="C322" type="class" name="StressTestAnalyzer" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:34">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a17f76df30a724d8a8986d643b7b1c51d918" name="testTag" type="long" type-id="long" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7a30e31ef91f437396cf80e8803b16e2918" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a14ff0b44375d41998ae2aa8d25f159fa919" name="dataSource" type="DataSource" type-id="DataSource" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oc6a11c4d94a941a890712c9b9bece6ae919" name="StressTestAnalyzer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="testTag" type="long" type-id="long" default-value="" />
            <parameter id="" name="modelName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, IOException, SAXException, SQLException,
            JSONException, WdkUserException, InstantiationException,
            IllegalAccessException, ClassNotFoundException{
        logger.info("Initializing stress test analyzer on " + modelName
                + " with test_tag=" + testTag);
        this.testTag = testTag;

        // load WdkModel
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        wdkModel = WdkModel.construct(modelName, gusHome);
        dataSource = wdkModel.getQueryPlatform().getDataSource();}</source-code>
          </source-codes>
        </operation>
        <operation id="o0941f43f50f247c7ab386b59897ff449919" name="getTaskCount" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkModelException,
            WdkUserException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT count(*) FROM " + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        return (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sb.toString(), "wdk-stress-result-count");}</source-code>
          </source-codes>
        </operation>
        <operation id="o30e0a1fe13a74beaabb04e5a52811245919" name="getTaskCount" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="taskType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT count(*) FROM " + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND task_type = '" + taskType + "'");
        return (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sb.toString(), "wdk-stress-result-count-by-type");}</source-code>
          </source-codes>
        </operation>
        <operation id="o56b898b47c904f5faadbfce1fc8ac63d919" name="getSucceededTaskCount" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkModelException,
            WdkUserException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT count(*) FROM " + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type = '" + ResultType.Succeeded.name() + "'");
        return (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sb.toString(), "wdk-stress-result-count-by-type");}</source-code>
          </source-codes>
        </operation>
        <operation id="oa93aa2d0ec744c969ce98af7f291d5ef919" name="getSucceededTaskCount" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="taskType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT count(*) FROM " + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type = '" + ResultType.Succeeded.name() + "'");
        sb.append(" AND task_type = '" + taskType + "'");
        return (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sb.toString(), "wdk-stress-result-count-by-type");}</source-code>
          </source-codes>
        </operation>
        <operation id="o0aa2ca7ac0064250bd9bad781380f59e919" name="getFailedTaskCount" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkModelException,
            WdkUserException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT count(*) FROM " + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type != '" + ResultType.Succeeded.name() + "'");
        return (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sb.toString(), "wdk-stress-result-count-by-type");}</source-code>
          </source-codes>
        </operation>
        <operation id="o1b79dae1c63d47e29a80874066902cdd919" name="getFailedTaskCount" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="taskType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT count(*) FROM " + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type != '" + ResultType.Succeeded.name() + "'");
        sb.append(" AND task_type = '" + taskType + "'");
        return (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sb.toString(), "wdk-stress-result-count-by-type");}</source-code>
          </source-codes>
        </operation>
        <operation id="oab5c5c0e46eb4205ae95d84fd0a2e0dd919" name="getTaskCount" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="resultType" type="ResultType" type-id="ResultType" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT count(*) FROM " + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type = '" + resultType.name() + "'");
        return (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sb.toString(), "wdk-stress-result-count-by-type");}</source-code>
          </source-codes>
        </operation>
        <operation id="o89e8d7eedb3144e5935df2c5e44098a5919" name="getTaskCount" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="resultType" type="ResultType" type-id="ResultType" default-value="" />
            <parameter id="" name="taskType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException, WdkUserException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT count(*) FROM " + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type = '" + resultType.name() + "'");
        sb.append(" AND task_type = '" + taskType + "'");
        return (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sb.toString(), "wdk-stress-result-count-by-type");}</source-code>
          </source-codes>
        </operation>
        <operation id="o4257616091e5429f9f9363a84324f6c9919" name="getTaskSuccessRatio" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkModelException,
            WdkUserException{
        long total = getTaskCount();
        long succeeded = getSucceededTaskCount();
        return ((float) succeeded / total);}</source-code>
          </source-codes>
        </operation>
        <operation id="o762b2d6eed0e4f96b660c38c70545cbe919" name="getTaskSuccessRatio" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="taskType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException{
        long total = getTaskCount(taskType);
        long succeeded = getSucceededTaskCount(taskType);
        return (total == 0) ? 0 : ((float) succeeded / total);}</source-code>
          </source-codes>
        </operation>
        <operation id="od53a223fa6ac4b928b67bc2dadb042a4919" name="getTotalResponseTime" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT sum(end_time - start_time) FROM "
                + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                sb.toString(), "wdk-stress-response-time");
        rs.next();
        long sum = rs.getLong(1);
        SqlUtils.closeResultSet(rs);
        return (sum / 1000F);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2e881a78b0364426885c698c0ba4db83919" name="getTotalResponseTime" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="taskType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT sum(end_time - start_time) FROM "
                + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND task_type = '" + taskType + "'");
        ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                sb.toString(), "wdk-stress-response-time-by-type");
        rs.next();
        long sum = rs.getLong(1);
        SqlUtils.closeResultSet(rs);
        return (sum / 1000F);}</source-code>
          </source-codes>
        </operation>
        <operation id="od5dbcf365fb24aee9d7a96473d688fc6919" name="getAverageResponseTime" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT avg(end_time - start_time) FROM "
                + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                sb.toString(), "wdk-stress-response");
        rs.next();
        float average = rs.getFloat(1);
        SqlUtils.closeResultSet(rs);
        return (average / 1000F);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4edb1c5b574648b3aeff4692077f25ad919" name="getAverageResponseTime" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="taskType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT avg(end_time - start_time) FROM "
                + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND task_type = '" + taskType + "'");
        ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                sb.toString(), "wdk-stress-response-time-by-type");
        rs.next();
        float average = rs.getFloat(1);
        SqlUtils.closeResultSet(rs);
        return (average / 1000F);}</source-code>
          </source-codes>
        </operation>
        <operation id="o92a52ca09044424aa3f6eb0414ea5ad7919" name="getTotalSucceededResponseTime" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT sum(end_time - start_time) FROM "
                + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type = '" + ResultType.Succeeded.name() + "'");
        ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                sb.toString(), "wdk-stress-response-time-by-type");
        rs.next();
        long sum = rs.getLong(1);
        SqlUtils.closeResultSet(rs);
        return (sum / 1000F);}</source-code>
          </source-codes>
        </operation>
        <operation id="o721e31b026524238935d2fe40f223851919" name="getTotalSucceededResponseTime" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="taskType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT sum(end_time - start_time) FROM "
                + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type = '" + ResultType.Succeeded.name() + "'");
        sb.append(" AND task_type = '" + taskType + "'");
        ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                sb.toString(), "wdk-stress-response-time-by-type");
        rs.next();
        long sum = rs.getLong(1);
        SqlUtils.closeResultSet(rs);
        return (sum / 1000F);}</source-code>
          </source-codes>
        </operation>
        <operation id="oed7e848a2528424cae2d21af2f2ef2a6919" name="getAverageSucceededResponseTime" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT avg(end_time - start_time) FROM "
                + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type = '" + ResultType.Succeeded.name() + "'");
        ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                sb.toString(), "wdk-stress-response-time-by-type");
        rs.next();
        float average = rs.getFloat(1);
        SqlUtils.closeResultSet(rs);
        return (average / 1000F);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3af5bc0c6b974aa3afc73600abb43b9c919" name="getAverageSucceededResponseTime" type="float" type-id="float" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="taskType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        StringBuffer sb = new StringBuffer();
        sb.append("SELECT avg(end_time - start_time) FROM "
                + StressTester.TABLE_STRESS_RESULT);
        sb.append(" WHERE test_tag = " + testTag);
        sb.append(" AND result_type = '" + ResultType.Succeeded.name() + "'");
        sb.append(" AND task_type = '" + taskType + "'");
        ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                sb.toString(), "wdk-stress-response-time-by-type");
        rs.next();
        float average = rs.getFloat(1);
        SqlUtils.closeResultSet(rs);
        return (average / 1000F);}</source-code>
          </source-codes>
        </operation>
        <operation id="obcca515e9b9645b08a98516430c80f20919" name="print" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkModelException,
            WdkUserException{
        // print out results

        // print out all types results
        System.out.println("------------------ All Types --------------------");
        System.out.println("# of Total Tasks: " + getTaskCount());
        System.out.print("# of Succeeded Tasks: " + getSucceededTaskCount());
        System.out.println("\t (" + (getTaskSuccessRatio() * 100) + "%)");
        System.out.println("# of Failed Tasks: " + getFailedTaskCount());
        System.out.println("# of IO Connection Error: "
                + getTaskCount(ResultType.ConnectionError));
        System.out.println("# of HTTP Error: "
                + getTaskCount(ResultType.HttpError));
        System.out.println("# of Application Error: "
                + getTaskCount(ResultType.ApplicationException));
        System.out.print("Response Time - Total: " + getTotalResponseTime());
        System.out.println("\tAverage: " + getAverageResponseTime());
        System.out.print("SucceededResponse Time - Total: "
                + getTotalSucceededResponseTime());
        System.out.println("\tAverage: " + getAverageSucceededResponseTime());

        // print out specific types results
        String[ types ={ StressTester.TYPE_HOME_URL,
                StressTester.TYPE_QUESTION_URL,
                StressTester.TYPE_XML_QUESTION_URL,
                StressTester.TYPE_RECORD_URL};
        for (String type : types){
            System.out.println();
            System.out.println("------------------ Type: " + type
                    + " --------------------");
            System.out.println("# of Total Tasks: " + getTaskCount(type));
            System.out.print("# of Succeeded Tasks: "
                    + getSucceededTaskCount(type));
            System.out.println("\t (" + (getTaskSuccessRatio(type) * 100)
                    + "%)");
            System.out.println("# of Failed Tasks: " + getFailedTaskCount(type));
            System.out.println("# of Connection Error: "
                    + getTaskCount(ResultType.ConnectionError, type));
            System.out.println("# of HTTP Error: "
                    + getTaskCount(ResultType.HttpError, type));
            System.out.println("# of Application Error: "
                    + getTaskCount(ResultType.ApplicationException, type));
            System.out.print("Response Time - Total: "
                    + getTotalResponseTime(type));
            System.out.println("\tAverage: " + getAverageResponseTime(type));
            System.out.print("SucceededResponse Time - Total: "
                    + getTotalSucceededResponseTime(type));
            System.out.println("\tAverage: "
                    + getAverageSucceededResponseTime(type));}}</source-code>
          </source-codes>
        </operation>
        <operation id="o08a076f4b3b64c87bf9039a9e1ebbf1d920" name="declareOptions" type="Options" type-id="Options" visibility="private" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ names ={ "model", "tag"};
        String[ descs ={
                "the name of the model.  This is used to find the Model XML "
                        + "file ($GUS_HOME/config/model_name.xml) the Model "
                        + "property file ($GUS_HOME/config/model_name.prop) "
                        + "and the Model config file "
                        + "($GUS_HOME/config/model_name-config.xml)",
                "The test tag of the stress test to be analyzed."};
        boolean[ required ={ true, true};
        int[ args ={ 0, 0};

        return CommandHelper.declareOptions(names, descs, required, args);}

    /**
     * @param args
     * @throws WdkModelException
     * @throws IOException
     * @throws InvalidPropertiesFormatException
     * @throws URISyntaxException
     * @throws WdkUserException
     * @throws SQLException
     * @throws ClassNotFoundException
     * @throws IllegalAccessException
     * @throws InstantiationException
     * @throws JSONException
     * @throws SAXException
     * @throws TransformerException
     * @throws TransformerFactoryConfigurationError
     * @throws ParserConfigurationException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3ae85898360e48a6ab0cd0905b55b74a920" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws InvalidPropertiesFormatException, IOException,
            WdkModelException, URISyntaxException, WdkUserException,
            SQLException, NoSuchAlgorithmException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, SAXException, JSONException,
            InstantiationException, IllegalAccessException,
            ClassNotFoundException{
        String cmdName = System.getProperty("cmdName");

        // process args
        Options options = declareOptions();
        CommandLine cmdLine = CommandHelper.parseOptions(cmdName, options, args);

        String modelName = cmdLine.getOptionValue("model");
        String testTagStr = cmdLine.getOptionValue("tag");
        long testTag = Long.parseLong(testTagStr);

        // create tester
        StressTestAnalyzer analyzer = new StressTestAnalyzer(testTag, modelName);
        // run tester
        analyzer.print();
        System.exit(0);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di877077706344871162" cid="C323" type="class" name="StressTester" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:38">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a137117eb76f541a6830924f90f65b119704" name="urlPool" type="List&lt;UrlItem&gt;" type-id="List&lt;UrlItem&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3c12653ba9c14ecbbb26bd69206f3546704" name="questionCache" type="Map&lt;String, Map&lt;String, Set&lt;String&gt;&gt;&gt;" type-id="Map&lt;String, Map&lt;String, Set&lt;String&gt;&gt;&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad2aa009b839247cc9be02cac0b2b52e3704" name="questionUrlPattern" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5a4dcc1747254bda93507026bd032faf704" name="xmlQuestionUrlPattern" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a28cc50b24ec64d2eb9e091ccdfde0958704" name="recordUrlPattern" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aafb53271b5624c59945756f04d024088704" name="homeUrlPattern" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0a6018ee6ebb4dd9b46f969085ed7743704" name="otherUrls" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae3843dde4a814b56aacfa99c2447ba87704" name="runners" type="List&lt;StressTestRunner&gt;" type-id="List&lt;StressTestRunner&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8bf6891344354748b8511fc36ca57ddf704" name="modelName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af5b8858c16c5401a9004f7d84b478d2e704" name="gusHome" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="afb9d0965c25a485080b9ddae40eb6784704" name="maxDelayTime" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aeea8fab4c57845e7a68da08e395dd988704" name="minDelayTime" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aead5982ed77348a68d87db810878506e704" name="rand" type="Random" type-id="Random" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5154d63490554f5c938a2f92f910cad3705" name="testTag" type="long" type-id="long" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9507ad6169164a2d8f343a4e89065531705" name="dataSource" type="DataSource" type-id="DataSource" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0c4a55dbf1764cd1bfe0a07cea98848e705" name="preparedStatement" type="PreparedStatement" type-id="PreparedStatement" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a937adf901d4a4f9f9358e106813500a2705" name="finishedCount" type="long" type-id="long" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5215a5936f9f4be091e03ec9411e2810705" name="succeededCount" type="long" type-id="long" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o44228505d5364a308abdd34b5dc08f5f705" name="StressTester" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="modelName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws InvalidPropertiesFormatException, IOException,
            WdkModelException, URISyntaxException, WdkUserException,
            NoSuchAlgorithmException, ParserConfigurationException,
            TransformerFactoryConfigurationError, TransformerException,
            SAXException, SQLException, JSONException, InstantiationException,
            IllegalAccessException, ClassNotFoundException{
        logger.info("Initializing stress test on " + modelName);

        urlPool = new ArrayList&lt;UrlItem&gt;();
        otherUrls = new LinkedHashMap&lt;String, String&gt;();
        questionCache = new LinkedHashMap&lt;String, Map&lt;String, Set&lt;String&gt;&gt;&gt;();
        runners = new ArrayList&lt;StressTestRunner&gt;();
        rand = new Random(System.currentTimeMillis());
        finishedCount = succeededCount = 0;

        this.modelName = modelName;
        gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        // load the model
        WdkModel wdkModel = WdkModel.construct(modelName, gusHome);
        dataSource = wdkModel.getQueryPlatform().getDataSource();

        // initialize the stress-test result table
        try{
            initializeResultTable(wdkModel);
            // get a new test_tag
            testTag = getNewTestTag(wdkModel);
            System.out.println("The curent test tag is: " + testTag);} catch (SQLException ex){
            throw new WdkModelException(ex);}

        // load configurations
        loadProperties(wdkModel);
        // compose the testing urls
        composeUrls(wdkModel);}</source-code>
          </source-codes>
        </operation>
        <operation id="o07fef8a81adb45428ef070090ec6fcbb705" name="initializeResultTable" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        // check if result table exists
        try{
            ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                    "SELECT * FROM " + TABLE_STRESS_RESULT, "wdk-stress-result");
            SqlUtils.closeResultSet(rs);} catch (SQLException e){
            // table doesn't exist, create it
            DBPlatform platform = wdkModel.getQueryPlatform();
            String numericType = platform.getNumberDataType(20);
            String textType = platform.getClobDataType();

            StringBuffer sb = new StringBuffer();
            sb.append("CREATE TABLE " + TABLE_STRESS_RESULT + " (");
            sb.append("test_tag " + numericType + " not null, ");
            sb.append("task_id " + numericType + " not null, ");
            sb.append("runner_id " + numericType + " not null, ");
            sb.append("task_type varchar(100) not null, ");
            sb.append("start_time " + numericType + " not null, ");
            sb.append("end_time " + numericType + " not null, ");
            sb.append("result_type varchar(100) not null, ");
            sb.append("result_message " + textType + ", ");
            sb.append(" PRIMARY KEY(test_tag, task_id))");

            // create the result table
            SqlUtils.executeUpdate(wdkModel, dataSource, sb.toString(),
                    "wdk-create-table");}
        // initialize update prepared statement
        StringBuffer sb = new StringBuffer();
        sb.append("INSERT INTO " + TABLE_STRESS_RESULT);
        sb.append(" (test_tag, task_id, runner_id, task_type, start_time, ");
        sb.append("end_time, result_type, result_message)");
        sb.append(" VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
        preparedStatement = SqlUtils.getPreparedStatement(dataSource,
                sb.toString());}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c6c7ec2ed884d2e80d1ad31f629bbd1705" name="getNewTestTag" type="long" type-id="long" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        ResultSet rs = SqlUtils.executeQuery(wdkModel, dataSource,
                "SELECT count(0), max(test_tag) FROM " + TABLE_STRESS_RESULT,
                "wdk-stress-next-tag");
        long testTag = 0;
        rs.next();
        int count = rs.getInt(1);
        if (count &gt; 0) testTag = rs.getLong(2);
        SqlUtils.closeResultSet(rs);
        return (testTag + 1);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe3e31ce900a448baad3b8625d13ee120705" name="loadProperties" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws InvalidPropertiesFormatException, IOException{
        logger.debug("Loading stress test configurations...");

        // load stress test configuration file
        File stressConfigFile = new File(gusHome, "/config/" + modelName
                + "/stress-config.xml");
        InputStream in = new FileInputStream(stressConfigFile);
        Properties properties = new Properties();
        properties.loadFromXML(in);

        // load properties
        questionUrlPattern = properties.getProperty(FIELD_QUESTION_URL);
        xmlQuestionUrlPattern = properties.getProperty(FIELD_XML_QUESTION_URL);
        recordUrlPattern = properties.getProperty(FIELD_RECORD_URL);
        homeUrlPattern = properties.getProperty(FIELD_HOME_URL);
        String maxDelay = properties.getProperty(FIELD_MAX_DELAY_TIME);
        maxDelayTime = Integer.parseInt(maxDelay);
        String minDelay = properties.getProperty(FIELD_MIN_DELAY_TIME);
        minDelayTime = Integer.parseInt(minDelay);

        // load other urls
        for (Object key : properties.keySet()){
            String urlKey = (String) key;
            if (!urlKey.startsWith(FIELD_URL_PREFIX)) continue;
            String urlValue = properties.getProperty(urlKey);
            otherUrls.put(urlValue, urlKey);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o337a1066b9cb41d29d4c66b3fdcf3f28705" name="composeUrls" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, URISyntaxException, IOException,
            NoSuchAlgorithmException, SQLException, JSONException{
        logger.debug("Composing test urls...");
        // add home url into the pool
        if (homeUrlPattern != null){
            UrlItem homeUrl = new UrlItem(homeUrlPattern, TYPE_HOME_URL);
            urlPool.add(homeUrl);}

        // get other urls
        for (String urlKey : otherUrls.keySet()){
            String urlValue = otherUrls.get(urlKey);
            UrlItem urlItem = new UrlItem(urlKey, urlValue);
            urlPool.add(urlItem);}

        // compose urls from the model
        composeFromModel(wdkModel);

        // compose urls from stress test template
        composeFromTemplate();}</source-code>
          </source-codes>
        </operation>
        <operation id="o3d38733eb0484e64b78d77266c23abf6705" name="composeFromModel" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        // compose urls for all xml questions
        XmlQuestionSet[ xmlqsets = wdkModel.getXmlQuestionSets();
        for (XmlQuestionSet xmlqset : xmlqsets){
            XmlQuestion[ xmlqs = xmlqset.getQuestions();
            for (XmlQuestion xmlq : xmlqs){
                String xmlqName = xmlq.getFullName();
                UrlItem xmlQuestionUrl = new UrlItem(xmlQuestionUrlPattern
                        + "?name=" + xmlqName, TYPE_XML_QUESTION_URL);
                urlPool.add(xmlQuestionUrl);}}

        // load questions from the model
        questionCache.clear();
        QuestionSet[ qsets = wdkModel.getAllQuestionSets();
        for (QuestionSet qset : qsets){
            // skip the internal questions
            if (qset.isInternal()) continue;

            Question[ questions = qset.getQuestions();
            for (Question question : questions){
                // create question cache, and create param stub, and load the
                // vocab params
                String qName = question.getFullName();
                Param[ params = question.getParams();
                Map&lt;String, Set&lt;String&gt;&gt; paramMap = new LinkedHashMap&lt;String, Set&lt;String&gt;&gt;();
                boolean unusable = false;
                for (Param param : params){
                    Set&lt;String&gt; values = new LinkedHashSet&lt;String&gt;();
                    if (param instanceof FlatVocabParam){
                        FlatVocabParam fvParam = (FlatVocabParam) param;
                        String[ terms = fvParam.getVocab(null); // assume independent param
                        for (String term : terms){
                            values.add(term);}} else if (param instanceof AnswerParam
                            || param instanceof DatasetParam){
                        unusable = true;
                        break;}
                    paramMap.put(param.getName(), values);}
                if (!unusable) questionCache.put(qName, paramMap);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o335805fe1eb144edb32ce09a208af7ca705" name="composeFromTemplate" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        logger.info("Loading test cases from template files");
        File templateFile = new File(gusHome, "/config/" + modelName
                + "/stress.template");

        try{
            BufferedReader reader = new BufferedReader(new FileReader(
                    templateFile));

            String line = null;
            String questionName = null;
            while ((line = reader.readLine()) != null){
                line = line.trim();
                String lowerCase = line.toLowerCase();
                if (lowerCase.startsWith("question")){
                    questionName = null; // clear the old question
                    int pos = line.indexOf(":");
                    if (pos &gt; 0){
                        questionName = line.substring(pos + 1).trim();}} else if (lowerCase.startsWith("param")){
                    if (questionName != null){
                        Map&lt;String, Set&lt;String&gt;&gt; paramMap = questionCache.get(questionName);
                        int pos = line.indexOf(":");
                        if (paramMap != null &amp;&amp; pos &gt; 0){
                            line = line.substring(pos + 1).trim();
                            pos = line.indexOf("=");
                            if (pos &gt; 0){
                                String paramName = line.substring(0, pos).trim();
                                Set&lt;String&gt; paramValues = paramMap.get(paramName);
                                if (paramValues != null){
                                    String valueString = line.substring(pos + 1).trim();
                                    String[ values = valueString.split(",");
                                    for (String value : values){
                                        paramValues.add(value.trim());}}}}}} else if (lowerCase.startsWith("record")){
                    int pos = line.indexOf(":");
                    if (pos &gt; 0){
                        line = line.substring(pos + 1).trim();
                        pos = line.indexOf("=");
                        if (pos &gt; 0){
                            String recordName = line.substring(0, pos).trim();

                            String idString = line.substring(pos + 1).trim();
                            String[ ids = idString.split(",");
                            for (String id : ids){
                                id = id.trim();
                                if (id.length() == 0) continue;

                                StringBuffer sb = new StringBuffer(
                                        recordUrlPattern);
                                sb.append("?name=" + recordName);
                                sb.append("&amp;primary_key="
                                        + URLEncoder.encode(id, "UTF-8"));
                                UrlItem recordUrl = new UrlItem(sb.toString(),
                                        TYPE_RECORD_URL);
                                urlPool.add(recordUrl);}}}} // other line types are ignored}

            reader.close();} catch (IOException ex){
            throw new WdkModelException(ex);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o0115a4196aa24af1ac37f628766af2a0705" name="runTest" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="numThreads" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        logger.info("Running stress test...");

        // create stress test runners
        for (int i = 0; i &lt; numThreads; i++){
            StressTestRunner runner = new StressTestRunner();
            Thread thread = new Thread(runner);
            thread.start();
            runners.add(runner);}

        // wait till all tasks are executed
        while (!isStopping()){
            // get the finished tasks and release runner
            for (StressTestRunner runner : runners){
                if (runner.getState() == RunnerState.Finished){
                    try{
                        saveFinishedTask(runner.popFinishedTask());} catch (SQLException ex){
                        logger.error(ex);
                        ex.printStackTrace();}}
                // randomly pick a task to the idling runners;
                if (runner.getState() == RunnerState.Idle){
                    StressTestTask task = createTask();
                    int delay = rand.nextInt(maxDelayTime - minDelayTime)
                            + minDelayTime;
                    try{
                        runner.assignTask(task, delay);} catch (InvalidStatusException ex){
                        logger.error(ex);
                        ex.printStackTrace();}}}

            // print out the current statistics
            logger.info("Idle: " + getIdleCount() + "\tBusy: " + getBusyCount()
                    + "\tFinished: " + finishedCount + "/" + succeededCount);

            try{
                Thread.sleep(5 * 1000);} catch (InterruptedException ex){}
            // print out current progress}
        // stop runners
        for (StressTestRunner runner : runners){
            runner.stop();}
        // wait until all runners are stopped
        boolean stopped = false;
        while (!stopped){
            stopped = true;
            for (StressTestRunner runner : runners){
                if (!runner.isStopped()){
                    stopped = false;
                    break;}}
            if (!stopped){
                try{
                    Thread.sleep(500);} catch (InterruptedException ex){}}}
        SqlUtils.closeStatement(preparedStatement);
        logger.info("Stress Test is finished.");
        System.out.println("Stress Test is finished. The test tag is: "
                + testTag);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob06b15287aef450893c843170ffae081705" name="isStopping" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // check if the exit condition is met; that is, if a "model-stress.stop"
        // file is present
        File stopFile = new File(gusHome, "/config/" + modelName
                + "/stress.stop");
        return (stopFile.exists());}</source-code>
          </source-codes>
        </operation>
        <operation id="o7611b3e126914dc4ae4623c7d0fbb977705" name="createTask" type="StressTestTask" type-id="StressTestTask" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // choose from urlPool or question cache
        UrlItem urlItem;
        if (rand.nextInt(10) &gt;= 3){ // get from question cache
            StringBuffer url = new StringBuffer(questionUrlPattern);

            // choose question
            String[ questions = new String[questionCache.size();
            questionCache.keySet().toArray(questions);
            String questionName = questions[rand.nextInt(questions.length);
            url.append("?questionFullName=" + questionName);

            // choose parameters
            Map&lt;String, Set&lt;String&gt;&gt; params = questionCache.get(questionName);
            for (String param : params.keySet()){
                // choose value
                Set&lt;String&gt; valueSet = params.get(param);
                String[ values = new String[valueSet.size();
                valueSet.toArray(values);
                String value = values[rand.nextInt(values.length);
                try{
                    url.append("&amp;"
                            + URLEncoder.encode("value(" + param + ")",
                                    "utf-8"));
                    url.append("=" + URLEncoder.encode(value, "utf-8"));} catch (UnsupportedEncodingException ex){
                    throw new WdkModelException(ex);}}

            // create UrlItem. and pick parameters
            urlItem = new UrlItem(url.toString(), TYPE_QUESTION_URL);} else{ // get from url pool
            urlItem = urlPool.get(rand.nextInt(urlPool.size()));}
        return new StressTestTask(urlItem);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe5b8bce873ca478cb54c4878a09c1eea705" name="saveFinishedTask" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="task" type="StressTestTask" type-id="StressTestTask" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        preparedStatement.setLong(1, testTag);
        preparedStatement.setLong(2, task.getTaskId());
        preparedStatement.setInt(3, task.getRunnerId());
        preparedStatement.setString(4, task.getUrlItem().getUrlType());
        preparedStatement.setLong(5, task.getStartTime());
        preparedStatement.setLong(6, task.getFinishTime());
        preparedStatement.setString(7, task.getResultType().name());
        preparedStatement.setString(8, task.getResultMessage());

        preparedStatement.execute();
        finishedCount++;
        if (task.getResultType() == ResultType.Succeeded) succeededCount++;}</source-code>
          </source-codes>
        </operation>
        <operation id="o731625a5edfe4ed7b32540e2d2264592705" name="getIdleCount" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        int idle = 0;
        for (StressTestRunner runner : runners){
            if (runner.getState() != RunnerState.Executing) idle++;}
        return idle;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9012e5ad09094e328dcde1c50d24ebad705" name="getBusyCount" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        int busy = 0;
        for (StressTestRunner runner : runners){
            if (runner.getState() == RunnerState.Executing) busy++;}
        return busy;}</source-code>
          </source-codes>
        </operation>
        <operation id="o56e156dc94404d668affc79264294e9c705" name="declareOptions" type="Options" type-id="Options" visibility="private" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ names ={ "model", "threads"};
        String[ descs ={ "The project id. For example, ToyDB, PlasmoDB",
                "The number of threads used to run the tasks."};
        boolean[ required ={ true, true};
        int[ args ={ 0, 0};

        return CommandHelper.declareOptions(names, descs, required, args);}

    /**
     * @param args
     * @throws WdkModelException
     * @throws IOException
     * @throws InvalidPropertiesFormatException
     * @throws URISyntaxException
     * @throws WdkUserException
     * @throws SQLException
     * @throws ClassNotFoundException
     * @throws IllegalAccessException
     * @throws InstantiationException
     * @throws JSONException
     * @throws SAXException
     * @throws TransformerException
     * @throws TransformerFactoryConfigurationError
     * @throws ParserConfigurationException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0f6373cdff35445598f7e8173dc33899705" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws InvalidPropertiesFormatException, IOException,
            WdkModelException, URISyntaxException, WdkUserException,
            SQLException, NoSuchAlgorithmException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, SAXException, JSONException,
            InstantiationException, IllegalAccessException,
            ClassNotFoundException{
        String cmdName = System.getProperty("cmdName");

        // process args
        Options options = declareOptions();
        CommandLine cmdLine = CommandHelper.parseOptions(cmdName, options, args);

        String modelName = cmdLine.getOptionValue("model");
        String strThreads = cmdLine.getOptionValue("threads");
        int numThreads = Integer.parseInt(strThreads);

        // create tester
        StressTester tester = new StressTester(modelName);
        // run tester
        tester.runTest(numThreads);
        System.exit(0);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di854697043562377900" cid="C324" type="class" name="StressTestRunner" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:39">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations />
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di169805040163888136" cid="C325" type="class" name="StressTestTask" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:40">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations />
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di108038857148831517" cid="C326" type="class" name="UrlItem" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:40">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa998737426244d9693e98d2305d76f15599" name="urlPattern" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a685445fa521e4606bf01448736d4e563599" name="urlType" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o4f296676f1d24eb48cbef37a5153992d599" name="UrlItem" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="urlPattern" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="urlType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.urlPattern = urlPattern;
        this.urlType = urlType;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1c6d62c08dcf48fc915dc4f8539933cf599" name="getUrlPattern" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return urlPattern;}</source-code>
          </source-codes>
        </operation>
        <operation id="o074830b464494cfe95a01fdaa3c71d4f599" name="getUrlType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return urlType;}</source-code>
          </source-codes>
        </operation>
        <operation id="o69fb7648e76e461eb423cbdb88634d66599" name="getUrl" type="URL" type-id="URL" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws MalformedURLException{
        return new URL( urlPattern );}</source-code>
          </source-codes>
        </operation>
        <operation id="od4c8807c25ab41edaa40d6d01a3e0898599" name="getConnection" type="HttpURLConnection" type-id="HttpURLConnection" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cookies" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        URL url = new URL( urlPattern );
        HttpURLConnection connection = ( HttpURLConnection ) url.openConnection();
        connection.setRequestProperty( "User-Agent",
                "Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)" );
        if ( cookies != null )
            connection.setRequestProperty( "Cookie", cookies );
        return connection;}
    
    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o1cf4eeca7ec54a1da7b9bf456c7181f0599" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sb = new StringBuffer();
        sb.append( urlPattern );
        sb.append( " (" + urlType + ") " );
        return sb.toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di795003144882606908" cid="C327" type="class" name="Dumper" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:41">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o86f7f619b45948ee85e8f8e855ba7d8f921" name="main" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");

        // process arguments
        Options options = declareOptions();
        CommandLine cmdLine = parseOptions(cmdName, options, args);

        // get arguments
        String modelName = cmdLine.getOptionValue("model");
        String baseDir = cmdLine.getOptionValue("dir");
        String reporterName = cmdLine.getOptionValue("reporter");
        String questionName = cmdLine.getOptionValue("question");
        String outputFileName = cmdLine.getOptionValue("fileName");
        String[ questionParams = new String[0;
        if (cmdLine.hasOption("params"))
            questionParams = cmdLine.getOptionValues("params");
        String[ reporterConfig = new String[0;
        if (cmdLine.hasOption("config"))
            reporterConfig = cmdLine.getOptionValues("config");

        if (baseDir == null || baseDir.length() == 0) baseDir = ".";
        File dir = new File(baseDir);
        if (!dir.exists() || !dir.isDirectory()) dir.mkdirs();

        // create the file for output
        File outputFile = new File(dir, outputFileName);
        OutputStream out = new FileOutputStream(outputFile);

        // construct wdkModel
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        WdkModel wdkModel = WdkModel.construct(modelName, gusHome);
        User user = wdkModel.getSystemUser();

        // load selected question
        Question question = (Question) wdkModel.resolveReference(questionName);

        // prepare parameters
        Map&lt;String, String&gt; params = parseListArgs("params", questionParams);
        fillInParams(params, question);

        // load config
        Map&lt;String, String&gt; config = parseListArgs("config", reporterConfig);

        // Get the reporter
        AnswerValue answer = question.makeAnswerValue(user, params, 0);
        Reporter reporter = answer.createReport(reporterName, config);

        try{
            // initialize the reporter
            reporter.initialize();

            // write the reporter
            reporter.write(out);} finally{
            // complete the reporter
            reporter.complete();
            // flush the output stream
            out.flush();
            out.close();}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob78af4d03cb44f14b9b3df49cac47367921" name="fillInParams" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="params" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        Query query = question.getQuery();
        if (!query.getParamValuesSets().isEmpty()){
            ParamValuesSet pvs = query.getParamValuesSets().get(0);
            Map&lt;String, String&gt; map = pvs.getParamValues();
            for (String paramName : map.keySet()){
                if (!params.containsKey(paramName)){
                    params.put(paramName, map.get(paramName));}}}}</source-code>
          </source-codes>
        </operation>
        <operation id="oc9efebd91a9c4ac38cbe618b1fd9369f922" name="addOption" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="argName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="hasArg" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            String desc, boolean required){
        Option option = new Option(argName, hasArg, desc);
        option.setRequired(required);
        option.setArgName(argName);
        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7d164d6c297049d6b3198f0be96901e5922" name="addListOption" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="argName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String desc,
            boolean required){
        Option option = new Option(argName, false, desc);
        option.setArgName(argName);
        option.setArgs(Option.UNLIMITED_VALUES);
        option.setRequired(required);
        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="oeadc2d1cb1384a8aa5aebbb775bf0637922" name="declareOptions" type="Options" type-id="Options" visibility="package" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Options options = new Options();

        // model name
        addOption(options, "model", true, "The name of the model.  "
                + "This is used to find the "
                + "Model XML file ($GUS_HOME/config/model_name.xml) "
                + "the Model property file "
                + "($GUS_HOME/config/model_name.prop) "
                + "and the Model config file "
                + "($GUS_HOME/config/model_name-config.xml)", true);

        // query name
        addOption(options, "question", true,
                "The full name (set.element) of the question to run.", true);

        // reporter type
        addOption(options, "reporter", true, "The type of report to generate.",
                true);

        // output file name
        addOption(options, "fileName", true,
                "The name to use for the raw output file.", true);

        // base directory
        addOption(
                options,
                "dir",
                true,
                "The base directory for writing the report output.  If no directory is specified, the current directory is used.",
                false);

        // params
        addListOption(options, "params",
                "space delimited list of param_name param_value ....", false);

        // reporter config
        addListOption(options, "config",
                "space delimited list of property_name property_value ....",
                false);

        return options;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7de825cd06714cd1b741cfc3bdd5029e922" name="usage" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        String cmdlineSyntax = cmdName + " -model model_name"
                + " -question full_question_name" + " -dir base_dir"
                + " -type report_type"
                + " [-params param_1_name param_1_value ...]"
                + " [-config property_1_name property_1_value ...]";

        String header = newline
                + "Run a reporter from the command line, and dump output to files."
                + newline + newline + "Options:";

        String footer = " ";

        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(cmdlineSyntax, header, options, footer);
        System.exit(1);}</source-code>
          </source-codes>
        </operation>
        <operation id="od1ba4a1a4b01443e8cf10a5bd28b4589922" name="parseOptions" type="CommandLine" type-id="CommandLine" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        CommandLineParser parser = new BasicParser();
        CommandLine cmdLine = null;
        try{
            // parse the command line arguments
            cmdLine = parser.parse(options, args);} catch (ParseException exp){
            // oops, something went wrong
            System.err.println("");
            System.err.println("Parsing failed.  Reason: " + exp.getMessage());
            System.err.println("");
            usage(cmdName, options);}

        return cmdLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocb4db8e31b694e2bbd76d56e712600d1922" name="parseListArgs" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="argName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="inputValues" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        Map&lt;String, String&gt; argValues = new LinkedHashMap&lt;String, String&gt;();

        if (inputValues.length % 2 != 0){
            throw new IllegalArgumentException("The -" + argName
                    + " option must be followed by key value pairs only");}
        for (int i = 0; i &lt; inputValues.length; i += 2){
            argValues.put(inputValues[i, inputValues[i + 1);}

        return argValues;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di429004277180121777" cid="C328" type="class" name="DumperHelp" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:42">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="oede69f8d757a4ccfb3fb2525130d995d756" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
	String cmdName = System.getProperty("cmdName");

	Options options = declareOptions();
	CommandLine cmdLine = parseOptions(cmdName, options, args);

	String modelName = cmdLine.getOptionValue("model");
	String reporterName = cmdLine.getOptionValue("reporter");
	String questionName = cmdLine.getOptionValue("question");

	String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
	WdkModel wdkModel = WdkModel.construct(modelName, gusHome);
	User user = wdkModel.getSystemUser();

	Question question = (Question) wdkModel.resolveReference(questionName);

	Map&lt;String, String&gt; params = new LinkedHashMap&lt;String,String&gt;();
	fillInParams(params, question);

	Map&lt;String, String&gt; emptyConfig = new LinkedHashMap&lt;String,String&gt;();

	AnswerValue answer = question.makeAnswerValue(user, params, 0);
	Reporter reporter = answer.createReport(reporterName, emptyConfig);

	System.out.println("Help for reporter: " + reporterName);
	System.out.println();
	System.out.println(reporter.getDescription());
	System.out.println();
	System.out.println("Properties: ");
	System.out.println(reporter.getPropertyInfo());
	System.out.println("Config options: ");
	System.out.println(reporter.getConfigInfo());
	System.out.println();}</source-code>
          </source-codes>
        </operation>
        <operation id="o55d65c6aebd84123946ca44cba3cdf9a756" name="fillInParams" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="params" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
	throws WdkModelException, NoSuchAlgorithmException, SQLException,
	       JSONException, WdkUserException{
	Query query = question.getQuery();
        if (!query.getParamValuesSets().isEmpty()){
            ParamValuesSet pvs = query.getParamValuesSets().get(0);
            Map&lt;String, String&gt; map = pvs.getParamValues();
            for (String paramName : map.keySet()){
                if (!params.containsKey(paramName)){
                    params.put(paramName, map.get(paramName));}}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o716b7f839351444b9c74825ee3410b4f756" name="declareOptions" type="Options" type-id="Options" visibility="package" abstract="false" virtual="false" static="true">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Options options = new Options();

        // model name
        addOption(options, "model", true,
                "The name of the model.  This is used to find the Model XML file ($GUS_HOME/config/model_name.xml) the Model property file ($GUS_HOME/config/model_name.prop) and the Model config file ($GUS_HOME/config/model_name-config.xml)", true);

        // query name
        addOption(options, "question", true,
                "The full name (set.element) of the question to run.", true);

        // reporter type
        addOption(options, "reporter", true,
                "The type of report to generate.", true);

        return options;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5cf0c49368954df9bcf520460573c1de756" name="addOption" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
            <parameter id="" name="argName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="desc" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> boolean required){
        Option option = new Option(argName, hasArg, desc);
        option.setRequired(required);
        option.setArgName(argName);
        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="odd6041c5f51e42f88b80bf5470979dbc756" name="parseOptions" type="CommandLine" type-id="CommandLine" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            String[ args){

        CommandLineParser parser = new BasicParser();
        CommandLine cmdLine = null;
        try{
            // parse the command line arguments
            cmdLine = parser.parse(options, args);} catch (ParseException exp){
            // oops, something went wrong
            System.err.println("");
            System.err.println("Parsing failed.  Reason: " + exp.getMessage());
            System.err.println("");
            usage(cmdName, options);}

        return cmdLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3f14f28cfb5b4369ad3eee965e05c8a7756" name="usage" type="" type-id="" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="cmdName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="options" type="Options" type-id="Options" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        String cmdlineSyntax = cmdName + " -model model_name"
	    + " -question full_question_name"
	    + " -reporter reporter_name";

        String header = newline
                + "Prints the properties and config options for a reporter to the console."
                + newline + newline + "Options:";

        String footer = " ";

        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(cmdlineSyntax, header, options, footer);
        System.exit(1);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di118929849852979967" cid="C329" type="class" name="FullRecordCachedReporter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:44">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a59e8c14f63014a35aef387a5308072ca858" name="tableCache" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af04315854f97444e8285b506afaefc4c858" name="recordIdColumn" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af1a4e50607514354bb9742b36114d3b3858" name="hasEmptyTable" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oa155262a0aef4142b4db3de94ce65932858" name="FullRecordCachedReporter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(answerValue, startIndex, endIndex);}

    /**
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#setProperties(java.util.Map)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o08a8d0456f774425936490b881695929858" name="setProperties" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="properties" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        super.setProperties(properties);

        // check required properties
        tableCache = properties.get(PROPERTY_TABLE_CACHE);
        recordIdColumn = properties.get(PROPERTY_RECORD_ID_COLUMN);

        if (tableCache == null || tableCache.length() == 0)
            throw new WdkModelException("The required property for reporter "
                    + this.getClass().getName() + ", " + PROPERTY_TABLE_CACHE
                    + ", is missing");

        if (recordIdColumn == null || recordIdColumn.length() == 0)
            throw new WdkModelException("The required property for reporter "
                    + this.getClass().getName() + ", "
                    + PROPERTY_RECORD_ID_COLUMN + ", is missing");}

    /*
     * 
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6fb5f7ad71e64fedb066a021e8c85825858" name="configure" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="config" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super.configure(config);

        // get basic configurations
        if (config.containsKey(FIELD_HAS_EMPTY_TABLE)){
            String value = config.get(FIELD_HAS_EMPTY_TABLE);
            hasEmptyTable = (value.equalsIgnoreCase("yes") || value.equalsIgnoreCase("true")) ? true
                    : false;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o0d9ff20dc92443e18d37460fe8cd7107858" name="getConfigInfo" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "This reporter does not have config info yet.";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getHttpContentType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5aa43e1326524e66a8b0ab63cd1b753a858" name="getHttpContentType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (format.equalsIgnoreCase("text")){
            return "text/plain";} else{ // use the default content type defined in the parent class
            return super.getHttpContentType();}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getDownloadFileName()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob93ed0c64fc84aa388da9a0dd2d9540b858" name="getDownloadFileName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        logger.info("Internal format: " + format);
        String name = getQuestion().getName();
        if (format.equalsIgnoreCase("text")){
            return name + "_detail.txt";} else{ // use the defaul file name defined in the parent
            return super.getDownloadFileName();}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.report.IReporter#format(org.gusdb.wdk.model.Answer)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8f15302a2c9e4b06b6e09d42227de27c858" name="write" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="out" type="OutputStream" type-id="OutputStream" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        // get the columns that will be in the report
        Set&lt;Field&gt; fields = validateColumns();

        Set&lt;AttributeField&gt; attributes = new LinkedHashSet&lt;AttributeField&gt;();
        Set&lt;TableField&gt; tables = new LinkedHashSet&lt;TableField&gt;();
        for (Field field : fields){
            if (field instanceof AttributeField){
                attributes.add((AttributeField) field);} else if (field instanceof TableField){
                tables.add((TableField) field);}}

        PrintWriter writer = new PrintWriter(new OutputStreamWriter(out));
        formatRecord2Text(attributes, tables, writer);
        writer.flush();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa83db040f3c2416c9cb30fb97149725a858" name="validateColumns" type="Set&lt;Field&gt;" type-id="Set&lt;Field&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // get a map of report maker fields
        Map&lt;String, Field&gt; fieldMap = getQuestion().getFields(
                FieldScope.REPORT_MAKER);

        // the config map contains a list of column names;
        Set&lt;Field&gt; columns = new LinkedHashSet&lt;Field&gt;();

        String fieldsList = config.get(FIELD_SELECTED_COLUMNS);
        if (fieldsList == null){
            columns.addAll(fieldMap.values());} else{
            String[ fields = fieldsList.split(",");
            for (String column : fields){
                column = column.trim();
                if (fieldMap.containsKey(column)){
                	columns.add(fieldMap.get(column));}}}
        return columns;}</source-code>
          </source-codes>
        </operation>
        <operation id="o183023a525834f6ea9f3f8f72a660afb858" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="writer" type="PrintWriter" type-id="PrintWriter" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, SQLException, NoSuchAlgorithmException,
            JSONException, WdkUserException{
        logger.debug("Include empty table: " + hasEmptyTable);

        // construct in clause
        StringBuffer sqlIn = new StringBuffer();
        // add a dummy table name to make sure the constructed sql is valid, in
        // case none of the table names are selected.
        sqlIn.append("'WDK_DUMMY_TABLE'");
        for (TableField table : tables){
            sqlIn.append(", '" + table.getName() + "'");}
        RecordClass recordClass = getQuestion().getRecordClass();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // construct the SQL by join cache table with data table
        StringBuffer sql = new StringBuffer("SELECT ");
        sql.append("table_name, row_count, content ");
        sql.append("FROM ").append(tableCache);
        for (int index = 0; index &lt; pkColumns.length; index++){
            sql.append((index == 0) ? " WHERE " : " AND ");
            sql.append(pkColumns[index).append(" = ?");}

        // get the result from database
        DBPlatform platform = getQuestion().getWdkModel().getQueryPlatform();
        PreparedStatement ps = null;
        try{
            ps = SqlUtils.getPreparedStatement(platform.getDataSource(),
                    sql.toString());

            // get page based answers with a maximum size (defined in
            // PageAnswerIterator)
            for (AnswerValue answerValue : this){
                for (RecordInstance record : answerValue.getRecordInstances()){
                    // print out attributes of the record first
                    for (AttributeField attribute : attributes){
                        AttributeValue value = record.getAttributeValue(attribute.getName());
                        writer.println(attribute.getDisplayName() + ": "
                                + value.getValue());}
                    writer.println();
                    writer.flush();

                    // skip he following section if no table field is selected
                    if (tables.size() == 0) continue;

                    // get the cached data of the record
                    Map&lt;String, String&gt; pkValues = record.getPrimaryKey().getValues();
                    long start = System.currentTimeMillis();
                    for (int index = 0; index &lt; pkColumns.length; index++){
                        Object value = pkValues.get(pkColumns[index);
                        ps.setObject(index + 1, value);}
                    ResultSet resultSet = ps.executeQuery();
                    SqlUtils.verifyTime(wdkModel, sql.toString(),
                            "wdk-report-full-select-cache", start);
                    Map&lt;String, String&gt; tableValues = new LinkedHashMap&lt;String, String&gt;();
                    while (resultSet.next()){
                        // check if display empty tables
                        int size = resultSet.getInt("row_count");
                        if (!hasEmptyTable &amp;&amp; size == 0) continue;

                        String tableName = resultSet.getString("table_name");
                        String content = platform.getClobData(resultSet,
                                "content");
                        tableValues.put(tableName, content);}
                    resultSet.close();

                    // output the value, preserving the order
                    for (TableField table : tables){
                        String tableName = table.getName();
                        if (tableValues.containsKey(tableName))
                            writer.println(tableValues.get(tableName));
                        writer.flush();}
                    writer.println();
                    writer.println("------------------------------------------------------------");
                    writer.println();
                    writer.flush();}}
            writer.flush();} finally{
            SqlUtils.closeStatement(ps);}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9b69312138a74b218085542c138bb282858" name="complete" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o616c8a9998ba4c7da42ffdfea4c66fcf858" name="initialize" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di418840859720731935" cid="C330" type="class" name="FullRecordReporter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:48">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab000faa433f247a997a98f1761f38eba231" name="tableCache" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a54f99e656f2f47848a5f48c0f242a737231" name="recordIdColumn" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0cb543831b21494798746ce2c906896d231" name="hasEmptyTable" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="ab2940bf1ae6b4c44be1b700c421055a7231" name="sqlInsert" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae7b49c4c16404b99b151de5b48ac4349231" name="sqlQuery" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o17649744dff64f0b86ccae3160756ca4231" name="FullRecordReporter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(answerValue, startIndex, endIndex);}

    /**
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#setProperties(java.util.Map)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o665ba9bfe70849158b1539dc8ce98c9e231" name="setProperties" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="properties" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        super.setProperties(properties);

        tableCache = properties.get(PROPERTY_TABLE_CACHE);

        // check required properties
        recordIdColumn = properties.get(PROPERTY_RECORD_ID_COLUMN);
        logger.info(" tableCache:" + tableCache + "recordIdColumn: "
                + recordIdColumn);
        if (tableCache != null &amp;&amp; recordIdColumn == null)
            throw new WdkModelException("The required property for reporter "
                    + this.getClass().getName() + ", "
                    + PROPERTY_RECORD_ID_COLUMN + ", is missing");}

    /*
     * 
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o41ef6298cec14b18a1b00f7ccdc4b716231" name="configure" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="config" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super.configure(config);

        // get basic configurations
        if (config.containsKey(FIELD_HAS_EMPTY_TABLE)){
            String value = config.get(FIELD_HAS_EMPTY_TABLE);
            hasEmptyTable = (value.equalsIgnoreCase("yes") || value.equalsIgnoreCase("true")) ? true
                    : false;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1b2052a2093b4c7ebe7d218b7f6499ce231" name="getConfigInfo" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "This reporter does not have config info yet.";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getHttpContentType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o93fccbd794344d498303e55d5e12cb58231" name="getHttpContentType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (format.equalsIgnoreCase("text")){
            return "text/plain";} else if (format.equalsIgnoreCase("pdf")){
            return "application/pdf";} else{ // use the default content type defined in the parent class
            return super.getHttpContentType();}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getDownloadFileName()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="odd099a5f2b6d40aa88e0c6e0a5100c61231" name="getDownloadFileName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        logger.info("Internal format: " + format);
        String name = getQuestion().getName();
        if (format.equalsIgnoreCase("text")){
            return name + "_detail.txt";} else if (format.equalsIgnoreCase("pdf")){
            return name + "_detail.pdf";} else{ // use the default file name defined in the parent
            return super.getDownloadFileName();}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.report.IReporter#format(org.gusdb.wdk.model.Answer)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7d456a30137a4d018dfa3127c667e61f231" name="write" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="out" type="OutputStream" type-id="OutputStream" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            SQLException, NoSuchAlgorithmException, JSONException,
            WdkUserException{
        PrintWriter writer = new PrintWriter(new OutputStreamWriter(out));

        // get the columns that will be in the report
        Set&lt;Field&gt; fields = validateColumns();

        Set&lt;AttributeField&gt; attributes = new LinkedHashSet&lt;AttributeField&gt;();
        Set&lt;TableField&gt; tables = new LinkedHashSet&lt;TableField&gt;();
        for (Field field : fields){
            if (field instanceof AttributeField){
                attributes.add((AttributeField) field);} else if (field instanceof TableField){
                tables.add((TableField) field);}}

        if (format.equalsIgnoreCase("pdf")){
            formatRecord2PDF(attributes, tables, out);
            return;}

        // get the formatted result
        WdkModel wdkModel = getQuestion().getWdkModel();
        DBPlatform platform = wdkModel.getQueryPlatform();

        RecordClass recordClass = getQuestion().getRecordClass();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // construct the insert sql
        StringBuffer sqlInsert = new StringBuffer("INSERT INTO ");
        sqlInsert.append(tableCache).append(" (wdk_table_id, ");
        for (String column : pkColumns){
            sqlInsert.append(column).append(", ");}
        sqlInsert.append(" table_name, row_count, content) VALUES (");
        sqlInsert.append(wdkModel.getUserPlatform().getNextIdSqlExpression(
                "apidb", "wdkTable"));
        sqlInsert.append(", ");
        for (int i = 0; i &lt; pkColumns.length; i++){
            sqlInsert.append("?, ");}
        sqlInsert.append("?, ?, ?)");

        // construct the query sql
        StringBuffer sqlQuery = new StringBuffer("SELECT ");
        sqlQuery.append("count(*) AS cache_count FROM ").append(tableCache);
        sqlQuery.append(" WHERE ");
        for (String column : pkColumns){
            sqlQuery.append(column).append(" = ? AND ");}
        sqlQuery.append(" table_name = ?");

        this.sqlInsert = sqlInsert.toString();
        this.sqlQuery = sqlQuery.toString();
        PreparedStatement psInsert = null;
        PreparedStatement psQuery = null;
        try{
            if (tableCache != null){
                // want to cache the table content
                DataSource dataSource = platform.getDataSource();
                psInsert = SqlUtils.getPreparedStatement(dataSource,
                        sqlInsert.toString());
                psQuery = SqlUtils.getPreparedStatement(dataSource,
                        sqlQuery.toString());}
            int recordCount = 0;

            // get page based answers with a maximum size (defined in
            // PageAnswerIterator)
            for (AnswerValue pageAnswer : this){
                for (RecordInstance record : pageAnswer.getRecordInstances()){
                    // print out attributes of the record first
                    formatAttributes(record, attributes, writer);

                    // print out tables
                    formatTables(record, tables, writer, pageAnswer, psInsert,
                            psQuery);

                    writer.println();
                    writer.println("------------------------------------------------------------");
                    writer.println();
                    writer.flush();

                    // count the records processed so far
                    recordCount++;
                    if (recordCount % 100 == 0){
                        logger.info(recordCount + " records dumped so far");}}}
            logger.info("Totally " + recordCount + " records dumped");} finally{
            SqlUtils.closeStatement(psQuery);
            SqlUtils.closeStatement(psInsert);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o396ff1c8ef72400ca4db4170641fc5b5231" name="validateColumns" type="Set&lt;Field&gt;" type-id="Set&lt;Field&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // get a map of report maker fields
        Map&lt;String, Field&gt; fieldMap = getQuestion().getFields(
                FieldScope.REPORT_MAKER);

        // the config map contains a list of column names;
        Set&lt;Field&gt; columns = new LinkedHashSet&lt;Field&gt;();

        String fieldsList = config.get(FIELD_SELECTED_COLUMNS);
        if (fieldsList == null){
            columns.addAll(fieldMap.values());} else{
            String[ fields = fieldsList.split(",");
            for (String column : fields){
                column = column.trim();
                if (fieldMap.containsKey(column)){
                	columns.add(fieldMap.get(column));}}}
        return columns;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4a31fd49064b4aaf94caf645da09ea56231" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="writer" type="PrintWriter" type-id="PrintWriter" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // print out attributes of the record first
        for (AttributeField field : attributes){
            AttributeValue value = record.getAttributeValue(field.getName());
            writer.println(field.getDisplayName() + ": " + value);}
        // print out attributes of the record first
        writer.println();
        writer.flush();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1fe141c291f54c89aec4f3ad8f01d29e232" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="psInsert" type="PreparedStatement" type-id="PreparedStatement" default-value="" />
            <parameter id="" name="psQuery" type="PreparedStatement" type-id="PreparedStatement" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, SQLException, NoSuchAlgorithmException,
            JSONException, WdkUserException{
        DBPlatform platform = getQuestion().getWdkModel().getQueryPlatform();
        RecordClass recordClass = record.getRecordClass();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // print out tables of the record
        boolean needUpdate = false;
        for (TableField table : tables){
            TableValue tableValue = record.getTableValue(table.getName());

            AttributeField[ fields = table.getAttributeFields(FieldScope.REPORT_MAKER);

            // output table header
            StringBuffer sb = new StringBuffer();
            sb.append("Table: " + table.getDisplayName() + NEW_LINE);
            for (AttributeField attribute : fields){
                sb.append("[").append(attribute.getDisplayName()).append("]\t");}
            sb.append(NEW_LINE);

            int tableSize = 0;
            for (Map&lt;String, AttributeValue&gt; row : tableValue){
                tableSize++;
                for (AttributeField field : fields){
                    AttributeValue value = row.get(field.getName());
                    sb.append(value.getValue()).append("\t");}
                sb.append(NEW_LINE);}
            String content = sb.toString();

            // check if the record has been cached
            if (tableCache != null){
                Map&lt;String, String&gt; pkValues = record.getPrimaryKey().getValues();
                long start = System.currentTimeMillis();
                for (int index = 1; index &lt;= pkColumns.length; index++){
                    Object value = pkValues.get(pkColumns[index - 1);
                    psQuery.setObject(index, value);}
                psQuery.setString(pkColumns.length + 1, table.getName());
                ResultSet rs = psQuery.executeQuery();
                SqlUtils.verifyTime(wdkModel, sqlQuery,
                        "wdk-report-full-select-count", start);
                rs.next();
                int count = rs.getInt("cache_count");
                if (count == 0){
                    // insert into table cache
                    int index;
                    for (index = 1; index &lt;= pkColumns.length; index++){
                        Object value = pkValues.get(pkColumns[index - 1);
                        psInsert.setObject(index, value);}
                    psInsert.setString(index++, table.getName());
                    psInsert.setInt(index++, tableSize);
                    platform.setClobData(psInsert, index++, content, false);
                    psInsert.addBatch();
                    needUpdate = true;}
                rs.close();}

            // write to the stream
            if (hasEmptyTable || tableSize &gt; 0){
                writer.println(content);
                writer.flush();}}
        if (tableCache != null &amp;&amp; needUpdate){
            long start = System.currentTimeMillis();
            psInsert.executeBatch();
            SqlUtils.verifyTime(wdkModel, sqlInsert, "wdk-report-full-insert",
                    start);}}</source-code>
          </source-codes>
        </operation>
        <operation id="obc5b2deb2617401db820ecf76f06d084232" name="formatRecord2PDF" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributes" type="Set" type-id="Set" default-value="" />
            <parameter id="" name="tables" type="Set" type-id="Set" default-value="" />
            <parameter id="" name="out" type="OutputStream" type-id="OutputStream" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{

        logger.info("format2PDF&gt;&gt;&gt;");
        Document document = new Document(PageSize.LETTER.rotate());

        try{
            // PdfWriter pwriter =
            PdfWriter.getInstance(document, out);
            document.open();

            // get page based answers with a maximum size (defined in
            // PageAnswerIterator)
            for (AnswerValue answerValue : this){
                for (RecordInstance record : answerValue.getRecordInstances()){
                    // print out attributes of the record first
                    for (AttributeField field : attributes){
                        AttributeValue value = record.getAttributeValue(field.getName());
                        document.add(new Paragraph(field.getDisplayName()
                                + ": " + value));}

                    // print out tables of the record
                    for (TableField table : tables){
                        TableValue tableValue = record.getTableValue(table.getName());

                        // check if table is empty
                        Iterator&lt;Map&lt;String, AttributeValue&gt;&gt; iterator = tableValue.iterator();
                        if (!hasEmptyTable &amp;&amp; !iterator.hasNext()){
                            continue;}

                        AttributeField[ fields = table.getAttributeFields(FieldScope.REPORT_MAKER);

                        // output table header
                        document.add(new Paragraph("Table: "
                                + table.getDisplayName()));
                        int NumColumns = fields.length;
                        PdfPTable datatable = new PdfPTable(NumColumns);
                        for (AttributeField attribute : fields){
                            datatable.addCell("" + attribute.getDisplayName()
                                    + "");}

                        datatable.setHeaderRows(1);

                        while (iterator.hasNext()){
                            Map&lt;String, AttributeValue&gt; row = iterator.next();
                            for (String fieldName : row.keySet()){
                                AttributeValue value = row.get(fieldName);
                                Object objValue = value.getValue();
                                if (objValue == null) objValue = "";
                                datatable.addCell(objValue.toString());}}
                        document.add(datatable);}

                    // out.flush();}}
            document.close();} catch (DocumentException de){
            throw new WdkModelException(de);}
        // catch ( IOException ex ) {
        // throw new WdkModelException( ex );
        // }}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob3c84e40e1324365af5aa91331116e61232" name="complete" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o96aa90dfdd4b455ba84f985874e64769232" name="initialize" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di173648012514984180" cid="C331" type="class" name="JSONReporter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a168cd1deff5f4d58a0f76c576254ee03406" name="tableCache" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a01e449e33c41431e9a8783e71b44c729406" name="recordIdColumn" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aaabea10d90d7401793a98ea0302ef176406" name="hasEmptyTable" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a5acc650bbabf469e91c74632afae61b3406" name="sqlInsert" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aaf4933313ee14463b9a0018901441f05406" name="sqlQuery" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0959174cd38148c9b849a84c8b2edec1406" name="JSONReporter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(answerValue, startIndex, endIndex);}

    /**
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#setProperties(java.util.Map)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2c7db2b8609a4bb0979adfd0228f3cb0406" name="setProperties" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="properties" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        super.setProperties(properties);

        tableCache = properties.get(PROPERTY_TABLE_CACHE);

        // check required properties
        recordIdColumn = properties.get(PROPERTY_RECORD_ID_COLUMN);
        logger.info(" tableCache:" + tableCache + "recordIdColumn: "
                + recordIdColumn);
        if (tableCache != null &amp;&amp; recordIdColumn == null)
            throw new WdkModelException("The required property for reporter "
                    + this.getClass().getName() + ", "
                    + PROPERTY_RECORD_ID_COLUMN + ", is missing");}

    /*
     * 
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob35e78a4d4a44b29bfa4d5ac56f08fc5406" name="configure" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="config" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super.configure(config);

        // get basic configurations
        if (config.containsKey(FIELD_HAS_EMPTY_TABLE)){
            String value = config.get(FIELD_HAS_EMPTY_TABLE);
            hasEmptyTable = (value.equalsIgnoreCase("yes") || value.equalsIgnoreCase("true")) ? true
                    : false;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o70a2a4b04a20436ab143be01237f1717406" name="getConfigInfo" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "This reporter does not have config info yet.";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getHttpContentType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o30e6da406a314a4a96311f90fc624ba9406" name="getHttpContentType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (format.equalsIgnoreCase("text")){
            return "text/plain";} else if (format.equalsIgnoreCase("pdf")){
            return "application/pdf";} else{ // use the default content type defined in the parent class
            return "text/plain";// return super.getHttpContentType();}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getDownloadFileName()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe6badacff2754d56905e8b1739fe21e2406" name="getDownloadFileName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        logger.info("Internal format: " + format);
        String name = getQuestion().getName();
        if (format.equalsIgnoreCase("text")){
            return name + "_detail.txt";} else if (format.equalsIgnoreCase("pdf")){
            return name + "_detail.pdf";} else{ // use the default file name defined in the parent
            return super.getDownloadFileName();}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.report.IReporter#format(org.gusdb.wdk.model.Answer)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8cf544982de648ec853054807c69c427406" name="write" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="out" type="OutputStream" type-id="OutputStream" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            SQLException, NoSuchAlgorithmException, JSONException,
            WdkUserException{
        PrintWriter writer = new PrintWriter(new OutputStreamWriter(out));

        // get the columns that will be in the report
        Set&lt;Field&gt; fields = validateColumns();

        Set&lt;AttributeField&gt; attributes = new LinkedHashSet&lt;AttributeField&gt;();
        Set&lt;TableField&gt; tables = new LinkedHashSet&lt;TableField&gt;();
        for (Field field : fields){
            if (field instanceof AttributeField){
                attributes.add((AttributeField) field);} else if (field instanceof TableField){
                tables.add((TableField) field);}}

        // get the formatted result
        WdkModel wdkModel = getQuestion().getWdkModel();
        DBPlatform platform = wdkModel.getQueryPlatform();

        RecordClass recordClass = getQuestion().getRecordClass();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // construct the insert sql
        StringBuffer sqlInsert = new StringBuffer("INSERT INTO ");
        sqlInsert.append(tableCache).append(" (wdk_table_id, ");
        for (String column : pkColumns){
            sqlInsert.append(column).append(", ");}
        sqlInsert.append(" table_name, row_count, content) VALUES (");
        sqlInsert.append(wdkModel.getUserPlatform().getNextIdSqlExpression(
                "apidb", "wdkTable"));
        sqlInsert.append(", ");
        for (int i = 0; i &lt; pkColumns.length; i++){
            sqlInsert.append("?, ");}
        sqlInsert.append("?, ?, ?)");

        // construct the query sql
        StringBuffer sqlQuery = new StringBuffer("SELECT ");
        sqlQuery.append("count(*) AS cache_count FROM ").append(tableCache);
        sqlQuery.append(" WHERE ");
        for (String column : pkColumns){
            sqlQuery.append(column).append(" = ? AND ");}
        sqlQuery.append(" table_name = ?");

        this.sqlInsert = sqlInsert.toString();
        this.sqlQuery = sqlQuery.toString();
        PreparedStatement psInsert = null;
        PreparedStatement psQuery = null;
        try{
            if (tableCache != null){
                // want to cache the table content
                DataSource dataSource = platform.getDataSource();
                psInsert = SqlUtils.getPreparedStatement(dataSource,
                        sqlInsert.toString());
                psQuery = SqlUtils.getPreparedStatement(dataSource,
                        sqlQuery.toString());}
            int recordCount = 0;
            AnswerValue av = this.getAnswerValue();
            // get page based answers with a maximum size (defined in
            // PageAnswerIterator)
            writer.print("{\"response\" :{");
            writer.print("\"recordset\": {\"id\":\"" + av.getChecksum()
                    + "\",\"count\":\"" + this.getResultSize()
                    + "\", \"type\":\""
                    + av.getQuestion().getRecordClass().getType()
                    + "\", \"records\":[");
            for (AnswerValue pageAnswer : this){
                for (RecordInstance record : pageAnswer.getRecordInstances()){
                    if (recordCount &gt; 0) writer.print(",");
                    writer.print("{\"id\":\"" + record.getPrimaryKey() + "\"");
                    // print out attributes of the record first
                    formatAttributes(record, attributes, writer);
                    // print out tables
                    formatTables(record, tables, writer, pageAnswer, psInsert,
                            psQuery);
                    // writer.flush();
                    // count the records processed so far
                    recordCount++;
                    writer.print("}");}}
            writer.print("]}");
            writer.print("}}");
            writer.flush();
            logger.info("Totally " + recordCount + " records dumped");}
        finally{
            SqlUtils.closeStatement(psQuery);
            SqlUtils.closeStatement(psInsert);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o171a7fb190b2414386511a94d0853aca407" name="validateColumns" type="Set&lt;Field&gt;" type-id="Set&lt;Field&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // get a map of report maker fields
        Map&lt;String, Field&gt; fieldMap = getQuestion().getFields(
                FieldScope.REPORT_MAKER);

        // the config map contains a list of column names;
        Set&lt;Field&gt; columns = new LinkedHashSet&lt;Field&gt;();

        String fieldsList = config.get(FIELD_SELECTED_COLUMNS);
        String tablesList = config.get(TABLE_SELECTED_COLUMNS);
        if (fieldsList == null) fieldsList = "none";
        if (tablesList == null) tablesList = "none";
        logger.info("fieldsList = " + fieldsList + "    tablesList = "
                + tablesList);
        if (fieldsList.equals("all") &amp;&amp; tablesList.equals("all")){
            logger.info("all all");
            columns.addAll(fieldMap.values());} else{
            if (fieldsList.equals("all")){
                logger.info("FIELDSLIST ALL");
                for (String k : fieldMap.keySet()){
                    Field f = fieldMap.get(k);
                    if (f.getClass().getName().contains("AttributeField"))
                        columns.add(f);}} else if (!fieldsList.equals("none")){
                String[ fields = fieldsList.split(",");
                for (String column : fields){
                    column = column.trim();
                    if (fieldMap.containsKey(column)){
                        columns.add(fieldMap.get(column));}}}
            if (tablesList.equals("all")){
                for (String k : fieldMap.keySet()){
                    Field f = fieldMap.get(k);
                    if (f.getClass().getName().contains("TableField"))
                        columns.add(f);}} else if (!tablesList.equals("none")){
                String[ tables = tablesList.split(",");
                for (String column : tables){
                    column = column.trim();
                    if (!fieldMap.containsKey(column))
                        throw new WdkModelException("The column '" + column
                                + "' cannot be included in the report");
                    columns.add(fieldMap.get(column));}}}
        logger.info(columns.size());
        return columns;}</source-code>
          </source-codes>
        </operation>
        <operation id="oce597726c3034de2ae4a33b973090fbd407" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="writer" type="PrintWriter" type-id="PrintWriter" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // print out attributes of the record first
        if (attributes.size() &gt; 0) writer.print(", \"fields\":[");
        int c = 0;
        for (AttributeField field : attributes){
            if (c &gt; 0) writer.print(",");
            AttributeValue value = record.getAttributeValue(field.getName());
            writer.print("{\"name\":\"" + field.getName() + "\", \"value\":\""
                    + value + "\"}");
            c++;}
        if (attributes.size() &gt; 0) writer.print("]");
        // print out attributes of the record first
        // writer.print();
        writer.flush();}</source-code>
          </source-codes>
        </operation>
        <operation id="ob6dfc16d323045788f3ff9ab079bab0e407" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="psInsert" type="PreparedStatement" type-id="PreparedStatement" default-value="" />
            <parameter id="" name="psQuery" type="PreparedStatement" type-id="PreparedStatement" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, SQLException, NoSuchAlgorithmException,
            JSONException, WdkUserException{
        DBPlatform platform = getQuestion().getWdkModel().getQueryPlatform();
        RecordClass recordClass = record.getRecordClass();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // print out tables of the record
        boolean needUpdate = false;
        if (tables.size() &gt; 0) writer.print(", \"tables\":[");
        int c = 0;
        for (TableField table : tables){
            if (c &gt; 0) writer.print(",");
            TableValue tableValue = record.getTableValue(table.getName());

            AttributeField[ fields = table.getAttributeFields(FieldScope.REPORT_MAKER);

            // output table header
            StringBuffer sb = new StringBuffer();
            sb.append("{\"name\":\"" + table.getDisplayName() + "\",\"rows\":[");
            int tableSize = 0;
            for (Map&lt;String, AttributeValue&gt; row : tableValue){
                if (tableSize &gt; 0) sb.append(",");
                sb.append("{\"fields\":[");
                int f = 0;
                for (AttributeField field : fields){
                    String fieldName = field.getName();
                    if (f &gt; 0) sb.append(",");
                    AttributeValue value = row.get(fieldName);
                    sb.append("{\"name\":\"" + fieldName + "\", \"value\":\""
                            + value.getValue() + "\"}");
                    f++;}
                tableSize++;
                sb.append("]}");}
            sb.append("]}");
            String content = sb.toString();
            // check if the record has been cached
            if (tableCache != null){
                Map&lt;String, String&gt; pkValues = record.getPrimaryKey().getValues();
                long start = System.currentTimeMillis();
                for (int index = 1; index &lt;= pkColumns.length; index++){
                    Object value = pkValues.get(pkColumns[index - 1);
                    psQuery.setObject(index, value);}
                psQuery.setString(pkColumns.length + 1, table.getName());
                ResultSet rs = psQuery.executeQuery();
                SqlUtils.verifyTime(wdkModel, sqlQuery,
                        "wdk-report-json-select-count", start);
                rs.next();
                int count = rs.getInt("cache_count");
                if (count == 0){
                    // insert into table cache
                    int index;
                    for (index = 1; index &lt;= pkColumns.length; index++){
                        Object value = pkValues.get(pkColumns[index - 1);
                        psInsert.setObject(index, value);}
                    psInsert.setString(index++, table.getName());
                    psInsert.setInt(index++, tableSize);
                    platform.setClobData(psInsert, index++, content, false);
                    psInsert.addBatch();
                    needUpdate = true;}
                rs.close();}

            // write to the stream
            if (hasEmptyTable || tableSize &gt; 0){
                writer.print(content);
                writer.flush();}
            c++;}
        if (tables.size() &gt; 0) writer.print("]");
        if (tableCache != null &amp;&amp; needUpdate){
            long start = System.currentTimeMillis();
            psInsert.executeBatch();
            SqlUtils.verifyTime(wdkModel, sqlInsert, "wdk-report-json-insert",
                    start);}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc7caaa8c0a9c4e5f9583c193296fbb45407" name="complete" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // do nothing}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7d682bcc3af84e5a8f41e1e4b0ce5139407" name="initialize" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di754246436489272195" cid="C332" type="class" name="TabularReporter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:55">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab546f9894fa24c56bd30ed4341e30b9d72" name="hasHeader" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="a942fa165b93445b5b20712c886506c8772" name="divider" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="&quot;\t&quot;">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o6258f57bdca84674a131e39f05adb32172" name="TabularReporter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(answerValue, startIndex, endIndex);}

    /*
     * 
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4001876f4d0344309e7151dfaa7d490e72" name="configure" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="config" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super.configure(config);

        // get basic configurations
        if (config.containsKey(FIELD_HAS_HEADER)){
            String value = config.get(FIELD_HAS_HEADER);
            hasHeader = (value.equalsIgnoreCase("yes") || value.equalsIgnoreCase("true")) ? true
                    : false;}

        if (config.containsKey(FIELD_DIVIDER)){
            divider = config.get(FIELD_DIVIDER);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob1d06f2b8ed24b588997fbc7cf2f540672" name="getConfigInfo" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	return "This reporter does not have config info yet.";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getHttpContentType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8d9876b254eb426e9068ce985fb2ea2672" name="getHttpContentType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (format.equalsIgnoreCase("text")){
            return "text/plain";} else if (format.equalsIgnoreCase("excel")){
            return "application/vnd.ms-excel";} else if (format.equalsIgnoreCase("pdf")){
            return "application/pdf";} else{ // use the default content type defined in the parent class
            return super.getHttpContentType();}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getDownloadFileName()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of3d1c595ac6447b19bb4757b4053c42773" name="getDownloadFileName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        logger.info("Internal format: " + format);
        String name = getQuestion().getName();
        if (format.equalsIgnoreCase("text")){
            return name + "_summary.txt";} else if (format.equalsIgnoreCase("excel")){
            return name + "_summary.xls";} else if (format.equalsIgnoreCase("pdf")){
            return name + "_summary.pdf";} else{ // use the default file name defined in the parent
            return super.getDownloadFileName();}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.report.IReporter#format(org.gusdb.wdk.model.Answer)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o3d6f0d71870a42a59c574596c88043dc73" name="write" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="out" type="OutputStream" type-id="OutputStream" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        PrintWriter writer = new PrintWriter(new OutputStreamWriter(out));

        // get the columns that will be in the report
        Set&lt;AttributeField&gt; columns = validateColumns();

        // get the formatted result
        if (format.equalsIgnoreCase("excel")){
            format2Excel(columns, writer);} else if (format.equalsIgnoreCase("pdf")){
            format2PDF(columns, out);} else{
            format2Text(columns, writer);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oa3537cbdafc840b8b14c47a6b665519c73" name="validateColumns" type="Set&lt;AttributeField&gt;" type-id="Set&lt;AttributeField&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        // the config map contains a list of column names;
        Map&lt;String, AttributeField&gt; summary = getSummaryAttributes();
        Set&lt;AttributeField&gt; columns = new LinkedHashSet&lt;AttributeField&gt;();

        String fieldsList = config.get(FIELD_SELECTED_COLUMNS);
        logger.debug("Selected fields: " + fieldsList);
        if (fieldsList == null){
            columns.addAll(summary.values());} else{
            Map&lt;String, AttributeField&gt; attributes = getQuestion().getAttributeFieldMap(
                    FieldScope.REPORT_MAKER);
            String[ fields = fieldsList.split(",");
            for (String column : fields){
                column = column.trim();
                if (attributes.containsKey(column)){
                	columns.add(attributes.get(column));}}}
        return columns;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe89e31de112a4d969bfaabafc90892db73" name="format2Text" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fields" type="Set" type-id="Set" default-value="" />
            <parameter id="" name="writer" type="PrintWriter" type-id="PrintWriter" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // print the header
        if (hasHeader){
            for (AttributeField field : fields){
                writer.print("[" + field.getDisplayName() + "]");
                writer.print(divider);}
            writer.println();
            writer.flush();}

        // get page based answers with a maximum size (defined in
        // PageAnswerIterator)
        for (AnswerValue answerValue : this){
            for (RecordInstance record : answerValue.getRecordInstances()){
                for (AttributeField field : fields){
                    AttributeValue value = record.getAttributeValue(field.getName());
                    writer.print((value == null) ? "N/A" : value.getValue());
                    writer.print(divider);}
                writer.println();
                writer.flush();}}}</source-code>
          </source-codes>
        </operation>
        <operation id="of65e84e7ff834db0b2af5a526620e1fc73" name="format2PDF" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fields" type="Set" type-id="Set" default-value="" />
            <parameter id="" name="out" type="OutputStream" type-id="OutputStream" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        logger.info("format2PDF&gt;&gt;&gt;");
        Document document = new Document(PageSize.LETTER.rotate());
        try{
            PdfWriter pwriter = PdfWriter.getInstance(document, out);
            document.open();

            int NumFields = fields.size();

            PdfPTable datatable = new PdfPTable(NumFields);

            if (hasHeader){
                for (AttributeField field : fields){
                    datatable.addCell("" + field.getDisplayName() + "");}}

            datatable.setHeaderRows(1);
            int count = 0;

            // get page based answers with a maximum size (defined in
            // PageAnswerIterator)
            for (AnswerValue answerValue : this){
                for (RecordInstance record : answerValue.getRecordInstances()){
                    count++;

                    if (count % 2 == 1){
                        datatable.getDefaultCell().setGrayFill(0.9f);}

                    for (AttributeField field : fields){
                        AttributeValue value = record.getAttributeValue(field.getName());
                        datatable.addCell("" + value.getValue());}

                    if (count % 2 == 1){
                        datatable.getDefaultCell().setGrayFill(1);}

                    if (count % 500 == 0){
                        pwriter.flush();}}}

            datatable.setSplitLate(false);
            datatable.setWidthPercentage(100);
            document.setMargins(10, 10, 10, 10);
            document.add(datatable);
            document.close();
            out.flush();}

        catch (DocumentException de){
            throw new WdkModelException(de);
            // de.printStackTrace();
            // System.err.println("document: " + de.getMessage());
        }

        catch (IOException ex){
            throw new WdkModelException(ex);}

        // close the document (the outputstream is also closed internally)

    }

    private void format2Excel(Set&lt;AttributeField&gt; fields, PrintWriter writer)
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        int count = 0;
        String header = "&lt;table border=\"1\"&gt;";
        writer.println(header);
        count += header.length() + 5;

        // print the header
        if (hasHeader){
            writer.println("&lt;tr&gt;");
            count += 5;
            for (AttributeField field : fields){
                String title = "&lt;th&gt;[" + field.getDisplayName() + "]&lt;/th&gt;";
                writer.print(title);
                count += title.length();}
            writer.println();
            writer.println("&lt;/tr&gt;");
            writer.flush();
            count += 7;}

        // get page based answers with a maximum size (defined in
        // PageAnswerIterator)
        for (AnswerValue answerValue : this){
            for (RecordInstance record : answerValue.getRecordInstances()){
                writer.println("&lt;tr&gt;");
                count += 5;
                for (AttributeField field : fields){
                    AttributeValue value = record.getAttributeValue(field.getName());
                    String val = "&lt;td&gt;" + value.getValue() + "&lt;/td&gt;";
                    writer.print(val);
                    count += val.length();}
                writer.println();
                writer.println("&lt;/tr&gt;");
                writer.flush();
                count += 7;

                // logger.debug("Excel download - written: " + count);
                // check if the output exceeds the max allowed size
                if (count &gt; MAX_EXCEL_LENGTH){
                    writer.print("&lt;tr&gt;&lt;td colspan=\"" + fields.size() + "\"&gt;");
                    writer.print("The result size exceeds the maximum allowed "
                            + "size for downloading excel files. The rest of "
                            + "the results are ignored. Opening huge excel "
                            + "files may crash your system. If you need to "
                            + "get the complete results, please choose the "
                            + "download type as Text File, or Show in Browser.");
                    writer.println("&lt;/td&gt;&lt;/tr&gt;");
                    break;}
                if (count &gt; MAX_EXCEL_LENGTH) break;}
            if (count &gt; MAX_EXCEL_LENGTH) break;}
        writer.println("&lt;/table&gt;");
        writer.flush();}

    @Override
    protected void complete(){
        // do nothing}

    @Override
    protected void initialize() throws SQLException{
        // do nothing}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di622350825673173344" cid="C333" type="class" name="XMLReporter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:35:58">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a913096e931c74afa86522ef121965207269" name="tableCache" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aac670cc960bc4bdaa702b397f584bd02269" name="recordIdColumn" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5e27d626af054f68b2121cb50dc5f874269" name="hasEmptyTable" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a08912b428e5b4973a77e8624c4b170f0269" name="sqlInsert" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1275f350b38f498cb5712a396b2df687269" name="sqlQuery" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o82760a90ca704c2b9ad292c4bea62723269" name="XMLReporter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(answerValue, startIndex, endIndex);}

    /**
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#setProperties(java.util.Map)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o46fd23f847064d7a89535ee5995e8b67269" name="setProperties" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="properties" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        super.setProperties(properties);

        tableCache = properties.get(PROPERTY_TABLE_CACHE);

        // check required properties
        recordIdColumn = properties.get(PROPERTY_RECORD_ID_COLUMN);
        logger.info(" tableCache:" + tableCache + "recordIdColumn: "
                + recordIdColumn);
        if (tableCache != null &amp;&amp; recordIdColumn == null)
            throw new WdkModelException("The required property for reporter "
                    + this.getClass().getName() + ", "
                    + PROPERTY_RECORD_ID_COLUMN + ", is missing");}

    /*
     * 
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o42817f7dbc6f4b44b5971c6be6cd90ca269" name="configure" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="config" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super.configure(config);

        // get basic configurations
        if (config.containsKey(FIELD_HAS_EMPTY_TABLE)){
            String value = config.get(FIELD_HAS_EMPTY_TABLE);
            hasEmptyTable = (value.equalsIgnoreCase("yes") || value.equalsIgnoreCase("true")) ? true
                    : false;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o938d7fa2f9264c8faa1fc4751971a941269" name="getConfigInfo" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "This reporter does not have config info yet.";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getHttpContentType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o45f60b19e0f34b27a1214e7993d792b0269" name="getHttpContentType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (format.equalsIgnoreCase("text")){
            return "text/plain";} else if (format.equalsIgnoreCase("pdf")){
            return "application/pdf";} else{ // use the default content type defined in the parent class
            return "text/xml";// return super.getHttpContentType();}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.report.Reporter#getDownloadFileName()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7a44df3a9cd145ce945d85241c3c8b81269" name="getDownloadFileName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        logger.info("Internal format: " + format);
        String name = getQuestion().getName();
        if (format.equalsIgnoreCase("text")){
            return name + ".xml";} else{ // use the default file name defined in the parent
            return super.getDownloadFileName();}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.report.IReporter#format(org.gusdb.wdk.model.Answer)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc58c6e2eaa59475192852001a4bd5ebe269" name="write" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="out" type="OutputStream" type-id="OutputStream" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            SQLException, NoSuchAlgorithmException, JSONException,
            WdkUserException{
        PrintWriter writer = new PrintWriter(new OutputStreamWriter(out));

        // get the columns that will be in the report
        Set&lt;Field&gt; fields = validateColumns();

        Set&lt;AttributeField&gt; attributes = new LinkedHashSet&lt;AttributeField&gt;();
        Set&lt;TableField&gt; tables = new LinkedHashSet&lt;TableField&gt;();
        for (Field field : fields){
            if (field instanceof AttributeField){
                attributes.add((AttributeField) field);} else if (field instanceof TableField){
                tables.add((TableField) field);}}

        // get the formatted result
        WdkModel wdkModel = getQuestion().getWdkModel();
        DBPlatform platform = wdkModel.getQueryPlatform();

        RecordClass recordClass = getQuestion().getRecordClass();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // construct the insert sql
        StringBuffer sqlInsert = new StringBuffer("INSERT INTO ");
        sqlInsert.append(tableCache).append(" (wdk_table_id, ");
        for (String column : pkColumns){
            sqlInsert.append(column).append(", ");}
        sqlInsert.append(" table_name, row_count, content) VALUES (");
        sqlInsert.append(wdkModel.getUserPlatform().getNextIdSqlExpression(
                "apidb", "wdkTable"));
        sqlInsert.append(", ");
        for (int i = 0; i &lt; pkColumns.length; i++){
            sqlInsert.append("?, ");}
        sqlInsert.append("?, ?, ?)");

        // construct the query sql
        StringBuffer sqlQuery = new StringBuffer("SELECT ");
        sqlQuery.append("count(*) AS cache_count FROM ").append(tableCache);
        sqlQuery.append(" WHERE ");
        for (String column : pkColumns){
            sqlQuery.append(column).append(" = ? AND ");}
        sqlQuery.append(" table_name = ?");

        this.sqlInsert = sqlInsert.toString();
        this.sqlQuery = sqlQuery.toString();
        PreparedStatement psInsert = null;
        PreparedStatement psQuery = null;
        try{
            if (tableCache != null){
                // want to cache the table content
                DataSource dataSource = platform.getDataSource();
                psInsert = SqlUtils.getPreparedStatement(dataSource,
                        sqlInsert.toString());
                psQuery = SqlUtils.getPreparedStatement(dataSource,
                        sqlQuery.toString());}
            int recordCount = 0;
            AnswerValue av = this.getAnswerValue();
            // get page based answers with a maximum size (defined in
            // PageAnswerIterator)
            writer.println("&lt;?xml version='1.0' encoding='UTF-8'?&gt;");
            writer.println("&lt;response&gt;");
            writer.println("&lt;recordset id='" + av.getChecksum() + "' count='"
                    + this.getResultSize() + "' type='"
                    + av.getQuestion().getRecordClass().getType() + "'&gt;");
            for (AnswerValue pageAnswer : this){
                for (RecordInstance record : pageAnswer.getRecordInstances()){
                    writer.println("&lt;record id='" + record.getPrimaryKey()
                            + "'&gt;");
                    // print out attributes of the record first
                    formatAttributes(record, attributes, writer);

                    // print out tables
                    formatTables(record, tables, writer, pageAnswer, psInsert,
                            psQuery);
                    writer.flush();

                    // count the records processed so far
                    recordCount++;
                    writer.println("&lt;/record&gt;");}}
            writer.println("&lt;/recordset&gt;");
            writer.println("&lt;/response&gt;");
            writer.flush();
            logger.info("Totally " + recordCount + " records dumped");}
        finally{
            SqlUtils.closeStatement(psQuery);
            SqlUtils.closeStatement(psInsert);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o311095f5988b41a3b8586340374a80c3269" name="validateColumns" type="Set&lt;Field&gt;" type-id="Set&lt;Field&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // get a map of report maker fields
        Map&lt;String, Field&gt; fieldMap = getQuestion().getFields(
                FieldScope.REPORT_MAKER);

        // the config map contains a list of column names;
        Set&lt;Field&gt; columns = new LinkedHashSet&lt;Field&gt;();

        String fieldsList = config.get(FIELD_SELECTED_COLUMNS);
        String tablesList = config.get(TABLE_SELECTED_COLUMNS);
        if (fieldsList == null) fieldsList = "none";
        if (tablesList == null) tablesList = "none";
        logger.info("fieldsList = " + fieldsList + "    tablesList = "
                + tablesList);
        if (fieldsList.equals("all") &amp;&amp; tablesList.equals("all")){
            columns.addAll(fieldMap.values());} else{
            if (fieldsList.equals("all")){
                logger.info("FIELDSLIST ALL");
                for (String k : fieldMap.keySet()){
                    Field f = fieldMap.get(k);
                    if (f.getClass().getName().contains("AttributeField"))
                        columns.add(f);}} else if (!fieldsList.equals("none")){
                String[ fields = fieldsList.split(",");
                for (String column : fields){
                    column = column.trim();
                    if (fieldMap.containsKey(column)){
                        columns.add(fieldMap.get(column));}}}
            if (tablesList.equals("all")){
                for (String k : fieldMap.keySet()){
                    Field f = fieldMap.get(k);
                    if (f.getClass().getName().contains("TableField"))
                        columns.add(f);}} else if (!tablesList.equals("none")){
                String[ tables = tablesList.split(",");
                for (String column : tables){
                    column = column.trim();
                    if (!fieldMap.containsKey(column))
                        throw new WdkModelException("The column '" + column
                                + "' cannot be included in the report");
                    columns.add(fieldMap.get(column));}}}
        return columns;}</source-code>
          </source-codes>
        </operation>
        <operation id="od033c58873f642068a84e4939bf269c4269" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="writer" type="PrintWriter" type-id="PrintWriter" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        // print out attributes of the record first
        for (AttributeField field : attributes){
            AttributeValue value = record.getAttributeValue(field.getName());
            writer.println("&lt;field name='" + field.getName() + "' title='"
                    + field.getDisplayName() + "'&gt;&lt;![CDATA[" + value
                    + "]]&gt;&lt;/field&gt;");}
        // print out attributes of the record first
        writer.println();
        writer.flush();}</source-code>
          </source-codes>
        </operation>
        <operation id="o93e97efc9eb34149aa248c65f0d0c3a1269" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
            <parameter id="" name="psInsert" type="PreparedStatement" type-id="PreparedStatement" default-value="" />
            <parameter id="" name="psQuery" type="PreparedStatement" type-id="PreparedStatement" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, SQLException, NoSuchAlgorithmException,
            JSONException, WdkUserException{
        DBPlatform platform = getQuestion().getWdkModel().getQueryPlatform();
        RecordClass recordClass = record.getRecordClass();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField().getColumnRefs();

        // print out tables of the record
        boolean needUpdate = false;
        for (TableField table : tables){
            TableValue tableValue = record.getTableValue(table.getName());

            AttributeField[ fields = table.getAttributeFields(FieldScope.REPORT_MAKER);

            // output table header
            StringBuffer sb = new StringBuffer();
            sb.append("&lt;table name='" + table.getDisplayName() + "'&gt;"
                    + NEW_LINE);
            int tableSize = 0;
            for (Map&lt;String, AttributeValue&gt; row : tableValue){
                tableSize++;
                sb.append("&lt;row&gt;" + NEW_LINE);
                for (AttributeField field : fields){
                    String fieldName = field.getName();
                    AttributeValue value = row.get(fieldName);
                    sb.append("&lt;field name='" + fieldName + "'&gt;&lt;![CDATA["
                            + value.getValue() + "]]&gt;&lt;/field&gt;" + NEW_LINE);}
                sb.append("&lt;/row&gt;" + NEW_LINE);}
            sb.append("&lt;/table&gt;" + NEW_LINE);
            String content = sb.toString();
            // check if the record has been cached
            if (tableCache != null){
                Map&lt;String, String&gt; pkValues = record.getPrimaryKey().getValues();
                long start = System.currentTimeMillis();
                for (int index = 1; index &lt;= pkColumns.length; index++){
                    Object value = pkValues.get(pkColumns[index - 1);
                    psQuery.setObject(index, value);}
                psQuery.setString(pkColumns.length + 1, table.getName());
                ResultSet rs = psQuery.executeQuery();
                SqlUtils.verifyTime(wdkModel, sqlQuery,
                        "wdk-report-xml-select-count", start);
                rs.next();
                int count = rs.getInt("cache_count");
                if (count == 0){
                    // insert into table cache
                    int index;
                    for (index = 1; index &lt;= pkColumns.length; index++){
                        Object value = pkValues.get(pkColumns[index - 1);
                        psInsert.setObject(index, value);}
                    psInsert.setString(index++, table.getName());
                    psInsert.setInt(index++, tableSize);
                    platform.setClobData(psInsert, index++, content, false);
                    psInsert.addBatch();
                    needUpdate = true;}
                rs.close();}

            // write to the stream
            if (hasEmptyTable || tableSize &gt; 0){
                writer.println(content);
                writer.flush();}}
        if (tableCache != null &amp;&amp; needUpdate){
            long start = System.currentTimeMillis();
            psInsert.executeBatch();
            SqlUtils.verifyTime(wdkModel, sqlInsert, "wdk-report-xml-insert",
                    start);}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of473be6c5a704eff95897596d6cfac75270" name="complete" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // do nothing}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob862a41df726477aa7c70833ced3c30c270" name="initialize" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di282330508165757305" cid="C334" type="class" name="BooleanQuery" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:00">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aed5e29cf048c4cfe8a2848374353f967307" name="leftOperand" type="AnswerParam" type-id="AnswerParam" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa7aa3b44db84426f8c8c4558b3f67617307" name="rightOperand" type="AnswerParam" type-id="AnswerParam" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9e6d648a1dc149cf9be3f77281709b99307" name="operator" type="StringParam" type-id="StringParam" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2ec689f609a0459299dc9ea51b778c86307" name="useBooleanFilter" type="StringParam" type-id="StringParam" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a048651f08e594b2886497886d3bc33cc307" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ocfdf54358d0d4d1d89c06c86bcb7649d307" name="getQueryName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String rcName = recordClass.getFullName().replace('.', '_');
        return QUERY_NAME_PREFIX + rcName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o78743a4a26ab434097406992210b68cb307" name="BooleanQuery" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, WdkUserException, SQLException,
            JSONException{
        this.recordClass = recordClass;
        this.wdkModel = recordClass.getWdkModel();
        String rcName = recordClass.getFullName().replace('.', '_');

        // create or get the historyParam for the query
        ParamSet internalParamSet =
                wdkModel.getParamSet(Utilities.INTERNAL_PARAM_SET);
        leftOperand =
                prepareOperand(internalParamSet, recordClass,
                        LEFT_OPERAND_PARAM_PREFIX + rcName);
        leftOperand.setPrompt("Left Operand");
        rightOperand =
                prepareOperand(internalParamSet, recordClass,
                        RIGHT_OPERAND_PARAM_PREFIX + rcName);
        rightOperand.setPrompt("Right Operand");

        // create the stringParam for the others
        operator = prepareStringParam(internalParamSet, OPERATOR_PARAM);
        operator.setPrompt("Operator");
        useBooleanFilter =
                prepareStringParam(internalParamSet, USE_BOOLEAN_FILTER_PARAM);
        useBooleanFilter.setPrompt("Use Expand Filter");

        // create the query
        this.setName(BooleanQuery.getQueryName(recordClass));
        this.addParam(leftOperand);
        this.addParam(rightOperand);
        this.addParam(operator);
        this.addParam(useBooleanFilter);

        prepareColumns(recordClass);

        this.setSql(constructSql());}</source-code>
          </source-codes>
        </operation>
        <operation id="o0a8961d0bda448a78a0b2f4b3e78d250307" name="BooleanQuery" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="BooleanQuery" type-id="BooleanQuery" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(query);

        this.recordClass = query.recordClass;
        this.leftOperand =
                (AnswerParam) paramMap.get(query.leftOperand.getName());
        this.operator = (StringParam) paramMap.get(query.operator.getName());
        this.rightOperand =
                (AnswerParam) paramMap.get(query.rightOperand.getName());
        this.useBooleanFilter =
                (StringParam) paramMap.get(query.useBooleanFilter.getName());}

    /**
     * @return the recordClass
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o594912ca8a614de49ece2e1c2fd6b2ee307" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass;}

    /**
     * @return the leftOperand
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o46b651476a9041128a139adf56f28938307" name="getLeftOperandParam" type="AnswerParam" type-id="AnswerParam" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return leftOperand;}

    /**
     * @return the rightOperand
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of2eff23ea2a5408a8ec85ae2f386a99b307" name="getRightOperandParam" type="AnswerParam" type-id="AnswerParam" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return rightOperand;}

    /**
     * @return the operator
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of68233f4187849c0b95fcab371269b4b307" name="getOperatorParam" type="StringParam" type-id="StringParam" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return operator;}

    /**
     * @return the useBooleanFilter
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4d35910ebc3741209f61ac921ea2d3ea307" name="getUseBooleanFilter" type="StringParam" type-id="StringParam" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return useBooleanFilter;}</source-code>
          </source-codes>
        </operation>
        <operation id="od1282dd89e3743239ae13408ccc2fdf8307" name="prepareOperand" type="AnswerParam" type-id="AnswerParam" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramSet" type="ParamSet" type-id="ParamSet" default-value="" />
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
            <parameter id="" name="paramName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException,
            WdkUserException, SQLException, JSONException{
        AnswerParam operand;
        if (paramSet.contains(paramName)){
            operand = (AnswerParam) paramSet.getParam(paramName);} else{
            operand = new AnswerParam();
            operand.setName(paramName);
            String rcName = recordClass.getFullName();
            operand.addRecordClassRef(new RecordClassReference(rcName));
            paramSet.addParam(operand);
            operand.resolveReferences(wdkModel);
            operand.setResources(wdkModel);}
        return operand;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1d2d78d08c70417985af60b8a27ba317307" name="prepareStringParam" type="StringParam" type-id="StringParam" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramSet" type="ParamSet" type-id="ParamSet" default-value="" />
            <parameter id="" name="paramName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException,
            WdkUserException, SQLException, JSONException{
        StringParam param;
        if (paramSet.contains(paramName)){
            param = (StringParam) paramSet.getParam(paramName);} else{
            param = new StringParam();
            param.setName(paramName);
            param.setNumber(false);
            param.setNoTranslation(true);
            param.resolveReferences(wdkModel);
            param.setResources(wdkModel);
            paramSet.addParam(param);}
        return param;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5397c2e14f3744ffa6664c46e0232037307" name="prepareColumns" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        PrimaryKeyAttributeField primaryKey =
                recordClass.getPrimaryKeyAttributeField();

        for (String columnName : primaryKey.getColumnRefs()){
            Column column = new Column();
            column.setName(columnName);
            column.setQuery(this);
            columnMap.put(columnName, column);}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.Query#appendJSONContent(org.json.JSONObject)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5d476f8762084fa1a824efec279c21fc307" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsQuery" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        super.appendJSONContent(jsQuery, extra);
        jsQuery.append("recordClass", recordClass.getFullName());}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.Query#clone()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oca3054be6662444ca0d6a35aa5c2428f307" name="clone" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new BooleanQuery(this);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.Query#makeInstance()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o07c55ed29eb74dc3a64e5e4c4686bb90307" name="makeInstance" type="QueryInstance" type-id="QueryInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="values" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="validate" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="context" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return new BooleanQueryInstance(user, this, values, validate,
                assignedWeight, context);}</source-code>
          </source-codes>
        </operation>
        <operation id="o856b34d4d6ef41cb9d200aa46796d1ef307" name="constructSql" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer sql = new StringBuffer();
        constructOperandSql(sql, leftOperand.getName());
        sql.append(" $$").append(operator.getName()).append("$$ ");
        constructOperandSql(sql, leftOperand.getName());
        return sql.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="oaaabf7f57ade4d30b3131a62c0a52896307" name="constructOperandSql" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sql" type="StringBuffer" type-id="StringBuffer" default-value="" />
            <parameter id="" name="operand" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        sql.append("SELECT ");
        boolean first = true;
        for (String column : columnMap.keySet()){
            if (first) first = false;
            else sql.append(", ");
            sql.append(column);}
        sql.append(" FROM $$").append(operand).append("$$");
        sql.append(" WHERE $$").append(operand).append(".condition$$");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.Query#isBoolean()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ofe046ad894a546d89c4e0e488edd8e96307" name="isBoolean" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return true;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di170201102862401167" cid="C335" type="class" name="BooleanQueryInstance" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a46bb6349f6614b6099f500f2990a321c352" name="booleanQuery" type="BooleanQuery" type-id="BooleanQuery" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations />
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di813886031704162218" cid="C336" type="class" name="Column" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:03">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a99219568790c41e181b99592e00a646f156" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1a948fa2ed154c509cbf1aec7b228920156" name="query" type="Query" type-id="Query" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aae32c7f9c3b94969ad88ed20625fdb9f156" name="type" type="ColumnType" type-id="ColumnType" visibility="private" abstract="false" virtual="false" default-value="ColumnType.STRING">
          <stereotypes />
        </attribute>
        <attribute id="aa9f1198cb43d4776a096ade972b652ad156" name="width" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="a3cdaba3487fd4ba1b5184ea833b7068f156" name="wsName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a94eddacf717344b085d54d27fce3bdcf156" name="ignoreCase" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="aa7dd4b290e754dd9941347cb1301b9ef156" name="sortingColumn" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o1867a81f4299473b9989f987124f64d0156" name="Column" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="od5bf99d2378347e287cc660ae6398c7d156" name="Column" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="column" type="Column" type-id="Column" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = column.name;
        this.query = column.query;
        this.type = column.type;
        this.width = column.width;
        this.wsName = column.wsName;
        this.ignoreCase = column.ignoreCase;
        this.sortingColumn = column.sortingColumn;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8f3bb5c63ec44cf380f934254da1d269156" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o475d22375b0d49bfa2847ae29aa28546156" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o079cbd81451b4f7bba0d3fd36d40faf3156" name="setColumnType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="typeName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        this.type = ColumnType.parse(typeName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0d3c07aef59c44508d13faa24a5137ac156" name="setType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="type" type="ColumnType" type-id="ColumnType" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.type = type;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6a8a98f2817743b68b7a3a6fe7903187156" name="getType" type="ColumnType" type-id="ColumnType" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return type;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2dacb23ae6034f1c8feba84ab0ea4c1d156" name="setQuery" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.query = query;}</source-code>
          </source-codes>
        </operation>
        <operation id="obd65e6534d704832ac659656e3ebd54b157" name="setWidth" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="width" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.width = width;}</source-code>
          </source-codes>
        </operation>
        <operation id="o794e9161e38140b799f3a9570053e275157" name="getQuery" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return query;}</source-code>
          </source-codes>
        </operation>
        <operation id="o895b468cb28b44249a938d2bac92654a157" name="getWidth" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (width == 0) ? type.getDefaultWidth() : width;}

    /**
     * @return Returns the wsName.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2ee333bb7f3a4b84992f9f5eb874cc8e157" name="getWsName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.wsName;}

    /**
     * @param wsName
     *            The wsName to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob57535c0aa9e454eac05e26820de66d3157" name="setWsName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wsName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wsName = wsName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o81da29e898b74b68be5f1c162e061072157" name="getJSONContent" type="JSONObject" type-id="JSONObject" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws JSONException{
        JSONObject jsColumn = new JSONObject();
        jsColumn.put("name", name);
        jsColumn.put("type", type);
        jsColumn.put("width", width);
        return jsColumn;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocd5628f1dfa0440695c47a4c597ee99d157" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        String classnm = this.getClass().getSimpleName();
        StringBuffer buf = new StringBuffer(classnm + ": name='" + name + "', "
                + "  dataTypeName='" + type + "'" + newline);

        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o114ea93f4f2642fa9d3a4631d93fa986157" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o32407b7ca39f445c8505c94a7274a2fb157" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // nothing to resolve}

    /**
     * @return the sortingColumn
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oad7e1451e7b24bc992dfb71fb7cedb1d157" name="getSortingColumn" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return sortingColumn;}

    /**
     * @param sortingColumn
     *            the sortingColumn to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob23568558b384bcea8c18837dbc13cc0157" name="setSortingColumn" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sortingColumn" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.sortingColumn = sortingColumn;}

    /**
     * @return the ignoreCase
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od914d110a9d84e84afe15e594ba705ee157" name="isIgnoreCase" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return ignoreCase;}

    /**
     * @param ignoreCase
     *            the ignoreCase to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3c720e0f03e74b1a9219bf08b6b7ca1f157" name="setIgnoreCase" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ignoreCase" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.ignoreCase = ignoreCase;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di812204608951905551" cid="C337" type="class" name="ProcessQuery" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:04">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="acba7e19f532c4477b7c99a5f2c7d7e43162" name="processName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aaae0c8e9acfb4eff953998f56fd3482a162" name="webServiceUrl" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7368bf5fcb3a496ab899cd549d6e24a1162" name="local" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o6f5390a813cd4a9cb2fe696ab5df07c1162" name="ProcessQuery" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();}</source-code>
          </source-codes>
        </operation>
        <operation id="o2e67caa3142745e084c5761015651336162" name="ProcessQuery" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="ProcessQuery" type-id="ProcessQuery" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(query);
        this.processName = query.processName;
        this.webServiceUrl = query.webServiceUrl;
        this.local = query.local;}

    /**
     * @return the processClass
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob1ab153bc46f47709c8560373a75248b162" name="getProcessName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.processName;}

    /**
     * @param processClass
     *            the processClass to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="odf1949d8c1744f33bc796e4f5413d2b6162" name="setProcessName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="processName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.processName = processName;}

    /**
     * @return the webServiceUrl
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o15030b8831554b82a893342c3c399391162" name="getWebServiceUrl" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.webServiceUrl;}</source-code>
          </source-codes>
        </operation>
        <operation id="o35778021c5014f9d98047f7a67694092162" name="setWebServiceUrl" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="webServiceUrl" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.webServiceUrl = webServiceUrl;}

    /**
     * @return the local
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="of004c404d4e74dcbaf779bb1a5d2fedf162" name="isLocal" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.local;}

    /**
     * @param local
     *            the local to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oc8691ad9642847aeadc8415e554dc7c9162" name="setLocal" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="local" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.local = local;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.Query#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6ec520d7f1cf43d9896a579876edf9b2162" name="resolveQueryReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (webServiceUrl == null)
            webServiceUrl = wdkModel.getModelConfig().getWebServiceUrl();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.Query#makeInstance()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="obd68fe30e8644a79963b032295edc385162" name="makeInstance" type="QueryInstance" type-id="QueryInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="values" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="context" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return new ProcessQueryInstance(user, this, values, validate,
                assignedWeight, context);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.Query#appendJSONContent(org.json.JSONObject)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o70259a202028414383790f5b930cb493162" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsQuery" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        if (extra){
            jsQuery.put("process", this.processName);
            if (!local)
                jsQuery.put("url", this.webServiceUrl);}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.Query#clone()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o550093ec4f394615a99fdf9ab67a389c162" name="clone" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new ProcessQuery(this);}

    /**
     * Process Query is always cached.
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ocd70b98517ee47a388bfa3733b1d428b162" name="isCached" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return true;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di768856499902228612" cid="C338" type="class" name="ProcessQueryInstance" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:07">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ae73d34b474c34992886fb9c5ad45614f536" name="query" type="ProcessQuery" type-id="ProcessQuery" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a55a8dc4a931540e0b470661675547864536" name="signal" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations />
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di896172931623732485" cid="C339" type="class" name="Query" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:11">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a28ebfa53d3394b94b275c45fa75b548c209" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4e26bf2b98d54ae1affb414b11b83aaf209" name="cached" type="boolean" type-id="boolean" visibility="protected" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="af4486a7614f844138e557abdd83b1756209" name="paramRefList" type="List&lt;ParamReference&gt;" type-id="List&lt;ParamReference&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a11d6835222324b12af7a7d2f980c29f3209" name="paramMap" type="Map&lt;String, Param&gt;" type-id="Map&lt;String, Param&gt;" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8917cc2a15734118b94718c29bb8c507209" name="columnList" type="List&lt;Column&gt;" type-id="List&lt;Column&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6cff1a16985a49aca411b3e18e97f98e209" name="columnMap" type="Map&lt;String, Column&gt;" type-id="Map&lt;String, Column&gt;" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a7398395c1dd247a0b83760e83e9892d3209" name="doNotTest" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a5a36d8cdf22b4b23bab266c5bb833e72209" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af1d0990f521d489ea780e97593a3ca41209" name="querySet" type="QuerySet" type-id="QuerySet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1385f4a98f044e03898c736f882ebe14209" name="indexColumns" type="String[]" type-id="String[]" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9d8c911440b14bf395a3d2e0cec9192f209" name="hasWeight" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0ce9674bf83f4568affe7744c0470dd8209" name="appendJSONContent" type="" type-id="" visibility="package" abstract="true" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsQuery" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException;

    public abstract QueryInstance makeInstance(User user,
            Map&lt;String, String&gt; values, boolean validate, int assignedWeight,
            Map&lt;String, String&gt; context) throws WdkModelException,
            WdkUserException;

    public abstract Query clone();

    public abstract void resolveQueryReferences(WdkModel wdkModel)
            throws WdkModelException;

    // =========================================================================
    // Constructors
    // =========================================================================

    protected Query(){
        paramRefList = new ArrayList&lt;ParamReference&gt;();
        paramMap = new LinkedHashMap&lt;String, Param&gt;();
        columnList = new ArrayList&lt;Column&gt;();
        columnMap = new LinkedHashMap&lt;String, Column&gt;();
        hasWeight = false;}

    /**
     * clone the query object
     * 
     * @param query
     */
    protected</source-code>
          </source-codes>
        </operation>
        <operation id="o1798d3798b174fc5b1d3d65d179b1490209" name="Query" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(query);

        // logger.debug("clone query: " + query.getFullName());
        this.name = query.name;
        this.cached = query.cached;
        this.paramMap = new LinkedHashMap&lt;String, Param&gt;();
        this.columnMap = new LinkedHashMap&lt;String, Column&gt;();
        this.wdkModel = query.wdkModel;
        this.querySet = query.querySet;
        this.doNotTest = query.doNotTest;
        this.paramValuesSets = new ArrayList&lt;ParamValuesSet&gt;(
                query.paramValuesSets);
        this.wdkModel = query.wdkModel;
        this.hasWeight = query.hasWeight;

        // clone columns
        for (String columnName : query.columnMap.keySet()){
            Column column = new Column(query.columnMap.get(columnName));
            column.setQuery(this);
            columnMap.put(columnName, column);}

        // clone params
        for (String paramName : query.paramMap.keySet()){
            Param param = query.paramMap.get(paramName).clone();
            param.setContextQuery(this);
            paramMap.put(paramName, param);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o88ce9fb4934b4730a9b5c983c927ba7f209" name="setIndexColumns" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="indexColumns" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.indexColumns = indexColumns;}</source-code>
          </source-codes>
        </operation>
        <operation id="obf980b53d3254c2fa9a46d7c1f4e1808209" name="getIndexColumns" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return indexColumns;}

    /**
     * @return
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="of2b130624db344b5956353c95771b05d209" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oaa79663d511e4285a5ff6a7970174e20209" name="setName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return the querySet
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5c33f96f11bb4df4b14b9e1f06f497ee209" name="getQuerySet" type="QuerySet" type-id="QuerySet" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return querySet;}

    /**
     * @param querySet
     *            the querySet to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o0ac692837eac43dead3c1bf87a72d2f6209" name="setQuerySet" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="querySet" type="QuerySet" type-id="QuerySet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.querySet = querySet;}

    /**
     * @return the cached
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od11d5f33d0c449d48e2d5b028827b92d209" name="isCached" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.cached;}

    /**
     * @param cached
     *            the cached to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5de2aff402ea4fbb80cc1110b92e0569209" name="setIsCacheable" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cached" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.cached = cached;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofe82ce6165e04a7aacb54da2adc42fcc209" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return querySet.getName() + "." + name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o28d9fd12dece4a46baafadce741be5bb209" name="addParamRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramRef" type="ParamReference" type-id="ParamReference" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.paramRefList.add(paramRef);}

    /**
     * Add a param into the query
     * 
     * @param param
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o252f58e27ce4460d802b219a5ad04430210" name="addParam" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="Param" type-id="Param" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        param.setContextQuery(this);
        paramMap.put(param.getName(), param);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8a97642b8edc421da5fcf5f75b9d892d210" name="getParamMap" type="Map&lt;String, Param&gt;" type-id="Map&lt;String, Param&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, Param&gt;(paramMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="obd4803096bb9408eb08c8b980dec2c6a210" name="getParams" type="Param[]" type-id="Param[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Param[ array = new Param[paramMap.size();
        paramMap.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6e8e3ce171214b0bb74e7c49f8638619210" name="addColumn" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="column" type="Column" type-id="Column" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        column.setQuery(this);
        if (columnList != null) this.columnList.add(column);
        else columnMap.put(column.getName(), column);}</source-code>
          </source-codes>
        </operation>
        <operation id="of95194a02e4c4947ad609ab1785e9118210" name="getColumnMap" type="Map&lt;String, Column&gt;" type-id="Map&lt;String, Column&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, Column&gt;(columnMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6416c7b432e2495c87d985a228bee96e210" name="getColumns" type="Column[]" type-id="Column[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Column[ array = new Column[columnMap.size();
        columnMap.values().toArray(array);
        return array;}

    // exclude this query from sanity testing</source-code>
          </source-codes>
        </operation>
        <operation id="o2be9ec5f8184469baf49e54bb53b8b46210" name="setDoNotTest" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="doNotTest" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.doNotTest = doNotTest;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofb1aaf3586c24330a71ae3083ba70242210" name="getDoNotTest" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return doNotTest;}</source-code>
          </source-codes>
        </operation>
        <operation id="of93d9937ca9e47ae99d2c8f31e0a8134210" name="addParamValuesSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        paramValuesSets.add(paramValuesSet);}</source-code>
          </source-codes>
        </operation>
        <operation id="o16a82a9438344322a12283a78111f58b210" name="getParamValuesSets" type="List&lt;ParamValuesSet&gt;" type-id="List&lt;ParamValuesSet&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        updateParamValuesSetsWithDefaults();
        return paramValuesSets;}</source-code>
          </source-codes>
        </operation>
        <operation id="o12cf039823e54775b578a643bd92fe26210" name="getWdkModel" type="WdkModel" type-id="WdkModel" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel;}</source-code>
          </source-codes>
        </operation>
        <operation id="of6ce281dcfb94779849d319b7cb1eb67210" name="getChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    	try{
    		JSONObject jsQuery = getJSONContent(extra);
    		return Utilities.encrypt(jsQuery.toString());}
    	catch (JSONException e){
    		throw new WdkModelException("Unable to get JSON content for checksum.", e);}}

    /**
     * @param extra
     *            , if extra is true, then column names are also includes, plus
     *            the extra info from param.
     * @return
     * @throws JSONException
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="oed17d4278d6e4adb80cfbc27492ed58a210" name="getJSONContent" type="JSONObject" type-id="JSONObject" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws JSONException{
        // use JSON to construct the string content
        JSONObject jsQuery = new JSONObject();
        jsQuery.put("name", getFullName());
        jsQuery.put("project", wdkModel.getProjectId());

        // construct params; ordered by paramName
        String[ paramNames = new String[paramMap.size();
        paramMap.keySet().toArray(paramNames);
        Arrays.sort(paramNames);

        JSONArray jsParams = new JSONArray();
        for (String paramName : paramNames){
            Param param = paramMap.get(paramName);
            jsParams.put(param.getJSONContent(extra));}
        jsQuery.put("params", jsParams);

        // construct columns; ordered by columnName
        if (extra){
            String[ columnNames = new String[columnMap.size();
            columnMap.keySet().toArray(columnNames);
            Arrays.sort(columnNames);

            JSONArray jsColumns = new JSONArray();
            for (String columnName : columnNames){
                Column column = columnMap.get(columnName);
                jsColumns.put(column.getJSONContent());}
            jsQuery.put("columns", jsColumns);}

        // append child-specific data
        appendJSONContent(jsQuery, extra);

        return jsQuery;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4967a56e0ab64a80884fe62fc7294f39210" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude paramRefs
        List&lt;ParamReference&gt; paramRefs = new ArrayList&lt;ParamReference&gt;();
        for (ParamReference paramRef : paramRefList){
            if (paramRef.include(projectId)){
                paramRef.excludeResources(projectId);
                paramRefs.add(paramRef);}}
        paramRefList = paramRefs;

        // exclude columns
        for (Column column : columnList){
            if (column.include(projectId)){
                column.excludeResources(projectId);
                String columnName = column.getName();
                if (columnMap.containsKey(columnName)){
                    throw new WdkModelException("The column '" + columnName
                            + "' is duplicated in query " + getFullName());} else columnMap.put(columnName, column);}}
        columnList = null;

        // exclude paramValuesSets
        List&lt;ParamValuesSet&gt; tempList = new ArrayList&lt;ParamValuesSet&gt;();
        for (ParamValuesSet paramValuesSet : paramValuesSets){
            if (paramValuesSet.include(projectId)){
                tempList.add(paramValuesSet);}}
        paramValuesSets = tempList;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4ad99cb6878f4febbe0b4371bc5edd23210" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // logger.debug("Resolving " + getFullName() + " - " + resolved);
        if (resolved) return;

        this.wdkModel = wdkModel;

        // resolve the params
        for (ParamReference paramRef : paramRefList){
            Param param = ParamReference.resolveReference(wdkModel, paramRef,
                    getFullName());
            String paramName = param.getName();
            if (paramMap.containsKey(paramName)){
                throw new WdkModelException("The param '" + paramName
                        + "' is duplicated in query " + getFullName());} else{
                param.setContextQuery(this);
                paramMap.put(paramName, param);}}
        paramRefList = null;

        // FIXME - this cause problems with some params, need to investigate. comment out temporarily
        // apply the default values to depended params
        // Map&lt;String, String&gt; valueStub = new LinkedHashMap&lt;String, String&gt;();
        // resolveDependedParams(valueStub)

        // resolve columns
        for (Column column : columnMap.values()){
            String sortingColumn = column.getSortingColumn();
            if (sortingColumn == null) continue;
            if (!columnMap.containsKey(sortingColumn))
                throw new WdkModelException("Query [" + getFullName()
                        + "] has a column [" + column.getName()
                        + "] with sortingColumn [" + sortingColumn
                        + "], but the sorting column doesn't exist in "
                        + "the same query.");}

        // if the query is a transform, it has to return weight column.
        // this applies to both explicit transform and filter queries.
        if (isTransform()){
            if (!columnMap.containsKey(Utilities.COLUMN_WEIGHT))
                throw new WdkModelException("Transform query [" + getFullName()
                        + "] doesn't define the required "
                        + Utilities.COLUMN_WEIGHT + " column.");}

        resolveQueryReferences(wdkModel);
        resolved = true;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3e9a947eafea4b41b36397d28d28d9b3210" name="updateParamValuesSetsWithDefaults" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        ParamValuesSet querySetDefaults = querySet.getDefaultParamValuesSet();
        if (paramValuesSets.isEmpty()){
            paramValuesSets.add(new ParamValuesSet());}
        for (ParamValuesSet paramValuesSet : paramValuesSets){
            paramValuesSet.updateWithDefaults(querySetDefaults);

            for (Param param : getParams()){
                String paramName = param.getName();
                String defaultValue = param.getDefault();
                paramValuesSet.updateWithDefault(paramName, defaultValue);}}}

    /**
     * @return the combined
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o1b3eeb05595b4194b05852c8c1a524c9210" name="isCombined" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (getAnswerParamCount() &gt; 0);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob0c382f723f647d494725b91ab80a105210" name="isBoolean" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (this instanceof BooleanQuery);}</source-code>
          </source-codes>
        </operation>
        <operation id="oab187cabf8364ef7b306074895874d14210" name="isTransform" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (getAnswerParamCount() == 1);}</source-code>
          </source-codes>
        </operation>
        <operation id="of01e6be393f244f48a3d9ae9fa21f38b210" name="getAnswerParamCount" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        int count = 0;
        for (Param param : paramMap.values()){
            if (param instanceof AnswerParam) count++;}
        return count;}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5545e39f25b74cab93f1ae5697b490db210" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buffer = new StringBuffer(getFullName());
        buffer.append(": params{");
        boolean firstParam = true;
        for (Param param : paramMap.values()){
            if (firstParam) firstParam = false;
            else buffer.append(", ");
            buffer.append(param.getName()).append("[");
            buffer.append(param.getClass().getSimpleName()).append("]");}
        buffer.append("} columns{");
        boolean firstColumn = true;
        for (Column column : columnMap.values()){
            if (firstColumn) firstColumn = false;
            else buffer.append(", ");
            buffer.append(column.getName());}
        buffer.append("}");
        return buffer.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o334745a828374ce592d48753be135a5a210" name="rawOrDependentValuesToDependentValues" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="rawValues" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, WdkUserException, SQLException, JSONException{
        Map&lt;String, String&gt; dependentValues = new LinkedHashMap&lt;String, String&gt;();
        for (String paramName : rawValues.keySet()){
            Param param = paramMap.get(paramName);
            if (param == null){
                // instead of throwing an error, wdk will silently ignore it
                // throw new WdkModelException("Invalid param name '" +
                // paramName
                // + "' in query " + getFullName());
                logger.warn("Param " + paramName + " does not exist in query "
                        + getFullName());
                continue;}
            String rawValue = rawValues.get(paramName);
            String dependentValue = param.rawOrDependentValueToDependentValue(
                    user, rawValue);
            dependentValues.put(paramName, dependentValue);}
        if (paramMap.containsKey(Utilities.PARAM_USER_ID)){
            if (!dependentValues.containsKey(Utilities.PARAM_USER_ID))
                dependentValues.put(Utilities.PARAM_USER_ID,
                        Integer.toString(user.getUserId()));}
        return dependentValues;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe4e5da4011074189b027f6d8c7a0f587210" name="dependentValuesToIndependentValues" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValues" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        Map&lt;String, String&gt; independentValues = new LinkedHashMap&lt;String, String&gt;();
        for (String paramName : dependentValues.keySet()){
            Param param = paramMap.get(paramName);
            if (param == null){
                // instead of throwing an error, wdk will silently ignore it
                // throw new WdkModelException("Invalid param name '" +
                // paramName
                // + "' in query " + getFullName());
                logger.warn("Param " + paramName + " does not exist in query "
                        + getFullName());
                continue;}
            String dependentValue = dependentValues.get(paramName);
            String independentValue = param.dependentValueToIndependentValue(
                    user, dependentValue);
            independentValues.put(paramName, independentValue);}
        return independentValues;}

    /**
     * @param hasWeight
     *            the hasWeight to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob347cfa53a6a454583465a99f8dcdfbf210" name="setHasWeight" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="hasWeight" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.hasWeight = hasWeight;}

    /**
     * @return the hasWeight
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od34558abb8194c43860201a20c963acf210" name="isHasWeight" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return hasWeight;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di589588157343111724" cid="C340" type="class" name="QueryInstance" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:14">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="of6e413f869934d44a65be3e4e4df8dc5297" name="createCache" type="" type-id="" visibility="public" abstract="true" virtual="false" static="false">
          <parameters>
            <parameter id="" name="connection" type="Connection" type-id="Connection" default-value="" />
            <parameter id="" name="tableName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            int instanceId, String[ indexColumns)
            throws WdkModelException, WdkUserException;

    public abstract void insertToCache(Connection connection, String tableName,
            int instanceId) throws WdkModelException, WdkUserException;

    public abstract String getSql() throws WdkModelException, WdkUserException;

    protected abstract void appendSJONContent(JSONObject jsInstance)
            throws JSONException;

    protected abstract ResultList getUncachedResults()
            throws WdkModelException, WdkUserException;

    private static final Logger logger = Logger.getLogger(QueryInstance.class);

    protected User user;
    private Integer instanceId;
    protected Query query;
    protected WdkModel wdkModel;
    protected Map&lt;String, String&gt; values;
    protected String resultMessage;

    private String checksum;
    protected int assignedWeight;

    protected Map&lt;String, String&gt; context;

    protected QueryInstance(User user, Query query, Map&lt;String, String&gt; values,
            boolean validate, int assignedWeight, Map&lt;String, String&gt; context)
            throws WdkModelException, WdkUserException{
        this.user = user;
        this.query = query;
        this.wdkModel = query.getWdkModel();
        this.assignedWeight = assignedWeight;
        this.context = context;

        this.context.put(Utilities.QUERY_CTX_QUERY, query.getFullName());
        this.context.put(Utilities.QUERY_CTX_USER, user.getSignature());

        setValues(values, validate);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4081740be7274d658d213edba3113b67297" name="getQuery" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return query;}

    /**
     * @return the instanceId
     * @throws JSONException
     * @throws WdkModelException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o95eaa0bc26eb4f74b87607618717afa7297" name="getInstanceId" type="Integer" type-id="Uml.Integer" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        if (instanceId == null){
            ResultFactory resultFactory = wdkModel.getResultFactory();
            String[ indexColumns = query.getIndexColumns();
            instanceId = resultFactory.getInstanceId(this, indexColumns);}
        return instanceId;}

    /**
     * @param instanceId
     *            the instanceId to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o89fae7e984384f5e8ac57844aa67580a297" name="setInstanceId" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instanceId" type="Integer" type-id="Uml.Integer" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.instanceId = instanceId;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5daa0b9fc73144088fba96f2140ef1f7297" name="setValues" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="values" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="validate" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        logger.trace("----- input value for [" + query.getFullName()
                + "] -----");
        for (String paramName : values.keySet()){
            logger.trace(paramName + "='" + values.get(paramName) + "'");}

        // add user_id into the param values
        Map&lt;String, Param&gt; params = query.getParamMap();
        String userKey = Utilities.PARAM_USER_ID;
        if (params.containsKey(userKey) &amp;&amp; !values.containsKey(userKey)){
            values.put(userKey, Integer.toString(user.getUserId()));}
        
        // convert the values into dependent values
        for (Param param : params.values()){
            if (values.containsKey(param.getName())){
                String value = values.get(param.getName());
                value = param.rawOrDependentValueToDependentValue(user, value);
                values.put(param.getName(), value);}}

        if (validate) validateValues(user, values);
        // passed, assign the value
        this.values = new LinkedHashMap&lt;String, String&gt;(values);
        checksum = null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4fe0427c6aee4e9990b7ff9d79164737297" name="getResultMessage" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        // make sure the result message is loaded by getting instance id
        getInstanceId();
        return resultMessage;}</source-code>
          </source-codes>
        </operation>
        <operation id="oce7ac411d7c842719a2068db7c259c97297" name="setResultMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.resultMessage = message;}

    /**
     * @return the cached
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob1d71db657244183bf3c622894084e38297" name="isCached" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return query.isCached();}</source-code>
          </source-codes>
        </operation>
        <operation id="o41a893b78d47448797c1555503321f48297" name="getChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        if (checksum == null){
            JSONObject jsQuery = getJSONContent();
            checksum = Utilities.encrypt(jsQuery.toString());}
        return checksum;}</source-code>
          </source-codes>
        </operation>
        <operation id="od691cd4b88794139a1913a013ab129c9297" name="getJSONContent" type="JSONObject" type-id="JSONObject" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
    	try{
	        JSONObject jsInstance = new JSONObject();
	        jsInstance.put("project", wdkModel.getProjectId());
	        jsInstance.put("query", query.getFullName());
	
	        jsInstance.put("params", getIndependentParamValuesJSONObject());
	        jsInstance.put("assignedWeight", assignedWeight);
	
	        // include extra info from child
	        appendSJONContent(jsInstance);
	
	        return jsInstance;}
    	catch (JSONException e){
    		throw new WdkUserException("Unable to build JSON object.", e);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o29aafc5ca98449d0bc2ba286258f88f8297" name="getIndependentParamValuesJSONObject" type="JSONObject" type-id="JSONObject" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        // the values are dependent values. need to convert it into independent values
        Map&lt;String, String&gt; independentValues = query.dependentValuesToIndependentValues(
                user, values);

        // construct param-value map; param is sorted by name
        String[ paramNames = new String[independentValues.size();
        independentValues.keySet().toArray(paramNames);
        Arrays.sort(paramNames);

        try{
	        JSONObject jsParams = new JSONObject();
	        for (String paramName : paramNames){
	            String value = independentValues.get(paramName);
	            if (value != null &amp;&amp; value.length() &gt; 0)
	                jsParams.put(paramName, value);}
	        return jsParams;}
        catch (JSONException e){
        	throw new WdkUserException("Error while converting param values to JSON." + e);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o242f0267a1564f2382470bc3850b295a297" name="getResults" type="ResultList" type-id="ResultList" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        logger.debug("retrieving results of query [" + query.getFullName()
                + "]");

        ResultList resultList = (isCached()) ? getCachedResults()
                : getUncachedResults();

        logger.debug("results of query [" + query.getFullName()
                + "] retrieved.");

        return resultList;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofa0e5765aad7409a903de3906b18618f297" name="getResultSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        logger.debug("start getting query size");
        try{
	        StringBuffer sql = new StringBuffer("SELECT count(*) FROM (");
	        sql.append(getSql()).append(") f");
	        DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
	        Object objSize = SqlUtils.executeScalar(wdkModel, dataSource,
	                sql.toString(), query.getFullName() + "-count");
	        int resultSize = Integer.parseInt(objSize.toString());
	        logger.debug("end getting query size");
	        return resultSize;}
        catch (SQLException e){
        	throw new WdkUserException("Unable to retrieve result size.", e);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5464c838b689472e998b994ee171e2a9297" name="getValues" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return values;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4009b67915ab437991bfbafd9db46003297" name="getCachedResults" type="ResultList" type-id="ResultList" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        ResultFactory factory = wdkModel.getResultFactory();
        return factory.getCachedResults(this);}</source-code>
          </source-codes>
        </operation>
        <operation id="o48972c819b2e4da8bcb1f785d644bab3297" name="getCachedSql" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        CacheFactory cacheFactory = wdkModel.getResultFactory().getCacheFactory();
        QueryInfo queryInfo = cacheFactory.getQueryInfo(getQuery());

        String cacheTable = queryInfo.getCacheTable();
        int instanceId = getInstanceId();

        StringBuffer sql = new StringBuffer("SELECT * FROM ");
        sql.append(cacheTable).append(" WHERE ");
        sql.append(CacheFactory.COLUMN_INSTANCE_ID);
        sql.append(" = ").append(instanceId);
        return sql.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o0003550eef914a3ba904baed886d50f3297" name="validateValues" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="values" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        Map&lt;String, Param&gt; params = query.getParamMap();
        Map&lt;String, String&gt; errors = null;

        values = fillEmptyValues(values);
        // then check that all params have supplied values
        for (String paramName : values.keySet()){
            String errMsg = null;
            String dependentValue = values.get(paramName);
            String prompt = paramName;
            try{
                if (!params.containsKey(paramName))
                    throw new WdkModelException("The parameter '" + paramName
                            + "' doesn't exist");

                Param param = params.get(paramName);
                prompt = param.getPrompt();

                // check for dependent param
                /* Skipping for now; since AbstractEnumParam.validateValue() only checks for empty values,
                 * it doesn't matter if the dependent value is "valid" per the depended param.
                 * We should add code to more robustly verify that the passed param value is valid.
                if (param instanceof AbstractEnumParam &amp;&amp; ((AbstractEnumParam) param).isDependentParam()) {
                    String dependedParam = ((AbstractEnumParam) param).getDependedParam().getName();
                    String dependedValue = values.get(dependedParam);
                    // the following method must be implemented!
                    ((AbstractEnumParam) param).validateValue(user, dependentValue, dependedValue);
                }*/
                
                // validate param
                param.validate(user, dependentValue);}
            catch (Exception ex){
                ex.printStackTrace();
                errMsg = ex.getMessage();
                if (errMsg == null) errMsg = ex.getClass().getName();}
            if (errMsg != null){
                if (errors == null)
                    errors = new LinkedHashMap&lt;String, String&gt;();
                errors.put(prompt, errMsg);}}
        if (errors != null){
            WdkModelException ex = new WdkModelException(
                    "Some of the input parameters are invalid.", errors);
            logger.debug(ex.formatErrors());
            throw ex;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o18efde157805408caac98705a998d55f298" name="fillEmptyValues" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="values" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        Map&lt;String, String&gt; newValues = new LinkedHashMap&lt;String, String&gt;(values);
        Map&lt;String, Param&gt; paramMap = query.getParamMap();

        // iterate through this query's params, filling values
        for (String paramName : paramMap.keySet()){
        	resolveParamValue(paramMap.get(paramName), newValues);}
        return newValues;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa84c5f58b7b9477085b0385ed7b39626298" name="resolveParamValue" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="Param" type-id="Param" default-value="" />
            <parameter id="" name="values" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
    		throws WdkModelException, WdkUserException{
        String value;
        if (!values.containsKey(param.getName())){
            // param not provided, determine value
        	if (param instanceof AbstractEnumParam &amp;&amp; ((AbstractEnumParam)param).isDependentParam()){
        		// special case; must get value of depended param first
        		AbstractEnumParam aeParam = (AbstractEnumParam)param;
        		resolveParamValue(aeParam.getDependedParam(), values);
        		value = aeParam.getDefault(values.get(aeParam.getDependedParam().getName()));}
        	else{
        		value = param.getDefault();}}
        else{ // param provided, but it can be empty
            value = values.get(param.getName());
            if (value == null || value.length() == 0){
                value = param.isAllowEmpty() ? param.getEmptyValue() : null;}}
        values.put(param.getName(), value);}</source-code>
          </source-codes>
        </operation>
        <operation id="of913d112d10942318f3e422234d93a23298" name="getInternalParamValues" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        // the empty &amp; default values are filled
        Map&lt;String, String&gt; values = fillEmptyValues(this.values);
        Map&lt;String, String&gt; internalValues = new LinkedHashMap&lt;String, String&gt;();
        Map&lt;String, Param&gt; params = query.getParamMap();
        for (String paramName : params.keySet()){
            Param param = params.get(paramName);
        	String internalValue, dependentValue = values.get(paramName);

            // TODO: refactor so this fork isn't necessary
            if (param instanceof AbstractEnumParam &amp;&amp; ((AbstractEnumParam)param).isDependentParam()){
            	EnumParamBean paramBean = new EnumParamBean((AbstractEnumParam)param);
            	paramBean.setDependedValue(values.get(paramBean.getDependedParam().getName()));
            	internalValue = paramBean.getInternalValue(user, dependentValue);}
            else{
            	internalValue = param.getInternalValue(user, dependentValue);}
            
        	internalValues.put(paramName, internalValue);}
        return internalValues;}</source-code>
          </source-codes>
        </operation>
        <operation id="o32dc14d38df24297ba813958978f6f2a298" name="getAssignedWeight" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return assignedWeight;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di986138373394240083" cid="C341" type="class" name="QuerySet" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:15">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a0df0e564c7c746de8e099e31858f862e670" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad7c461f825184350b852c56e188fe195670" name="queryType" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="&quot;&quot;">
          <stereotypes />
        </attribute>
        <attribute id="aa5e090e0b42c4ff5b57e16369652279f670" name="doNotTest" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a06c69b1b3a9c497fbc60f4657f4dd444670" name="defaultParamValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4d0978bba017408aac0311040bc5c9db670" name="testRowCountSql" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o6207951f94e34fa489c78ed0afae318b670" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6506ac6d699a4b0f9db92d39008b18cc670" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oaa9eb7b64eab4ce1b5358e87c1d37546670" name="getQuery" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Query q = queries.get(name);
        if (q == null)
            throw new WdkModelException("Query Set " + getName()
                    + " does not include query " + name);
        return q;}</source-code>
          </source-codes>
        </operation>
        <operation id="o662d479a9d65473f8d2ce79d2dfc6018671" name="getElement" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queries.get(name);}</source-code>
          </source-codes>
        </operation>
        <operation id="od64cdd87d0174ce593078158bde319f2671" name="getQueries" type="Query[]" type-id="Query[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Query[ array = new Query[queries.size();
        queries.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="occa0a200ab3b4d529becdb41ce425f96671" name="setQueryType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="type" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.queryType = type;}</source-code>
          </source-codes>
        </operation>
        <operation id="o57543559aff44064b756bfc4a52fceb4671" name="getQueryType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queryType;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6bbc45a337034cc7a11295dd666c7b3c671" name="setDoNotTest" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="doNotTest" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.doNotTest = doNotTest;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1f61a659c7bc43628cb7348fc3009f53671" name="getDoNotTest" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return doNotTest;}</source-code>
          </source-codes>
        </operation>
        <operation id="oda84a1fc39ed475ba4dcb6df78e187c5671" name="addDefaultParamValuesSet" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        unexcludedDefaultParamValuesSets.add(paramValuesSet);}</source-code>
          </source-codes>
        </operation>
        <operation id="o82b847ef77534455bd998d107a1a47dc671" name="getDefaultParamValuesSet" type="ParamValuesSet" type-id="ParamValuesSet" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return defaultParamValuesSet;}

    // sql that returns number of rows expected by all queries in this query set</source-code>
          </source-codes>
        </operation>
        <operation id="o3ad9b20fbfbb49beae43f845baa6f08f671" name="addTestRowCountSql" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="text" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        unexcludedTestRowCountSqls.add(text);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2cbb232d151447658d94ce15b257a88e671" name="getTestRowCountSql" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return testRowCountSql;}</source-code>
          </source-codes>
        </operation>
        <operation id="oedf6ab941161482e99be5c31c9f8f059671" name="contains" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queries.containsKey(queryName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o34034ff3e61f4de5ae32681e29c9a82f671" name="addQuery" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        query.setQuerySet(this);
        if (queryList != null) queryList.add(query);
        else{
//            if (queries.containsKey(query.getName()))
//                throw new WdkModelException("query [" + query.getFullName()
//                        + "] already exists in the set.");
            queries.put(query.getName(), query);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob776e33ff94c46208192d11b2ef5c4d3671" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (Query query : queries.values()){
            query.resolveReferences(model);}}

    /*
     * (non-Javadoc) do nothing
     * 
     * @see
     * org.gusdb.wdk.model.ModelSetI#setResources(org.gusdb.wdk.model.WdkModel)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe6cf7f16f2674888aa4f1031e409f09f671" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{}</source-code>
          </source-codes>
        </operation>
        <operation id="o66d65a7e6978444da2eb73be25c398a1671" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer("QuerySet: name='" + name + "'");
        buf.append(newline);
        for (Query query : queries.values()){
            buf.append(newline);
            buf.append(":::::::::::::::::::::::::::::::::::::::::::::");
            buf.append(newline);
            buf.append(query);
            buf.append("----------------");
            buf.append(newline);}
        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o20bf3f04cf484dc38a626ce6bcd91aad671" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude queries
        for (Query query : queryList){
            if (query.include(projectId)){
                query.excludeResources(projectId);
                String queryName = query.getName();
                if (queries.containsKey(queryName))
                    throw new WdkModelException("Query named " + queryName
                            + " already exists in query set " + getName());
                queries.put(queryName, query);}}
        queryList = null;

        // exclude paramValuesSets
        for (ParamValuesSet paramValuesSet : unexcludedDefaultParamValuesSets){
            if (paramValuesSet.include(projectId)){
                if (defaultParamValuesSet != null)
                    throw new WdkModelException(
                            "Duplicate &lt;defaultTestParamValues&gt; included in query set "
                                    + getName() + " for projectId " + projectId);
                defaultParamValuesSet = paramValuesSet;}}

        // exclude textRowCountSqls
        for (WdkModelText text : unexcludedTestRowCountSqls){
            if (text.include(projectId)){
                if (testRowCountSql != null)
                    throw new WdkModelException(
                            "Duplicate &lt;testRowCountSql&gt; included in query set "
                                    + getName() + " for projectId " + projectId);
                testRowCountSql = text.getText();}}}
    // ///////////////////////////////////////////////////////////////
    // ///// protected
    // ///////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di390158173105736248" cid="C342" type="class" name="SqlQuery" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab26612f59bf84f319929e9e615ba8691275" name="sqlList" type="List&lt;WdkModelText&gt;" type-id="List&lt;WdkModelText&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a43663bfa155f4f7aa1610add711f8af6275" name="sql" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4b4d06f002834055ad4e2e152232f835275" name="sqlMacroList" type="List&lt;WdkModelText&gt;" type-id="List&lt;WdkModelText&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a34515b23e86a407085b23fc8fc0afc8b275" name="sqlMacroMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abd5eb330af6e4571a2d9abad2e386c4d275" name="clobRow" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a52b8d3ba4a6f4e4881875fa5982e4800275" name="dependentTableList" type="List&lt;WdkModelText&gt;" type-id="List&lt;WdkModelText&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a710af715afff473995b9ebe8a88dfda2275" name="dependentTableMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="obb0a361495834045ad4f334d2730deeb275" name="SqlQuery" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super();
        clobRow = false;
        sqlList = new ArrayList&lt;WdkModelText&gt;();
        sqlMacroList = new ArrayList&lt;WdkModelText&gt;();
        sqlMacroMap = new LinkedHashMap&lt;String, String&gt;();
        dependentTableList = new ArrayList&lt;WdkModelText&gt;();
        dependentTableMap = new LinkedHashMap&lt;String, String&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="oe31b92befa6442be96440cd0c6200049275" name="SqlQuery" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="SqlQuery" type-id="SqlQuery" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(query);
        this.clobRow = query.clobRow;
        this.sql = query.sql;
        this.sqlMacroMap = new LinkedHashMap&lt;String, String&gt;(query.sqlMacroMap);
        this.dependentTableMap = new LinkedHashMap&lt;String, String&gt;(
                query.dependentTableMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc3a9b5db69fb47e8a0d0c30da867d58b275" name="addSql" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sql" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.sqlList.add(sql);}</source-code>
          </source-codes>
        </operation>
        <operation id="ofe0f1d1f87f24472ae5a42a8292d7a15275" name="addSqlParamValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sqlMacro" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.sqlMacroList.add(sqlMacro);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8c29333cd17f4aee880e1e61d06da7ba275" name="addSqlParamValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="macro" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="value" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.sqlMacroMap.put(macro, value);}</source-code>
          </source-codes>
        </operation>
        <operation id="o5c44085043154ebab60e9e80e57d68b4275" name="getSql" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return replaceMacros(sql);}

    /**
     * this method is called by other WDK objects. It is not called by the model
     * xml parser.
     * 
     * @param sql
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o4573d44afb8e4e76875878d211f9fd59275" name="setSql" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // append new line to the end, in case the last line is a comment;
        // otherwise, all modified sql will fail.
        this.sql = sql + "\n";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.Query#makeInstance()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o66369b1b47cc41fcbf582c024f2641b2275" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="validate" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="context" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return new SqlQueryInstance(user, this, values, validate,
                assignedWeight, context);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.Query#appendJSONContent(org.json.JSONObject)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9872ad4e4ca4465bb97444b103240bc1275" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsQuery" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        if (extra){
            // add macro into the content
            String[ macroNames = new String[sqlMacroMap.size();
            sqlMacroMap.keySet().toArray(macroNames);
            Arrays.sort(macroNames);
            JSONObject jsMacros = new JSONObject();
            for (String macroName : macroNames){
                jsMacros.put(macroName, sqlMacroMap.get(macroName));}
            jsQuery.put("macros", jsMacros);

            // add sql
            String sql = getSql().replaceAll("\\s+", " ");
            jsQuery.put("sql", sql);}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.Query#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6ad0f3f15ffe46b7807aac9c65bc3785275" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        // exclude sql
        for (WdkModelText sql : sqlList){
            if (sql.include(projectId)){
                sql.excludeResources(projectId);
                this.setSql(sql.getText());
                break;}}
        sqlList = null;

        // exclude sql
        for (WdkModelText dependentTable : dependentTableList){
            if (dependentTable.include(projectId)){
                dependentTable.excludeResources(projectId);
                String table = dependentTable.getText();
                this.dependentTableMap.put(table, table);}}
        dependentTableList = null;

        // exclude macros
        for (WdkModelText macro : sqlMacroList){
            if (macro.include(projectId)){
                macro.excludeResources(projectId);
                String name = macro.getName();
                if (sqlMacroMap.containsKey(name))
                    throw new WdkModelException("The macro " + name
                            + " is duplicated in query " + getFullName());

                sqlMacroMap.put(macro.getName(), macro.getText());}}
        sqlMacroList = null;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.Query#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o505910e5e0c5451daca937a20d7ef207275" name="resolveQueryReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // apply the sql macros into sql
        if (this.sql == null)
            throw new WdkModelException("null sql in "
                    + getQuerySet().getName() + "." + getName());

        // don't replace the sql here. the macros have to be replaced on the fly
        // in order to inject overridden macros from question.
        String sql = replaceMacros(this.sql);
        
        // verify the all param macros have been replaced
        Matcher matcher = Pattern.compile("&amp;&amp;([^&amp;]+)&amp;&amp;").matcher(sql);
        if (matcher.find())
            throw new WdkModelException("SqlParamValue macro "
                    + matcher.group(1) + " found in &lt;sql&gt; of query "
                    + getFullName() + ", but it's not defined.");}</source-code>
          </source-codes>
        </operation>
        <operation id="o7342415137f94548bd263ad58b8abcb7275" name="replaceMacros" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        for (String paramName : sqlMacroMap.keySet()){
            String pattern = "&amp;&amp;" + paramName + "&amp;&amp;";
            String value = sqlMacroMap.get(paramName);
            // escape the &amp; $ \ chars in the value
            sql = sql.replaceAll(pattern, Matcher.quoteReplacement(value));}
        return sql;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.Query#clone()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o777d37eee73a4a54916bf5b6b697c7d7275" name="clone" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new SqlQuery(this);}

    /**
     * @return the clobRow
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="of3cc05be15bc471782c0b2dde53948a7275" name="isClobRow" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return clobRow;}

    /**
     * @param clobRow
     *            the clobRow to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="of4bd90c070b5413fb874ef9243fa8468275" name="setClobRow" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="clobRow" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.clobRow = clobRow;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2cc72738261545af8f9f1f904931dbee275" name="addDependentTable" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependentTable" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.dependentTableList.add(dependentTable);}</source-code>
          </source-codes>
        </operation>
        <operation id="od669a9d7631e4c069ea1b675fd8e3adc275" name="getDependentTables" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ array = new String[dependentTableMap.size();
        dependentTableMap.keySet().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di216488777438620645" cid="C343" type="class" name="SqlQueryInstance" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aaf8a4694fbef4b98981bcf80ecc5c312145" name="query" type="SqlQuery" type-id="SqlQuery" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations />
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di637820792461195660" cid="C344" type="class" name="AbstractEnumParam" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:23">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a9e7c8cc353e04b92a6c8fcdf28b9015f836" name="multiPick" type="boolean" type-id="boolean" visibility="protected" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="ad8a697e7b5c8474a91973c909705ef2d836" name="quote" type="boolean" type-id="boolean" visibility="protected" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="a537bc9cea65c4e6fb48b8f5d2242dfcd836" name="dependedParamRef" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab7e5d333f08c467ca8d61b2c9bd55811836" name="displayType" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad061432c0ff24b19a2daf64aa93fccde836" name="selectMode" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a604f4fec65854310ab1aa414264f190b836" name="suppressNode" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o59515b29387c465e8a4d5e657f980069836" name="AbstractEnumParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="o28327708d5c24870943d76071955169b836" name="AbstractEnumParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="AbstractEnumParam" type-id="AbstractEnumParam" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(param);
        this.multiPick = param.multiPick;
        this.quote = param.quote;
        this.dependedParamRef = param.dependedParamRef;
        this.displayType = param.displayType;
        this.selectMode = param.selectMode;
        this.suppressNode = param.suppressNode;}</source-code>
          </source-codes>
        </operation>
        <operation id="od798137b78524f3d8f7967676b1b1a0b836" name="createEnumParamCache" type="EnumParamCache" type-id="EnumParamCache" visibility="protected" abstract="true" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException;

    private EnumParamCache getEnumParamCache(String dependedParamVal){
        if (isDependentParam() &amp;&amp; dependedParamVal == null){
            throw new NoDependedValueException(
                    "Attempt made to retrieve values in dependent param "
                            + getName() + " without setting depended value.");}
        try{
            return createEnumParamCache(dependedParamVal);}
        catch (WdkModelException wme){
            throw new WdkRuntimeException(
                    "Unable to create EnumParamCache for param " + getName()
                            + " with depended value " + dependedParamVal, wme);}}

    // ///////////////////////////////////////////////////////////////////
    // /////////// Public properties ////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////

    // used only to initially set this property</source-code>
          </source-codes>
        </operation>
        <operation id="o7ebb5cc28822478296d1b0d40567d359836" name="setMultiPick" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="multiPick" type="Boolean" type-id="Uml.Boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.multiPick = multiPick.booleanValue();}</source-code>
          </source-codes>
        </operation>
        <operation id="of3de9fba63b24a6f82caacac12f6f767836" name="getMultiPick" type="Boolean" type-id="Uml.Boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new Boolean(multiPick);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2fcf38ee1b1840b993a0759d3d1dd503836" name="isSkipValidation" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (displayType != null &amp;&amp; displayType.equals(DISPLAY_TYPE_AHEAD));}</source-code>
          </source-codes>
        </operation>
        <operation id="o22047679622e4a5c8d0e5b26851d0a37836" name="setQuote" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="quote" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.quote = quote;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0767c1bb24eb45e9bf48208d6307b5fe836" name="getQuote" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return quote;}

    /**
     * @return the displayType
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o507f7599198c44d7b4b259f9118a7e57836" name="getDisplayType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayType;}

    /**
     * @param displayType
     *            the displayType to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oed4ab27a728441e08c8424f875d70faa836" name="setDisplayType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayType = displayType;}</source-code>
          </source-codes>
        </operation>
        <operation id="o51b72d61005c4c7fb6fbb58ba024d76c836" name="isDependentParam" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (dependedParamRef != null);}</source-code>
          </source-codes>
        </operation>
        <operation id="ocb0814dd91c64de7b41ad979a46c0255836" name="getDependedParam" type="Param" type-id="Param" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (!isDependentParam()) return null;
        if (contextQuery != null){
            String paramName = dependedParamRef.split("\\.")[1;
            return contextQuery.getParamMap().get(paramName);}
        return (Param) wdkModel.resolveReference(dependedParamRef);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa6eb2b7c9d014f85a3199c39ddd36984836" name="setDependedParamRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.dependedParamRef = dependedParamRef;}

    /**
     * Returns the default value. In the case that this is a dependent param,
     * uses the default value of the depended param as the depended value
     * (recursively).
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o182a1dabbe4648b49f6bd9e909ec9848836" name="getDefault" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return getDefault(null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7ad2af4a1196424bb44e6b2fd6ccb7cf836" name="getDefault" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (isDependentParam()){
            if (dependedParamVal == null){
                logger.warn("Retrieving default value for dependent param "
                        + getName()
                        + " without depended param value.  Ensure this is intentional.");
                dependedParamVal = getDependedParam().getDefault();}
            return getEnumParamCache(dependedParamVal).getDefaultValue();}
        return getEnumParamCache(null).getDefaultValue();}</source-code>
          </source-codes>
        </operation>
        <operation id="o8ea7affbd54941eb87a4b884ace0a26b836" name="getValueCache" type="EnumParamCache" type-id="EnumParamCache" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getValueCache(null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o12476d6354d8459d861dd8a4dd7cb19a836" name="getValueCache" type="EnumParamCache" type-id="EnumParamCache" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getEnumParamCache(dependedParamVal);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2a27bb342c9d42178a50d76e8589d8ac836" name="getVocab" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getVocab(null);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa8d6b7b07a224729adfabe85a8d7ee0c836" name="getVocab" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkRuntimeException{
        return getEnumParamCache(dependedParamVal).getVocab();}</source-code>
          </source-codes>
        </operation>
        <operation id="o0c9bde9be6fd453b95b4e1cd5385058e836" name="getVocabTreeRoots" type="EnumParamTermNode[]" type-id="EnumParamTermNode[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getVocabTreeRoots(null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o238fa6ef97d84f0194f859c62f5f60b4836" name="getVocabTreeRoots" type="EnumParamTermNode[]" type-id="EnumParamTermNode[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getEnumParamCache(dependedParamVal).getVocabTreeRoots();}</source-code>
          </source-codes>
        </operation>
        <operation id="o7fe10cd4a2a543a4b896cd4be115b690836" name="getVocabInternal" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getVocabInternal(null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o5acad8cbdee34c179ac4003e0d3b5a8a836" name="getVocabInternal" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getEnumParamCache(dependedParamVal).getVocabInternal();}</source-code>
          </source-codes>
        </operation>
        <operation id="oaa54b21b83254a9f8e98f6575b7e2050836" name="getDisplays" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getDisplays(null);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa105fc654fca4a4eb9710c6725e182fc836" name="getDisplays" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getEnumParamCache(dependedParamVal).getDisplays();}</source-code>
          </source-codes>
        </operation>
        <operation id="oc91ef0acb1f849f8b1b7efa8570668aa836" name="getVocabMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getVocabMap(null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o1f59b3be87e44c2da1cd638f67c1980f837" name="getVocabMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getEnumParamCache(dependedParamVal).getVocabMap();}</source-code>
          </source-codes>
        </operation>
        <operation id="ofbf2819539ee4b129b72f2c81e1551ef837" name="getDisplayMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getDisplayMap(null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8e19609622d34e01ac45126725787f4f837" name="getDisplayMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getEnumParamCache(dependedParamVal).getDisplayMap();}</source-code>
          </source-codes>
        </operation>
        <operation id="oc20b37142e5c4de197cc4a4dbbe46991837" name="getParentMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getParentMap(null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7c92de70f67a4d94a70a16c3acfac18a837" name="getParentMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return getEnumParamCache(dependedParamVal).getParentMap();}

    // ///////////////////////////////////////////////////////////////////
    // /////////// Protected properties ////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="o4c7b19ee0faa46a5ba1db86b32c90c7b837" name="initTreeMap" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cache" type="EnumParamCache" type-id="EnumParamCache" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{

        // construct index
        Map&lt;String, EnumParamTermNode&gt; indexMap = new LinkedHashMap&lt;String, EnumParamTermNode&gt;();
        for (String term : cache.getTerms()){
            EnumParamTermNode node = new EnumParamTermNode(term);
            node.setDisplay(cache.getDisplay(term));
            indexMap.put(term, node);

            // check if the node is root
            String parentTerm = cache.getParent(term);
            if (parentTerm != null &amp;&amp; !cache.containsTerm(parentTerm))
                parentTerm = null;
            if (parentTerm == null){
                cache.addParentNodeToTree(node);
                cache.unsetParentTerm(term);}}
        // construct the relationships
        for (String term : cache.getTerms()){
            String parentTerm = cache.getParent(term);
            // skip if parent doesn't exist
            if (parentTerm == null) continue;

            EnumParamTermNode node = indexMap.get(term);
            EnumParamTermNode parent = indexMap.get(parentTerm);
            parent.addChild(node);}

        if (suppressNode) suppressChildren(cache.getTermTreeListRef());}</source-code>
          </source-codes>
        </operation>
        <operation id="o3ccfdbc1fa6e4edd94e1966a84705bfc837" name="suppressChildren" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="children" type="List" type-id="List" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        boolean suppressed = false;
        if (children.size() == 1){
            // has only one child, suppress it in the tree if it has
            // grandchildren
            EnumParamTermNode child = children.get(0);
            EnumParamTermNode[ grandChildren = child.getChildren();
            if (grandChildren.length &gt; 0){
                logger.debug(child.getTerm() + " suppressed.");
                children.remove(0);
                for (EnumParamTermNode grandChild : grandChildren){
                    children.add(grandChild);}
                // need to suppress children
                suppressChildren(children);
                suppressed = true;}}
        if (!suppressed){
            for (EnumParamTermNode child : children){
                suppressChildren(child.getChildrenList());}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5c6f91a15b2d4cbe99a40dceca5e7d48837" name="getTerms" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="termList" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // the input is a list of terms
        if (termList == null) return new String[0;

        String[ terms;
        if (multiPick){
            terms = termList.split("[,]+");
            for (int i = 0; i &lt; terms.length; i++){
                terms[i = terms[i.trim();}} else{
            terms = new String[{ termList.trim()};}

        // disable the validation - it prevented the revising of invalid step
        // if a strategy has more than one invalid steps.
        // if (!isSkipValidation()) {
        // initVocabMap(dependedParamVal);
        // for (String term : terms) {
        // if (!termInternalMap.containsKey(term))
        // throw new WdkModelException(" - Invalid term '" + term
        // + "' for parameter '" + name + "'");
        // }
        // }
        return terms;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#dependentValueToIndependentValue
     * (org.gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0e5c963a9f0344e79c7c240f27b4adee837" name="dependentValueToIndependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        return dependentValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#independentValueToInternalValue
     * (org.gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4da4fe2029d74159931458a15799e096837" name="dependentValueToInternalValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependedValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        return dependentValueToInternalValue(user, dependedValue, null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3b17e96bbe8b4816b834d85484cdd2a0837" name="dependentValueToInternalValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependedValue" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="dependedParamValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        EnumParamCache cache = getEnumParamCache(dependedParamValue);

        String rawValue = decompressValue(dependedValue);
        if (rawValue == null || rawValue.length() == 0) rawValue = emptyValue;

        String[ terms = getTerms(rawValue);
        StringBuffer buf = new StringBuffer();
        for (String term : terms){
            String internal = (isNoTranslation()) ? term
                    : cache.getInternal(term);
            if (!cache.containsTerm(term)){
                // doesn't validate term, if it doesn't exist in the list, just
                // use it as internval value. This is for wildcard support in
                // type-ahead params.
                if (isSkipValidation()){
                    internal = term;} else{
                    // term doesn't exists need to correct it later
                    throw new WdkUserException("param " + getFullName()
                            + " encountered an invalid term from user #"
                            + user.getUserId() + ": " + term);}}
            if (quote &amp;&amp; !(internal.startsWith("'") &amp;&amp; internal.endsWith("'")))
                internal = "'" + internal.replaceAll("'", "''") + "'";
            if (buf.length() != 0) buf.append(", ");
            buf.append(internal);}
        return buf.toString();}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o571f8c948a5f41f7a5b9aa7cf50f4cfd837" name="getInternalValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return getInternalValue(user, dependentValue, null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4f74d8153c194cb3bf49fa8d6799ee27837" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedParamValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException{
        String internalValue = dependentValueToInternalValue(user,
                dependentValue, dependedParamValue);
        if (handler != null)
            internalValue = handler.transform(user, internalValue);
        return internalValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#independentValueToRawValue(org.
     * gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od4adcb670b574c30bddc524f310b964e837" name="dependentValueToRawValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return decompressValue(dependentValue);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#rawValueToIndependentValue(org.
     * gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oea1e85c7096d4c53803b6e6cc0031c15837" name="rawOrDependentValueToDependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="rawValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return compressValue(rawValue);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#validateValue(org.gusdb.wdk.model
     * .user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oaca768687f27466fb8ec7649c42f72d2837" name="validateValue" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependedParamVal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        if (!isSkipValidation()){
            String rawValue = decompressValue(dependedParamVal);
            String[ terms = getTerms(rawValue);
            if (terms.length == 0 &amp;&amp; !allowEmpty)
                throw new WdkUserException(
                        "The value to enumParam/flatVocabParam "
                                + getFullName() + " cannot be empty");}}

    /**
     * @param selectMode
     *            the selectMode to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe621d758f0de4d929444febd698794fd837" name="setSelectMode" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="selectMode" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.selectMode = selectMode;}

    /**
     * @return the selectMode
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o821b16478c15493f8f9d02eea11a15dd837" name="getSelectMode" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return selectMode;}

    /**
     * Builds the default value of the "current" enum values
     * 
     * @throws WdkUserException
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3bc8e6cb78ef407fbd72af47a4d2badc837" name="applySelectMode" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cache" type="EnumParamCache" type-id="EnumParamCache" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        logger.debug("applySelectMode(): select mode: '" + selectMode
                + "', default from model = " + super.getDefault());
        String defaultFromModel = super.getDefault();

        String errorMessage = "The default value from model, '"
                + defaultFromModel + "', is not a valid term for param "
                + getFullName() + ", please double check this default value.";
        if (defaultFromModel != null){
            // default defined in the model, validate default values, and set it
            // to the cache.
            String[ defaults = getMultiPick() ? defaultFromModel.split("\\s*,\\s*")
                    : new String[{ defaultFromModel};
            for (String def : defaults){
                if (!cache.getTerms().contains(def)){
                    // the given default doesn't match any term
                    if (isDependentParam()){
                        // need to investigate and make sure the default is as
                        // intended.
                        // Cannot throws exception here, since the default might
                        // not be valid for a different depended value.
                        logger.warn(errorMessage);} else{
                        // param doesn't depend on anything. The default must be
                        // wrong.
                        logger.warn(errorMessage);
                        throw new WdkModelException(errorMessage);}}}
            cache.setDefaultValue(defaultFromModel);
            return;}

        // single pick can only select one value
        if (selectMode == null || !multiPick) selectMode = SELECT_MODE_FIRST;
        if (selectMode.equalsIgnoreCase(SELECT_MODE_ALL)){
            StringBuilder builder = new StringBuilder();
            for (String term : cache.getTerms()){
                if (builder.length() &gt; 0) builder.append(",");
                builder.append(term);}
            cache.setDefaultValue(builder.toString());} else if (selectMode.equalsIgnoreCase(SELECT_MODE_FIRST)){
            StringBuilder builder = new StringBuilder();
            Stack&lt;EnumParamTermNode&gt; stack = new Stack&lt;EnumParamTermNode&gt;();
            if (cache.getTermTreeListRef().size() &gt; 0)
                stack.push(cache.getTermTreeListRef().get(0));
            while (!stack.empty()){
                EnumParamTermNode node = stack.pop();
                if (builder.length() &gt; 0) builder.append(",");
                builder.append(node.getTerm());
                for (EnumParamTermNode child : node.getChildren()){
                    stack.push(child);}}
            cache.setDefaultValue(builder.toString());}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7ffe3c72d4544bc38007e4ee0f888d0a837" name="applySuggection" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="suggest" type="ParamSuggestion" type-id="ParamSuggestion" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        selectMode = suggest.getSelectMode();}

    /**
     * @return the suppressNode
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6824d16b3e624fe8b093ec53328c7db6837" name="isSuppressNode" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return suppressNode;}

    /**
     * @param suppressNode
     *            the suppressNode to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3bae175e2fcc4f2cb3e729d27f1f7e6d837" name="setSuppressNode" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="suppressNode" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.suppressNode = suppressNode;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#appendJSONContent(org.json.JSONObject
     * , boolean)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o236d0789291542fc879b1ade5f058b7e838" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsParam" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        // TODO Auto-generated method stub}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di580603527224524973" cid="C345" type="class" name="AnswerParam" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:25">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ae48367f6377140e5b51c23747a8f007e998" name="recordClassRefs" type="List&lt;RecordClassReference&gt;" type-id="List&lt;RecordClassReference&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae01b5d73d3684dd7bcbc96c5d1f4162d998" name="recordClasses" type="Map&lt;String, RecordClass&gt;" type-id="Map&lt;String, RecordClass&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o8eb49c20f0df4436aeac3ade75944067998" name="AnswerParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        recordClassRefs = new ArrayList&lt;RecordClassReference&gt;();
        recordClasses = new LinkedHashMap&lt;String, RecordClass&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="o4e07aabcecf643b39e0647bf6f45563f998" name="AnswerParam" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="AnswerParam" type-id="AnswerParam" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(param);
        if (param.recordClassRefs != null)
            this.recordClassRefs =
                    new ArrayList&lt;RecordClassReference&gt;(param.recordClassRefs);
        if (param.recordClasses != null)
            this.recordClasses =
                    new LinkedHashMap&lt;String, RecordClass&gt;(param.recordClasses);}

    /**
     * answerParam should be always invisible
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0ece720aff3f4440b465c2818f51a53c998" name="isVisible" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return false;}

    /**
     * @param recordClassRef
     *            the recordClassRef to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc9702cfa2b7844228ec07f6f597f7718998" name="addRecordClassRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassRef" type="RecordClassReference" type-id="RecordClassReference" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClassRefs.add(recordClassRef);}

    /**
     * @return the recordClass
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o16deb9442d254d61993c8bf6e6d543ae998" name="getRecordClasses" type="Map&lt;String, RecordClass&gt;" type-id="Map&lt;String, RecordClass&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, RecordClass&gt;(recordClasses);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#clone()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od2f2c557da1046ffbe7dc577075d7964998" name="clone" type="Param" type-id="Param" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new AnswerParam(this);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.Param#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8df0cc572f4c47fb80fd0465cddbf2a0998" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(model);
        if (resolved) return;

        // resolve recordClass ref
        for (RecordClassReference reference : recordClassRefs){
            String rcName = reference.getRef();
            RecordClass recordClass = model.getRecordClass(rcName);
            this.recordClasses.put(rcName, recordClass);}
        this.recordClassRefs = null;

        // make sure all record classes has the same primary key definition
        RecordClass recordClass = recordClasses.values().iterator().next();
        String[ columns =
                recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        Set&lt;String&gt; set = new HashSet&lt;String&gt;();
        for (String column : columns){
            set.add(column);}
        for (RecordClass rc : recordClasses.values()){
            String message =
                    "The recordClasses referred in answerParam "
                            + getFullName()
                            + " doesn't have same primary key definitions.";
            columns = rc.getPrimaryKeyAttributeField().getColumnRefs();
            if (columns.length != set.size())
                throw new WdkModelException(message);
            for (String column : columns){
                if (!set.contains(column))
                    throw new WdkModelException(message);}}

        this.resolved = true;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#appendJSONContent(org.json.JSONObject)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od3426d73f671460fa2f7f521382690be998" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsParam" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        // add recordClass ref
        // jsParam.put("recordClass", recordClassRef);}</source-code>
          </source-codes>
        </operation>
        <operation id="od355c2b0da0d4e4e8e861f6a52abadc1998" name="getAnswerValue" type="AnswerValue" type-id="AnswerValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, SQLException, NoSuchAlgorithmException,
            JSONException, WdkUserException{

        // check format
        int stepId = Integer.parseInt(dependentValue);
        Step step = user.getStep(stepId);
        return step.getAnswerValue();}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#dependentValueToIndependentValue
     * (org.gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o304c42faa9d747c1a4df4683df4df47b998" name="dependentValueToIndependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
    		throws WdkUserException, WdkModelException{
        int stepId = Integer.parseInt(dependentValue);
        try{
          Step step = user.getStep(stepId);
          return step.getAnswerKey();} catch (SQLException | JSONException ex){
          throw new WdkUserException(ex);}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#independentValueToInternalValue
     * (java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o206593e49e8447c0a99b012eb2c695d7998" name="dependentValueToInternalValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        int stepId = Integer.parseInt(dependentValue);

        if (isNoTranslation()) return Integer.toString(stepId);

        try{
          Step step = user.getStep(stepId);
          AnswerValue answerValue = step.getAnswerValue();
          return "(" + answerValue.getIdSql() + ")";} catch (SQLException | JSONException ex){
          throw new WdkUserException(ex);}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#independentValueToRawValue(java
     * .lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc3a7e853369d4e1fbddc70f3047a790a998" name="dependentValueToRawValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return dependentValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#rawValueToIndependentValue(java
     * .lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2d77e78934d649128badad6c904bbffd998" name="rawOrDependentValueToDependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="rawValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return rawValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#validateValue(org.gusdb.wdk.model
     * .user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa87f66fb475749bfbc008d796c28c2e5998" name="validateValue" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        try{
          int stepId = Integer.parseInt(dependentValue);
          Step step = user.getStep(stepId);
  
          // make sure the input step is of the acceptable type
          Question question = step.getAnswerValue().getQuestion();
          String rcName = question.getRecordClass().getFullName();
          if (!recordClasses.containsKey(rcName))
              throw new WdkUserException("The step of record type '" + rcName
                      + "' is not allowed in the answerParam "
                      + this.getFullName());} catch (SQLException | JSONException ex){
        throw new WdkUserException(ex);}}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6f0339dcd24242eda1ac354f0088862e998" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        for (int i = recordClassRefs.size() - 1; i &gt;= 0; i--){
            RecordClassReference reference = recordClassRefs.get(i);
            if (!reference.include(projectId)) recordClassRefs.remove(i);}
        if (recordClassRefs.size() == 0)
            throw new WdkModelException("No recordClass ref is defined in "
                    + "answerParam " + getFullName() + " for project "
                    + projectId);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8b0f76791ca44c40a05c800f065a63ce998" name="allowRecordClass" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClasses.containsKey(recordClassName);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o48d98dfce5db476ca125067e5bab739e998" name="applySuggection" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="suggest" type="ParamSuggestion" type-id="ParamSuggestion" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di857627810244573162" cid="C346" type="class" name="DatasetParam" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:28">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5efa602651734d9ebc547ad0a196382e80" name="recordClassRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a28e78888893b4322a2096996d56a058280" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a276a58421869493db7254194407d9f9a80" name="defaultType" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o79e129ea2dfe4b14ba551aa230903be280" name="DatasetParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="od156249c3bad46f9a9806e0ca956f11f80" name="DatasetParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="DatasetParam" type-id="DatasetParam" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(param);
        this.recordClass = param.recordClass;
        this.recordClassRef = param.recordClassRef;
        this.defaultType = param.defaultType;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.Param#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0f383eb25ec547e2b189e00d90de26ac80" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(model);
        recordClass = (RecordClass) wdkModel.resolveReference(recordClassRef);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#clone()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9ad11fc079db4b67b31f4e3aa0226c3c80" name="clone" type="Param" type-id="Param" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new DatasetParam(this);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#appendJSONContent(org.json.JSONObject)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc4191cd68e204dc5bee896aa52901afc80" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsParam" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        if (extra){
            jsParam.put("recordClass", recordClass.getFullName());}}

    /**
     * convert from user dataset id to dataset checksum
     * 
     * @see org.gusdb.wdk.model.query.param.Param#dependentValueToIndependentValue(org.gusdb.wdk.model.user.User,
     *      java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ocfab5459c1b84d42ab7f7241a35735c380" name="dependentValueToIndependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
    		throws WdkUserException, WdkModelException{
        logger.debug("dependent to independent: " + dependentValue);
        int userDatasetId = Integer.parseInt(dependentValue);
        Dataset dataset = user.getDataset(userDatasetId);
        dataset.setRecordClass(recordClass);
        return dataset.getChecksum();}

    /**
     * the internal value is an sql that represents the query from the dataset
     * tables, and returns the primary key columns.
     * 
     * @see org.gusdb.wdk.model.query.param.Param#independentValueToInternalValue
     *      (org.gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc9dcdf111c8b48f5b1370c16a3f5b97c80" name="dependentValueToInternalValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        // the input has to be a user-dataset-id
        int userDatasetId = Integer.parseInt(dependentValue);

        if (isNoTranslation()) return Integer.toString(userDatasetId);

        ModelConfig config = wdkModel.getModelConfig();
        String dbLink = config.getAppDB().getUserDbLink();
        String wdkSchema = config.getUserDB().getWdkEngineSchema();
        String userSchema = config.getUserDB().getUserSchema();
        String dvTable =
                wdkSchema + DatasetFactory.TABLE_DATASET_VALUE + dbLink;
        String udTable =
                userSchema + DatasetFactory.TABLE_USER_DATASET + dbLink;
        String colDatasetId = DatasetFactory.COLUMN_DATASET_ID;
        String colUserDatasetId = DatasetFactory.COLUMN_USER_DATASET_ID;
        StringBuffer sql = new StringBuffer("SELECT ");
        String[ pkColumns =
                recordClass.getPrimaryKeyAttributeField().getColumnRefs();
        for (int i = 1; i &lt;= pkColumns.length; i++){
            if (i &gt; 1) sql.append(", ");
            sql.append("dv." + Utilities.COLUMN_PK_PREFIX + i);
            sql.append(" AS " + pkColumns[i - 1);}
        sql.append(" FROM ");
        sql.append(udTable + " ud, " + dvTable + " dv ");
        sql.append(" WHERE dv." + colDatasetId + " = ud." + colDatasetId);
        sql.append(" AND ud." + colUserDatasetId + " = " + userDatasetId);
        return sql.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#independentValueToRawValue(org.
     * gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6433d80a45074ae9be0429882f2b9d3b80" name="dependentValueToRawValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        logger.debug("dependent to raw: " + dependentValue);
        int userDatasetId = Integer.parseInt(dependentValue);
        Dataset dataset = user.getDataset(userDatasetId);
        dataset.setRecordClass(recordClass);
        return dataset.getValue();}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#rawValueToIndependentValue(org.
     * gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o620a354bc4f04268be8decb1e484cc8f80" name="rawOrDependentValueToDependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="rawValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        // first assume the input is dependent value, that is, user dataset id
        if (rawValue == null || rawValue.length() == 0) return null;
        if (rawValue.matches("\\d+")){
            int userDatasetId = Integer.parseInt(rawValue);
            try{
                user.getDataset(userDatasetId);
                return rawValue;}
            catch (Exception ex){
                // dataset doesn't exist, create one
                logger.info("user dataset id doesn't exist: " + userDatasetId);}}
        return rawValueToDependentValue(user, "", rawValue);}

    /**
     * @param user
     * @param uploadFile
     * @param rawValue
     * @return
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o91ac170fc0044c79a2028366d51c3da280" name="rawValueToDependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="uploadFile" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="rawValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        logger.debug("raw to dependent: " + rawValue);
        Dataset dataset = user.createDataset(recordClass, uploadFile, rawValue);
        return Integer.toString(dataset.getUserDatasetId());}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#validateValue(org.gusdb.wdk.model
     * .user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o1db886611494479fb5aba4473ddb5cf780" name="validateValue" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        // try to get the dataset
        int userDatasetId = Integer.parseInt(dependentValue);
        user.getDataset(userDatasetId);}

    /**
     * @return the recordClass
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o380889055b124acbac0cc5071a1f893580" name="getRecordClass" type="RecordClass" type-id="RecordClass" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass;}

    /**
     * @param recordClassRef
     *            the recordClassRef to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oba76e4c7022f4095b91266df78e5003280" name="setRecordClassRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClassRef = recordClassRef;}</source-code>
          </source-codes>
        </operation>
        <operation id="o90ca835580d440c1b1392bf8cf028d1d80" name="setRecordClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa075dc97caf44b929caed7d28b7e371580" name="getDefaultType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (defaultType != null) ? defaultType : TYPE_DATA;}</source-code>
          </source-codes>
        </operation>
        <operation id="obc95a4c4ff8c410f98587fc5fbbd054b80" name="setDefaultType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="defaultType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.defaultType = defaultType;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o053267229dcf41fc969c5b3c9e62c66380" name="applySuggection" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="suggest" type="ParamSuggestion" type-id="ParamSuggestion" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        defaultType = suggest.getDefaultType();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di895949387854821510" cid="C347" type="class" name="EnumItem" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:28">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a6b3b7a6367704d6a9e6f0e3af4b42902841" name="display" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aec2d14d5f19d4cf5b7c6a0c88fc60c95841" name="term" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac7404a8593804e9ca8dc75a4c459bf62841" name="internal" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="addb40addcd514147b7641433ec74d563841" name="parentTerm" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="afb7df23d9a524a11919c29598420f55f841" name="dependedValues" type="List&lt;String&gt;" type-id="List&lt;String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6f17606e9de645a59c2627cec714942b841" name="isDefault" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ob81b7c72676d4b3583264c40f8474ad4841" name="EnumItem" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	dependedValues = new ArrayList&lt;String&gt;();}

    /**
     * Copy constructor
     * 
     * @param enumItem
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oad16b738ae634d4ab2d2f4cbfb764d15841" name="EnumItem" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="enumItem" type="EnumItem" type-id="EnumItem" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.display = enumItem.display;
        this.term = enumItem.term;
        this.internal = enumItem.internal;
        this.isDefault = enumItem.isDefault;
        this.parentTerm = enumItem.parentTerm;
	this.dependedValues = enumItem.dependedValues;}

    /**
     * @return the display
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oce9521db1f0a4c4e893f25a6480a8b8d841" name="getDisplay" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (display == null) ? term : display;}

    /**
     * @param display
     *            the display to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o72f73d583d0644dead409409afde7333841" name="setDisplay" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="display" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.display = display;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6386d182898f4f52bd518bccc375bfb8841" name="setTerm" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="term" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.term = term;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8b1c2a0dbeda4f5b84a0f7549d0f1735841" name="getTerm" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return term;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa0a2188513b44377a76f90865f8d25c4841" name="setInternal" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="internal" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.internal = internal;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5f3cd854fc8548cdb7c1ad485001da55841" name="getInternal" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return internal;}

    /**
     * @return the isDefault
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc5c0e6688b724b699dce082ac00bde7b841" name="isDefault" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.isDefault;}

    /**
     * @param isDefault
     *            the isDefault to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1c67865404814035b5a67ea5bb1ff46c841" name="setDefault" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isDefault" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.isDefault = isDefault;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5537730991c3457b953c4ce1080e3349841" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o28affb7676c54740a70a7b49f524ae01841" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing.}

    /**
     * @return the parentTerm
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7e7dcbd0a1804343b0b63db110b03221841" name="getParentTerm" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return parentTerm;}

    /**
     * @param parentTerm
     *            the parentTerm to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o18330d9295154240a196f4d8985ce81e841" name="setParentTerm" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="parentTerm" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.parentTerm = parentTerm;}</source-code>
          </source-codes>
        </operation>
        <operation id="o19cf4384f9c74ff8afe9f9135d473c55841" name="addDependedValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedValue" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	if (!dependedValues.contains(dependedValue.getText())){
	    dependedValues.add(dependedValue.getText());}}</source-code>
          </source-codes>
        </operation>
        <operation id="obd47e89350564385b1ad9aa5ed6334c8841" name="getDependedValues" type="List&lt;String&gt;" type-id="List&lt;String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	return dependedValues;}</source-code>
          </source-codes>
        </operation>
        <operation id="obff66ed7da3440d8b97e154dccd47707841" name="isValidFor" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedValues" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	for (String dependedValue : dependedValues){
	    if (this.dependedValues.contains(dependedValue)){
		return true;}}
	return false;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di100769027111217018" cid="C348" type="class" name="EnumItemList" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab14b8e08d0ad479a89d833a0a54f4825658" name="param" type="EnumParam" type-id="EnumParam" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a25f92efefa1341ecb0a7c63b3979483e658" name="items" type="List&lt;EnumItem&gt;" type-id="List&lt;EnumItem&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a04a145c35ee744d9a5b2384d113dc378658" name="useTermOnlies" type="List&lt;ParamConfiguration&gt;" type-id="List&lt;ParamConfiguration&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac9ad5bdad047401ca0e02bc0165f50f1658" name="useTermOnly" type="Boolean" type-id="Uml.Boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a34cf5d10e1a1462c88d8d466ba84b298658" name="dependedValue" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="of6fd4584cb27441db8d68d287d2fff0c658" name="EnumItemList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        items = new ArrayList&lt;EnumItem&gt;();
        useTermOnlies = new ArrayList&lt;ParamConfiguration&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="o64785d7fb2164d06bc9b4df383a47b58658" name="EnumItemList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="itemList" type="EnumItemList" type-id="EnumItemList" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.param = itemList.param;
        this.items = new ArrayList&lt;EnumItem&gt;(itemList.items);
        this.useTermOnly = itemList.useTermOnly;}</source-code>
          </source-codes>
        </operation>
        <operation id="o54f3b4f6841c4185ae0b11600e5c91e8658" name="setDependedValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	this.dependedValue = dependedValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="o484d1d530e6442de9c7f365a9117558e658" name="getDependedValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	return dependedValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="od85c262543bb48be8db7b80a7cfe714b658" name="addEnumItem" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="enumItem" type="EnumItem" type-id="EnumItem" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        items.add(enumItem);}</source-code>
          </source-codes>
        </operation>
        <operation id="o57d8be30d5454438805d088fae98afa3658" name="getEnumItems" type="EnumItem[]" type-id="EnumItem[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        EnumItem[ array = new EnumItem[items.size();
        items.toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="od9fe6c2b5f5840e7a5609513542fe368658" name="addUseTermOnly" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramConfig" type="ParamConfiguration" type-id="ParamConfiguration" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        useTermOnlies.add(paramConfig);}

    /**
     * @return the useTermOnly
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob6a32567563248c3b0ec1804d8f0a2cf658" name="isUseTermOnly" type="Boolean" type-id="Uml.Boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.useTermOnly;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4bab68dff9a34a52b4c816be555464a3658" name="setParam" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="EnumParam" type-id="EnumParam" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.param = param;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ofaa8cf86626f48b1bfec25e58a3e6454658" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude use term only
        boolean hasUseTermOnly = false;
        for (ParamConfiguration paramConfig : useTermOnlies){
            if (paramConfig.include(projectId)){
                if (hasUseTermOnly){
                    throw new WdkModelException("the &lt;enumList&gt; of enumParam "
                            + param.getFullName() + " has more &lt;useTermOnly&gt; "
                            + "for project " + projectId);} else{
                    this.useTermOnly = paramConfig.isValue();
                    hasUseTermOnly = true;}}}
        useTermOnlies = null;

        // exclude enum items
        List&lt;EnumItem&gt; newItems = new ArrayList&lt;EnumItem&gt;();
        for (EnumItem item : items){
            if (item.include(projectId)){
                item.excludeResources(projectId);
                newItems.add(item);}}
        items = newItems;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o882d97e713b442c68dfd7bb653f6697b658" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (EnumItem item : items){
            item.resolveReferences(wodkModel);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di450000159146726131" cid="C349" type="class" name="EnumParam" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:31">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a8be8d941252745b987ceef13e8d2d6b5166" name="enumItemLists" type="List&lt;EnumItemList&gt;" type-id="List&lt;EnumItemList&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0d63994c4f754e07a4886727d86c9bce167" name="enumItemList" type="EnumItemList" type-id="EnumItemList" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ob57c4d61336b4122bc52a236157bfe70167" name="EnumParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        enumItemLists = new ArrayList&lt;EnumItemList&gt;();}</source-code>
          </source-codes>
        </operation>
        <operation id="oeaa7eb908cb4423188bf94fcf4209ead167" name="EnumParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="EnumParam" type-id="EnumParam" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(param);
        this.enumItemList = param.enumItemList;}

    // ///////////////////////////////////////////////////////////////////
    // /////////// Public properties ////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="o251f0fdc0a064cd8a46031a2d25a8186167" name="addEnumItemList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="enumItemList" type="EnumItemList" type-id="EnumItemList" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.enumItemLists.add(enumItemList);}

    // ///////////////////////////////////////////////////////////////////
    // /////////// Protected properties ////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe3399bb85cda4789a828c94b666eb48c167" name="createEnumParamCache" type="EnumParamCache" type-id="EnumParamCache" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    	logger.trace("Entering createEnumParamCache(" + dependedValue + ")");
        Param dependedParam = getDependedParam();
        EnumParamCache cache = new EnumParamCache(this, dependedValue);
        EnumItem[ enumItems = enumItemList.getEnumItems();
        for (EnumItem item : enumItems){
            String term = item.getTerm();
            String display = item.getDisplay();
            String parentTerm = item.getParentTerm();
            boolean skip = false;

            // escape the term &amp; parentTerm
            // term = term.replaceAll("[,]", "_");
            // if (parentTerm != null)
            // parentTerm = parentTerm.replaceAll("[,]", "_");
            if (term.indexOf(',') &gt;= 0 &amp;&amp; dependedParam != null)
                throw new WdkModelException(this.getFullName()
                        + ": The term cannot contain comma: '" + term + "'");
            if (parentTerm != null &amp;&amp; parentTerm.indexOf(',') &gt;= 0)
                throw new WdkModelException(this.getFullName()
                        + ": The parent term cannot contain" + "comma: '"
                        + parentTerm + "'");

            if (isDependentParam()){
                // if this is a dependent param, only include items that are
            	//   valid for the current depended value
                String[ dependedValues = dependedValue.split(",");
                skip = !item.isValidFor(dependedValues);}

            if (!skip){
                cache.addTermValues(term, item.getInternal(), display, parentTerm);}}
        // check if the result is empty
        if (cache.isEmpty())
            throw new WdkEmptyEnumListException("The EnumParam ["
                    + getFullName() + "] doesn't have any values.");

        initTreeMap(cache);
        applySelectMode(cache);
    	logger.trace("Leaving createEnumParamCache(" + dependedValue + ")");
        return cache;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="obe607a49168a427bb38fcbb3d581aa9b167" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        // exclude enum items
        boolean hasEnumList = false;
        for (EnumItemList itemList : enumItemLists){
            if (itemList.include(projectId)){
                if (hasEnumList){
                    throw new WdkModelException("enumParam " + getFullName()
                            + " has more than one &lt;enumList&gt; for project "
                            + projectId);} else{
                    EnumItem[ enumItems = itemList.getEnumItems();
                    if (enumItems.length == 0)
                        throw new WdkModelException("enumParam '" + this.name
                                + "' has zero items");

                    itemList.setParam(this);
                    itemList.excludeResources(projectId);
                    this.enumItemList = itemList;

                    hasEnumList = true;}}}
        enumItemLists = null;
        if (enumItemList == null || enumItemList.getEnumItems().length == 0)
            throw new WdkModelException("No enum items available in enumParam "
                    + getFullName());}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.Param#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7a0db62c7b3043518b7e6a49e1ab31ca167" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(model);

        enumItemList.resolveReferences(model);

        StringBuffer sb = new StringBuffer();
        EnumItem[ enumItems = enumItemList.getEnumItems();
        for (EnumItem item : enumItems){
            if (item.isDefault()){
                if (sb.length() &gt; 0){
                    // single pick default should be singular value
                    if (!multiPick) break;
                    sb.append(",");}
                sb.append(item.getTerm());}}
        if (sb.length() &gt; 0){
            this.defaultValue = sb.toString();}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#clone()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o3edcdd5a850543309ac5607e9c7ea279167" name="clone" type="Param" type-id="Param" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new EnumParam(this);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#appendJSONContent(org.json.JSONObject)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ocfb23cb9e0664b83acf01df312da0a5d167" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsParam" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // do nothing. do not add the enum list into the content, since they may
        // be
        // changed between versions, but we don't want to invalidate a query
        // because
        // of it.}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di793586036550292473" cid="C350" type="class" name="EnumParamTermNode" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:31">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="add91b6cd60aa4e908cf24048f93cf139581" name="term" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae88c11e0f5d345ac93178faeec21b74e581" name="display" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aedb6bcbb3cb8420296395e65c9faaaa1581" name="children" type="List&lt;EnumParamTermNode&gt;" type-id="List&lt;EnumParamTermNode&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oa2d5aeffe83e4c84b052e8a9b55b9820581" name="EnumParamTermNode" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="term" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.term = term;
        children = new ArrayList&lt;EnumParamTermNode&gt;();}

    /**
     * @return
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ocf61dca709784470bfeb56aaa979f9f3581" name="getTerm" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return term;}

    /**
     * @param child
     */
    void</source-code>
          </source-codes>
        </operation>
        <operation id="o1c923644817e409eaf9046953e7ba72d581" name="addChild" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="child" type="EnumParamTermNode" type-id="EnumParamTermNode" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        children.add(child);}

    /**
     * @return
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o49074fbf0a9f4874bc1c1679ed9ffa2a581" name="getChildren" type="EnumParamTermNode[]" type-id="EnumParamTermNode[]" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        EnumParamTermNode[ array = new EnumParamTermNode[children.size();
        children.toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="odb7f0d26c61a411eb9f624a843494338581" name="getChildrenList" type="List&lt;EnumParamTermNode&gt;" type-id="List&lt;EnumParamTermNode&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return children;}

    /**
     * @return the display
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o491da49d60e8445488df4f066a18df18581" name="getDisplay" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return display;}

    /**
     * @param display
     *            the display to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oaf61e5c1ba4a45fc94536c5581ea6a87581" name="setDisplay" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="display" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.display = display;}

    /**
     * @return this term node as a tree node for rendering as a checkboxTree
     */
	public</source-code>
          </source-codes>
        </operation>
        <operation id="ob843d345c66848a0997b93e4717b37c8581" name="toTreeNode" type="TreeNode" type-id="TreeNode" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		TreeNode node = new TreeNode(getTerm(), getDisplay());
		for (EnumParamTermNode paramNode : getChildrenList()){
			if (paramNode.getChildren().length == 0){
				node.addChildNode(new TreeNode(paramNode.getTerm(), paramNode.getDisplay(), paramNode.getDisplay()));}
			else{
				node.addChildNode(paramNode.toTreeNode());}}
		return node;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di399545469788939737" cid="C351" type="class" name="FlatVocabParam" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:33">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a59e7957400474268a685fa8131098766812" name="query" type="Query" type-id="Query" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4648aa77d6524f6ba81a17de359fa2a6812" name="queryTwoPartName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae305e24c21624cf39f0ce44f306f71e1812" name="servedQueryName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="&quot;unknown&quot;">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o9f3e8f2de548465ba95aa1ce19c7bbae812" name="FlatVocabParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="ofa0b196f89af4de2bd80b6a6849173ca812" name="FlatVocabParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="FlatVocabParam" type-id="FlatVocabParam" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(param);
        this.query = param.query;
        this.queryTwoPartName = param.queryTwoPartName;
        this.servedQueryName = param.servedQueryName;}

    // ///////////////////////////////////////////////////////////////////
    // /////////// Public properties ////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="oeb270b9d0003477aa966a56d95eae0ce812" name="setQueryRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryTwoPartName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        this.queryTwoPartName = queryTwoPartName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2578a8cbe2f648eb826c86c074ed3c94812" name="getQuery" type="Query" type-id="Query" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return query;}

    /**
     * @param servedQueryName
     *            the servedQueryName to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od5d2b86256fb40cbb96ac0ead1f1e282812" name="setServedQueryName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="servedQueryName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.servedQueryName = servedQueryName;}

    // ///////////////////////////////////////////////////////////////////
    // /////////// Protected properties ////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.Param#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6ea8147f12fa4eb8960146bff6c7906a812" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(model);

        // the vocab query is always cloned to keep a reference to the param
        Query query = (Query) model.resolveReference(queryTwoPartName);
        query.resolveReferences(model);
        query = query.clone();

        // add a served query param into flatVocabQuery, if it doesn't exist
        ParamSet paramSet = model.getParamSet(Utilities.INTERNAL_PARAM_SET);
        StringParam param = new StringParam();
        param.setName(PARAM_SERVED_QUERY);
        param.setDefault(servedQueryName);
        param.setAllowEmpty(true);
        param.resolveReferences(model);
        param.setResources(model);
        paramSet.addParam(param);
        query.addParam(param);
        this.query = query;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#setResources(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o00510177f17d460c964aaa8f5f262f80812" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.setResources(model);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.param.AbstractEnumParam#initVocabMap()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of43e9601e01449528fd908f237b06723812" name="createEnumParamCache" type="EnumParamCache" type-id="EnumParamCache" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependedValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    	logger.trace("Entering createEnumParamCache(" + dependedValue + ")");
    	String errorStr = "Could not retrieve flat vocab values for param " +
    		getName() + " using depended value " + dependedValue;
    	try{
	        Param dependedParam = getDependedParam();
	        EnumParamCache cache = new EnumParamCache(this, dependedValue);
	
	        // check if the query has "display" column
	        boolean hasDisplay = query.getColumnMap().containsKey(COLUMN_DISPLAY);
	        boolean hasParent = query.getColumnMap()
	                .containsKey(COLUMN_PARENT_TERM);
	
	        // prepare param values
	        Map&lt;String, String&gt; values = new LinkedHashMap&lt;String, String&gt;();
	        values.put(PARAM_SERVED_QUERY, servedQueryName);
	
	        // add depended value if is dependent param
	        if (isDependentParam()){
	            // use the depended param as the input param for the vocab query,
	            // since the depended param might be overriden by question or
	            // query, while the original input param in the vocab query
	            // does not know about it.
	            query.addParam(dependedParam.clone());
	            values.put(dependedParam.getName(), dependedValue);}
	
	        User user = wdkModel.getSystemUser();
	
	        Map&lt;String, String&gt; context = new LinkedHashMap&lt;String, String&gt;();
	        context.put(Utilities.QUERY_CTX_PARAM, getFullName());
	        if (contextQuestion != null)
	            context.put(Utilities.QUERY_CTX_QUESTION,
	                    contextQuestion.getFullName());
	        logger.debug("PARAM [" + getFullName() + "] context Question: " +
	            ((contextQuestion == null) ? "N/A" : contextQuestion.getFullName()) +
	            ", context Query: " + ((contextQuery == null) ? "N/A" : contextQuery.getFullName()));
	        QueryInstance instance = query.makeInstance(user, values, true, 0, context);
	
	        ResultList result = instance.getResults();
	        while (result.next()){
	            Object objTerm = result.get(COLUMN_TERM);
	            Object objInternal = result.get(COLUMN_INTERNAL);
	            if (objTerm == null)
	                throw new WdkModelException("The term of flatVocabParam ["
	                        + getFullName() + "] is null. query ["
	                        + query.getFullName() + "].\n" + instance.getSql());
	            if (objInternal == null)
	                throw new WdkModelException("The internal of flatVocabParam ["
	                        + getFullName() + "] is null. query ["
	                        + query.getFullName() + "].\n" + instance.getSql());
	
	            String term = objTerm.toString().trim();
	            String value = objInternal.toString().trim();
	            String display = hasDisplay ? result.get(COLUMN_DISPLAY).toString()
	                    .trim() : term;
	            String parentTerm = null;
	            if (hasParent){
	                Object parent = result.get(COLUMN_PARENT_TERM);
	                if (parent != null)
	                    parentTerm = parent.toString().trim();}
	
	            // escape the term &amp; parentTerm
	            // term = term.replaceAll("[,]", "_");
	            // if (parentTerm != null)
	            // parentTerm = parentTerm.replaceAll("[,]", "_");
	            if (term.indexOf(',') &gt;= 0 &amp;&amp; dependedParam != null)
	                throw new WdkModelException(this.getFullName()
	                        + ": The term cannot contain comma: '" + term + "'");
	            if (parentTerm != null &amp;&amp; parentTerm.indexOf(',') &gt;= 0)
	                throw new WdkModelException(this.getFullName()
	                        + ": The parent term cannot contain " + "comma: '"
	                        + parentTerm + "'");
	
	            cache.addTermValues(term, value, display, parentTerm);}
	        if (cache.isEmpty()){
	            if (query instanceof SqlQuery)
	                logger.warn("vocab query returned 0 rows:" + ((SqlQuery) query).getSql());
	            throw new WdkModelException("No item returned by the query ["
	                    + query.getFullName() + "] of FlatVocabParam ["
	                    + getFullName() + "].");}
	        else{
	        	logger.debug("Query [" + query.getFullName() + "] returned " +
	        			cache.getNumTerms() + " of FlatVocabParam [" + getFullName() + "].");}
	        initTreeMap(cache);
	        applySelectMode(cache);
	    	logger.trace("Leaving createEnumParamCache(" + dependedValue + ")");
	        return cache;}
    	catch (WdkUserException e){
    		throw new WdkRuntimeException(errorStr, e);}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#clone()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o3748b5b8ca3e41728b514437d27182fb812" name="clone" type="Param" type-id="Param" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new FlatVocabParam(this);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#appendJSONContent(org.json.JSONObject)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o21883cccb6934b8fb9e4cf2238d50972812" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsParam" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        if (extra){
            // add underlying query name to it
            jsParam.append("query", query.getFullName());}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di492176797307403871" cid="C352" type="class" name="NoDependedValueException" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:33">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="oc1520003a908407ba782636ac3c44f8c885" name="NoDependedValueException" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		super(message);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di350002104403876638" cid="C353" type="class" name="Param" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:37">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="ocdb3d8b4ba664b18a8cbf7069b929a53831" name="clone" type="Param" type-id="Param" visibility="public" abstract="true" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">

    /**
     * Convert raw data to dependent data. this method needs to handle the case
     * when the input is already dependent data.
     * 
     * @param user
     * @param rawValue
     * @return
     * @throws WdkModelException
     * @throws WdkUserException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o626945feba4a4f708ae2a33021a57baa831" name="rawOrDependentValueToDependentValue" type="String" type-id="Uml.String" visibility="public" abstract="true" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="rawValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException;

    public abstract String dependentValueToRawValue(User user,
            String dependentValue) throws WdkModelException, WdkUserException;

    public abstract String dependentValueToIndependentValue(User user,
            String dependentValue) throws WdkUserException, WdkModelException;

    protected abstract String dependentValueToInternalValue(User user,
            String dependentValue) throws WdkModelException, WdkUserException;

    protected abstract void applySuggection(ParamSuggestion suggest);

    /**
     * The input the method can be either raw data or dependent data
     * 
     * @param user
     * @param rawOrDependentValue
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException
     * @throws JSONException
     * @throws WdkUserException
     */
    protected abstract void validateValue(User user, String rawOrDependentValue)
            throws WdkModelException, WdkUserException;

    protected abstract void appendJSONContent(JSONObject jsParam, boolean extra)
            throws JSONException;

    protected String id;
    protected String name;
    protected String prompt;

    private List&lt;WdkModelText&gt; helps;
    protected String help;

    protected String defaultValue;
    protected String sample;

    protected boolean visible;
    protected boolean readonly;

    private Group group;

    private List&lt;ParamSuggestion&gt; suggestions;
    protected boolean allowEmpty;
    protected String emptyValue;

    protected ParamSet paramSet;

    protected QueryFactory queryFactory;
    protected WdkModel wdkModel;

    private List&lt;ParamConfiguration&gt; noTranslations;
    /**
     * if this flag is set to true, the internal value will be the same as
     * dependent value. This flag is useful when the dependent value is sent to
     * other sites to process using ProcessQuery.
     */
    private boolean noTranslation = false;

    protected Question contextQuestion;
    protected Query contextQuery;

    private String handlerClass;
    protected ParamHandler handler;

    public Param(){
        visible = true;
        readonly = false;
        group = Group.Empty();
        helps = new ArrayList&lt;WdkModelText&gt;();
        suggestions = new ArrayList&lt;ParamSuggestion&gt;();
        noTranslations = new ArrayList&lt;ParamConfiguration&gt;();
        allowEmpty = false;
        emptyValue = "";}</source-code>
          </source-codes>
        </operation>
        <operation id="oe5ab3d4f3cb64eccbdc38d9bc8aceb99831" name="Param" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="Param" type-id="Param" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.id = param.id;
        this.name = param.name;
        this.prompt = param.prompt;
        this.help = param.help;
        this.defaultValue = param.defaultValue;
        this.sample = param.sample;
        this.visible = param.visible;
        this.readonly = param.readonly;
        this.group = param.group;
        this.queryFactory = param.queryFactory;
        this.allowEmpty = param.allowEmpty;
        this.emptyValue = param.emptyValue;
        this.paramSet = param.paramSet;
        this.wdkModel = param.wdkModel;
        this.noTranslation = param.noTranslation;
        this.resolved = param.resolved;
        this.handlerClass = param.handlerClass;
        this.handler = param.handler;
        this.contextQuestion = param.contextQuestion;
        this.contextQuery = param.contextQuery;}

    /**
     * @return the id
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o423d68955f414cc790852609f4c8a31b831" name="getId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return id;}

    /**
     * @param id
     *            the id to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe2ed2374df0b4bbaa8e38188095c6753831" name="setId" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="id" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.id = id;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa9ab98babea64f6ba42e863abbcca6cb831" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc988e987fb36441d99b4295487f53a37831" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oeca2d36aeece4bbe9836d11951f0bc83831" name="setParamSet" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramSet" type="ParamSet" type-id="ParamSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.paramSet = paramSet;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc162c2b423ae49c79e5507adf2cbdddf831" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return paramSet.getName() + "." + name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o15c41eaf4d484e74a501b5ab751baceb831" name="setPrompt" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="prompt" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.prompt = prompt;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9284f89745d3472d9192d12b3933c114831" name="getPrompt" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (prompt == null) return name;
        return prompt;}</source-code>
          </source-codes>
        </operation>
        <operation id="obb32303cc6984d4f8b0121fec881a60a831" name="addHelp" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="help" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.helps.add(help);}</source-code>
          </source-codes>
        </operation>
        <operation id="od2fe91b44e9843b68da2d987331dff86831" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (help == null) return getPrompt();
        return help;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3fbb07efdf54425b8290d217faf4732f831" name="setHelp" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="help" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.help = help;}</source-code>
          </source-codes>
        </operation>
        <operation id="oed17830af42d4d379f260818c8f2a25d831" name="setDefault" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="defaultValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (defaultValue == null) return; // use the current one
        this.defaultValue = defaultValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="o27090bdac34b4f7bb52b49367156af38831" name="getDefault" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        if (defaultValue != null &amp;&amp; defaultValue.length() == 0)
            defaultValue = null;
        return defaultValue;}

    /**
     * @return the sample
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0b10c07dabab4708ac7fa48483a6560b831" name="getSample" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.sample;}

    /**
     * @return Returns the readonly.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od092bf68208f482d9e817b861c632d6c831" name="isReadonly" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.readonly;}

    /**
     * @param readonly
     *            The readonly to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o481e187fe6654860ad2d321b472607d2831" name="setReadonly" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="readonly" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.readonly = readonly;}

    /**
     * @return Returns the visible.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe31d67a22c094b1eb8355d82d4940edb831" name="isVisible" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.visible;}

    /**
     * @param visible
     *            The visible to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o54486859cf064124822b505496f57f2a831" name="setVisible" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="visible" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.visible = visible;}

    /**
     * @return the allowEmpty
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa4e82ee434874e98b6cce7f298cd0682831" name="isAllowEmpty" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.allowEmpty;}</source-code>
          </source-codes>
        </operation>
        <operation id="oddc2f84013cb45598176cf121ac1751c831" name="setAllowEmpty" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="allowEmpty" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.allowEmpty = allowEmpty;}

    /**
     * @return the emptyValue
     */</source-code>
          </source-codes>
        </operation>
        <operation id="odae2ba470ab942abaa554bbf240cb777831" name="getEmptyValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return emptyValue;}

    /**
     * @param emptyValue
     *            the emptyValue to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o29bdee69402040b69d6b7961fa5ccec3832" name="setEmptyValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="emptyValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (emptyValue != null &amp;&amp; emptyValue.length() == 0) emptyValue = "";
        this.emptyValue = emptyValue;}

    /**
     * @return the group
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8d7eb619457f47939cf69b0704f3c337832" name="getGroup" type="Group" type-id="Group" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return group;}

    /**
     * @param group
     *            the group to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od848258f528a43f1b4ef887fe62be5aa832" name="setGroup" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="group" type="Group" type-id="Group" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.group = group;}</source-code>
          </source-codes>
        </operation>
        <operation id="od324563b49b54feaa5be74234e13c29a832" name="addSuggest" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="suggest" type="ParamSuggestion" type-id="ParamSuggestion" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.suggestions.add(suggest);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2b21bf37bfbb4a8991b7eec8636f92ac832" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        String classnm = this.getClass().getName();
        StringBuffer buf =
                new StringBuffer(classnm + ": name='" + name + "'" + newline
                        + "  prompt='" + prompt + "'" + newline + "  help='"
                        + help + "'" + newline + "  default='" + defaultValue
                        + "'" + newline + "  readonly=" + readonly + newline
                        + "  visible=" + visible + newline + "  noTranslation="
                        + noTranslation + newline);
        if (group != null) buf.append("  group=" + group.getName() + newline);

        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa8eb6d2926114194bd98897ff4c5ec53832" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        boolean hasHelp = false;
        for (WdkModelText help : helps){
            if (help.include(projectId)){
                if (hasHelp){
                    throw new WdkModelException("The param " + getFullName()
                            + " has more than one help for project "
                            + projectId);} else{
                    this.help = help.getText();
                    hasHelp = true;}}}
        helps = null;

        // exclude suggestions
        boolean hasSuggest = false;
        for (ParamSuggestion suggest : suggestions){
            if (suggest.include(projectId)){
                if (hasSuggest)
                    throw new WdkModelException("The param " + getFullName()
                            + " has more than one &lt;suggest&gt; for project "
                            + projectId);

                suggest.excludeResources(projectId);
                defaultValue = suggest.getDefault();
                sample = suggest.getSample();
                allowEmpty = suggest.isAllowEmpty();
                emptyValue = suggest.getEmptyValue();

                applySuggection(suggest);

                hasSuggest = true;}}
        suggestions = null;

        // exclude noTranslations
        boolean hasNoTranslation = false;
        for (ParamConfiguration noTrans : noTranslations){
            if (noTrans.include(projectId)){
                if (hasNoTranslation)
                    throw new WdkModelException("The param " + getFullName()
                            + " has more than one &lt;noTranslation&gt; for project "
                            + projectId);
                noTranslation = noTrans.isValue();
                hasNoTranslation = true;}}
        noTranslations = null;}</source-code>
          </source-codes>
        </operation>
        <operation id="obb4b6903ea754a1887f475e687d7f1bd832" name="compressValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        // check if the value is already been compressed
        if (value == null || value.length() == 0) return null;

        if (value.startsWith(Utilities.PARAM_COMPRESSE_PREFIX)) return value;

        // check if the value needs to be compressed
        if (value.length() &gt;= Utilities.MAX_PARAM_VALUE_SIZE){
            String checksum = queryFactory.makeClobChecksum(value);
            value = Utilities.PARAM_COMPRESSE_PREFIX + checksum;}
        return value;}</source-code>
          </source-codes>
        </operation>
        <operation id="o684397900bcf4e879518b6eb7cc6681f832" name="decompressValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException{
        if (value == null || value.length() == 0) return null;

        // check if the value is compressed; that is, if it has a compression
        // prefix
        if (!value.startsWith(Utilities.PARAM_COMPRESSE_PREFIX)) return value;

        // decompress the value
        String checksum =
                value.substring(Utilities.PARAM_COMPRESSE_PREFIX.length())
                        .trim();
        String decompressed = queryFactory.getClobValue(checksum);
        if (decompressed != null) value = decompressed;
        return value;}</source-code>
          </source-codes>
        </operation>
        <operation id="o38154f72030d41fd80658084bd9234e1832" name="getJSONContent" type="JSONObject" type-id="JSONObject" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws JSONException{
        JSONObject jsParam = new JSONObject();
        jsParam.put("name", getFullName());
        appendJSONContent(jsParam, extra);
        return jsParam;}</source-code>
          </source-codes>
        </operation>
        <operation id="o70e27f0165e040bc998cb63ecea27608832" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        this.wdkModel = model;
        this.queryFactory = model.getQueryFactory();}</source-code>
          </source-codes>
        </operation>
        <operation id="oec16aefb3649453ea484e785a837c15e832" name="replaceSql" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="internalValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        String regex = "\\$\\$" + name + "\\$\\$";
        // escape all single quotes in the value
        return sql.replaceAll(regex, Matcher.quoteReplacement(internalValue));}</source-code>
          </source-codes>
        </operation>
        <operation id="obcd5ba574bbd465cbf7fc62c07bbd21b832" name="validate" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, SQLException,
            JSONException, WdkUserException{
        // handle the empty case
        if (dependentValue == null || dependentValue.length() == 0){
            if (!allowEmpty)
                throw new WdkModelException("The parameter '" + getPrompt()
                        + "' does not allow empty value");
            // otherwise, got empty value and is allowed, no need for further
            // validation.} else{
            // value is not empty, the sub classes will complete further
            // validation
            validateValue(user, dependentValue);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o3a7c488ebc064e85947c06e484a9d005832" name="addNoTranslation" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="noTranslation" type="ParamConfiguration" type-id="ParamConfiguration" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.noTranslations.add(noTranslation);}</source-code>
          </source-codes>
        </operation>
        <operation id="o692ad50f5915435aae9476c21e845b6c832" name="isNoTranslation" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return noTranslation;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc77043b35ad64b3389dc1a9694bc4cc9832" name="setNoTranslation" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="noTranslation" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.noTranslation = noTranslation;}

    /**
     * Set the question where the param is used. The params in a question are
     * always cloned when question is initialized, therefore, each param object
     * will refer to one question uniquely.
     * 
     * @param question
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o252c670909ef43309fa93b3f8a689140832" name="setContextQuestion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.contextQuestion = question;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8d7c187486ab4a5eb18ac3b254313d04832" name="setContextQuery" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="query" type="Query" type-id="Query" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.contextQuery = query;}</source-code>
          </source-codes>
        </operation>
        <operation id="o07e4545de63043bc9fb18398ad1d890a832" name="setHandlerClass" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="handlerClass" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.handlerClass = handlerClass;}</source-code>
          </source-codes>
        </operation>
        <operation id="o265371e95d9d4b2a8118f2b97de81b75832" name="setHandler" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="handler" type="ParamHandler" type-id="ParamHandler" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        handler.setParam(this);
        handler.setWdkModel(wdkModel);
        this.handler = handler;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob13db971a64f4fb0a7c9d9d138bcb25d833" name="getInternalValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
    	String internalValue = dependentValueToInternalValue(user, dependentValue);
    	if (handler != null)
    		internalValue = handler.transform(user, internalValue);
    	return internalValue;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oef43719067f14889a47c1c3c63a8def9833" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(wdkModel);

        this.wdkModel = wdkModel;

        if (handlerClass != null){
            try{
                Class&lt;? extends ParamHandler&gt; hClass =
                        Class.forName(handlerClass).asSubclass(
                                ParamHandler.class);
                handler = hClass.newInstance();
                handler.setParam(this);
                handler.setWdkModel(wdkModel);}
            catch (Exception ex){
                throw new WdkModelException(ex);}
            handlerClass = null;}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di336626907843097592" cid="C354" type="class" name="ParamConfiguration" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:38">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7255a1e53da84121bc826477301bcf7898" name="value" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o600d6e17e4e24c12b7538c86fbc3196298" name="isValue" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.value;}

    /**
     * @param value
     *                the value to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o181a43c2360e4cf297ffc06194b417ba98" name="setValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.value = value;}

    /**
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe150cd36c6474c95bf6b16a392ac2d8298" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model.WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4fab4ddea29b4dfbbefa640a4e375fea98" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di213750408526775663" cid="C355" type="class" name="ParamReference" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:40">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aee51e5280e1b445da64c4e64715c527b738" name="defaultValue" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aaab5b15b0f1b491e89980779566d3f84738" name="allowEmpty" type="Boolean" type-id="Uml.Boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aab58d781fe5542f1bb5b549950a146a3738" name="multiPick" type="Boolean" type-id="Uml.Boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ae51034da53aa4e6c9c9e848c43e30c03738" name="queryRef" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9c7b0bd805db467c961284512dbbebb0738" name="quote" type="Boolean" type-id="Uml.Boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4b81d5ac90d644ed9a63c6d26c16fb80738" name="number" type="Boolean" type-id="Uml.Boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a1ce9ccb5a45944838543b413d79f3d98738" name="emptyValue" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac6b72ee4bc5c49a2aa0bacde578432b6738" name="displayType" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9dcad0067f504ec9bd8bc4a7769022c6738" name="visible" type="Boolean" type-id="Uml.Boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a380d634a98f24def9a07e559faded175738" name="selectMode" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af347521422ed40b9abd7ca11e50e8243738" name="noTranslation" type="Boolean" type-id="Uml.Boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9175f77697c34882bbdc8f56512afea8738" name="suppressNode" type="Boolean" type-id="Uml.Boolean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aab408d21399348dcb9ec3f85f49c6af9738" name="help" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o8358049fd5e94157a464c28e3ca44f11738" name="ParamReference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}

    /**
     * @param twoPartName
     * @throws WdkModelException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe059f94306bb486abfd993cc2b2b2ea8738" name="ParamReference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="twoPartName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super(twoPartName);
        // TODO Auto-generated constructor stub}

    /**
     * @return Returns the defaultValue.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8271f719b61e42308bf8daebaf27d2b0738" name="getDefault" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.defaultValue;}

    /**
     * @param defaultValue
     *            The defaultValue to set.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa178b53d242f42e895ea5e49f96e4866738" name="setDefault" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="defaultValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.defaultValue = defaultValue;}

    /**
     * @return the allowEmpty
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od812b79eabc9417196a3fe236e6dc10c738" name="isAllowEmpty" type="Boolean" type-id="Uml.Boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.allowEmpty;}

    /**
     * @param allowEmpty
     *            the allowEmpty to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o82971d6108f6407596d6f1b66038f061738" name="setAllowEmpty" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="allowEmpty" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.allowEmpty = allowEmpty;}

    /**
     * @return the multiPick
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc53af045ec7e47729ad6ebb4b7317657738" name="isMultiPick" type="Boolean" type-id="Uml.Boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.multiPick;}

    /**
     * @param multiPick
     *            the multiPick to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o851c68cb0a7f44338c6d31374ea49fbf738" name="setMultiPick" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="multiPick" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.multiPick = multiPick;}

    /**
     * @return the queryRef
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4a2eac97cfe94ceaaa2b9c7b10369b95738" name="getQueryRef" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.queryRef;}

    /**
     * @param queryRef
     *            the queryRef to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o73321913d45741c68354420f188e399f738" name="setQueryRef" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.queryRef = queryRef;}

    /**
     * @return the quote
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9cfe0ea394ef4808a6a4bd729bed21c5738" name="getQuote" type="Boolean" type-id="Uml.Boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return quote;}

    /**
     * @param quote
     *            the quote to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4585a78417bf4d72a14134846258e477738" name="setQuote" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="quote" type="Boolean" type-id="Uml.Boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.quote = quote;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa52a9f1d91b14ea285a1b30277cce931738" name="getEmptyValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return emptyValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofc7427061c1e4e309041406a05fade67738" name="setEmptyValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="emptyValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.emptyValue = emptyValue;}

    /**
     * @return the displayType
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od9a2e510afaf4b868e2cf06b2750b872738" name="getDisplayType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return displayType;}

    /**
     * @param displayType
     *            the displayType to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o933bf25df23e489f8426f2da3de214e9738" name="setDisplayType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.displayType = displayType;}

    /**
     * @return the visible
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o72c604c96cbc4c76ab77e2658cf3e935738" name="getVisible" type="Boolean" type-id="Uml.Boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return visible;}

    /**
     * @param visible
     *            the visible to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oea93feea559c418dbbf00662971f6515738" name="setVisible" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="visible" type="Boolean" type-id="Uml.Boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.visible = visible;}

    /**
     * @return the selectMode
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of4db27f2ebc84e8799c8c193e644f203738" name="getSelectMode" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return selectMode;}

    /**
     * @param selectMode
     *            the selectMode to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob56e31064a4e4bcd8e81ac89cfeaf449738" name="setSelectMode" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="selectMode" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.selectMode = selectMode;}

    /**
     * @return the noTranslation
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7ab1bad377d74f4b858cc96861ad0a07738" name="getNoTranslation" type="Boolean" type-id="Uml.Boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return noTranslation;}

    /**
     * @param noTranslation
     *            the noTranslation to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od84453c9fef14e2e9a49bfbc3cd79bc9738" name="setNoTranslation" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="noTranslation" type="Boolean" type-id="Uml.Boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.noTranslation = noTranslation;}

    /**
     * @return the number
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o79c52620a0db408d9057e67c027a44f6738" name="getNumber" type="Boolean" type-id="Uml.Boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return number;}

    /**
     * @param number
     *            the number to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oec1da324c15040348e91c4dc619aaf62738" name="setNumber" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="number" type="Boolean" type-id="Uml.Boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.number = number;}

    /**
     * @return the suppressNode
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa148b1f2530e438fa75e571731532cc0738" name="getSuppressNode" type="Boolean" type-id="Uml.Boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return suppressNode;}

    /**
     * @param suppressNode
     *            the suppressNode to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa629a10c7738499ca9c02144bbdce01c738" name="setSuppressNode" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="suppressNode" type="Boolean" type-id="Uml.Boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.suppressNode = suppressNode;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob943d883d6214448916e3a368ba4a0d9738" name="addHelp" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="help" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.helps.add(help);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2e3788c5d0344b2fb6e3247790e53956738" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return help;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o611f95e1a8874baf98677a6e5e309d72738" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        for (WdkModelText help : helps){
            if (help.include(projectId)){
                if (this.help != null)
                    throw new WdkModelException("More than one &lt;help&gt; are "
                            + "defined in the paramRef '"
                            + this.getTwoPartName());

                help.excludeResources(projectId);
                this.help = help.getText();}}
        helps = null;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di283948844495197363" cid="C356" type="class" name="ParamSet" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:41">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aacc6b52bf52b460787af0891c1ba31de835" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad0a1dbbf4d3740d9a33d52e833672d92835" name="useTermOnly" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oce2d998535324512b7846dbc58f80b7e835" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0251f0b05d3144259ccd50c49b1be644835" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o18c0061d58af415fa24255928fe43dc6835" name="getParam" type="Param" type-id="Param" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Param q = paramMap.get(name);
        if (q == null)
            throw new WdkModelException("Param Set " + getName()
                    + " does not include param " + name);
        return q;}</source-code>
          </source-codes>
        </operation>
        <operation id="o82cb8c5e6ea843a58144442f36d867b1835" name="getElement" type="Object" type-id="Object" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return paramMap.get(name);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3c0fe82eb38444e49c1c3aa570bcf398835" name="getParams" type="Param[]" type-id="Param[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Param[ array = new Param[paramMap.size();
        paramMap.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa2110b5752804a50a2ae7d20478073f5835" name="contains" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return paramMap.containsKey(paramName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o227c841e77f1440082bfc87aa368f2d2835" name="addParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="Param" type-id="Param" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        param.setParamSet(this);
        if (paramList != null) paramList.add(param);
        else paramMap.put(param.getName(), param);}</source-code>
          </source-codes>
        </operation>
        <operation id="o763557437a594f808bf18effdf97b5bf835" name="addUseTermOnly" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramConfig" type="ParamConfiguration" type-id="ParamConfiguration" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        useTermOnlies.add(paramConfig);}</source-code>
          </source-codes>
        </operation>
        <operation id="o1f09a12826b54be7909d98191750fc22835" name="isUseTermOnly" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return useTermOnly;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob827a4b806bf4777982517cba5474cd9835" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (Param param : paramMap.values()){
            param.resolveReferences(model);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oa84ec0cc58814562b343b5527462fcf2835" name="setResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        for (Param param : paramMap.values()){
            param.setResources(model);}}</source-code>
          </source-codes>
        </operation>
        <operation id="obca6c84f21924e228448ea34270492c7835" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer("ParamSet: name='" + name + "'");
        buf.append(newline);

        for (Param param : paramMap.values()){
            buf.append(newline);
            buf.append(":::::::::::::::::::::::::::::::::::::::::::::");
            buf.append(newline);
            buf.append(param).append(newline);}
        return buf.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8f9b2661818e4bce9824562c2b176045835" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // exclude use term only. this must happen before processing params,
        // since enum/vocab params will use the value as default
        boolean hasUseTermOnly = false;
        for (ParamConfiguration paramConfig : useTermOnlies){
            if (paramConfig.include(projectId)){
                if (hasUseTermOnly){
                    throw new WdkModelException("paramSet " + getName()
                            + " has more than one &lt;useTermOnly&gt; tag "
                            + "for project " + projectId);} else{
                    useTermOnly = paramConfig.isValue();
                    hasUseTermOnly = true;}}}
        useTermOnlies = null;

        // exclude resources in each question
        for (Param param : paramList){
            // set the paramSet to each child param. The paramSet contains the
            // default value for the param, therefore it should happen before
            // excluding the resource from param
            if (param.include(projectId)){
                param.excludeResources(projectId);
                String paramName = param.getName();

                if (paramMap.containsKey(paramName))
                    throw new WdkModelException("Param named " + paramName
                            + " already exists in param set " + this.name);
                paramMap.put(param.getName(), param);}}
        paramList = null;}

    // ///////////////////////////////////////////////////////////////
    // ///// protected
    // ///////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di363391809175729135" cid="C357" type="class" name="ParamSuggestion" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:42">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2541768ade884179a1477308658fda88642" name="sample" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa2e7aa3be46b42679d6f4e236c67f82e642" name="defaultValue" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6881547c18e0427e860cea67fd8315ff642" name="allowEmpty" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="a6931dd4b8fcc4f68bdbd5664b53d970d642" name="emptyValue" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="&quot;&quot;">
          <stereotypes />
        </attribute>
        <attribute id="a1144fc775ea9445ca344bd1965e22bee642" name="selectMode" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a359dd4b069534e96a41f26771f34deca642" name="defaultType" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0d2ab252fc5b4d7e85d94d6cc900b137642" name="ParamSuggestion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}

    /**
     * the copy constructor is used by the clone methods
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3af8042c0fce459883ae44f4e798fdee642" name="ParamSuggestion" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="suggestion" type="ParamSuggestion" type-id="ParamSuggestion" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.sample = suggestion.sample;
        this.defaultValue = suggestion.defaultValue;
        this.allowEmpty = suggestion.allowEmpty;
        this.emptyValue = suggestion.emptyValue;
        this.selectMode = suggestion.selectMode;
        this.defaultType = suggestion.defaultType;}

    /**
     * @return the allowEmpty
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe8e4c05243cd4992be2b8c12a5cb9e26642" name="isAllowEmpty" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.allowEmpty;}

    /**
     * @param allowEmpty
     *            the allowEmpty to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5ca4e3477b2d4c0797d3e72d02f4a081642" name="setAllowEmpty" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="allowEmpty" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.allowEmpty = allowEmpty;}

    /**
     * @return the defaultValue
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4ad792f8635e44a697e07e4667e27aa7642" name="getDefault" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.defaultValue;}

    /**
     * @param defaultValue
     *            the defaultValue to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7823a8bf0c7845c498b70061ad229e96642" name="setDefault" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="defaultValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.defaultValue = (defaultValue.trim().length() == 0) ? null
                : defaultValue;}

    /**
     * @return the sample
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7f75857bacdc4acca69b2c08758bfd18642" name="getSample" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.sample;}

    /**
     * @param sample
     *            the sample to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob68568099d1842a1ad8c30e15b099612642" name="setSample" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sample" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.sample = sample;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModelBase#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o3556b50763ef42adac45af753c6d67f8642" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.WdkModelBase#resolveReferences(org.gusdb.wdk.model
     * .WdkModel)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o302c47901c7743fea8f86c2305197031642" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    // do nothing}

    /**
     * @return the emptyValue
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1009cff227a24bffba3277b013fd9b49642" name="getEmptyValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return emptyValue;}

    /**
     * @param emptyValue
     *            the emptyValue to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6bea08886bd5431a9ce85fb532e42b30642" name="setEmptyValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="emptyValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.emptyValue = emptyValue;}

    /**
     * @return the selectMode
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa4acd8ceb74e4036b9ee716e7934b550642" name="getSelectMode" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return selectMode;}

    /**
     * @param selectMode
     *            the selectMode to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0aa7e74b2819468f926b5a435faef021642" name="setSelectMode" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="selectMode" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.selectMode = selectMode;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8780bf7a74e24f5eb20d0a2a352b05a3642" name="getDefaultType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return defaultType;}</source-code>
          </source-codes>
        </operation>
        <operation id="o10eb547c0da34c4db33ade2962b4ef33642" name="setDefaultType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="defaultType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.defaultType = defaultType;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di734593560779407928" cid="C358" type="class" name="ParamValuesSet" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a1f86b4c09ca8496e83888c77781dd695368" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="adb87b05d9844411f9b31277863570719368" name="minRows" type="Integer" type-id="Uml.Integer" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a56bc9d42c38c455a9b8cdfaf0a95eb65369" name="maxRows" type="Integer" type-id="Uml.Integer" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o1300a19d9b9b4c56bc989888aaa3c781369" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o11d09093dc1f42beb2161a6ed7042f6d369" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="od5285ce6386b45e8b59caf146196ac3e369" name="setMinRows" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="minRows" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.minRows = new Integer(minRows);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0516f6b2dc5b4249a6700a114287c93e369" name="getMinRows" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return minRows == null ? 1 : minRows;}</source-code>
          </source-codes>
        </operation>
        <operation id="o72c83d57fef34180882520a2abcdfdb6369" name="setMaxRows" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="maxRows" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.maxRows = new Integer(maxRows);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6286a5cadca54249acf1c7f30a950f95369" name="getMaxRows" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return maxRows == null ? MAXROWS : maxRows;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc5dd8f13c8ff4a9cbaabbef753b4f5eb369" name="put" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="value" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        paramValues.put(name, value);}</source-code>
          </source-codes>
        </operation>
        <operation id="ofbef9b95079f437794572379db1dab1c369" name="getParamValues" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return paramValues;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1ce84cf34d9947f4bf324fed6938bb2b369" name="getParamNames" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ example = new String[paramValues.size();
        paramValues.keySet().toArray(example);
        return example;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofb3390c83b2e4b65847fd7bad73565dd369" name="updateWithDefaults" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="defaults" type="ParamValuesSet" type-id="ParamValuesSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (defaults == null) return;
        if (minRows == null) minRows = defaults.getMinRows();
        Map&lt;String, String&gt; map = defaults.getParamValues();
        for (String paramName : map.keySet()){
            if (!paramValues.containsKey(paramName)){
                paramValues.put(paramName, map.get(paramName));}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o013b5f69b82b4699871a3341d5cfd1d7369" name="updateWithDefault" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="defaultValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (!paramValues.containsKey(paramName) &amp;&amp; defaultValue != null){
            paramValues.put(paramName, defaultValue);}}</source-code>
          </source-codes>
        </operation>
        <operation id="ocdebc35005764c77ac3f71d4a11bed5a369" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{}</source-code>
          </source-codes>
        </operation>
        <operation id="o06af9d8706db44148825e9beb6b12a01369" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return paramValues.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o0cdd0572072e42cd927eb5c16647cbf5369" name="getCmdLineString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer();
        for (String paramName : paramValues.keySet()){
            buf.append(paramName + " \"" + paramValues.get(paramName) + "\" ");}
        return buf.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="oc796151353294383b331f8967a8aa2db369" name="getWhereClause" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer();
        String delim = "where ";
        for (String paramName : paramValues.keySet()){
            buf.append(delim + paramName + " = '" + paramValues.get(paramName)
                    + "' ");
            delim = "and ";}
        return buf.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o4b4c2e500a424de8a33be418a8a926d6369" name="getNamesAsString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buf = new StringBuffer();
        String delim = "";
        for (String paramName : paramValues.keySet()){
            buf.append(delim + paramName);
            delim = ", ";}
        return buf.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o2a61fe6bb16b4046a030221a7645f5d2369" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wodkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di224826006748510187" cid="C359" type="class" name="RecordClassReference" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2679b7b527354ad899793f3450c8898d486" name="ref" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o50083f712649459c97d7fefefe167953486" name="RecordClassReference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="ob5565946fc434e37bb620a13f5a4702c486" name="RecordClassReference" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ref" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.ref = ref;}

    /**
     * @return the ref
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o03a54400527244d8b174c1b34d260c0e486" name="getRef" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return ref;}

    /**
     * @param ref
     *            the ref to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5523ef000b134aa58a994e9e7f5a0b03486" name="setRef" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ref" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.ref = ref;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di372783418283730180" cid="C360" type="class" name="StringParam" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:45">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a35d6c651f109466fa585fdf61b4058b5465" name="regex" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af62758760f0647c48daa6ae7b882c3d6465" name="length" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="a147832f73b8b48b9843ac9868d05eae8465" name="number" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
        <attribute id="af636d545113f48d9bf62d4d5357ec35f465" name="multiLine" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o409187ea69ed4b209c87699818643334465" name="StringParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="obc9521fe42af4c0caf149b8a2264f20d465" name="StringParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="StringParam" type-id="StringParam" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(param);
        if (param.regexes != null)
            this.regexes = new ArrayList&lt;WdkModelText&gt;();
        this.regex = param.regex;
        this.length = param.length;
        this.number = param.number;
        this.multiLine = param.multiLine;}

    // ///////////////////////////////////////////////////////////////////
    // /////////// Public properties ////////////////////////////////////
    // ///////////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="o2666e9980c984366836ce3ee88ff6866465" name="addRegex" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="regex" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.regexes.add(regex);}</source-code>
          </source-codes>
        </operation>
        <operation id="o86325a2b50a141d1b216a797f2420680465" name="setRegex" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="regex" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.regex = regex;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa43835dd4287448facce506eff6902a0465" name="getRegex" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return regex;}

    /**
     * @return the length
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0b576f1ea2b3488d958fe74a366bb256465" name="getLength" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return length;}

    /**
     * @param length
     *            the length to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7752b684b138426087a9b696d9340f04465" name="setLength" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="length" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.length = length;}

    /**
     * @return the isNumber
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1f924426672e44969f158c822d227f40465" name="isNumber" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return number;}

    /**
     * @param isNumber
     *            the isNumber to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe919029604914bed9d1a7705ebeec3d0465" name="setNumber" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isNumber" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.number = isNumber;}

    /**
     * Whether this param will render as a textarea instead of a textbox
     * @param multiLine set to true if textarea is desired (default false)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o388743630caf49b48b271c2bcdb6b1ba465" name="setMultiLine" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="multiLine" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		this.multiLine = multiLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8b4a9113a9654a74845f8966e1abfc90465" name="getMultiLine" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return multiLine;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe2d43f0ac811495eb9b7c20e25491c7b465" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");
        StringBuffer buf = new StringBuffer(super.toString() + "  sample='"
                + sample + "'" + newline + "  regex='" + regex + "'" + newline
                + "  length='" + length + "'" + newline + "  multiLine='" + multiLine + "'");
        return buf.toString();}

    // ///////////////////////////////////////////////////////////////
    // protected methods
    // ///////////////////////////////////////////////////////////////</source-code>
          </source-codes>
        </operation>
        <operation id="od42a28a7a0ba49cfb02b71ea36981cf7465" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="model" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(model);
        if (regex == null) regex = model.getModelConfig().getParamRegex();}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#clone()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o436b5ec1a6174072ac44632a8043f0e8465" name="clone" type="Param" type-id="Param" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new StringParam(this);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#appendJSONContent(org.json.JSONObject)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2ca29c785f55411c9e8656ce2a55c710465" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsParam" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
    // nothing to be added}

    /**
     * the dependent value is the same as the independent value
     * 
     * @see org.gusdb.wdk.model.query.param.Param#dependentValueToIndependentValue(org.gusdb.wdk.model.user.User,
     *      java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2bbb406fce0c42e6a1beeccc1d047021465" name="dependentValueToIndependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dependentValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#independentValueToInternalValue
     * (java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od5f805d854b24cbdb50e8bbf0c1e5b7f465" name="dependentValueToInternalValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        String rawValue = decompressValue(dependentValue);
        if (rawValue == null || rawValue.length() == 0) rawValue = emptyValue;
        if (isNoTranslation()) return rawValue;
        
        rawValue = rawValue.replaceAll("'", "''");
        if (!number) rawValue = "'" + rawValue + "'";
        return rawValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#independentValueToRawValue(java
     * .lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o11f88c2bdcf9404da438db71aaa4027b465" name="dependentValueToRawValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return decompressValue(dependentValue);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#rawValueToIndependentValue(java
     * .lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob7ca70416c204e2a8ffdfc8ccbe39803465" name="rawOrDependentValueToDependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="rawValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return compressValue(rawValue);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#validateValue(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa3541623dff24bcda90a92112d442384465" name="validateValue" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        String rawValue = decompressValue(dependentValue);
        if (number){
            try{
                // strip off the comma, if any
                String value = rawValue.replaceAll(",", "");
                Double.valueOf(value);} catch (NumberFormatException ex){
                throw new WdkUserException("stringParam " + getFullName()
                        + " is declared as a number, but the Value '"
                        + rawValue + "' is invalid number format.");}}
        if (regex != null &amp;&amp; !rawValue.matches(regex)){
	    if ( rawValue.equals("*") )
		throw new WdkUserException("stringParam " + getFullName()
					   + ": value '" + rawValue + "' cannot be used on its own, it needs to be part of a word.");
	    else
		throw new WdkUserException("stringParam " + getFullName()
					   + " value '" + rawValue + "' does not match regular "
					   + "expression '" + regex + "'");}
        if (length != 0 &amp;&amp; rawValue.length() &gt; length)
            throw new WdkModelException("stringParam " + getFullName()
                    + " value cannot be longer than " + length + " characters."
                    + " (It is " + rawValue.length() + ".)");}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#excludeResources(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5bdd983ff6db42449921174cfd773895465" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        boolean hasRegex = false;
        for (WdkModelText regex : regexes){
            if (regex.include(projectId)){
                if (hasRegex){
                    throw new WdkModelException("The param " + getFullName()
                            + " has more than one regex for project "
                            + projectId);} else{
                    this.regex = regex.getText();
                    hasRegex = true;}}}
        regexes = null;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o24818fd47c0644dd946fff0fbdbbe38d465" name="applySuggection" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="suggest" type="ParamSuggestion" type-id="ParamSuggestion" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // do nothing}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di135352552821134846" cid="C361" type="class" name="TimestampParam" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:46">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o122b48154fc748a7a75b42c120b8f08d373" name="TimestampParam" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}

    /**
     * @param param
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5819bf64723e42969f9e8b46905e5d8f373" name="TimestampParam" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="TimestampParam" type-id="TimestampParam" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(param);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#appendJSONContent(org.json.JSONObject
     * )
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o088af932cd7e48449adb9f98b9db8f7f373" name="appendJSONContent" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsParam" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="extra" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        // nothing to add}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.param.Param#clone()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8e5d66327a9a4cde81fb1f68b46a19a1373" name="clone" type="Param" type-id="Param" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new TimestampParam(this);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#dependentValueToIndependentValue
     * (org.gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9845c1337a95479fb19dcc1a40f8dfa0373" name="dependentValueToIndependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
    		throws WdkUserException, WdkModelException{
        return dependentValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#dependentValueToInternalValue(org
     * .gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oef66be275fe345b9922dd01f8de0df16373" name="dependentValueToInternalValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException,  WdkUserException{
        return dependentValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#dependentValueToRawValue(org.gusdb
     * .wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9641d9d439e84baf980c04cc19ce5fe9373" name="dependentValueToRawValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return dependentValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#rawOrDependentValueToDependentValue
     * (org.gusdb.wdk.model.user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7f573f71a1c44ad08da6859419a93eaa373" name="rawOrDependentValueToDependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="rawValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        return rawValue;}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.query.param.Param#validateValue(org.gusdb.wdk.model
     * .user.User, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5e56235633dd42c596dd1fe4ed2d0656373" name="validateValue" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="rawOrDependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        // the value of timestamp can be any string
        // make sure the value is in valid time format
        // try {
        // Date date = DateFormat.getDateTimeInstance().parse(
        // rawOrDependentValue);
        // if (date == null)
        // throw new WdkModelException("Invalid timestampParam value; '"
        // + rawOrDependentValue + "'");
        // } catch (ParseException ex) {
        // throw new WdkModelException(ex);
        // }
    }

    /**
     * it is always false (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.query.param.Param#isVisible()
     */
    @Override
    public boolean isVisible(){
        return false;}

    @Override
    public String getDefault(){
        return DateFormat.getDateTimeInstance().format(new Date());}

    @Override
    protected void applySuggection(ParamSuggestion suggest){
        // do nothing}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di585153777945676127" cid="C362" type="class" name="WdkEmptyEnumListException" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:46">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o7dbb129641ac4af7acac5b19abb78d94803" name="WdkEmptyEnumListException" type="&lt;String, String&gt;" type-id="&lt;String, String&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramErrors" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(paramErrors);
        // TODO Auto-generated constructor stub}

    /**
     * 
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o0f01377bd64e4709a33d95aac00d32f2803" name="WdkEmptyEnumListException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}

    /**
     * @param msg
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o019e518ed93f440b825377a48147a250803" name="WdkEmptyEnumListException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg);}

    /**
     * @param msg
     * @param cause
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o84cbd9b5abb74b989a0c38f4041d2a7e803" name="WdkEmptyEnumListException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg, cause);}

    /**
     * @param cause
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oc88045d62a804b7e98051a94096a0d59803" name="WdkEmptyEnumListException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(cause);}

    /**
     * @param message
     * @param paramErrors
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ocd57b31ecd484dc78f926e1eaf36c734803" name="WdkEmptyEnumListException" type="&lt;String, String&gt;" type-id="&lt;String, String&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="paramErrors" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(message, paramErrors);}

    /**
     * @param cause
     * @param paramErrors
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o42270efca98f4bf2a8245713e5b7dd76803" name="WdkEmptyEnumListException" type="&lt;String, String&gt;" type-id="&lt;String, String&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
            <parameter id="" name="paramErrors" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(cause, paramErrors);
        // TODO Auto-generated constructor stub}

    /**
     * @param message
     * @param cause
     * @param paramErrors
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o9d87304ed65b4174a5bcadd453a4c1cb803" name="WdkEmptyEnumListException" type="&lt;String, String&gt;" type-id="&lt;String, String&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
            <parameter id="" name="paramErrors" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(message, cause, paramErrors);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di104773357669312869" cid="C363" type="class" name="WdkInvalidParamInputException" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:47">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o8481f7f3c1c244f2b4a2d16c73be25787" name="WdkInvalidParamInputException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}

    /**
     * @param message
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o4efa2225761543998717e93e5e70a0a27" name="WdkInvalidParamInputException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="message" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(message);}

    /**
     * @param cause
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8887a1e6c05c40c7b612b034878559017" name="WdkInvalidParamInputException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(cause);}

    /**
     * @param msg
     * @param cause
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o2d91b48388b541f798909fa4c32f2e7b7" name="WdkInvalidParamInputException" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="msg" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cause" type="Throwable" type-id="Throwable" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(msg, cause);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di808212830957383097" cid="C364" type="class" name="Migrator" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:49">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a908fa270d9664918b49105ea9852f7d9411" name="commandName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4b5333f09995468ab1e564f9d0b6edf3411" name="helpHeader" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a649440348b174756b9e1ef9bab52ad27411" name="helpFooter" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a529780a70e174484bb861837d8229f54411" name="options" type="Options" type-id="Options" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9b010eb26af440b1889d08aca8df32ac411" name="oldVersion" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="adffda0573268415a98cb237cc7b5e516411" name="oldUserSchema" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a11564c398bdd4d408756e7a3e98c8a35411" name="oldWdkSchema" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a06a33bf87ff846d9af97b3721a994c30411" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o2d63f2228a624e98b1e70962b0b14ba2411" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException, NoSuchAlgorithmException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, IOException, SAXException, SQLException,
            JSONException, InstantiationException, IllegalAccessException,
            ClassNotFoundException{
        // determine which version of the migrator to be used
        Migrator migrator = new Migrator();
        migrator.parseOptions(args);
        String oldVersion = migrator.getOldVersion();
        String newVersion = migrator.getNewVersion();
        oldVersion = oldVersion.replace('.', '_');
        newVersion = newVersion.replace('.', '_');

        // construct the migrator class to do the real work
        String className = Migrator.class.getName() + oldVersion + "To"
                + newVersion;
        Class&lt;?&gt; migratorClass = Class.forName(className);
        migrator = (Migrator) migratorClass.newInstance();
        migrator.parseOptions(args);
        migrator.migrate();

        System.out.println("Migration from " + oldVersion + " to " + newVersion
                + " is finished");}</source-code>
          </source-codes>
        </operation>
        <operation id="o9647c6166f3f4f46ae8de250afdd740b411" name="Migrator" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        options = new Options();
        helpHeader = "Migrate user data from previous release into current release";
        helpFooter = "";
        declareOptions();}</source-code>
          </source-codes>
        </operation>
        <operation id="oc6023a00a79247b78411f37b9a8923dd411" name="parseOptions" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, ParserConfigurationException,
            TransformerFactoryConfigurationError, TransformerException,
            IOException, SAXException, SQLException, JSONException,
            WdkUserException, InstantiationException, IllegalAccessException,
            ClassNotFoundException{
        commandName = System.getProperty("cmdName", "migrate");

        CommandLineParser parser = new BasicParser();
        String modelName = null;
        try{
            // parse the command line arguments
            CommandLine commandLine = parser.parse(options, args);
            modelName = commandLine.getOptionValue("model");
            oldVersion = commandLine.getOptionValue("version");
            oldUserSchema = commandLine.getOptionValue("userSchema");
            oldWdkSchema = commandLine.getOptionValue("wdkSchema");} catch (ParseException exp){
            // oops, something went wrong
            System.err.println("");
            System.err.println("Parsing failed.  Reason: " + exp.getMessage());
            System.err.println("");
            printUsage();}

        // parse the wdk model
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        wdkModel = WdkModel.construct(modelName, gusHome);}</source-code>
          </source-codes>
        </operation>
        <operation id="od35d8e871cc8422ea478a69afa6ec488411" name="getOldVersion" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return oldVersion;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe5e1d077a29341189eb537583a9311d7411" name="getNewVersion" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return WdkModel.WDK_VERSION;}</source-code>
          </source-codes>
        </operation>
        <operation id="o34f339f347c848ffa972c8ceb1fff614411" name="getOldUserSchema" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return oldUserSchema;}</source-code>
          </source-codes>
        </operation>
        <operation id="o039906054e2e427693db161a7f2f7c2f411" name="getWdkSchema" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return oldWdkSchema;}</source-code>
          </source-codes>
        </operation>
        <operation id="o65fb8dde44a24df0ab0a60fc2bc5d2a5411" name="getNewUserSchema" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException{
        return wdkModel.getModelConfig().getUserDB().getUserSchema();}</source-code>
          </source-codes>
        </operation>
        <operation id="o8c223ea6b7404332bb35cdad92d78d6e411" name="getNewWdkSchema" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException{
        return wdkModel.getModelConfig().getUserDB().getWdkEngineSchema();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5515ecd2a6b943b3945a61dd644cafc6411" name="getWdkModel" type="WdkModel" type-id="WdkModel" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe6efa1cded9d46c38ff60808430e57e4411" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Option option = new Option("model", true,
                "the name of the model.  This is used to find the Model XML "
                        + "file ($GUS_HOME/config/model_name.xml) the Model "
                        + "property file ($GUS_HOME/config/model_name.prop) "
                        + "and the Model config file "
                        + "($GUS_HOME/config/model_name-config.xml)");
        option.setRequired(true);
        option.setArgName("model");
        options.addOption(option);

        option = new Option("version", true,
                "the version of the model to be migrated from; the version is "
                        + "used to determine which migration code to be "
                        + "executed");
        option.setRequired(true);
        option.setArgName("version");
        options.addOption(option);

        option = new Option("userSchema", true,
                "the old user login schema, where the user data is migrated "
                        + "from");
        option.setRequired(true);
        option.setArgName("userSchema");
        options.addOption(option);

        option = new Option("wdkSchema", true,
                "the old wdk storage schema, where the wdk data is migrated "
                        + "from");
        option.setRequired(true);
        option.setArgName("wdkSchema");
        options.addOption(option);}</source-code>
          </source-codes>
        </operation>
        <operation id="of8b47b9ce809408a95e947aef5a9d5eb411" name="printUsage" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String newline = System.getProperty("line.separator");

        // print command syntax
        StringBuffer syntax = new StringBuffer(commandName);
        for (Object object : options.getOptions()){
            Option option = (Option) object;
            syntax.append(option.isRequired() ? " -" : " [-");
            syntax.append(option.getArgName());
            if (option.hasArg()){
                syntax.append(" &lt;" + option.getArgName());
                syntax.append(option.hasArgs() ? " ...&gt;" : "&gt;");}
            if (!option.isRequired()) syntax.append(']');}
        syntax.append(newline);

        // PrintWriter stderr = new PrintWriter(System.err);
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(75, syntax.toString(), helpHeader, options,
                helpFooter);
        System.exit(1);}

    /**
     * start migration. This method will be overridden by sub-classes
     * 
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     * @throws JSONException 
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o486de4669ec64b87ace3ec66e5435a90411" name="migrate" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        throw new UnsupportedOperationException("The subclass must implement"
                + " this method.");}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di951136523757639480" cid="C365" type="class" name="Migrator1_12To1_13" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:50">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="oee74373ad58f4689bfe4899eb6cee488909" name="migrate" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException{
        // update histories
        updateHistories();}

    /**
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException
     * 
     * 
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8a5edb2476f747b48698a31065b353b5909" name="updateHistories" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException{
        DBPlatform platform = wdkModel.getUserPlatform();
        DataSource dataSource = platform.getDataSource();
        String newSchema = getNewUserSchema();

        List&lt;HistoryItem&gt; histories = new ArrayList&lt;HistoryItem&gt;();

        ResultSet rsHistory = null;
        try{
            rsHistory = SqlUtils.executeQuery(wdkModel, dataSource, "SELECT "
                    + "user_id, project_id, history_id, params FROM "
                    + newSchema + "histories WHERE query_instance_checksum IS "
                    + "NULL", "wdk-migrate-select-history");

            while (rsHistory.next()){
                int userId = rsHistory.getInt("user_id");
                String projectId = rsHistory.getString("project_id");
                int historyId = rsHistory.getInt("history_id");
                String params = platform.getClobData(rsHistory, "params");

                // params = params.replaceAll("--WDK_PARAM_DIVIDER--",
                // Utilities.DATA_DIVIDER);
                // String content = projectId + Utilities.DATA_DIVIDER + params;
                String content = projectId + "--WDK_PARAM_DIVIDER--" + params;
                String checksum = Utilities.encrypt(content);

                HistoryItem item = new HistoryItem();
                item.setChecksum(checksum);
                item.setHistoryId(historyId);
                item.setParams(params);
                item.setProjectId(projectId);
                item.setUserId(userId);
                histories.add(item);}} finally{
            SqlUtils.closeResultSet(rsHistory);}

        PreparedStatement psHistory = null;
        try{
            psHistory = SqlUtils.getPreparedStatement(dataSource, "UPDATE "
                    + newSchema + "histories SET query_instance_checksum = ? "
                    + ", params = ? WHERE user_id = ? AND project_id = ? "
                    + "AND history_id = ?");

            int count = 0;
            for (HistoryItem item : histories){
                psHistory.setString(1, item.getChecksum());
                platform.setClobData(psHistory, 2, item.getParams(), false);
                psHistory.setInt(3, item.getUserId());
                psHistory.setString(4, item.getProjectId());
                psHistory.setInt(5, item.getHistoryId());
                psHistory.addBatch();

                count++;
                if (count % 100 == 0){
                    psHistory.executeBatch();}}
            psHistory.executeBatch();} catch (SQLException ex){
            throw new WdkModelException(ex);} finally{
            SqlUtils.closeStatement(psHistory);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di552228453849446799" cid="C366" type="class" name="HistoryItem" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:50">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aae771ca833724d2291e199e378a396dc908" name="userId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad7a02e2501c741658519c63b8a02b689908" name="projectId" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ade224cb29fbe48d28b0f6bed1fca7048908" name="historyId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3d75a92ca40c44f09d1a78060ca9016b908" name="params" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4c3c53118d3e499b9f92e374e85e1d69908" name="checksum" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o8645149060bb4945a1cd56ee6d38d36a908" name="getChecksum" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return this.checksum;}

        /**
         * @param checksum
         *            the checksum to set
         */</source-code>
          </source-codes>
        </operation>
        <operation id="ob577b055c886452bab1675863b36257a908" name="setChecksum" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="checksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.checksum = checksum;}

        /**
         * @return the historyId
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o3f74c5da61f54cc0be8b745e7e8512cf908" name="getHistoryId" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return this.historyId;}

        /**
         * @param historyId
         *            the historyId to set
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o38b625546e1643a6a0cece69fca1c9af908" name="setHistoryId" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="historyId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.historyId = historyId;}

        /**
         * @return the params
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o88e9a319e5494706bfc823afa747498f908" name="getParams" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return this.params;}

        /**
         * @param params
         *            the params to set
         */</source-code>
          </source-codes>
        </operation>
        <operation id="ofb0e77b11a5f407c9e08169da7b35bfb908" name="setParams" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="params" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.params = params;}

        /**
         * @return the projectId
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o003d0e4260d34132871b9566f7801d41909" name="getProjectId" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return this.projectId;}

        /**
         * @param projectId
         *            the projectId to set
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o77fd8b46b33941c0a032462dd90532da909" name="setProjectId" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.projectId = projectId;}

        /**
         * @return the historyId
         */</source-code>
          </source-codes>
        </operation>
        <operation id="ob7189e6921524bcea00ca4cf6701d19f909" name="getUserId" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return this.userId;}

        /**
         * @param historyId
         *            the historyId to set
         */</source-code>
          </source-codes>
        </operation>
        <operation id="oac8d19ec111a468ea80f824f776455a6909" name="setUserId" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.userId = userId;}}

    /**
     * (non-Javadoc)
     * 
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     * 
     * @see org.gusdb.wdk.model.migrate.Migrator#migrate()
     */
    @Override</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di830146448139295683" cid="C367" type="class" name="Migrator1_17To1_18" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:36:53">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ad72ad2c5ed924f2aa6092a8ba5ff6b6f512" name="psInsertAnswer" type="PreparedStatement" type-id="PreparedStatement" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3648a5cacf114cada469996de4489b3b512" name="psInsertHistory" type="PreparedStatement" type-id="PreparedStatement" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3498f2c2e9434465ad95a4a08442d85d512" name="answerKeys" type="Map&lt;String, Integer&gt;" type-id="Map&lt;String, Integer&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a66a35b2da9c24462b98ca5524b8096b8512" name="historyKeys" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="od4f9fe43ef3244c4bc39339862589d53512" name="migrate" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        migrateHistories();}</source-code>
          </source-codes>
        </operation>
        <operation id="o48e2ab63036c47a2b3c4744ae5c0af3b512" name="migrateHistories" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, JSONException,
            WdkModelException, WdkUserException{
        DBPlatform userPlatform = wdkModel.getUserPlatform();
        DataSource dataSource = userPlatform.getDataSource();

        System.out.println("Loading existing histories...");
        loadHistories(dataSource);

        System.out.println("Loading existing answers...");
        loadAnswers(dataSource);

        System.out.println("Loading old histories...");
        prepareStatements(dataSource);

        ResultSet histories = getHistories(dataSource);
        int count = 0;
        System.out.println("Migrating old histories...");
        while (histories.next()){
            int userId = histories.getInt("user_id");
            int historyId = histories.getInt("history_id");
            String projectId = histories.getString("project_id");
            String answerChecksum = histories.getString("query_instance_checksum");
            String questionName = histories.getString("question_name");
            String queryChecksum = histories.getString("query_signature");
            Date createTime = histories.getDate("create_time");
            Date lastRunTime = histories.getDate("last_run_time");
            String customName = histories.getString("custom_name");
            int estimateSize = histories.getInt("estimate_size");
            boolean isBoolean = histories.getBoolean("is_boolean");
            boolean isDeleted = histories.getBoolean("is_deleted");
            String params = userPlatform.getClobData(histories, "params");
            String convertedParams = convertParams(params, isBoolean);

            // check if history exists
            String historyKey = userId + "_" + historyId;
            if (historyKeys.contains(historyKey)) continue;

            // answer if exists
            String answerKey = projectId + "_" + answerChecksum;
            Integer answerId = answerKeys.get(answerKey);

            if (answerId == null){
                // answer doesn't exist, save new answer
                answerId = insertAnswer(userPlatform, answerChecksum,
                        projectId, questionName, queryChecksum, convertedParams);
                answerKeys.put(answerKey, answerId);}

            // save history
            String displayParams = isBoolean ? params : convertedParams;
            insertHistory(userPlatform, userId, historyId, answerId,
                    createTime, lastRunTime, estimateSize, customName,
                    isBoolean, isDeleted, displayParams);
            historyKeys.add(historyKey);

            count++;

            if (count % 10 == 0)
                System.out.println("Migrated " + count + " histories...");}
        System.out.println("Totally migrated " + count + " histories.");

        SqlUtils.closeResultSet(histories);
        SqlUtils.closeStatement(psInsertAnswer);
        SqlUtils.closeStatement(psInsertHistory);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob40ff8479de146e696b4caee24291743512" name="prepareStatements" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        // prepare insert answer statement
        StringBuffer sqlInsertAnswer = new StringBuffer("INSERT INTO ");
        sqlInsertAnswer.append(NEW_WDK_SCHEMA).append("answer (");
        sqlInsertAnswer.append("answer_id, answer_checksum, project_id, ");
        sqlInsertAnswer.append("project_version, question_name, ");
        sqlInsertAnswer.append("query_checksum, params) ");
        sqlInsertAnswer.append("VALUES (?, ?, ?, '1.0', ?, ?, ?)");
        psInsertAnswer = SqlUtils.getPreparedStatement(dataSource,
                sqlInsertAnswer.toString());

        // prepare insert history statement
        StringBuffer sqlInsertHistory = new StringBuffer("INSERT INTO ");
        sqlInsertHistory.append(NEW_USER_SCHEMA).append("histories (");
        sqlInsertHistory.append("history_id, user_id, answer_id, create_time, ");
        sqlInsertHistory.append("last_run_time, estimate_size, custom_name, ");
        sqlInsertHistory.append("is_boolean, is_deleted, display_params) ");
        sqlInsertHistory.append("VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        psInsertHistory = SqlUtils.getPreparedStatement(dataSource,
                sqlInsertHistory.toString());}</source-code>
          </source-codes>
        </operation>
        <operation id="off67d942101b4e04911b085c660c3c1a512" name="getHistories" type="ResultSet" type-id="ResultSet" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        StringBuffer sql = new StringBuffer("SELECT u3.user_id, ");
        sql.append("h2.history_id, h2.project_id, h2.query_instance_checksum,");
        sql.append(" h2.question_name, h2.query_signature, h2.create_time, ");
        sql.append("h2.last_run_time, h2.custom_name, h2.estimate_size, ");
        sql.append("h2.is_boolean, h2.is_deleted, h2.params FROM ");
        sql.append(OLD_USER_SCHEMA).append("histories h2, ");
        sql.append(NEW_USER_SCHEMA).append("users u3 ");
        sql.append("WHERE u3.prev_user_id = h2.user_id ");
        sql.append("ORDER BY h2.create_time DESC");

        return SqlUtils.executeQuery(wdkModel, dataSource, sql.toString(),
                "wdk-migrate-select-histories");}</source-code>
          </source-codes>
        </operation>
        <operation id="of6573d8e5c364af98a9cd72bc5d3050a512" name="loadHistories" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        StringBuffer sql = new StringBuffer("SELECT user_id, history_id FROM ");
        sql.append(NEW_USER_SCHEMA).append("histories ");
        historyKeys = new LinkedHashSet&lt;String&gt;();
        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource,
                sql.toString(), "wdk-migrate-select-history-ids");
        while (resultSet.next()){
            int userId = resultSet.getInt("user_id");
            int historyId = resultSet.getInt("history_id");
            String historyKey = userId + "_" + historyId;
            historyKeys.add(historyKey);}
        SqlUtils.closeResultSet(resultSet);}</source-code>
          </source-codes>
        </operation>
        <operation id="o383c6cd19a54438a99bbbe53fbcd73d3512" name="loadAnswers" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        StringBuffer sql = new StringBuffer(
                "SELECT answer_id, answer_checksum,");
        sql.append(" project_id FROM ").append(NEW_WDK_SCHEMA).append("answer ");
        answerKeys = new LinkedHashMap&lt;String, Integer&gt;();
        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource,
                sql.toString(), "wdk-migrate-select-answer-ids");
        while (resultSet.next()){
            int answerId = resultSet.getInt("answer_id");
            String projectId = resultSet.getString("project_id");
            String answerChecksum = resultSet.getString("answer_checksum");
            String answerKey = projectId + "_" + answerChecksum;
            answerKeys.put(answerKey, answerId);}
        SqlUtils.closeResultSet(resultSet);}</source-code>
          </source-codes>
        </operation>
        <operation id="o1fcb53f44761438aa39d5b03ddde6e80512" name="convertParams" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="params" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="isBoolean" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        if (isBoolean) return params; // cannot convert the params

        String[ parts = params.split(Pattern.quote("--WDK_DATA_DIVIDER--"));
        JSONObject jsParams = new JSONObject();
        for (String part : parts){
            int pos = part.indexOf('=');
            if (pos &lt;= 0) continue;
            String param = part.substring(0, pos).trim();
            String value = part.substring(pos + 1).trim();
            jsParams.put(param, value);}
        return jsParams.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5c07312f1f8e486bba68f0c7aa2899cd512" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="questionName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="params" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkModelException,
            WdkUserException{
        int answerId = platform.getNextId(NEW_WDK_SCHEMA, "answer");

        psInsertAnswer.setInt(1, answerId);
        psInsertAnswer.setString(2, answerChecksum);
        psInsertAnswer.setString(3, projectId);
        psInsertAnswer.setString(4, questionName);
        psInsertAnswer.setString(5, queryChecksum);
        platform.setClobData(psInsertAnswer, 6, params, true);

        return answerId;}

    private void insertHistory(DBPlatform platform, int userId, int historyId,
            int answerId, Date createTime, Date lastRunTime, int estimateSize,
            String customName, boolean isBoolean, boolean isDeleted,
            String displayParams){
        psInsertHistory.setInt(1, historyId);
        psInsertHistory.setInt(2, userId);
        psInsertHistory.setInt(3, answerId);
        psInsertHistory.setDate(4, createTime);
        psInsertHistory.setDate(5, lastRunTime);
        psInsertHistory.setInt(6, estimateSize);
        psInsertHistory.setString(7, customName);
        psInsertHistory.setBoolean(8, isBoolean);
        psInsertHistory.setBoolean(9, isDeleted);
        platform.setClobData(psInsertHistory, 10, displayParams, true);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di943566254297198636" cid="C368" type="class" name="Migrator1_18To1_19" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a6da5b7f66f654fa6a7b46f190516966110" name="userId" type="int" type-id="int" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab592d11e2dda43119954983ba2eba93710" name="projectId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0d01e6ca9a924eeca4282a51483678e010" name="historyId" type="int" type-id="int" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a267c111e710f44e7b4fb74f3d4f5c32510" name="createTime" type="Date" type-id="Date" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aab942901ee4d4910a04b9216d078ba5310" name="runTime" type="Date" type-id="Date" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5399a991fd4b4437843d62824b63a90910" name="estimateSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="abb078da8ca494e75a4cc81fcd3ec850210" name="answerFilter" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8599f68bb01f42dd9c2efb29e7de760e10" name="customName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3f33df85b06c48259f38a7860287023010" name="isBoolean" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0a4279e6916e404e80f6dec1a8d1a1ae10" name="isDeleted" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aa2dd42576d6c4ae682825e83c4eb5b4f10" name="paramClob" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a400eb30dea6c42e4a3d9d70861c9825d10" name="answerParamClob" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="adb41465d85634db1b0a7703c281ae22f10" name="answerId" type="int" type-id="int" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3c5f8a401bb44178ad70d5249f10a13910" name="questionName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4db63f5d1cf54be6ab2ea01641d385bb10" name="isValid" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o52144f8d32e445e3b35ac9c1ed2800a410" name="ancesterOf" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="history" type="HistoryInfo" type-id="HistoryInfo" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            if (history.userId != userId || history.historyId == historyId
                    || !history.projectId.equals(projectId)) return false;
            for (HistoryInfo parent : history.parents.values()){
                if (parent.historyId == historyId) return true;
                if (ancesterOf(parent)) return true;}
            return false;}

        /*
         * (non-Javadoc)
         * 
         * @see java.lang.Comparable#compareTo(java.lang.Object)
         */
        public</source-code>
          </source-codes>
        </operation>
        <operation id="of335b9a177f340c8bb7bd781fa6e29b310" name="compareTo" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="history" type="HistoryInfo" type-id="HistoryInfo" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            if (ancesterOf(history)) return -1;
            else if (history.ancesterOf(this)) return 1;
            else return historyId - history.historyId;}

        /*
         * (non-Javadoc)
         * 
         * @see java.lang.Object#hashCode()
         */
        @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8e6a15c17d0d4ee798e8c2da8a56c25a11" name="hashCode" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return (userId + projectId + historyId).hashCode();}

        /*
         * (non-Javadoc)
         * 
         * @see java.lang.Object#equals(java.lang.Object)
         */
        @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oee45ab7fd2ce425cba04264e391bf0cc11" name="equals" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obj" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            if (obj != null &amp;&amp; obj instanceof HistoryInfo){
                HistoryInfo history = (HistoryInfo) obj;
                return userId == history.userId
                        &amp;&amp; historyId == history.historyId
                        &amp;&amp; projectId.equals(history.projectId);} else return false;}

        /*
         * (non-Javadoc)
         * 
         * @see java.lang.Object#toString()
         */
        @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ocb99b25fda79462fbc67163d77e7d1cc11" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return "User: " + userId + ", Project: " + projectId
                    + ", History: " + historyId;}}

    private static final Logger logger = Logger.getLogger(Migrator1_18To1_19.class);

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.migrate.Migrator#migrate()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o83ef6798a03e45f990a6b2da0e70128111" name="migrate" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        DBPlatform platform = wdkModel.getUserPlatform();
        int migrateId = platform.getNextId("apidb", "migration");

        copyClobValues(migrateId);
        copyDatasetIndices(migrateId);
        copyDatasetValues(migrateId);
        copyUserDatasets(migrateId);
        copyAnswers(migrateId);
        copySteps(migrateId);}

    /**
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     * 
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="o1b8dfa5eb6d643cb8e9705b4ede71d8511" name="copyClobValues" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="migrateId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        logger.debug("Copying clob values...");
        String newWdkSchema = wdkModel.getModelConfig().getUserDB().getWdkEngineSchema();
        String cvo = oldWdkSchema + "clob_values";
        String cvn = newWdkSchema + "clob_values";
        StringBuffer sql = new StringBuffer("INSERT INTO " + cvn);
        sql.append("  (clob_checksum, clob_value, migration_id) ");
        sql.append("SELECT cvo.clob_checksum, cvo.clob_value, " + migrateId);
        sql.append(" FROM " + cvo + " cvo, ");
        sql.append("  (SELECT clob_checksum FROM " + cvo);
        sql.append("   MINUS");
        sql.append("   SELECT clob_checksum FROM " + cvn + ") cvm ");
        sql.append("WHERE cvo.clob_checksum = cvm.clob_checksum ");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        int count = SqlUtils.executeUpdate(wdkModel, dataSource,
                sql.toString(), "wdk-migrate-clob");
        logger.debug(count + " clob_value rows inserted");}

    /**
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     * 
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="o2ae8351c8d8843b7b7b9d71f10c45c4511" name="copyDatasetIndices" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="migrateId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        logger.debug("Copying dataset indices...");
        String newWdkSchema = wdkModel.getModelConfig().getUserDB().getWdkEngineSchema();
        String dio = oldWdkSchema + "dataset_indices";
        String din = newWdkSchema + "dataset_indices";
        StringBuffer sql = new StringBuffer("INSERT INTO " + din);
        sql.append("  (dataset_id, dataset_checksum, summary, ");
        sql.append("   dataset_size, prev_dataset_id, migration_id) ");
        sql.append("SELECT ").append(newWdkSchema);
        sql.append("  dataset_indices_pkseq.nextval as dataset_id, ");
        sql.append("  dataset_checksum, summary, dataset_size, ");
        sql.append("  prev_dataset_id, ").append(migrateId);
        sql.append(" FROM (SELECT DISTINCT d.dataset_checksum, d.summary, ");
        sql.append("        d.dataset_size, d.dataset_id AS prev_dataset_id ");
        sql.append("      FROM ").append(dio).append(" d, ");
        sql.append(oldUserSchema).append("user_datasets ud, ");
        sql.append("         (SELECT dataset_checksum FROM ").append(dio);
        sql.append("          MINUS ");
        sql.append("          SELECT dataset_checksum FROM ").append(din).append(
                ") dm ");
        sql.append("      WHERE d.dataset_id = ud.dataset_id ");
        sql.append("        AND d.dataset_checksum = dm.dataset_checksum)");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        int count = SqlUtils.executeUpdate(wdkModel, dataSource,
                sql.toString(), "wdk-migrate-dataset-index");
        logger.debug(count + " dataset index rows inserted");}

    /**
     * 
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="obda8401de0df4396a15e5279ca80946811" name="copyDatasetValues" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="migrateId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        logger.debug("Copying dataset values...");
        String newWdkSchema = wdkModel.getModelConfig().getUserDB().getWdkEngineSchema();
        String dvo = oldWdkSchema + "dataset_values";
        String dvn = newWdkSchema + "dataset_values";
        StringBuffer sql = new StringBuffer("INSERT INTO " + dvn);
        sql.append("  (dataset_id, dataset_value, migration_id) ");
        sql.append("SELECT di.dataset_id, dv.dataset_value, " + migrateId);
        sql.append(" FROM ").append(dvo).append(" dv, ");
        sql.append(newWdkSchema).append("dataset_indices di ");
        sql.append("WHERE dv.dataset_id = di.prev_dataset_id ");
        sql.append("  AND di.dataset_id NOT IN ");
        sql.append("    (SELECT dataset_id FROM ").append(dvn).append(")");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        int count = SqlUtils.executeUpdate(wdkModel, dataSource,
                sql.toString(), "wdk-migrate-dataset-value");
        logger.debug(count + " dataset value rows inserted");}

    /**
     * 
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="o6ea0a649779442269d6e6cd7c2451c4011" name="copyAnswers" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="migrateId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        logger.debug("Copying answers...");
        String newWdkSchema = wdkModel.getModelConfig().getUserDB().getWdkEngineSchema();
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        String ao = oldWdkSchema + "answer";
        String an = newWdkSchema + "answers";
        StringBuffer sql = new StringBuffer("INSERT INTO " + an);
        sql.append("  (answer_id, project_id, answer_checksum, ");
        sql.append("   project_version, question_name, query_checksum, ");
        sql.append("   prev_answer_id, params, result_message, migration_id) ");
        sql.append("SELECT ");
        sql.append(newWdkSchema).append("answers_pkseq.nextval, ");
        sql.append("  DECODE(a.project_id, 'ApiDB', 'EuPathDB', a.project_id) AS project_id, ");
        sql.append("  a.answer_checksum, a.project_version, a.question_name, ");
        sql.append("  a.query_checksum, a.answer_id AS prev_answer_id, ");
        sql.append("  a.params, a.result_message, " + migrateId);
        sql.append(" FROM wdkstorage.answer a, ");
        sql.append("  (SELECT a.answer_id FROM ").append(ao).append(" a, ");
        sql.append(oldUserSchema).append("users u, ");
        sql.append(oldUserSchema).append("histories h ");
        sql.append("   WHERE a.answer_id = h.answer_id ");
        sql.append("     AND h.user_id = u.user_id AND u.is_guest = 0");
        sql.append("   MINUS ");
        sql.append("   SELECT ao.answer_id FROM ");
        sql.append(ao).append(" ao, ").append(an).append(" an ");
        sql.append("   WHERE DECODE(ao.project_id, 'ApiDB', 'EuPathDB', ao.project_id) = an.project_id ");
        sql.append("     AND ao.answer_checksum = an.answer_checksum) af ");
        sql.append("WHERE a.answer_id = af.answer_id ");

        int count = SqlUtils.executeUpdate(wdkModel, dataSource,
                sql.toString(), "wdk-migrate-answers");
        logger.debug(count + " answer rows inserted");}

    /**
     * 
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="o62451a27804e4dfe91e81896bae307d211" name="copyUserDatasets" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="migrateId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        logger.debug("Copying user datasets...");
        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String newWdkSchema = userDB.getWdkEngineSchema();
        String newUserSchema = userDB.getUserSchema();
        String udo = oldUserSchema + "user_datasets";
        String udn = newUserSchema + "user_datasets2";
        String dio = oldWdkSchema + "dataset_indices";
        String din = newWdkSchema + "dataset_indices";
        StringBuffer sql = new StringBuffer("INSERT INTO " + udn);
        sql.append("  (user_dataset_id, dataset_id, user_id, ");
        sql.append("   create_time, upload_file, migration_id) ");
        sql.append("SELECT ").append(newUserSchema).append(
                "user_datasets2_pkseq.nextval, ");
        sql.append("  udf.dataset_id, udf.user_id, udo.create_time, udo.upload_file, "
                + migrateId);
        sql.append(" FROM ").append(din).append(" din, ");
        sql.append(dio).append(" dio, ").append(udo).append(" udo, ");
        sql.append("  (SELECT din.dataset_id, u.user_id ");
        sql.append("   FROM ").append(newUserSchema).append("users u, ");
        sql.append(din).append(" din, ").append(dio).append(" dio, ");
        sql.append(udo).append(" udo ");
        sql.append("   WHERE u.user_id = udo.user_id ");
        sql.append("     AND udo.dataset_id = dio.dataset_id ");
        sql.append("     AND dio.dataset_checksum = din.dataset_checksum ");
        sql.append("   MINUS ");
        sql.append("   SELECT dataset_id, user_id FROM ").append(udn);
        sql.append("  ) udf ");
        sql.append("WHERE udf.user_id = udo.user_id ");
        sql.append("  AND udf.dataset_id = din.dataset_id ");
        sql.append("  AND din.dataset_checksum = dio.dataset_checksum ");
        sql.append("  AND dio.dataset_id = udo.dataset_id ");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        int count = SqlUtils.executeUpdate(wdkModel, dataSource,
                sql.toString(), "wdk-migrate-user-dataset");
        logger.debug(count + " user dataset rows inserted");}

    /**
     * 
     * @throws SQLException
     * @throws SQLException
     * @throws JSONException
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="o0e2eacb86c5e47b79c0dc8d5d5527b1411" name="copySteps" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="migrateId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, JSONException,
            NoSuchAlgorithmException, WdkModelException, WdkUserException{
        logger.debug("Copying steps...");
        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String newWdkSchema = userDB.getWdkEngineSchema();
        String newUserSchema = userDB.getUserSchema();
        String newProject = wdkModel.getProjectId();
        String oldProject = (newProject.equals("EuPathDB")) ? "ApiDB"
                : newProject;
        StringBuffer sql = new StringBuffer("SELECT h.history_id, ");
        sql.append(" u.user_id, h.create_time, h.last_run_time, ");
        sql.append(" h.estimate_size, h.answer_filter, h.custom_name, ");
        sql.append(" h.is_boolean, h.is_deleted, h.display_params, an.params, ");
        sql.append(" an.project_id, an.answer_id, an.question_name ");
        sql.append("FROM ").append(oldUserSchema).append("histories h, ");
        sql.append(newUserSchema).append("users u, ");
        sql.append(oldWdkSchema).append("answer ao, ");
        sql.append(newWdkSchema).append("answers an ");
        sql.append("WHERE h.user_id = u.user_id AND u.is_guest = 0 ");
        sql.append(" AND h.answer_id = ao.answer_id ");
        sql.append(" AND h.migration_id IS NULL ");
        sql.append(" AND ao.answer_checksum = an.answer_checksum ");
        sql.append(" AND ao.project_id = '").append(oldProject).append("' ");
        sql.append(" AND an.project_id = '").append(newProject).append("' ");

        Map&lt;UserProject, Map&lt;Integer, HistoryInfo&gt;&gt; users = new LinkedHashMap&lt;UserProject, Map&lt;Integer, HistoryInfo&gt;&gt;();
        DBPlatform platform = wdkModel.getUserPlatform();
        DataSource dataSource = platform.getDataSource();
        ResultSet resultSet = null;
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource,
                    sql.toString(), "wdk-migrate-steps");
            int count = 0;
            while (resultSet.next()){
                HistoryInfo info = new HistoryInfo();
                info.historyId = resultSet.getInt("history_id");
                info.userId = resultSet.getInt("user_id");
                info.createTime = resultSet.getDate("create_time");
                info.runTime = resultSet.getDate("last_run_time");
                info.estimateSize = resultSet.getInt("estimate_size");
                info.answerFilter = resultSet.getString("answer_filter");
                info.customName = resultSet.getString("custom_name");
                info.isBoolean = resultSet.getBoolean("is_boolean");
                info.isDeleted = resultSet.getBoolean("is_deleted");
                info.paramClob = platform.getClobData(resultSet,
                        "display_params");
                info.answerParamClob = platform.getClobData(resultSet, "params");
                info.projectId = resultSet.getString("project_id");
                info.answerId = resultSet.getInt("answer_id");
                info.questionName = resultSet.getString("question_name");

                UserProject user = new UserProject(info.userId, info.projectId);
                Map&lt;Integer, HistoryInfo&gt; histories = users.get(user);
                if (histories == null){
                    histories = new LinkedHashMap&lt;Integer, HistoryInfo&gt;();
                    users.put(user, histories);}
                histories.put(info.historyId, info);

                count++;
                if (count % 100 == 0) logger.debug(count + " histories read.");}} finally{
            SqlUtils.closeResultSet(resultSet);}
        logger.info("Totally read " + users.size() + " users");
        int count = 0;
        for (UserProject user : users.keySet()){
            Map&lt;Integer, HistoryInfo&gt; histories = users.get(user);
            createSteps(wdkModel, migrateId, user, histories);

            count++;
            if (count % 100 == 0)
                logger.debug(count + "/" + users.size()
                        + " users' steps copied.");}}</source-code>
          </source-codes>
        </operation>
        <operation id="o0230fd046f7b4e579d394f6be02dbb0511" name="createSteps" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="migrateId" type="int" type-id="int" default-value="" />
            <parameter id="" name="user" type="UserProject" type-id="UserProject" default-value="" />
            <parameter id="" name="histories" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException, SQLException, WdkUserException,
            WdkModelException{
        for (HistoryInfo history : histories.values()){
            normalizeParams(history);
            Set&lt;Integer&gt; parents = parseParents(wdkModel, history);
            for (int parentId : parents){
                HistoryInfo parent = histories.get(parentId);
                if (parent == null){
                    history.isValid = false;
                    break;} else history.parents.put(parentId, parent);}}
        HistoryInfo[ array = new HistoryInfo[histories.size();
        histories.values().toArray(array);
        Arrays.sort(array);
        Map&lt;Integer, Integer&gt; stepMap = loadStepMap(wdkModel, user);
        for (HistoryInfo history : array){
            try{
                int stepId = addStep(wdkModel, history, stepMap);
                stepMap.put(history.historyId, stepId);

                // mark the history to be done
                DataSource source = wdkModel.getUserPlatform().getDataSource();
                SqlUtils.executeUpdate(wdkModel, source, "UPDATE "
                        + oldUserSchema + "histories SET migration_id = "
                        + migrateId + " WHERE user_id = " + history.userId
                        + " AND history_id = " + history.historyId,
                        "wdk-migrate-update-id");

                String newSchema = wdkModel.getModelConfig().getUserDB().getUserSchema();
                SqlUtils.executeUpdate(wdkModel, source, "UPDATE " + newSchema
                        + "steps " + " SET prev_step_id = " + history.historyId
                        + ", migration_id = " + migrateId + " WHERE user_id = "
                        + history.userId + " AND display_id = " + stepId,
                        "wdk-migrate-update-prev-step");} catch (Exception ex){
                ex.printStackTrace();}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o7801ea9b460348c5a82c53de03dfb5a511" name="loadStepMap" type="Map&lt;Integer, Integer&gt;" type-id="Map&lt;Integer, Integer&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="user" type="UserProject" type-id="UserProject" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        ResultSet resultSet = null;
        DataSource source = wdkModel.getUserPlatform().getDataSource();
        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        Map&lt;Integer, Integer&gt; stepMap = new LinkedHashMap&lt;Integer, Integer&gt;();
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, source, "SELECT "
                    + "    s.display_id, s.prev_step_id  FROM "
                    + userDB.getUserSchema() + "steps s, "
                    + userDB.getWdkEngineSchema() + "answers a "
                    + " WHERE s.answer_id = a.answer_id "
                    + "  AND s.prev_step_id IS NOT NULL "
                    + "  AND a.project_id = '" + user.projectId
                    + "' AND s.user_id = " + user.userId,
                    "wdk-migrate-select-step-id");
            while (resultSet.next()){
                int stepId = resultSet.getInt("display_id");
                int historyId = resultSet.getInt("prev_step_id");
                stepMap.put(historyId, stepId);}} finally{
            SqlUtils.closeResultSet(resultSet);}
        return stepMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="o75e94a6ba6b4499abc109b69d76e0c1211" name="normalizeParams" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="history" type="HistoryInfo" type-id="HistoryInfo" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws JSONException{
        String paramClob = history.paramClob;
        if (paramClob == null || paramClob.length() &lt; 4)
            paramClob = history.answerParamClob;

        // convert the older clob format
        if (paramClob.indexOf("--WDK_DATA_DIVIDER--") &gt;= 0){
            String[ parts = paramClob.split("--WDK_DATA_DIVIDER--");
            if (parts[0.equals("BooleanQuerySet.BooleanQuery")){

                paramClob = (parts.length &lt; 6) ? parts[1 : parts[5;} else{
                JSONObject jsParams = new JSONObject();
                for (int i = 1; i &lt; parts.length; i += 2){
                    String paramName = parts[i.trim();
                    String paramValue = parts[i + 1.trim();
                    jsParams.put(paramName, paramValue);}
                paramClob = jsParams.toString();}}
        history.paramClob = paramClob;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa9619b40c21f4ba094d63821cd898c6411" name="parseParents" type="Set&lt;Integer&gt;" type-id="Set&lt;Integer&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="history" type="HistoryInfo" type-id="HistoryInfo" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException, SQLException, WdkUserException{
        Set&lt;Integer&gt; parents = new LinkedHashSet&lt;Integer&gt;();
        String paramClob = history.paramClob;
        try{
            if (paramClob.startsWith("{")){
                Question question = (Question) wdkModel.resolveReference(history.questionName);
                JSONObject jsParams = new JSONObject(paramClob);
                DataSource source = wdkModel.getUserPlatform().getDataSource();
                for (Param param : question.getParams()){
                    if (!(param instanceof AnswerParam)) continue;
                    String parent = (String) jsParams.get(param.getName());
                    int pos = parent.indexOf(":");
                    if (pos == 0) parent = parent.substring(pos + 1);
                    int parentId;
                    if (parent.matches("^\\d+$")){
                        parentId = Integer.parseInt(parent);} else{ // history is an answer checksum
                        BigInteger result = (BigInteger) SqlUtils.executeScalar(
                                wdkModel, source, "SELECT history_id FROM "
                                        + oldUserSchema + "histories h, "
                                        + oldWdkSchema + "answer a WHERE "
                                        + "  a.answer_checksum = '" + parent
                                        + "' AND h.answer_id = a.answer_id",
                                "wdk-migrate-select-history-id-by-checksum");
                        parentId = result.intValue();}
                    parents.add(parentId);
                    jsParams.put(param.getName(), parentId);}
                history.paramClob = jsParams.toString();} else{
                Matcher matcher = Pattern.compile("\\b\\d+\\b").matcher(
                        paramClob);
                while (matcher.find()){
                    String parent = paramClob.substring(matcher.start(),
                            matcher.end());
                    parents.add(Integer.parseInt(parent));}}} catch (WdkModelException ex){
            logger.info(history + " invalid");
            logger.info(ex);
            history.isValid = false;}

        return parents;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa6079f5697984ee5931dc44d6fbfabb011" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="stepMap" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, SQLException, JSONException, WdkUserException{
        String paramClob = prepareParams(wdkModel, history, stepMap);
        int stepId;
        if (paramClob.startsWith("{")){
            stepId = insertRawStep(wdkModel, history, paramClob);} else{
            User user = wdkModel.getUserFactory().getUser(history.userId);
            Step step = user.combineStep(paramClob, false, history.isDeleted);
            stepId = step.getDisplayId();}
        return stepId;}</source-code>
          </source-codes>
        </operation>
        <operation id="o60ea5e14a4974a5cad97ee0a9e242e0c11" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="stepMap" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            JSONException, NoSuchAlgorithmException, SQLException,
            WdkUserException{
        String paramClob = history.paramClob;
        if (paramClob.startsWith("{")){
            Question question = (Question) wdkModel.resolveReference(history.questionName);
            JSONObject jsOld = new JSONObject(paramClob);
            JSONObject jsNew = new JSONObject();
            for (Param param : question.getParams()){
                if (!jsOld.has(param.getName())) continue;
                String paramValue = (String) jsOld.get(param.getName());
                if (param instanceof AnswerParam){
                    int newId = stepMap.get(Integer.parseInt(paramValue));
                    paramValue = Integer.toString(newId);} else if (param instanceof DatasetParam){
                    int userDatasetId = getUserDatasetId(wdkModel,
                            history.userId, (DatasetParam) param, paramClob);
                    paramValue = Integer.toString(userDatasetId);} else if (!paramValue.startsWith(Utilities.PARAM_COMPRESSE_PREFIX)){
                    paramValue = param.compressValue(paramValue);}
                jsNew.put(param.getName(), paramValue);}
            paramClob = jsNew.toString();} else{
            for (int parentId : history.parents.keySet()){
                if (stepMap.containsKey(parentId)){
                    String newId = stepMap.get(parentId).toString();
                    paramClob = paramClob.replaceAll("\\b" + parentId + "\\b",
                            newId);} else{
                    history.isValid = false;}}}
        return paramClob;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0955c9794fc94225b7efea5b61e5e39111" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="DatasetParam" type-id="DatasetParam" default-value="" />
            <parameter id="" name="value" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException, NoSuchAlgorithmException{
        User user = wdkModel.getUserFactory().getUser(userId);
        if (value.length() == 65 || value.length() == 32){
            // the value is a dataset_checksum, or a combined checksum
            String checksum = value;
            if (value.length() == 65)
                checksum = value.substring(value.indexOf(':') + 1);
            DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
            ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
            String userSchema = userDB.getUserSchema();
            String wdkSchema = userDB.getWdkEngineSchema();
            Object result = SqlUtils.executeScalar(wdkModel, dataSource,
                    "SELECT user_dataset_id                              "
                            + "FROM " + userSchema + "  user_datasets2 ud, "
                            + wdkSchema + "  dataset_indices di "
                            + "WHERE ud.dataset_id = di.dataset_id "
                            + "  AND di.dataset_checksum = '" + checksum + "'",
                    "wdk-migrate-select-user-dataset");
            return (Integer) result;} else{ // the value is raw value, create a dataset from it.
            RecordClass recordClass = param.getRecordClass();
            Dataset dataset = user.createDataset(recordClass, null, value);
            return dataset.getUserDatasetId();}}</source-code>
          </source-codes>
        </operation>
        <operation id="o94a043ecfde5457d98ab4ab4d6cf44c211" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramClob" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws JSONException, SQLException,
            WdkModelException, WdkUserException{
        String schema = wdkModel.getModelConfig().getUserDB().getUserSchema();
        String sql = "INSERT INTO " + schema + "steps (step_id, display_id, "
                + "user_id, answer_id, left_child_id, right_child_id, "
                + "create_time, last_run_time, estimate_size, answer_filter, "
                + "custom_name, is_deleted, is_collapsible, "
                + "display_params) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?)";

        JSONObject jsParams = new JSONObject(paramClob);
        Integer leftChild = null, rightChild = null;
        try{
            Question question = (Question) wdkModel.resolveReference(history.questionName);
            Query query = question.getQuery();
            if (query.isBoolean()){
                BooleanQuery booleanQuery = (BooleanQuery) query;
                Object left = jsParams.get(booleanQuery.getLeftOperandParam().getName());
                Object right = jsParams.get(booleanQuery.getRightOperandParam().getName());
                if (left != null) leftChild = Integer.parseInt((String) left);
                if (right != null)
                    rightChild = Integer.parseInt((String) right);} else if (query.isTransform()){
                for (Param param : query.getParams()){
                    if (param instanceof AnswerParam){
                        Object left = jsParams.get(param.getName());
                        if (left != null){
                            leftChild = Integer.parseInt((String) left);
                            break;}}}}} catch (WdkModelException ex){
            // question name doesn't exist
            history.isValid = false;
            ex.printStackTrace();}

        DBPlatform platform = wdkModel.getUserPlatform();
        DataSource dataSource = platform.getDataSource();
        PreparedStatement ps = null;

        try{
            ps = SqlUtils.getPreparedStatement(dataSource, sql);
            int stepId = platform.getNextId(schema, "steps");
            BigDecimal display = (BigDecimal) SqlUtils.executeScalar(wdkModel,
                    dataSource, "" + "SELECT max(display_id) + 1 FROM "
                            + schema + "steps WHERE user_id = "
                            + history.userId, "wdk-migrate-max-step-id");
            int displayId = (display == null) ? 1 : display.intValue();

            ps.setInt(1, stepId);
            ps.setInt(2, displayId);
            ps.setInt(3, history.userId);
            ps.setInt(4, history.answerId);
            ps.setObject(5, leftChild);
            ps.setObject(6, rightChild);
            ps.setDate(7, history.createTime);
            ps.setDate(8, history.runTime);
            ps.setInt(9, history.estimateSize);
            ps.setString(10, history.answerFilter);
            ps.setString(11, history.customName);
            ps.setBoolean(12, history.isDeleted);
            platform.setClobData(ps, 13, paramClob, false);
            ps.executeUpdate();

            return displayId;} finally{
            SqlUtils.closeStatement(ps);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di902063284182754301" cid="C369" type="class" name="UserProject" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="af2babca9e3294bb6892e5406cf601f0810" name="userId" type="int" type-id="int" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aebcb2f11ff0841d3ad41c290f93b79d410" name="projectId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o7340150348024060a79c63bef3a1b86d10" name="UserProject" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userId" type="int" type-id="int" default-value="" />
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.userId = userId;
            this.projectId = projectId;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocd11e9834ee549778e60c4a11ac9d3c710" name="hashCode" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return (userId + projectId).hashCode();}</source-code>
          </source-codes>
        </operation>
        <operation id="of1de5f660da14fd2b3c1a8874480604c10" name="equals" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obj" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            if (obj != null &amp;&amp; obj instanceof UserProject){
                UserProject up = (UserProject) obj;
                return this.userId == up.userId
                        &amp;&amp; this.projectId.equalsIgnoreCase(up.projectId);} else return false;}}

    public class HistoryInfo implements Comparable&lt;HistoryInfo&gt;{
        public Map&lt;Integer, HistoryInfo&gt; parents = new LinkedHashMap&lt;Integer, HistoryInfo&gt;();</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di755734143812612138" cid="C370" type="class" name="AnswerFilterInstanceBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a0709ebf39a8349d19a94f3c722319663335" name="instance" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="off993cfbad0c4eb8bbfaa103205e2d3c335" name="AnswerFilterInstanceBean" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instance" type="AnswerFilterInstance" type-id="AnswerFilterInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.instance = instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o341f12db463147e3b008f14da831d1ea335" name="getFilter" type="AnswerFilterInstance" type-id="AnswerFilterInstance" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return instance;}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterInstance#getDescription()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o6cb4459220964439a0b4c44ea3c9a4fc335" name="getDescription" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return instance.getDescription();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterInstance#getDisplayName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oa1a762f89d2a4bf88f9865d9b617df4c335" name="getDisplayName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return instance.getDisplayName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterInstance#getName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="obd25a8d2e2d84642a25918675384ba44335" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return instance.getName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterInstance#isBooleanExpansion()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ofd12a46e5bfd443dbc5649f46f8d2985335" name="isBooleanExpansion" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return instance.isBooleanExpansion();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterInstance#isDefault()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ocec3752ee8ae48b6bc26b6cf2e852dcb335" name="isDefault" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return instance.isDefault();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di201993737794723199" cid="C371" type="class" name="AnswerFilterLayoutBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a12707e7e0fff4db08e217a62083d3ad1952" name="layout" type="AnswerFilterLayout" type-id="AnswerFilterLayout" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o7904414c1c4e4d0682db45632209423e952" name="AnswerFilterLayoutBean" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="layout" type="AnswerFilterLayout" type-id="AnswerFilterLayout" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.layout = layout;}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterLayout#getDescription()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o573e9f645671498b9e1c53ec7cdd39b3952" name="getDescription" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return layout.getDescription();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterLayout#getDisplayName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o09c5d3780de8440bafb893357e745124952" name="getDisplayName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return layout.getDisplayName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterLayout#getName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oa2a215a9a2ad4011a02b19158e88a977952" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return layout.getName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterLayout#getInstanceMap()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o736c016f9a0e4941ae6ffdbbafd41e01952" name="getInstanceMap" type="Map&lt;String, AnswerFilterInstanceBean&gt;" type-id="Map&lt;String, AnswerFilterInstanceBean&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AnswerFilterInstanceBean&gt; beanMap = new LinkedHashMap&lt;String, AnswerFilterInstanceBean&gt;();
        Map&lt;String, AnswerFilterInstance&gt; instanceMap = layout.getInstanceMap();
        for (String name : instanceMap.keySet()){
            AnswerFilterInstance instance = instanceMap.get(name);
            beanMap.put(name, new AnswerFilterInstanceBean(instance));}
        return beanMap;}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterLayout#getInstances()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o2dcbacea31aa4a69880e9fd7390a3381952" name="getInstances" type="AnswerFilterInstanceBean[]" type-id="AnswerFilterInstanceBean[]" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        AnswerFilterInstance[ instances = layout.getInstances();
        AnswerFilterInstanceBean[ beans = new AnswerFilterInstanceBean[instances.length;
        for (int i = 0; i &lt; instances.length; i++){
            beans[i = new AnswerFilterInstanceBean(instances[i);}
        return beans;}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterLayout#getlayoutMap()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o766a1bfc7fde4eb4b65a5625b1f003f4952" name="getFileName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return layout.getFileName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterLayout#isVisible()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5544aafeafe54573acc1888d9d67fd8b952" name="isVisible" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return layout.isVisible();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerFilterLayout#isVertical()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5a9a5435097f4a929c273d3ca6ac29f8952" name="isVertical" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return layout.isVertical();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di347445252153827864" cid="C372" type="class" name="AnswerValueBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:08">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a5f3dcdd84285473ab15be4bb03b9a5d9279" name="instances" type="RecordInstance[]" type-id="RecordInstance[]" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4d7af23836fe406bbc9537aaa3e455df279" name="position" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0">
          <stereotypes />
        </attribute>
        <attribute id="a2e2da55c2d7b48f6b7011915be3ab8c6279" name="answerValue" type="AnswerValue" type-id="AnswerValue" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a15a957fdb3ac4f96a9a72a1776619cc1279" name="downloadConfigMap" type="Map&lt;?, ?&gt;" type-id="Map&lt;?, ?&gt;" visibility="package" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
        <attribute id="ac8a410155979447684bf4815d574ce4a279" name="customName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o5e677d1506854601b11575e00f8866f7279" name="RecordBeanList" type="[]" type-id="[]" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instances" type="RecordInstance" type-id="RecordInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.instances = instances;}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Iterator#hasNext()
         */</source-code>
          </source-codes>
        </operation>
        <operation id="ob977902729354a089ba80b064d3c5194279" name="hasNext" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return position &lt; instances.length;}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Iterator#next()
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o6d3e38270b104391b8722e60bb560286279" name="next" type="RecordBean" type-id="RecordBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return new RecordBean(answerValue.getUser(), instances[position++);}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Iterator#remove()
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o1c4400d59a384db2863b2d1fdd51e0f2279" name="remove" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            throw new UnsupportedOperationException("Not supported");}}

    private static Logger logger = Logger.getLogger(AnswerValueBean.class);</source-code>
          </source-codes>
        </operation>
        <operation id="ocdb63d0a04f04bc2b1297ca861db030f279" name="AnswerValueBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answerValue" type="AnswerValue" type-id="AnswerValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.answerValue = answerValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="oaef84f164f734d41b7d58b275b65cf05279" name="getAnswerValue" type="AnswerValue" type-id="AnswerValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerValue;}

    /**
     * @return A Map of param displayName --&gt; param value.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa85f7a15f56743ff9f756e0652310854279" name="getParams" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerValue.getParamDisplays();}</source-code>
          </source-codes>
        </operation>
        <operation id="o596e26b6d5314cc1a6011bb9f1bdaaf4279" name="getInternalParams" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerValue.getIdsQueryInstance().getValues();}</source-code>
          </source-codes>
        </operation>
        <operation id="o730a729ad3b54e048ab9a49372ae2095279" name="getChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, JSONException, WdkUserException,
            SQLException{
        return answerValue.getChecksum();}

    /**
     * @return opertation for boolean answer
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o435bdf38960c4aec940e14efa30ea3c1279" name="getBooleanOperation" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (!getIsBoolean()){
            throw new RuntimeException("getBooleanOperation can not be called"
                    + " on simple AnswerBean");}
        Map&lt;String, String&gt; params = answerValue.getIdsQueryInstance().getValues();
        return params.get(BooleanQuery.OPERATOR_PARAM);}

    /**
     * @return first child answer for boolean answer, null if it is an answer
     *         for a simple question.
     * @throws SQLException
     * @throws WdkUserException
     * @throws JSONException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oac05391874ed4865ad0f8ba0640e9f6e279" name="getFirstChildAnswer" type="AnswerValueBean" type-id="AnswerValueBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, JSONException,
            WdkUserException, SQLException{
        if (!getIsCombined()){
            throw new RuntimeException("getFirstChildAnswer can not be called"
                    + " on simple AnswerBean");}
        AnswerParam param = null;
        Map&lt;String, String&gt; params = answerValue.getIdsQueryInstance().getValues();
        if (getIsBoolean()){
            BooleanQuery query = (BooleanQuery) answerValue.getIdsQueryInstance().getQuery();
            param = query.getLeftOperandParam();} else{
            Map&lt;String, Param&gt; paramMap = answerValue.getIdsQueryInstance().getQuery().getParamMap();
            for (Param p : paramMap.values()){
                if (p instanceof AnswerParam){
                    param = (AnswerParam) p;
                    break;}}
            if (param == null)
                throw new RuntimeException(
                        "combined question has no AnswerParam.");}
        String dependentValue = params.get(param.getName());
        User user = answerValue.getUser();
        return new AnswerValueBean(param.getAnswerValue(user, dependentValue));}

    /**
     * @return second child answer for boolean answer, null if it is an answer
     *         for a simple question.
     * @throws SQLException
     * @throws WdkUserException
     * @throws JSONException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obf24f35f9d154d5fbb87b4ba0102be35279" name="getSecondChildAnswer" type="AnswerValueBean" type-id="AnswerValueBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, JSONException,
            WdkUserException, SQLException{
        if (!getIsBoolean()){
            throw new RuntimeException("getSecondChildAnswer can not be called"
                    + " on simple AnswerBean");}
        BooleanQuery query = (BooleanQuery) answerValue.getIdsQueryInstance().getQuery();
        Map&lt;String, String&gt; params = answerValue.getIdsQueryInstance().getValues();
        AnswerParam param = query.getRightOperandParam();
        String dependentValue = params.get(param.getName());
        User user = answerValue.getUser();
        return new AnswerValueBean(param.getAnswerValue(user, dependentValue));}</source-code>
          </source-codes>
        </operation>
        <operation id="oc9373afe73e3483580c9e80a95ccfdb8279" name="getPageSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, SQLException, JSONException, WdkUserException{
        return answerValue.getPageSize();}</source-code>
          </source-codes>
        </operation>
        <operation id="oabe092154c764f03a908e1208a8682a5279" name="getPageCount" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        return answerValue.getPageCount();}</source-code>
          </source-codes>
        </operation>
        <operation id="of1c464e512254e468c2565756d81246b279" name="getResultSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        return answerValue.getResultSize();}</source-code>
          </source-codes>
        </operation>
        <operation id="o6fb1be8d44bf4876a8f21e5c53cff77c279" name="getResultSizesByProject" type="Map&lt;String, Integer&gt;" type-id="Map&lt;String, Integer&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        return answerValue.getResultSizesByProject();}</source-code>
          </source-codes>
        </operation>
        <operation id="o8687166cc13545a5b69bc31d31999406279" name="getIsBoolean" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerValue.getIdsQueryInstance().getQuery().isBoolean();}</source-code>
          </source-codes>
        </operation>
        <operation id="o4d6356d59cdd450a8bdf1fb82e781da3279" name="getIsCombined" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerValue.getIdsQueryInstance().getQuery().isCombined();}</source-code>
          </source-codes>
        </operation>
        <operation id="o92b6fe081e4c44888f96f5ba14cd97db280" name="getIsTransform" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerValue.getIdsQueryInstance().getQuery().isTransform();}</source-code>
          </source-codes>
        </operation>
        <operation id="ob3f568f9f06647139b61dc77af9801f9280" name="getRecordClass" type="RecordClassBean" type-id="RecordClassBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new RecordClassBean(answerValue.getQuestion().getRecordClass());}</source-code>
          </source-codes>
        </operation>
        <operation id="of879bf92eb18459092e239c62210b22f280" name="getQuestion" type="QuestionBean" type-id="QuestionBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return new QuestionBean(answerValue.getQuestion());}

    /**
     * @return A list of {@link RecordBean}s.
     * @throws WdkUserException
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0d8451adbe96420ba54f8857ca569308280" name="getRecords" type="Iterator&lt;RecordBean&gt;" type-id="Iterator&lt;RecordBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        try{
            return new RecordBeanList(answerValue.getRecordInstances());} catch (Exception ex){
            logger.error(ex);
            ex.printStackTrace();
            throw ex;}}</source-code>
          </source-codes>
        </operation>
        <operation id="ofb7ae19fc72049ba81c2348f0562a36f280" name="setDownloadConfigMap" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="downloadConfigMap" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.downloadConfigMap = downloadConfigMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8aa5ef18ef704f498a303d480f32af7d280" name="getSummaryAttributes" type="AttributeFieldBean[]" type-id="AttributeFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        Map&lt;String, AttributeField&gt; attribs = answerValue.getSummaryAttributeFieldMap();
        AttributeFieldBean[ beans = new AttributeFieldBean[attribs.size();
        int index = 0;
        for (AttributeField field : attribs.values()){
            beans[index++ = new AttributeFieldBean(field);}

        return beans;}</source-code>
          </source-codes>
        </operation>
        <operation id="of86b82017e9442f985da980f9243044e280" name="getSummaryAttributeNames" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        AttributeFieldBean[ sumAttribs = getSummaryAttributes();
        String[ names = new String[sumAttribs.length;
        for (int i = 0; i &lt; sumAttribs.length; i++){
            names[i = sumAttribs[i.getName();}
        return names;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa0524308f23849a88188c77699b1fe98280" name="getDownloadAttributes" type="AttributeFieldBean[]" type-id="AttributeFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        AttributeFieldBean[ sumAttribs = getSummaryAttributes();
        if (downloadConfigMap == null || downloadConfigMap.size() == 0){
            return sumAttribs;}

        AttributeFieldBean[ rmAttribs = getAllReportMakerAttributes();
        Vector&lt;AttributeFieldBean&gt; v = new Vector&lt;AttributeFieldBean&gt;();
        for (int i = 0; i &lt; rmAttribs.length; i++){
            String attribName = rmAttribs[i.getName();
            Object configStatus = downloadConfigMap.get(attribName);
            // System.err.println("DEBUG AnswerBean: configStatus for " +
            // attrName + " is " + configStatus);
            if (configStatus != null){
                v.add(rmAttribs[i);}}
        int size = v.size();
        AttributeFieldBean[ downloadAttribs = new AttributeFieldBean[size;
        v.copyInto(downloadAttribs);
        return downloadAttribs;}</source-code>
          </source-codes>
        </operation>
        <operation id="o68f7a662a7704facb9bd841b364f53e4280" name="getAllReportMakerAttributes" type="AttributeFieldBean[]" type-id="AttributeFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Question question = answerValue.getQuestion();
        Map&lt;String, AttributeField&gt; attribs = question.getAttributeFieldMap(FieldScope.REPORT_MAKER);
        Iterator&lt;String&gt; ai = attribs.keySet().iterator();
        Vector&lt;AttributeFieldBean&gt; v = new Vector&lt;AttributeFieldBean&gt;();
        while (ai.hasNext()){
            String attribName = ai.next();
            v.add(new AttributeFieldBean(attribs.get(attribName)));}
        int size = v.size();
        AttributeFieldBean[ rmAttribs = new AttributeFieldBean[size;
        v.toArray(rmAttribs);
        return rmAttribs;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc5d7cd05e117424e8cf54f76dc7e8061280" name="getAllReportMakerTables" type="TableFieldBean[]" type-id="TableFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        RecordClass recordClass = answerValue.getQuestion().getRecordClass();
        Map&lt;String, TableField&gt; tables = recordClass.getTableFieldMap(FieldScope.REPORT_MAKER);
        Iterator&lt;String&gt; ti = tables.keySet().iterator();
        Vector&lt;TableFieldBean&gt; v = new Vector&lt;TableFieldBean&gt;();
        while (ti.hasNext()){
            String tableName = ti.next();
            v.add(new TableFieldBean(tables.get(tableName)));}
        int size = v.size();
        TableFieldBean[ rmTables = new TableFieldBean[size;
        v.toArray(rmTables);
        return rmTables;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8ea4ea7a80144843bf8d1824734af5c1280" name="getDownloadAttributeNames" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        AttributeFieldBean[ downloadAttribs = getDownloadAttributes();
        Vector&lt;String&gt; v = new Vector&lt;String&gt;();
        for (int i = 0; i &lt; downloadAttribs.length; i++){
            v.add(downloadAttribs[i.getName());}
        int size = v.size();
        String[ downloadAttribNames = new String[size;
        v.copyInto(downloadAttribNames);
        return downloadAttribNames;}</source-code>
          </source-codes>
        </operation>
        <operation id="o219bddc0172f4aababdeb44e36656eb9280" name="setCustomName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        customName = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="o05d225818e734c66ba7dd12b93aca576280" name="getCustomName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return customName;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3b32bac47d75455fb0e676e5bfcf4c06280" name="getIsDynamic" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerValue.isDynamic();}

    /**
     * for controller: reset counter for download purpose
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od69f142e36f0465eb9bd98fcc4d03bab280" name="resetAnswerRowCursor" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        logger.debug("reset answer cursor");
        int startIndex = answerValue.getStartIndex();
        int endIndex = answerValue.getEndIndex();
        answerValue = new AnswerValue(answerValue, startIndex, endIndex);}

    /**
     * for controller: reset counter for download purpose
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o341c105d43014eaeb9022ace46079631280" name="getResetAnswerRowCursor" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        resetAnswerRowCursor();
        return true;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Answer#getResultMessage()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4d914e4cb4fd4a94ac1e7fb081867e61280" name="getResultMessage" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            SQLException, WdkModelException, JSONException, WdkUserException{
        String message = answerValue.getResultMessage();
        System.out.println("Result message from AnswerBean: " + message);
        return message;}

    /**
     * @param reporterName
     * @param config
     * @return
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     * @see org.gusdb.wdk.model.AnswerValue#getReport(java.lang.String,
     *      java.util.Map)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7869a8694f844e4a8b2abce254f58a65280" name="createReport" type="Reporter" type-id="Reporter" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="reporterName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="config" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        return answerValue.createReport(reporterName, config);}

    /**
     * @return
     * @throws WdkModelException 
     * @throws WdkUserException 
     * @see org.gusdb.wdk.model.AnswerValue#getSortingAttributeNames()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa32a8e981be84b938ef5a8467070c719280" name="getSortingAttributeNames" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        Map&lt;String, Boolean&gt; sortingFields = answerValue.getSortingMap();
        String[ array = new String[sortingFields.size();
        sortingFields.keySet().toArray(array);
        return array;}

    /**
     * @return
     * @throws WdkModelException 
     * @throws WdkUserException 
     * @see org.gusdb.wdk.model.AnswerValue#getSortingAttributeOrders()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5d01e538cf93458d9e6a166298c17c9e280" name="getSortingAttributeOrders" type="boolean[]" type-id="boolean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        Map&lt;String, Boolean&gt; sortingFields = answerValue.getSortingMap();
        boolean[ array = new boolean[sortingFields.size();
        int index = 0;
        for (boolean order : sortingFields.values()){
            array[index++ = order;}
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1b5e0791130b4148ace18a52074a7093280" name="getDisplayableAttributes" type="AttributeFieldBean[]" type-id="AttributeFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        List&lt;AttributeField&gt; fields = answerValue.getDisplayableAttributes();
        AttributeFieldBean[ fieldBeans = new AttributeFieldBean[fields.size();
        int index = 0;
        for (AttributeField field : fields){
            fieldBeans[index = new AttributeFieldBean(field);
            index++;}
        return fieldBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7bd88e0925dc41ecb555ff5b4606a475280" name="getDisplayableAttributeTree" type="TreeNode" type-id="TreeNode" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
    	return answerValue.getDisplayableAttributeTree();}</source-code>
          </source-codes>
        </operation>
        <operation id="od1607d8b9a4c4ad48a7a132f6f92d520280" name="getReportMakerAttributeTree" type="TreeNode" type-id="TreeNode" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
    	return answerValue.getReportMakerAttributeTree();}</source-code>
          </source-codes>
        </operation>
        <operation id="of0b8556245ad469abd54e7e4d9f38ef9280" name="setFilter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filterName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        answerValue.setFilter(filterName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3989772b3d65482aaaa39f2fbf4baa78280" name="getFilterSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filterName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, SQLException, WdkModelException,
            JSONException, WdkUserException{
        return answerValue.getFilterSize(filterName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6924618c377249e4998253eba1ab5399281" name="getFilter" type="AnswerFilterInstanceBean" type-id="AnswerFilterInstanceBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        AnswerFilterInstance filter = answerValue.getFilter();
        if (filter == null) return null;
        return new AnswerFilterInstanceBean(filter);}</source-code>
          </source-codes>
        </operation>
        <operation id="o675215f1f65a49aea01050aaaed1c7d1281" name="getAllIds" type="List&lt;String[]&gt;" type-id="List&lt;String[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        return answerValue.getAllIds();}

    /**
     * @return
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException
     * @throws JSONException
     * @throws WdkUserException
     * @see org.gusdb.wdk.model.AnswerValue#getAllPkValues()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1acc6754e4704bcebe006dff2c1868c0281" name="getAllIdList" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException,
            WdkUserException{
        List&lt;String[&gt; pkValues = answerValue.getAllIds();
        StringBuffer buffer = new StringBuffer();
        for (String[ pkValue : pkValues){
            if (buffer.length() &gt; 0) buffer.append("\n");
            for (int i = 0; i &lt; pkValue.length; i++){
                if (i &gt; 0) buffer.append(", ");
                buffer.append(pkValue[i);}}
        return buffer.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o245b0b2682904371842bb640c99e1c7d281" name="makeAnswerValue" type="AnswerValueBean" type-id="AnswerValueBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="pageStart" type="int" type-id="int" default-value="" />
            <parameter id="" name="pageEnd" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        AnswerValue answerValue = new AnswerValue(this.answerValue, pageStart,
                pageEnd);
        return new AnswerValueBean(answerValue);}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerValue#getEndIndex()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oaae7d5796a644da28e168a8812394628282" name="getEndIndex" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerValue.getEndIndex();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AnswerValue#getStartIndex()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6d08f249264141ef931d003a7d2bb173282" name="getStartIndex" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return answerValue.getStartIndex();}

    /**
     * @param startIndex
     * @param endIndex
     * @see org.gusdb.wdk.model.AnswerValue#setPageIndex(int, int)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3d1a9b9e68d243d8a1722f327283c75f282" name="setPageIndex" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        answerValue.setPageIndex(startIndex, endIndex);}
    
    /**
     * Temporary method to allow easy on/off of checkbox tree
     * for value selection.
     * 
     * @return whether checkbox tree should be used (columns layout otherwise)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oce9cb69e12f4483eadec637be0d67e6c282" name="getUseCheckboxTree" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	return true;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di940576127462430446" cid="C373" type="class" name="AttributeFieldBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:08">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab771afa3da9941819aa56bb8e00c17e1615" name="attributeField" type="AttributeField" type-id="AttributeField" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="of86b440ef01449d6862f033c2dc1e2d8615" name="AttributeFieldBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="AttributeField" type-id="AttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super(field);
        this.attributeField = field;}

    /**
     * @return
     * @see org.gusdb.wdk.model.AttributeField#isSortable()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od4c3ec1d046b427a83b28f5d9e0c7a58615" name="isSortable" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return attributeField.isSortable();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AttributeField#getAlign()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oecdf82fdd3984d06acc806657ec35bda615" name="getAlign" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return attributeField.getAlign();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getHelp()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob1b36a2b1c694df7b29d15c69f643a12615" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return attributeField.getHelp();}

    /**
     * @return
     * @see org.gusdb.wdk.model.AttributeField#isRemovable()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o699c0f27cc7549c9a4348e498d403db3615" name="isRemovable" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return attributeField.isRemovable();}</source-code>
          </source-codes>
        </operation>
        <operation id="o52aa06183b8e4138977cb754920f40ce615" name="getAttributePlugins" type="Map&lt;String, AttributePluginReference&gt;" type-id="Map&lt;String, AttributePluginReference&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return attributeField.getAttributePlugins();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di881181351820220251" cid="C374" type="class" name="CategoryBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:09">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a0cc47734396d4049b6e488159e5487ac376" name="category" type="SearchCategory" type-id="SearchCategory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o9ba3cd9a0fd04183b147a365b5f7bcca376" name="CategoryBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="category" type="SearchCategory" type-id="SearchCategory" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.category = category;}

    /**
     * @return
     * @see org.gusdb.wdk.model.SearchCategory#getChildren()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob6c3fdc9c1dd4ab6b1ddcca8df11d2ed376" name="getWebsiteChildren" type="Map&lt;String, CategoryBean&gt;" type-id="Map&lt;String, CategoryBean&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, CategoryBean&gt; beans = new LinkedHashMap&lt;String, CategoryBean&gt;();
        for (SearchCategory child : category.getWebsiteChildren().values()){
            beans.put(child.getName(), new CategoryBean(child));}
        return beans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o41a2ef93829d404ba6f814e275211fd2376" name="getWebserviceChildren" type="Map&lt;String, CategoryBean&gt;" type-id="Map&lt;String, CategoryBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, CategoryBean&gt; beans = new LinkedHashMap&lt;String, CategoryBean&gt;();
        for (SearchCategory child : category.getWebserviceChildren().values()){
            beans.put(child.getName(), new CategoryBean(child));}
        return beans;}

    /**
     * @return
     * @see org.gusdb.wdk.model.SearchCategory#getDisplayName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od027515fedd24976a5ea47cc8e9ec0ea376" name="getDisplayName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return category.getDisplayName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.SearchCategory#getName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o9f19d41975ab4f699d3c735f5e157846376" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return category.getName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.SearchCategory#getParent()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oa2ee739bcabd43e380f0afd3b32cb849376" name="getParent" type="CategoryBean" type-id="CategoryBean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new CategoryBean(category.getParent());}

    /**
     * @return
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.SearchCategory#getQuestions()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o6a405a13ce404e43a8867d900f639ad4376" name="getWebsiteQuestions" type="QuestionBean[]" type-id="QuestionBean[]" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Question[ questions = category.getWebsiteQuestions();
        QuestionBean[ beans = new QuestionBean[questions.length;
        for (int i = 0; i &lt; questions.length; i++){
            beans[i = new QuestionBean(questions[i);}
        return beans;}

    /**
     * @return
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.SearchCategory#getQuestions()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o23d46b1e9808452d88fb2ce1f445bade376" name="getWebserviceQuestions" type="QuestionBean[]" type-id="QuestionBean[]" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Question[ questions = category.getWebserviceQuestions();
        QuestionBean[ beans = new QuestionBean[questions.length;
        for (int i = 0; i &lt; questions.length; i++){
            beans[i = new QuestionBean(questions[i);}
        return beans;}

    /**
     * @return
     * @see org.gusdb.wdk.model.SearchCategory#isMutliCategory()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o7f61fb4d43d440999e95839be5c9d408376" name="isMultiCategory" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return category.isMultiCategory();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di220227949321361098" cid="C375" type="class" name="DatasetBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:10">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a3d4964c3611a4293be5b2ede317af10b368" name="dataset" type="Dataset" type-id="Dataset" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o68090a29aa1f476686ec411ca234fe1c369" name="DatasetBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataset" type="Dataset" type-id="Dataset" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.dataset = dataset;}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Dataset#getCreateTime()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obb84f043ab3a4786a78c7288e6890667369" name="getCreateTime" type="Date" type-id="Date" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dataset.getCreateTime();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Dataset#getDatasetId()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oec5ca14cd0554550a28a0235cba9deb7369" name="getDatasetId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dataset.getDatasetId();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Dataset#getSize()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob6e48588162e4809b950dd88ab83a35c369" name="getSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dataset.getSize();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Dataset#getSummary()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="odcfbac9ee5d34129a4d2352c4bc02267369" name="getSummary" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dataset.getSummary();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Dataset#getUploadFile()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o839fc91a7a4f49deb4a7630e6f99aaf5369" name="getUploadFile" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dataset.getUploadFile();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Dataset#getUser()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocf05fe273562433790889a17cdf4a8bf369" name="getUser" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new UserBean(dataset.getUser());}

    /**
     * @return
     * @throws Exception
     * @see org.gusdb.wdk.model.user.Dataset#getValues()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o334496621a3a4edb838da5d719bafbe5369" name="getValues" type="List&lt;String&gt;" type-id="List&lt;String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        try{
            return dataset.getValues();} catch (Exception ex){
            ex.printStackTrace();
            throw ex;}}

    /**
     * @return
     * @throws Exception
     * @see org.gusdb.wdk.model.user.Dataset#getValue()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc53e558815c9462495f9fb1750a27e9a369" name="getValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        try{
            return dataset.getValue();} catch (Exception ex){
            ex.printStackTrace();
            throw ex;}}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Dataset#getChecksum()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o86c0e734a4414aacb943c0bac09a8ff5369" name="getChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dataset.getChecksum();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Dataset#getUserDatasetId()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0ddd2537d61b4ad481be949092e49e4e369" name="getUserDatasetId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return dataset.getUserDatasetId();}</source-code>
          </source-codes>
        </operation>
        <operation id="o080f38ca161a4a5885d9d7f5b515a574369" name="setRecordClass" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClassBean" type-id="RecordClassBean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        dataset.setRecordClass(recordClass.recordClass);}</source-code>
          </source-codes>
        </operation>
        <operation id="o994e42bf965b45cab04fc76b8ae61503369" name="getRecordClass" type="RecordClassBean" type-id="RecordClassBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new RecordClassBean(dataset.getRecordClass());}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di886391010701489971" cid="C376" type="class" name="EnumParamCache" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:14">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a6793ec340ba740ffa6dcf184453ca63d233" name="_source" type="AbstractEnumParam" type-id="AbstractEnumParam" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ab9784c6932d84065909fd91ae866692d233" name="_dependedValue" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="adca2948dea4c41029460fed593b17214233" name="_defaultValue" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o2b0827833c10498f87839881f14cae11233" name="EnumParamCache" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="source" type="AbstractEnumParam" type-id="AbstractEnumParam" default-value="" />
            <parameter id="" name="dependedValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		_source = source;
		_dependedValue = dependedValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="od703b10f3dc0445489ea7833073c8766233" name="getDefaultValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _defaultValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="o99ca603b25e2464d824d9fb2eb7a084f233" name="setDefaultValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="defaultValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		_defaultValue = defaultValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="o90e0cafcc4134071998df788aece2d40233" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="parentTerm" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		if (internalVal == null || displayVal == null /*|| parentTerm == null*/ ){
			StringBuilder badVals = new StringBuilder();
			badVals.append(internalVal == null ? ",internal " : "");
			badVals.append(displayVal == null ? ",display " : "");
			//badVals.append(parentTerm == null ? ",parent " : "");
			throw new IllegalArgumentException("Null { " + badVals.toString().substring(1) + "} value(s) found for term " + term);}
		// strip off the comma from term
		term = term.replaceAll(",", " -");
		
		_termInternalMap.put(term, internalVal);
		_termDisplayMap.put(term, displayVal);
		_termParentMap.put(term, parentTerm);}</source-code>
          </source-codes>
        </operation>
        <operation id="obb7f39d465c74caf860225202106045c233" name="isEmpty" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		// all maps should contain the same keys (except top level nodes will have null parents)
		return _termInternalMap.isEmpty();}</source-code>
          </source-codes>
        </operation>
        <operation id="ob997b4c6f03546b3828e08c73a4dcb37233" name="getNumTerms" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _termInternalMap.size();}</source-code>
          </source-codes>
        </operation>
        <operation id="ob0faba5d5633490cab54ae4a755a02d4233" name="getTerms" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return new LinkedHashSet&lt;String&gt;(_termInternalMap.keySet());}</source-code>
          </source-codes>
        </operation>
        <operation id="of8dc113825f541caa0db226db1fe1e50233" name="containsTerm" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="term" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _termInternalMap.containsKey(term);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4ec842707a46498a9465a4dc30d3657c233" name="getInternal" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="term" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{ return _termInternalMap.get(term);}</source-code>
          </source-codes>
        </operation>
        <operation id="of87a929220994ed7a80de0870d3f0130233" name="getDisplay" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="term" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{ return _termDisplayMap.get(term);}</source-code>
          </source-codes>
        </operation>
        <operation id="ofa101d8e84384974b333243413f8a988233" name="getParent" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="term" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{ return _termParentMap.get(term);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7b6d9b2d132c4d6bb1a701e69d542b8e233" name="getVocabMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, String&gt;(_termInternalMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o991d00e51d4d4ef4b30eff2674aae079233" name="getDisplayMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, String&gt;(_termDisplayMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o137b926075054a7aa0c7b47d8c48478f233" name="getParentMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new LinkedHashMap&lt;String, String&gt;(_termParentMap);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7db0d33b57384f14948f2a370edc2eb2233" name="getVocab" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ array = new String[_termInternalMap.size();
        _termInternalMap.keySet().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3da7b43af4764a7494c9ef3aa67eb61b233" name="getDisplays" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ displays = new String[_termDisplayMap.size();
        _termDisplayMap.values().toArray(displays);
        return displays;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c59cdf9311441b8995789d5d672ab00233" name="getVocabTreeRoots" type="EnumParamTermNode[]" type-id="EnumParamTermNode[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (_termTreeList != null){
            EnumParamTermNode[ array = new EnumParamTermNode[_termTreeList.size();
            _termTreeList.toArray(array);
            return array;}
        return new EnumParamTermNode[0;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6f933a9209e64da0b6d89bd501debced233" name="getVocabInternal" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ array = new String[_termInternalMap.size();
        if (_source.isNoTranslation()) _termInternalMap.keySet().toArray(array);
        else _termInternalMap.values().toArray(array);
        return array;}</source-code>
          </source-codes>
        </operation>
        <operation id="o63026b1ea0ff401c836163c2a7ec419b233" name="addParentNodeToTree" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="node" type="EnumParamTermNode" type-id="EnumParamTermNode" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		_termTreeList.add(node);}</source-code>
          </source-codes>
        </operation>
        <operation id="o90934c1fed2f44ce9326c0c4e5e48d7a233" name="unsetParentTerm" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="term" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		_termParentMap.remove(term);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6fd6ca466a2346b4aec088334a37d230233" name="getTermTreeListRef" type="List&lt;EnumParamTermNode&gt;" type-id="List&lt;EnumParamTermNode&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _termTreeList;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe863e1d319de40bdac01cfc8f166ef83233" name="getDependedValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return _dependedValue;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di773942712609855855" cid="C377" type="class" name="FavoriteBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:14">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a4d64f56c28ec49e88e650a6807e0241a557" name="favorite" type="Favorite" type-id="Favorite" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o15e03a9a976c4b77bb0bbf9e711c6402557" name="FavoriteBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="favorite" type="Favorite" type-id="Favorite" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.favorite = favorite;}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Favorite#getRecordInstances()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob5f20c79b6df4f3d837ec600943b76bc558" name="getRecordInstance" type="RecordBean" type-id="RecordBean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new RecordBean(null, favorite.getRecordInstance());}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Favorite#getRecordClass()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ode82b59ff7064d1ea22e5f191e139812558" name="getRecordClass" type="RecordClassBean" type-id="RecordClassBean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new RecordClassBean(favorite.getRecordClass());}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Favorite#getUser()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="obfe12e97a88c45548da1b1680c4fc83d558" name="getUser" type="UserBean" type-id="UserBean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new UserBean(favorite.getUser());}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Favorite#getGroup()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oc17cb97a830742eb9861f0f27c3bbe82558" name="getGroup" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return favorite.getGroup();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Favorite#getNote()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o80fb181e5c1646a48a3e3d65b0534334558" name="getNote" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return favorite.getNote();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di514939921578410621" cid="C378" type="class" name="FieldBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:14">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a1005861b254a45e18b67953ab019878f998" name="field" type="Field" type-id="Field" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0e3a6f4cf7ed437497613173438bd6da998" name="FieldBean" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="Field" type-id="Field" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.field = field;}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o99697946e72f4467be226f6fc05d78a9998" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.getDisplayName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getHelp()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2792ad7206f0487c8fec9c24114380dc998" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.getHelp();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getInReportMaker()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o35a840247373407ea11b03ff4823d7cf998" name="isInReportMaker" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.isInReportMaker();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getInternal()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4c040757a4c94613ba267c6da2c724d7998" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.isInternal();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe315130dd1764a39a05d358f140b7de0998" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.getName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getTruncateTo()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o49391d67a685409b921ebbe1d26dd52d998" name="getTruncateTo" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.getTruncateTo();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#getType()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe31bd3b13fd149ea9995052b9bf9cdd6998" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.getType();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Field#toString()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od5a0bded761a49e6bb92a2a43128b86f998" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return field.toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di303785960546500669" cid="C379" type="class" name="GroupBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:15">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a772ef604810e412ab8f3456776ec9d83537" name="group" type="Group" type-id="Group" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o22bae9506f824f27b921db05f90fa577537" name="GroupBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="group" type="Group" type-id="Group" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.group = group;}

    /**
     * @return
     * @see org.gusdb.wdk.model.Group#getDescription()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o481451126d7d41c3ba5de1216b8fd480537" name="getDescription" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return group.getDescription();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Group#getDisplayName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o2929a988a7e345199465f83391fe38da537" name="getDisplayName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return group.getDisplayName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Group#getDisplayType()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o6359fc8cda5345d4b5966d24e3670ec6537" name="getDisplayType" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return group.getDisplayType();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Group#getGroupSet()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o26ea37dac67844be83dae06c1454daf4537" name="getGroupSet" type="GroupSetBean" type-id="GroupSetBean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new GroupSetBean(group.getGroupSet());}

    /**
     * @return
     * @see org.gusdb.wdk.model.Group#getName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="obf3433c4bc044fdfa41a71faa1b398bf537" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return group.getName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Group#getFullName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o20e323e40ab7414fa6c9fc3e1fc4bdf0537" name="getFullName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return group.getFullName();}

    /**
     * @param obj
     * @return
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="of88e131174dd4dba9a65f733ddcfa308537" name="equals" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obj" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (obj instanceof GroupBean){
            GroupBean groupBean = (GroupBean) obj;
            String fullName = group.getFullName();
            return fullName.equals(groupBean.getFullName());} else return false;}

    /**
     * @return
     * @see java.lang.Object#hashCode()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oc37307ab7f224af3b107b0c453a17cb0537" name="hashCode" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return group.getFullName().hashCode();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Group#isVisible()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o89ce686c22d54462b754f542dffcef88537" name="isVisible" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return group.isVisible();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di302630514680689234" cid="C380" type="class" name="GroupSetBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:15">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aca0dda005eef40e3ba10a0d4038e70cc857" name="groupSet" type="GroupSet" type-id="GroupSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0088716f765645339a4f2813bf9ef442857" name="GroupSetBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="groupSet" type="GroupSet" type-id="GroupSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.groupSet = groupSet;}

    /**
     * @param name
     * @return
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.GroupSet#getGroup(java.lang.String)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o95067f73ba8a4e74a432417db1c844ee857" name="getGroup" type="GroupBean" type-id="GroupBean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return new GroupBean(groupSet.getGroup( name ));}

    /**
     * @return
     * @see org.gusdb.wdk.model.GroupSet#getGroups()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o60b3b02a582d451494892e43d34aaf64857" name="getGroups" type="GroupBean[ ]" type-id="GroupBean[ ]" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Group[ groups = groupSet.getGroups();
        GroupBean[ groupBeans = new GroupBean[groups.length;
        for (int i =0; i&lt; groups.length; i++){
            groupBeans[i = new GroupBean(groups[i);}
        return groupBeans;}

    /**
     * @return
     * @see org.gusdb.wdk.model.GroupSet#getName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o7d477e55dd75491cad56bbe29cdc801b857" name="getName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return groupSet.getName();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di595663806379243808" cid="C381" type="class" name="NumberUtilBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:15">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o8aef32e628654cbea478f56e9ece39ce957" name="getNextId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return ID.incrementAndGet();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di891961067456110926" cid="C382" type="class" name="ParamBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a3793470e9f1b49448e6e89288f3b4b6e495" name="user" type="UserBean" type-id="UserBean" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af9c649e52f7f47c2a1bf4bd88b3aeb92495" name="dependentValue" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a532a0b0714cf4de990a714d311ebb9b1495" name="truncateLength" type="int" type-id="int" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a212f98feec47441bbd28a86692014cb1495" name="param" type="T" type-id="T" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ob385aa2d9771437da48d5e32acde1abf495" name="ParamBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="param" type="T" type-id="T" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.param = param;
        truncateLength = Utilities.TRUNCATE_DEFAULT;}</source-code>
          </source-codes>
        </operation>
        <operation id="o183f4a01f32a427ba5d7570f1eb6bf95495" name="setUser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.user = user;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob8f20562160547c7942cf7d54158ac6c495" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return param.getName();}</source-code>
          </source-codes>
        </operation>
        <operation id="oac6d95854c414485931feb3e97f7aff2495" name="getId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return param.getId();}</source-code>
          </source-codes>
        </operation>
        <operation id="o04169b011f474fd081d2c58d0de38613495" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return param.getFullName();}</source-code>
          </source-codes>
        </operation>
        <operation id="of5fe32f33b84436b872526026058e454495" name="getPrompt" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return param.getPrompt();}</source-code>
          </source-codes>
        </operation>
        <operation id="o52995af53d874abfb238f10373a008b8495" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return param.getHelp();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5eb0ee093b9140a7bd97799a298ae289495" name="getDefault" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        return param.getDefault();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#isReadonly()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob35307db337b4a8ab825a5ae4152f229495" name="getIsReadonly" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.param.isReadonly();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa285f9df947446dabeca30a0aff96797495" name="getIsAllowEmpty" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return this.param.isAllowEmpty();}</source-code>
          </source-codes>
        </operation>
        <operation id="odeddcb08dacc465aab8791a9ad193804495" name="getEmptyValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return this.param.getEmptyValue();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Param#isVisible()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o758455a64ec542dd90f836e768ff3bcb495" name="getIsVisible" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.param.isVisible();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Param#getGroup()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob5f2e333daf744af9a597ba69ee6b7f5495" name="getGroup" type="GroupBean" type-id="GroupBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new GroupBean(param.getGroup());}

    /**
     * for controller
     * 
     * @throws WdkUserException
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o94b25ca30cf84f6a9a37bba84fa43309495" name="validate" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="rawOrDependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException, WdkUserException{
        param.validate(user.getUser(), rawOrDependentValue);}</source-code>
          </source-codes>
        </operation>
        <operation id="o51be5dbe789c420abe419f9f26944854495" name="setDependentValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.dependentValue = dependentValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="odefa3003b0d942458841d6f7f14547d4495" name="getRawValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        return param.dependentValueToRawValue(user.getUser(), dependentValue);}</source-code>
          </source-codes>
        </operation>
        <operation id="oac8e52d927464ba89cba33b978cf8622495" name="getBriefRawValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException{
        String rawValue = getRawValue();
        if (rawValue != null){
            rawValue = rawValue.replaceAll("\\,", ", ");
            if (rawValue.length() &gt; truncateLength)
                rawValue = rawValue.substring(0, truncateLength) + "...";}
        return rawValue;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2afc6aafe7384906a4bec1c6a8ac787c495" name="setTruncateLength" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="truncateLength" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (truncateLength &gt;= 0){
            this.truncateLength = truncateLength;}}

    /**
     * @param user
     * @param dependentValue
     * @return
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @throws JSONException
     * @see org.gusdb.wdk.model.query.param.Param#dependentValueToIndependentValue(org.gusdb.wdk.model.user.User,
     *      java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o98dad143d396425f8fca5927d022b2e8495" name="dependentValueToIndependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkUserException, WdkModelException, SQLException, JSONException{
        return param.dependentValueToIndependentValue(user.getUser(),
                dependentValue);}

    /**
     * @param user
     * @param independentValue
     * @return
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     * @throws SQLException
     * @throws JSONException
     * @see org.gusdb.wdk.model.query.param.Param#independentValueToRawValue(org.gusdb.wdk.model.user.User,
     *      java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocd837ee6fba4464a9bde5abf36fae000495" name="dependentValueToRawValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="dependentValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException,
            WdkUserException, SQLException, JSONException{
        return param.dependentValueToRawValue(user.getUser(), dependentValue);}

    /**
     * @param user
     * @param rawValue
     * @return
     * @throws NoSuchAlgorithmException
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws SQLException
     * @throws JSONException
     * @see org.gusdb.wdk.model.query.param.Param#rawValueToIndependentValue(org.gusdb.wdk.model.user.User,
     *      java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5043c20364d3421a826910c16b1101a8495" name="rawOrDependentValueToDependentValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="rawValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, WdkUserException, SQLException, JSONException{
        return param.rawOrDependentValueToDependentValue(user.getUser(),
                rawValue);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2fcb293af15e422992e4666a73971aec495" name="getUser" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.user;}</source-code>
          </source-codes>
        </operation>
        <operation id="o71ab15d1fb464754822c8904a2e17b6a495" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return param.getClass().getSimpleName();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di974547209434502044" cid="C383" type="class" name="ParamBeanFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:17">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o33a29fbf76ac4021ac8566ec771f739e876" name="createBeanFromParam" type="ParamBean&lt;T&gt;" type-id="ParamBean&lt;T&gt;" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="param" type="T" type-id="T" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
    	ParamBean&lt;T&gt; bean;
        if (param instanceof AbstractEnumParam){
            bean = (ParamBean&lt;T&gt;) new EnumParamBean((AbstractEnumParam)param);} else if (param instanceof AnswerParam){
            bean = (ParamBean&lt;T&gt;) new AnswerParamBean((AnswerParam)param);} else if (param instanceof DatasetParam){
            bean = (ParamBean&lt;T&gt;) new DatasetParamBean((DatasetParam)param);} else if (param instanceof TimestampParam){
            bean = (ParamBean&lt;T&gt;) new TimestampParamBean((TimestampParam)param);} else if (param instanceof StringParam){
            bean = (ParamBean&lt;T&gt;) new StringParamBean((StringParam)param);} else{
            throw new WdkModelException("Unknown param type: " + param.getClass().getCanonicalName());}
        bean.setUser(user);
        return bean;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di665050914324096126" cid="C384" type="class" name="PrimaryKeyAttributeFieldBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:18">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="of7ecd723c4f34059acff13a335472aee0" name="PrimaryKeyAttributeFieldBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="PrimaryKeyAttributeField" type-id="PrimaryKeyAttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		super(field);}</source-code>
          </source-codes>
        </operation>
        <operation id="o9647673ee85f49c0a89f3b7f0128654a0" name="getPrimaryKeyAttributeField" type="PrimaryKeyAttributeField" type-id="PrimaryKeyAttributeField" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return (PrimaryKeyAttributeField)attributeField;}</source-code>
          </source-codes>
        </operation>
        <operation id="oce1a44e8de60474482de425f615e335d0" name="getColumnRefs" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return getPrimaryKeyAttributeField().getColumnRefs();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di232162879537394924" cid="C385" type="class" name="QuestionBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:21">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a388217f2fcb245e697888282306a0070854" name="question" type="Question" type-id="Question" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a4107144cee054ccaa55e22ad950f8ab0854" name="user" type="UserBean" type-id="UserBean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af8fda17c2a824a42805f9a1399e9bb97854" name="weight" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8763fbf6ef4a464a86557751ffe5a623854" name="_paramBeanMap" type="Map&lt;String, ParamBean&lt;?&gt;&gt;" type-id="Map&lt;String, ParamBean&lt;?&gt;&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac430284f47b941bcbdbaa8561615ee73854" name="inputType" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oc25136a5e6e2483eb88bd669f21f176c854" name="QuestionBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="Question" type-id="Question" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        this.question = question;
        initializeParamBeans();}</source-code>
          </source-codes>
        </operation>
        <operation id="o221b0ddfa4944805afdeaad1ff77cc5f854" name="initializeParamBeans" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Param[ params = question.getParams();
        _paramBeanMap = new LinkedHashMap&lt;String, ParamBean&lt;?&gt;&gt;();
        for (int i = 0; i &lt; params.length; i++){
            _paramBeanMap.put(params[i.getName(), ParamBeanFactory.createBeanFromParam(user, params[i));}}</source-code>
          </source-codes>
        </operation>
        <operation id="o3b0fb92b7a0e4c68b7b8584013a71386854" name="getRecordClass" type="RecordClassBean" type-id="RecordClassBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new RecordClassBean(question.getRecordClass());}</source-code>
          </source-codes>
        </operation>
        <operation id="o7ee6864621e64cafbd6651f1b48603c5855" name="getParams" type="ParamBean&lt;?&gt;[]" type-id="ParamBean&lt;?&gt;[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return _paramBeanMap.values().toArray(new ParamBean[0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o041171211cb74a28ad9a2076c44cdc2d855" name="getParamsMap" type="Map&lt;String, ParamBean&lt;?&gt;&gt;" type-id="Map&lt;String, ParamBean&lt;?&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	return _paramBeanMap;}

    /**
     * @return
     * @see org.gusdb.wdk.model.Question#getParamMapByGroups()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob4268901822e448caedc9e4ae5698b59855" name="getParamMapByGroups" type="Map&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt;" type-id="Map&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;Group, Map&lt;String, Param&gt;&gt; paramGroups = question.getParamMapByGroups();
        Map&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt; paramGroupBeans = new LinkedHashMap&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt;();
        for (Group group : paramGroups.keySet()){
            GroupBean groupBean = new GroupBean(group);
            Map&lt;String, Param&gt; paramGroup = paramGroups.get(group);
            Map&lt;String, ParamBean&lt;?&gt;&gt; paramGroupBean = new LinkedHashMap&lt;String, ParamBean&lt;?&gt;&gt;();
            for (String paramName : paramGroup.keySet()){
                paramGroupBean.put(paramName, _paramBeanMap.get(paramName));}
            paramGroupBeans.put(groupBean, paramGroupBean);}
        return paramGroupBeans;}

    /**
     * @param displayType
     * @return
     * @see org.gusdb.wdk.model.Question#getParamMapByGroups(java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2aa6afff022b4220bcd6a2e8d5c26b48855" name="getParamMapByGroups" type="Map&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt;" type-id="Map&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="displayType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;Group, Map&lt;String, Param&gt;&gt; paramGroups = question.getParamMapByGroups(displayType);
        Map&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt; paramGroupBeans = new LinkedHashMap&lt;GroupBean, Map&lt;String, ParamBean&lt;?&gt;&gt;&gt;();
        for (Group group : paramGroups.keySet()){
            GroupBean groupBean = new GroupBean(group);
            Map&lt;String, Param&gt; paramGroup = paramGroups.get(group);
            Map&lt;String, ParamBean&lt;?&gt;&gt; paramGroupBean = new LinkedHashMap&lt;String, ParamBean&lt;?&gt;&gt;();
            for (String paramName : paramGroup.keySet()){
                paramGroupBean.put(paramName, _paramBeanMap.get(paramName));}
            paramGroupBeans.put(groupBean, paramGroupBean);}
        return paramGroupBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7fdcc2fde3a248e2920507722c582546855" name="getSummaryAttributesMap" type="Map&lt;String, AttributeFieldBean&gt;" type-id="Map&lt;String, AttributeFieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; attribs = question.getSummaryAttributeFieldMap();
        Map&lt;String, AttributeFieldBean&gt; beanMap = new LinkedHashMap&lt;String, AttributeFieldBean&gt;();
        for (AttributeField field : attribs.values()){
            beanMap.put(field.getName(), new AttributeFieldBean(field));}
        return beanMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="o705d096602dc4e79bda1cbcee9ebb7a2855" name="getDisplayableAttributeFields" type="Map&lt;String, AttributeFieldBean&gt;" type-id="Map&lt;String, AttributeFieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; attribs = question.getAttributeFieldMap(FieldScope.NON_INTERNAL);
        Map&lt;String, AttributeFieldBean&gt; beanMap = new LinkedHashMap&lt;String, AttributeFieldBean&gt;();
        for (AttributeField field : attribs.values()){
            beanMap.put(field.getName(), new AttributeFieldBean(field));}
        return beanMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9a7b131988a64503a6ad5535d27b9452855" name="getReportMakerAttributesMap" type="Map&lt;String, AttributeFieldBean&gt;" type-id="Map&lt;String, AttributeFieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; attribs = question.getAttributeFieldMap(FieldScope.REPORT_MAKER);
        Iterator&lt;String&gt; ai = attribs.keySet().iterator();

        Map&lt;String, AttributeFieldBean&gt; rmaMap = new LinkedHashMap&lt;String, AttributeFieldBean&gt;();
        while (ai.hasNext()){
            String attribName = ai.next();
            rmaMap.put(attribName, new AttributeFieldBean(
                    attribs.get(attribName)));}
        return rmaMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="of418975334e84a40ba9d6f7c99d14585855" name="getReportMakerTablesMap" type="Map&lt;String, TableFieldBean&gt;" type-id="Map&lt;String, TableFieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, TableField&gt; tables = question.getRecordClass().getTableFieldMap(
                FieldScope.REPORT_MAKER);
        Iterator&lt;String&gt; ti = tables.keySet().iterator();

        Map&lt;String, TableFieldBean&gt; rmtMap = new LinkedHashMap&lt;String, TableFieldBean&gt;();
        while (ti.hasNext()){
            String tableName = ti.next();
            rmtMap.put(tableName, new TableFieldBean(tables.get(tableName)));}
        return rmtMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc97bbeba27a34461974ac0ddb8c4f21e855" name="getReportMakerFieldsMap" type="Map&lt;String, FieldBean&gt;" type-id="Map&lt;String, FieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, Field&gt; fields = question.getFields(FieldScope.REPORT_MAKER);
        Iterator&lt;String&gt; fi = fields.keySet().iterator();

        Map&lt;String, FieldBean&gt; rmfMap = new LinkedHashMap&lt;String, FieldBean&gt;();
        while (fi.hasNext()){
            String fieldName = fi.next();
            Field field = fields.get(fieldName);
            if (field instanceof AttributeField){
                rmfMap.put(fieldName, new AttributeFieldBean(
                        (AttributeField) field));} else if (field instanceof TableField){
                rmfMap.put(fieldName, new TableFieldBean((TableField) field));}}
        return rmfMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0a2bed38621646b48d9dee13aa4e4d52855" name="getAttributeFields" type="Map&lt;String, AttributeFieldBean&gt;" type-id="Map&lt;String, AttributeFieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; fields = question.getAttributeFieldMap();
        Map&lt;String, AttributeFieldBean&gt; beans = new LinkedHashMap&lt;String, AttributeFieldBean&gt;();
        for (AttributeField field : fields.values()){
            AttributeFieldBean bean = new AttributeFieldBean(field);
            beans.put(field.getName(), bean);}
        return beans;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob2d7547656574e1b84187497bd4d0f8a855" name="getAdditionalSummaryAttributesMap" type="Map&lt;String, AttributeFieldBean&gt;" type-id="Map&lt;String, AttributeFieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeFieldBean&gt; all = getReportMakerAttributesMap();
        Map&lt;String, AttributeFieldBean&gt; dft = getSummaryAttributesMap();
        Map&lt;String, AttributeFieldBean&gt; opt = new LinkedHashMap&lt;String, AttributeFieldBean&gt;();
        Iterator&lt;String&gt; ai = all.keySet().iterator();
        while (ai.hasNext()){
            String attribName = ai.next();
            if (dft.get(attribName) == null){
                opt.put(attribName, all.get(attribName));}}
        return opt;}</source-code>
          </source-codes>
        </operation>
        <operation id="o189808d4aff24b9db80264f4fa83babc855" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o48f94469b7d44ea3993c26855f82a9d3855" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getFullName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Question#getQuestionSetName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o830425a1bef3489eb646c78d139dd1b6855" name="getQuestionSetName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getQuestionSetName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o586c1f46fe0c473190465662f0832f76855" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getDisplayName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o9f31ce8d8b1a4b08bcb0bd82e70a5384855" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getHelp();}

    /**
     * Called by the controller
     * 
     * @param paramErrors
     *            Map of paramName--&gt;value
     * @param start
     *            Index of the first record to include in the answer
     * @param end
     *            Index of the last record to include in the answer
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob50ced14b25d4471a53cffbdf8c049b5855" name="makeAnswerValue" type="AnswerValueBean" type-id="AnswerValueBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="paramValues" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="pageStart" type="int" type-id="int" default-value="" />
            <parameter id="" name="pageEnd" type="int" type-id="int" default-value="" />
            <parameter id="" name="sortingMap" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="filterName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="assignedWeight" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        AnswerFilterInstance filter = null;
        if (filterName != null){
            RecordClass recordClass = question.getRecordClass();
            filter = recordClass.getFilter(filterName);}
        AnswerValue answerValue = question.makeAnswerValue(user.getUser(),
                paramValues, pageStart, pageEnd, sortingMap, filter,
                assignedWeight);
        return new AnswerValueBean(answerValue);}</source-code>
          </source-codes>
        </operation>
        <operation id="o05ddae9aa0bc47bda34b311d58cd3a4b855" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getDescription();}</source-code>
          </source-codes>
        </operation>
        <operation id="o0976948c8da043da9d50e8a0b78617ca855" name="getSummary" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getSummary();}</source-code>
          </source-codes>
        </operation>
        <operation id="o68e0b9d5107c46dca033805b0bf69cd7855" name="getCustomJavascript" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	return question.getCustomJavascript();}
    
    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.Question#getCategory()
     */
    @Deprecated</source-code>
          </source-codes>
        </operation>
        <operation id="of784cbd05ed04fd3ba974c6bea8897eb855" name="getCategory" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getCategory();}

    /**
     * A indicator to the controller whether this question bean should make
     * answer beans that contains all records in one page or not.
     * 
     * @return
     * @see org.gusdb.wdk.model.Question#isFullAnswer()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2ce0bc7b719a43068159afe4d9c3abaf855" name="isFullAnswer" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.isFullAnswer();}

    /**
     * make an answer bean with default page size.
     * 
     * @param paramErrors
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws JSONException
     * @throws SQLException
     * @throws NoSuchAlgorithmException
     * @see org.gusdb.wdk.model.Question#makeAnswer(java.util.Map)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8eca0213f2ed40e88dfff294c9d18d06855" name="makeAnswerValue" type="AnswerValueBean" type-id="AnswerValueBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="paramValues" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="assignedWeight" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        return new AnswerValueBean(question.makeAnswerValue(user.getUser(),
                paramValues, assignedWeight));}

    /**
     * @param propertyListName
     * @return
     * @see org.gusdb.wdk.model.Question#getPropertyList(java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa1311342861c4353a208c4688e86557a855" name="getPropertyList" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="propertyListName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getPropertyList(propertyListName);}

    /**
     * @return
     * @see org.gusdb.wdk.model.Question#getPropertyLists()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o40c0844d9b204dd38fac04680a0db645855" name="getPropertyLists" type="Map&lt;String, String[]&gt;" type-id="Map&lt;String, String[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getPropertyLists();}

    /**
     * @return
     * @see org.gusdb.wdk.model.Question#isNoSummaryOnSingleRecord()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6c75223992914c10b3d3a60817cb5969855" name="isNoSummaryOnSingleRecord" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.isNoSummaryOnSingleRecord();}</source-code>
          </source-codes>
        </operation>
        <operation id="o51bbc7fdb426452ab371ba0542daedc0855" name="getIsBoolean" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getQuery().isBoolean();}</source-code>
          </source-codes>
        </operation>
        <operation id="o4ca99db848d74bb09c2da45f5cf30292855" name="getIsCombined" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getQuery().isCombined();}</source-code>
          </source-codes>
        </operation>
        <operation id="o44b3581579a349519bf730cc88143a60855" name="getIsTransform" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getQuery().isTransform();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1b37927df9004cd2bbe00e366504d12b856" name="setInputType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="inputType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.inputType = inputType;}</source-code>
          </source-codes>
        </operation>
        <operation id="od62a9c4742b447e59760177408059ca9856" name="getTransformParams" type="List&lt;AnswerParamBean&gt;" type-id="List&lt;AnswerParamBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        List&lt;AnswerParamBean&gt; beans = new ArrayList&lt;AnswerParamBean&gt;();
        RecordClass input = question.getWdkModel().getRecordClass(inputType);
        for (AnswerParam answerParam : question.getTransformParams(input)){
            beans.add(new AnswerParamBean(answerParam));}
        return beans;}</source-code>
          </source-codes>
        </operation>
        <operation id="obc0706bc460e4efc8f6bd26a7f7c434a856" name="setParam" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="nameValue" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String[ parts = nameValue.split("=");
        String name = parts[0.trim();
        String value = parts[1.trim();
        params.put(name, value);}</source-code>
          </source-codes>
        </operation>
        <operation id="o56b4befc3b304a58bc4a739a286747dd856" name="setUser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.user = user;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob18c3272c4e4444baefe6f33528143e2856" name="setWeight" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="weight" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.weight = weight;}</source-code>
          </source-codes>
        </operation>
        <operation id="o671a3cbebb534192a1abf845ef1fe965856" name="getAnswerValue" type="AnswerValueBean" type-id="AnswerValueBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException{
        try{
        if (user == null)
            throw new WdkUserException("User is not set. Please set user to "
                    + "the questionBean before calling to create answerValue.");

        AnswerValue answerValue = question.makeAnswerValue(user.getUser(),
                params, weight);

        // reset the params
        params.clear();

        return new AnswerValueBean(answerValue);} catch (Exception ex){
            ex.printStackTrace();
            throw new WdkModelException(ex);}}

    /**
     * @return
     * @see org.gusdb.wdk.model.Question#getSummaryViews()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe6306833830a4068aae92b857fa0ac4e856" name="getSummaryViews" type="Map&lt;String, SummaryView&gt;" type-id="Map&lt;String, SummaryView&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.getSummaryViews();}

    /**
     * @return
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.Question#getDefaultSummaryView()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9b283efe1c294ad9b4c71960001185db856" name="getDefaultSummaryView" type="SummaryView" type-id="SummaryView" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return question.getDefaultSummaryView();}</source-code>
          </source-codes>
        </operation>
        <operation id="o946d78533c8c47fc83930886e7809f55856" name="getContainsWildcardTextParam" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	for (ParamBean&lt;?&gt; param : _paramBeanMap.values()){
    		if (param.getName().equals("text_expression")){
    			return true;}}
    	return false;}

    /**
     * @return
     * @see org.gusdb.wdk.model.Question#isNew()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob3f2d0c4e9224bc58375e4af18104eeb856" name="isNew" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.isNew();}</source-code>
          </source-codes>
        </operation>
        <operation id="o38ef7c96da3f4f28b9ebbce8dc82ebbe856" name="isRevised" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return question.isRevised();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di877344642142071705" cid="C386" type="class" name="QuestionSetBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:22">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ae3d454b0f9d2424cb3434af280b3ca9f508" name="questionSet" type="QuestionSet" type-id="QuestionSet" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o395d069b84ef41c8b7b101e2762cea6a508" name="QuestionSetBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionSet" type="QuestionSet" type-id="QuestionSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.questionSet = questionSet;}</source-code>
          </source-codes>
        </operation>
        <operation id="o47f408a8c610475dbe292c275d4e256d508" name="getQuestions" type="QuestionBean[]" type-id="QuestionBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Question[ questions = questionSet.getQuestions();
        QuestionBean[ questionBeans = new QuestionBean[questions.length;
        for (int i = 0; i &lt; questions.length; i++){
            questionBeans[i = new QuestionBean(questions[i);}
        return questionBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="of6566a69422c40b990f91fb1123b2c46508" name="getQuestionsMap" type="Map&lt;String, QuestionBean&gt;" type-id="Map&lt;String, QuestionBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        LinkedHashMap&lt;String, QuestionBean&gt; map = new LinkedHashMap&lt;String, QuestionBean&gt;();
        QuestionBean[ questions = getQuestions();
        for (int i = 0; i &lt; questions.length; i++){
            map.put(questions[i.getName(), questions[i);}
        return map;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7a6ca6405d51403192241f707107a313509" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionSet.getName();}</source-code>
          </source-codes>
        </operation>
        <operation id="ob9f87cf0c0b0482ab4bcb27564908cbc509" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionSet.isInternal();}</source-code>
          </source-codes>
        </operation>
        <operation id="oc6fb41e5ac314654b531f306d14dfeb5509" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionSet.getDisplayName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o6f38c502f3664badae4fbf5443e6a9f1509" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return questionSet.getDescription();}

    @Deprecated</source-code>
          </source-codes>
        </operation>
        <operation id="oe3144229f5fe496997bc0b88539231f6509" name="getQuestionsByCategory" type="Map&lt;String, Set&lt;QuestionBean&gt;&gt;" type-id="Map&lt;String, Set&lt;QuestionBean&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        Map&lt;String, Set&lt;QuestionBean&gt;&gt; questions = new LinkedHashMap&lt;String, Set&lt;QuestionBean&gt;&gt;();
        Question[ qs = questionSet.getQuestions();
        for (Question q : qs){
            String category = q.getCategory();
            if (category == null || category.length() == 0) category = " ";
            Set&lt;QuestionBean&gt; subqs = questions.get(category);
            if (subqs == null){
                subqs = new LinkedHashSet&lt;QuestionBean&gt;();
                questions.put(category, subqs);}
            subqs.add(new QuestionBean(q));}
        return questions;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di992776042560171278" cid="C387" type="class" name="RecordBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:27">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2c848565bd4f4b3e9eaa5d233176ab98576" name="recordInstance" type="RecordInstance" type-id="RecordInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a850a03907b004056a79ac8541c4ea855576" name="fieldName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9cfe1b1ea14a42bf8e32f9db8658ab7a576" name="value" type="AttributeValue" type-id="AttributeValue" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a48850008342448e59aac57e455f4a33f577" name="recordInstance" type="RecordInstance" type-id="RecordInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="af9e1c9bfcdf8432bbdde30e50c54c56d577" name="fields" type="Map&lt;String, AttributeField&gt;" type-id="Map&lt;String, AttributeField&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6cf912d1c7bb48b78791b8ba841cc22b577" name="values" type="Map&lt;String, AttributeValue&gt;" type-id="Map&lt;String, AttributeValue&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac8205fcab4674363b857ae8e73ddfffa577" name="fieldName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" default-value="(">
          <stereotypes />
        </attribute>
        <attribute id="a64fd8d9ee186430da0723d1c18470b66577" name="value" type="AttributeValue" type-id="AttributeValue" visibility="package" abstract="false" virtual="false" default-value="values.get">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o190ced21735a4ca0af949a42dfaab50e576" name="RecordBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
            <parameter id="" name="recordInstance" type="RecordInstance" type-id="RecordInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.user = user;
        this.recordInstance = recordInstance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7b02632210ef4cd58b04837859857a85576" name="RecordBean" type="&lt;String, Object&gt;" type-id="&lt;String, Object&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="recordClass" type="RecordClassBean" type-id="RecordClassBean" default-value="" />
            <parameter id="" name="pkValues" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, SQLException, JSONException, WdkUserException{
        this.user = user.getUser();
        recordInstance = new RecordInstance(user.getUser(),
                recordClass.recordClass, pkValues);}</source-code>
          </source-codes>
        </operation>
        <operation id="o16d102ebb0ea48659f157da27c218758576" name="getRecordInstance" type="RecordInstance" type-id="RecordInstance" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordInstance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7e34c238d46f489589817692e930a356576" name="isValidRecord" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordInstance.isValidRecord();}

    /**
     * modified by Jerric
     * 
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocb97df18301d40f9b4ed7526ca1e498d576" name="getPrimaryKey" type="PrimaryKeyAttributeValue" type-id="PrimaryKeyAttributeValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordInstance.getPrimaryKey();}</source-code>
          </source-codes>
        </operation>
        <operation id="o84af452c27be4307b2707ac7b7aefc33576" name="getRecordClass" type="RecordClassBean" type-id="RecordClassBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new RecordClassBean(recordInstance.getRecordClass());}</source-code>
          </source-codes>
        </operation>
        <operation id="ofb7b9b2805e44196bc4f4b1422513310576" name="getSummaryAttributeNames" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordInstance.getSummaryAttributeNames();}</source-code>
          </source-codes>
        </operation>
        <operation id="o7fa32af2269a4c50af3810426bf3f855576" name="getNestedRecords" type="Map&lt;String, RecordBean&gt;" type-id="Map&lt;String, RecordBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException, NoSuchAlgorithmException, SQLException,
            JSONException{
        Map&lt;String, RecordInstance&gt; nri = recordInstance
                .getNestedRecordInstances();
        Map&lt;String, RecordBean&gt; nriBeans = new LinkedHashMap&lt;String, RecordBean&gt;();
        for (String recordName : nri.keySet()){
            RecordBean nextNrBean = new RecordBean(user, nri.get(recordName));
            nriBeans.put(recordName, nextNrBean);}
        return nriBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3fe766f5ca2b4913b0de64be9441ae67576" name="getNestedRecordLists" type="Map&lt;String, RecordBean[]&gt;" type-id="Map&lt;String, RecordBean[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        Map&lt;String, RecordInstance[&gt; nrl = recordInstance
                .getNestedRecordInstanceLists();
        Map&lt;String, RecordBean[&gt; nrlBeans = new LinkedHashMap&lt;String, RecordBean[&gt;();
        for (String recordName : nrl.keySet()){
            RecordInstance nextNrl[ = nrl.get(recordName);
            RecordBean[ nextNrBeanList = new RecordBean[nextNrl.length;
            for (int i = 0; i &lt; nextNrl.length; i++){
                nextNrBeanList[i = new RecordBean(user, nextNrl[i);}
            nrlBeans.put(recordName, nextNrBeanList);}
        return nrlBeans;}

    /**
     * @return Map of attributeName --&gt;
     *         {@link org.gusdb.wdk.model.AttributeFieldValue}
     * @throws WdkUserException
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3aa4c671780b4c918e3d776c791cac81576" name="getAttributes" type="Map&lt;String, AttributeValue&gt;" type-id="Map&lt;String, AttributeValue&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, SQLException,
            JSONException, WdkUserException{
        return new AttributeValueMap(recordInstance, FieldScope.ALL);}

    /**
     * @return Map of attributeName --&gt;
     *         {@link org.gusdb.wdk.model.AttributeFieldValue}
     * @throws WdkUserException
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5439a35ccd144d53a85e2ce01b608fb5576" name="getSummaryAttributes" type="Map&lt;String, AttributeValue&gt;" type-id="Map&lt;String, AttributeValue&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, SQLException,
            JSONException, WdkUserException{
        return new AttributeValueMap(recordInstance, FieldScope.NON_INTERNAL);}

    /**
     * @return Map of tableName --&gt; {@link org.gusdb.wdk.model.TableValue}
     * @throws WdkUserException
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1b130818cff649f28deddeea0ee2c1ad576" name="getTables" type="Map&lt;String, TableValue&gt;" type-id="Map&lt;String, TableValue&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, SQLException, JSONException, WdkUserException{
        return new TableValueMap(recordInstance, FieldScope.ALL);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4db7abe1e99d41379478f17e467e013f576" name="isInBasket" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        try{
        if (!recordInstance.getRecordClass().isUseBasket()) return false;
        if (!recordInstance.isValidRecord()) return false;
        AttributeValue value = recordInstance.getAttributeValue(BasketFactory.BASKET_ATTRIBUTE);
        return "1".equals(value.getValue());} catch(Exception ex){
            logger.warn("something wrong when check the inBasket state, need " +
            		"further investigation:\n" + ex);
            ex.printStackTrace();
            return false;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o48a5c96cde17447483f302c6d78a8fbb576" name="isInFavorite" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        try{
            RecordClass recordClass = recordInstance.getRecordClass();
            Map&lt;String, String&gt; pkValues = recordInstance.getPrimaryKey()
                    .getValues();
            Map&lt;String, Object&gt; values = new LinkedHashMap&lt;String, Object&gt;();
            for (String column : pkValues.keySet()){
                values.put(column, pkValues.get(column));}
            return user.isInFavorite(recordClass, values);} catch (SQLException ex){
            logger.error(ex);
            ex.printStackTrace();
            throw ex;} catch (WdkUserException ex){
            logger.error(ex);
            ex.printStackTrace();
            throw ex;} catch (WdkModelException ex){
            logger.error(ex);
            ex.printStackTrace();
            throw ex;}}

    private class AttributeValueMap implements Map&lt;String, AttributeValue&gt;{

        private class AttributeValueEntry implements
                Map.Entry&lt;String, AttributeValue&gt;{</source-code>
          </source-codes>
        </operation>
        <operation id="o5cd2b8b426654dde9423d708ca797ceb576" name="AttributeValueEntry" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordInstance" type="RecordInstance" type-id="RecordInstance" default-value="" />
            <parameter id="" name="fieldName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
                this.recordInstance = recordInstance;
                this.fieldName = fieldName;}

            /*
             * (non-Javadoc)
             * 
             * @see java.util.Map.Entry#getKey()
             */</source-code>
          </source-codes>
        </operation>
        <operation id="oe06d888576e044c89112eff01a9f1aac576" name="getKey" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
                return fieldName;}

            /*
             * (non-Javadoc)
             * 
             * @see java.util.Map.Entry#getValue()
             */</source-code>
          </source-codes>
        </operation>
        <operation id="of7eb6fa4da5241e2ba74dbd4d59e74fe576" name="getValue" type="AttributeValue" type-id="AttributeValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
                if (value == null){
                    try{
                        value = recordInstance.getAttributeValue(fieldName);} catch (Exception ex){
                        ex.printStackTrace();
                        throw new RuntimeException(ex);}}
                return value;}

            /*
             * (non-Javadoc)
             * 
             * @see java.util.Map.Entry#setValue(java.lang.Object)
             */</source-code>
          </source-codes>
        </operation>
        <operation id="o7a2810521a3e4b77b00092d1b99b44d5577" name="setValue" type="AttributeValue" type-id="AttributeValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="AttributeValue" type-id="AttributeValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
                throw new UnsupportedOperationException("wot supported");}}</source-code>
          </source-codes>
        </operation>
        <operation id="o422352b5ac4448e9ade22707ca7516b0577" name="AttributeValueMap" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordInstance" type="RecordInstance" type-id="RecordInstance" default-value="" />
            <parameter id="" name="scope" type="FieldScope" type-id="FieldScope" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.recordInstance = recordInstance;
            this.fields = recordInstance.getAttributeFieldMap(scope);
            this.values = new LinkedHashMap&lt;String, AttributeValue&gt;();}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#clear()
         */</source-code>
          </source-codes>
        </operation>
        <operation id="oe86950c5454545d78d1ae3ffe75aa970577" name="clear" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            throw new UnsupportedOperationException("wot supported");}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#containsKey(java.lang.Object)
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o7ddb2a45e65b48e280b121cb00ff0880577" name="containsKey" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="key" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return fields.containsKey(key);}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#containsValue(java.lang.Object)
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o4eb72edc94fd47cba431c8bea11c9c6d577" name="containsValue" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            throw new UnsupportedOperationException("wot supported");}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#entrySet()
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o3eb5b849353e48f7ad1ec7e36fd4dba8577" name="entrySet" type="Set&lt;Entry&lt;String, AttributeValue&gt;&gt;" type-id="Set&lt;Entry&lt;String, AttributeValue&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            Set&lt;Entry&lt;String, AttributeValue&gt;&gt; entries = new LinkedHashSet&lt;Entry&lt;String, AttributeValue&gt;&gt;();
            for (String fieldName : fields.keySet()){
                entries.add(new AttributeValueEntry(recordInstance, fieldName));}
            return entries;}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#get(java.lang.Object)
         */
        public AttributeValue get(Object key){String) key;(fieldName);
            if (value == null){
                try {
                    value = recordInstance.getAttributeValue(fieldName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4e9a35910ffb41d3955603d6434fabcd577" name="catch" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ex" type="Exception" type-id="Exception" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
                    ex.printStackTrace();
                    throw new RuntimeException(ex);}
                values.put(fieldName, value);}
            return value;}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#isEmpty()
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o0c3b1a568e2a42449df524db94617520577" name="isEmpty" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return fields.isEmpty();}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#keySet()
         */</source-code>
          </source-codes>
        </operation>
        <operation id="oc045e75bee404954accb817d9a052546577" name="keySet" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return fields.keySet();}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#put(java.lang.Object, java.lang.Object)
         */</source-code>
          </source-codes>
        </operation>
        <operation id="obb21607c5da04066bbc6760aaa647ffb577" name="put" type="AttributeValue" type-id="AttributeValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="key" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="value" type="AttributeValue" type-id="AttributeValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            throw new UnsupportedOperationException("wot supported");}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#putAll(java.util.Map)
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o9fce9cb6e0b04e5290c7f4ddd5a39016577" name="putAll" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="m" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            throw new UnsupportedOperationException("wot supported");}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#remove(java.lang.Object)
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o3ae230b55f60485b8898d3f562556636577" name="remove" type="AttributeValue" type-id="AttributeValue" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="key" type="Object" type-id="Object" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            throw new UnsupportedOperationException("wot supported");}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#size()
         */</source-code>
          </source-codes>
        </operation>
        <operation id="oda73de17d94a425abfc422c85670c66c577" name="size" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            return fields.size();}

        /*
         * (non-Javadoc)
         * 
         * @see java.util.Map#values()
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o7d5c0e70c309490bb1c0ed8babf49477577" name="values" type="Collection&lt;AttributeValue&gt;" type-id="Collection&lt;AttributeValue&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            List&lt;AttributeValue&gt; values = new ArrayList&lt;AttributeValue&gt;();
            for (String fieldName : fields.keySet()){
                values.add(get(fieldName));}
            return values;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di181736443340629351" cid="C388" type="class" name="RecordClassBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ac5da67d00b0f40528f47745f6b798964785" name="recordClass" type="RecordClass" type-id="RecordClass" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3beff125de914ce7a136c87237c4e73b785" name="changeType" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o5fc21d4c036e4c42899ce63c8db1e876785" name="RecordClassBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="RecordClass" type-id="RecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7ddaf99411814f7589b0064ae1c0dc87785" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass.getFullName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o126bac45fa93439e9f6ca665adbe6c4b785" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass.getName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o88bf42665f2f41898001aeafe602ffe9785" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass.getType();}

    /**
     * @return Map of fieldName --&gt; {@link org.gusdb.wdk.model.FieldI}
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe5115907f20445aaa22213a2edb55f6b785" name="getAttributeFields" type="Map&lt;String, AttributeFieldBean&gt;" type-id="Map&lt;String, AttributeFieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AttributeField&gt; fields = recordClass.getAttributeFieldMap();
        Map&lt;String, AttributeFieldBean&gt; fieldBeans = new LinkedHashMap&lt;String, AttributeFieldBean&gt;(
                fields.size());
        for (AttributeField field : fields.values()){
            fieldBeans.put(field.getName(), new AttributeFieldBean(field));}
        return fieldBeans;}

    /**
     * @return Map of fieldName --&gt; {@link org.gusdb.wdk.model.FieldI}
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8303492b40a040dc902bec6591fe419e785" name="getTableFields" type="Map&lt;String, TableFieldBean&gt;" type-id="Map&lt;String, TableFieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        TableField[ fields = recordClass.getTableFields();
        Map&lt;String, TableFieldBean&gt; fieldBeans = new LinkedHashMap&lt;String, TableFieldBean&gt;(
                fields.length);
        for (TableField field : fields){
            fieldBeans.put(field.getName(), new TableFieldBean(field));}
        return fieldBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7e4982a43d4d460b9d1ecce8a132c38b785" name="getQuestions" type="QuestionBean[]" type-id="QuestionBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        WdkModel wdkModel = recordClass.getWdkModel();
        Question questions[ = wdkModel.getQuestions(recordClass);
        QuestionBean[ questionBeans = new QuestionBean[questions.length;
        for (int i = 0; i &lt; questions.length; i++){
            questionBeans[i = new QuestionBean(questions[i);}
        return questionBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob3210d339db84782bfdc91e8055790cc785" name="getReporters" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, ReporterRef&gt; reporterMap = recordClass.getReporterMap();
        Map&lt;String, String&gt; reporters = new LinkedHashMap&lt;String, String&gt;();
        for (String name : reporterMap.keySet()){
            ReporterRef ref = reporterMap.get(name);
            if (ref.isInReportMaker())
                reporters.put(name, ref.getDisplayName());}
        return reporters;}</source-code>
          </source-codes>
        </operation>
        <operation id="o365f9d7bea69450ab77c49f659802dc4785" name="getPrimaryKeyAttribute" type="PrimaryKeyAttributeFieldBean" type-id="PrimaryKeyAttributeFieldBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    	return new PrimaryKeyAttributeFieldBean(recordClass.getPrimaryKeyAttributeField());}</source-code>
          </source-codes>
        </operation>
        <operation id="o3635d4db5df24b999617ebbf0e9a9fbe785" name="getPrimaryKeyColumns" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass.getPrimaryKeyAttributeField().getColumnRefs();}

    /**
     * @return
     * @see org.gusdb.wdk.model.RecordClass#getFilterLayoutMap()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe7da8161b0d54cf5b443e3cddb0d2d7e785" name="getFilterLayoutMap" type="Map&lt;String, AnswerFilterLayoutBean&gt;" type-id="Map&lt;String, AnswerFilterLayoutBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AnswerFilterLayout&gt; layouts = recordClass.getFilterLayoutMap();
        Map&lt;String, AnswerFilterLayoutBean&gt; beans = new LinkedHashMap&lt;String, AnswerFilterLayoutBean&gt;();
        for (String name : layouts.keySet()){
            AnswerFilterLayout layout = layouts.get(name);
            beans.put(name, new AnswerFilterLayoutBean(layout));}
        return beans;}

    /**
     * @return
     * @see org.gusdb.wdk.model.RecordClass#getFilterLayouts()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4fc5d78a3bd549eeacfe2c9d212f0de8785" name="getFilterLayouts" type="AnswerFilterLayoutBean[]" type-id="AnswerFilterLayoutBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        AnswerFilterLayout[ layouts = recordClass.getFilterLayouts();
        AnswerFilterLayoutBean[ beans = new AnswerFilterLayoutBean[layouts.length;
        for (int i = 0; i &lt; layouts.length; i++){
            beans[i = new AnswerFilterLayoutBean(layouts[i);}
        return beans;}

    /**
     * @return
     * @see org.gusdb.wdk.model.RecordClass#getFilterMap()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o62966c7583444df8a16dfaf442ae6c3b785" name="getFilterMap" type="Map&lt;String, AnswerFilterInstanceBean&gt;" type-id="Map&lt;String, AnswerFilterInstanceBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, AnswerFilterInstance&gt; instances = recordClass.getFilterMap();
        Map&lt;String, AnswerFilterInstanceBean&gt; beans = new LinkedHashMap&lt;String, AnswerFilterInstanceBean&gt;();
        for (String name : instances.keySet()){
            AnswerFilterInstance instance = instances.get(name);
            beans.put(name, new AnswerFilterInstanceBean(instance));}
        return beans;}

    /**
     * @return
     * @see org.gusdb.wdk.model.RecordClass#getFilters()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa2ef7dccecc740579266a88e309aba6f785" name="getFilters" type="AnswerFilterInstanceBean[]" type-id="AnswerFilterInstanceBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        AnswerFilterInstance[ instances = recordClass.getFilters();
        AnswerFilterInstanceBean[ beans = new AnswerFilterInstanceBean[instances.length;
        for (int i = 0; i &lt; instances.length; i++){
            beans[i = new AnswerFilterInstanceBean(instances[i);}
        return beans;}</source-code>
          </source-codes>
        </operation>
        <operation id="oea699be078a74dc5991029966a01dd86785" name="getFilter" type="AnswerFilterInstanceBean" type-id="AnswerFilterInstanceBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filterName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        AnswerFilterInstance instance = recordClass.getFilter(filterName);
        return new AnswerFilterInstanceBean(instance);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe01174e199c84a0e9900f35b632e9b20785" name="getRealtimeBasketQuestion" type="QuestionBean" type-id="QuestionBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return new QuestionBean(recordClass.getRealtimeBasketQuestion());}</source-code>
          </source-codes>
        </operation>
        <operation id="o6e736ca7e2884f1b91b9d68fa7f81226785" name="getSnapshotBasketQuestion" type="QuestionBean" type-id="QuestionBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return new QuestionBean(recordClass.getSnapshotBasketQuestion());}</source-code>
          </source-codes>
        </operation>
        <operation id="o6efc0a613ca543299fcbcff3265d5400785" name="isUseBasket" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass.isUseBasket();}</source-code>
          </source-codes>
        </operation>
        <operation id="o30a6330335d54688b75ba0f928d518d7785" name="getTransformQuestions" type="QuestionBean[]" type-id="QuestionBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Question[ questions = recordClass.getTransformQuestions(changeType);
        QuestionBean[ beans = new QuestionBean[questions.length;
        for (int i = 0; i &lt; questions.length; i++){
            beans[i = new QuestionBean(questions[i);}
        return beans;}</source-code>
          </source-codes>
        </operation>
        <operation id="oee6bcacc950d4520bc116fba66b60d76785" name="setChangeType" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="changeType" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.changeType = changeType;}

    /**
     * @return
     * @see org.gusdb.wdk.model.RecordClass#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of9990c5d295f4b77bbcb1c83a88b070d785" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass.getDisplayName();}

    /**
     * @return
     * @see org.gusdb.wdk.model.RecordClass#getShortDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of6a58c422ed5406b95bb8902e158dd79785" name="getShortDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass.getShortDisplayName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o3c9a199cb4c34f5eb715e727cecb18e0785" name="getDefaultRecordView" type="RecordView" type-id="RecordView" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass.getDefaultRecordView();}</source-code>
          </source-codes>
        </operation>
        <operation id="oed4c3053ca4f40649770abf64b13ae77785" name="getRecordViews" type="Map&lt;String, RecordView&gt;" type-id="Map&lt;String, RecordView&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return recordClass.getRecordViews();}</source-code>
          </source-codes>
        </operation>
        <operation id="o29cb7ceaab64427ca465d608a811b28e785" name="getFavoriteNoteField" type="AttributeFieldBean" type-id="AttributeFieldBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new AttributeFieldBean(recordClass.getFavoriteNoteField());}

    /**
     * @param user
     * @param pkValues
     * @return
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     * @throws SQLException
     * @throws JSONException
     * @see org.gusdb.wdk.model.RecordClass#hasMultipleRecords(org.gusdb.wdk.model.user.User, java.util.Map)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocef37b021f4b401aa101af337d503771785" name="hasMultipleRecords" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="pkValues" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException,
            WdkUserException, SQLException, JSONException{
        return recordClass.hasMultipleRecords(user.getUser(), pkValues);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di573689594531325912" cid="C389" type="class" name="StepBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:34">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a375d83a177a64dba9ca2bd679cdd02b2733" name="user" type="UserBean" type-id="UserBean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac31d07d9295c4a73b84cb1ff14f362d4733" name="step" type="Step" type-id="Step" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o21508973c8d4416b8e8dbf489d876227733" name="StepBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="step" type="Step" type-id="Step" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.user = user;
        this.step = step;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe52161fab6ce45ce9761eca3515af61b733" name="getStep" type="Step" type-id="Step" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0acc1774648f42cf99a2ca83d0feab29733" name="getPreviousStep" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        if (step.getPreviousStep() != null){
            return new StepBean(user, step.getPreviousStep());}
        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="odb7d8b3922a14a53b895d9c42c3a2da7733" name="getNextStep" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException, SQLException, JSONException{
        Step nextStep = step.getNextStep();
        return (nextStep == null) ? null : new StepBean(user, nextStep);}</source-code>
          </source-codes>
        </operation>
        <operation id="o78773c4050a844b9a5128b6f7e6e9ab9733" name="getParentStep" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException, SQLException, JSONException{
        Step parent = step.getParentStep();
        return (parent == null) ? null : new StepBean(user, parent);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc17dee54e323464eaf30353401c4779e733" name="getParentOrNextStep" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException, SQLException, JSONException{
        Step nextStep = step.getParentOrNextStep();
        return (nextStep == null) ? null : new StepBean(user, nextStep);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob9518675263441a88bdbc2eabf7657e2733" name="getChildStep" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        if (step.getChildStep() != null){
            return new StepBean(user, step.getChildStep());}
        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8e9f91c8d3b24eedb792ec97c4f09d5e733" name="getBaseCustomName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException{
        return step.getBaseCustomName();}</source-code>
          </source-codes>
        </operation>
        <operation id="ocec62640545d46afb98aff973fb3dc06733" name="getCustomName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            NoSuchAlgorithmException, WdkModelException, JSONException,
            SQLException{
        return step.getCustomName();}</source-code>
          </source-codes>
        </operation>
        <operation id="obfbdacea371b41ee9d0330513c0cd39e733" name="setCustomName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="customName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        step.setCustomName(customName);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob7d42e6e269b4945957c8b1da735c17c733" name="getDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getType();}</source-code>
          </source-codes>
        </operation>
        <operation id="od9b0c4e9b01748a8b414c60959b6b214733" name="getShortDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException, NoSuchAlgorithmException, JSONException,
            SQLException{
        return step.getShortDisplayName();}

    /**
     * @return
     * @throws NoSuchAlgorithmException
     * @throws WdkModelException
     * @throws JSONException
     * @throws WdkUserException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.Step#getDisplayName()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob3db6c441b1c4741b99253565b43abda733" name="getDisplayName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.getDisplayName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o32b01cfec47f4e60b56a0456742f4a94733" name="getResultSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        return step.getResultSize();}</source-code>
          </source-codes>
        </operation>
        <operation id="o964e872160e84f9482e6d8b34ee72b61733" name="getOperation" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            NoSuchAlgorithmException, WdkModelException, JSONException,
            SQLException{
        return step.getOperation();}</source-code>
          </source-codes>
        </operation>
        <operation id="o2282e07461384ed4bcc1f511796e3b1f733" name="getIsFirstStep" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.isFirstStep();}</source-code>
          </source-codes>
        </operation>
        <operation id="o21a8e3928c4045ff9e8c19e209081ccc733" name="getAnswerValue" type="AnswerValueBean" type-id="AnswerValueBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            NoSuchAlgorithmException, WdkModelException, JSONException,
            SQLException{
        return new AnswerValueBean(step.getAnswerValue());}</source-code>
          </source-codes>
        </operation>
        <operation id="o1bc65778d1ae454ca82e1b416cb48bac733" name="getAnswerId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getAnswerId();}</source-code>
          </source-codes>
        </operation>
        <operation id="ob301ec9f2e144f939526b0b9c1c071a7733" name="getStepId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getDisplayId();}</source-code>
          </source-codes>
        </operation>
        <operation id="o31ccf68d9adf40f6b4dbc64a6fd288f1733" name="setAnswerValue" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answer" type="AnswerValueBean" type-id="AnswerValueBean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, SQLException, WdkModelException,
            JSONException, WdkUserException{
        step.setAnswer(answer.getAnswerValue().getAnswer());}</source-code>
          </source-codes>
        </operation>
        <operation id="of3ac3238978046ebaab4d6864b9567be733" name="getEstimateSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, SQLException, JSONException, WdkUserException{
        return step.getEstimateSize();}</source-code>
          </source-codes>
        </operation>
        <operation id="o2609783c72cc47239cc4516bd3a39c17733" name="getLastRunTimeFormatted" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return DateFormat.getDateTimeInstance(DateFormat.SHORT,
                DateFormat.SHORT).format(step.getLastRunTime());}</source-code>
          </source-codes>
        </operation>
        <operation id="o210d257da38449518381512e14d8bd80733" name="getLastRunTime" type="Date" type-id="Date" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getLastRunTime();}</source-code>
          </source-codes>
        </operation>
        <operation id="o533ef2cb91a7442ab3c40df1586ae630733" name="setLastRunTime" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="lastRunTime" type="Date" type-id="Date" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        step.setLastRunTime(lastRunTime);}</source-code>
          </source-codes>
        </operation>
        <operation id="o12c95a27bf674ecf8d6402f97666e19b733" name="getCreatedTimeFormatted" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return DateFormat.getDateTimeInstance(DateFormat.SHORT,
                DateFormat.SHORT).format(step.getCreatedTime());}</source-code>
          </source-codes>
        </operation>
        <operation id="o217ade1adb6841d7b3f26e4dfc68e3fc733" name="getCreatedTime" type="Date" type-id="Date" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getCreatedTime();}</source-code>
          </source-codes>
        </operation>
        <operation id="o6d17f24027b6458cb06fb3de95e46622733" name="getIsBoolean" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.isBoolean();}</source-code>
          </source-codes>
        </operation>
        <operation id="o674745f4247b46ec868e17dae294da20733" name="getIsTransform" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.isTransform();}</source-code>
          </source-codes>
        </operation>
        <operation id="od110c21308ce42dabb9d7d6ec370bbe6733" name="getBooleanExpression" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getBooleanExpression();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa20278c10c614b059754e0ad27f310f7733" name="setBooleanExpression" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="booleanExpression" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        step.setBooleanExpression(booleanExpression);}</source-code>
          </source-codes>
        </operation>
        <operation id="o893ce411f04945f2af1273e70fe0273c733" name="getQueryChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return step.getAnswer().getQueryChecksum();}</source-code>
          </source-codes>
        </operation>
        <operation id="od3fc30f4844041b496f855b382bc876b733" name="getChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return step.getAnswer().getAnswerChecksum();}</source-code>
          </source-codes>
        </operation>
        <operation id="ocd500747869442c6887c1391ed1a3180733" name="update" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="updateTime" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            NoSuchAlgorithmException, SQLException, WdkModelException,
            JSONException{
        step.update(updateTime);}</source-code>
          </source-codes>
        </operation>
        <operation id="ocd96a8d27d484660ac8ab4f04e64c776733" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.getDescription();}

    /**
     * @return Returns the isDeleted.
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o1636509f1f28411db6563ac4a0210a5d733" name="getIsDeleted" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.isDeleted();}

    /**
     * @param isDeleted
     *            The isDeleted to set.
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5d17d36780864525a57b08fc3a3da735733" name="setIsDeleted" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isDeleted" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        step.setDeleted(isDeleted);}</source-code>
          </source-codes>
        </operation>
        <operation id="o67c656e37db54814b0a5cfc337eb0f2a733" name="getIsCollapsible" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException, SQLException, JSONException{
        return step.isCollapsible();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa59d47e6b76c4fd08f42fe80f21aff42734" name="setIsCollapsible" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isCollapsible" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        step.setCollapsible(isCollapsible);}</source-code>
          </source-codes>
        </operation>
        <operation id="o980bfdf815bb4892801828fd440acc04734" name="getCollapsedName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException, SQLException, JSONException{
        return step.getCollapsedName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o0a1e1374ecbf4e24b757095412b6f7ad734" name="setCollapsedName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="collapsedName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        step.setCollapsedName(collapsedName);}

    /**
     * @return the isValid
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o683ed0eef5d5468da9a21b1aafb8db26734" name="getIsValid" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        return step.isValid();}

    /**
     * @param isValid
     *            the isValid to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o4ccb2d38781246d0ada1361c30a19434734" name="setIsValid" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="isValid" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        step.setValid(isValid);}</source-code>
          </source-codes>
        </operation>
        <operation id="o76f0353729674ef7af6495124a0c5902734" name="setParams" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="params" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        step.setParamValues(params);}</source-code>
          </source-codes>
        </operation>
        <operation id="oeb79932e5c0d4515886cd7eec259d674734" name="getParams" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.getParamValues();}</source-code>
          </source-codes>
        </operation>
        <operation id="o8d9da4fa248e455582f0aa8765401a3a734" name="getParamNames" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.getParamNames();}</source-code>
          </source-codes>
        </operation>
        <operation id="o700f861530394d01b5d62714f03c9691734" name="getQuestionName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getQuestionName();}

    /* functions for navigating/manipulating step tree */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oa11c83e2395640929fe541851084f6ec734" name="getStep" type="StepBean" type-id="StepBean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="index" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        return new StepBean(user, step.getStepByIndex(index));}</source-code>
          </source-codes>
        </operation>
        <operation id="o7008aacce6cb4ff1a8d5b9ab1b89a7da734" name="getAllSteps" type="StepBean[]" type-id="StepBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        Step[ steps = step.getAllSteps();
        StepBean[ beans = new StepBean[steps.length;
        for (int i = 0; i &lt; steps.length; ++i){
            beans[i = new StepBean(user, steps[i);}
        return beans;}</source-code>
          </source-codes>
        </operation>
        <operation id="oca4f35e2a17f489599b283033d077077734" name="getStepByDisplayId" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="stepId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        Step target = step.getStepByDisplayId(stepId);
        if (target != null){
            return new StepBean(user, target);}
        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe7f80bf391e945c785c3c4c3684afa16734" name="getLength" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        return step.getLength();}</source-code>
          </source-codes>
        </operation>
        <operation id="o6fa77216f1b5426ab323aacb7151f01e734" name="addStep" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="next" type="StepBean" type-id="StepBean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException, SQLException, JSONException{
        step.addStep(next.step);}

    /**
     * @param estimateSize
     * @see org.gusdb.wdk.model.user.Step#setEstimateSize(int)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o1fcb5e1c57a24311a430f205e5ed60ee734" name="setEstimateSize" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="estimateSize" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        step.setEstimateSize(estimateSize);}</source-code>
          </source-codes>
        </operation>
        <operation id="oeed0a7e6e9364bf8b3ea1f53af75a8c0734" name="getIndexFromId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="stepId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        return step.getIndexFromId(stepId);}

    /**
     * @param filterName
     * @return
     * @throws NoSuchAlgorithmException
     * @throws WdkModelException
     * @throws JSONException
     * @throws WdkUserException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.Step#createStep(org.gusdb.wdk.model.AnswerFilterInstance)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oc93a2a189fde449888a50a633af6696c734" name="createStep" type="StepBean" type-id="StepBean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="filterName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="assignedWeight" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws NoSuchAlgorithmException, WdkModelException, JSONException,
            WdkUserException, SQLException{
        return new StepBean(user, step.createStep(filterName, assignedWeight));}

    /**
     * @return
     * @throws NoSuchAlgorithmException
     * @throws WdkModelException
     * @throws JSONException
     * @throws WdkUserException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.Step#isCombined()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oda342b5be355475c91fb42949be786ba734" name="isCombined" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.isCombined();}</source-code>
          </source-codes>
        </operation>
        <operation id="o0ed08e28e3ec4498b8785d42e35dd8cf734" name="isUseBooleanFilter" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.isUseBooleanFilter();}</source-code>
          </source-codes>
        </operation>
        <operation id="o892b371dcebb4f3da4ee0d15d194baae734" name="isFiltered" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.isFiltered();}</source-code>
          </source-codes>
        </operation>
        <operation id="o9b30c12907a145b9b94e0fca9ae719e9734" name="getFilterDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return step.getFilterDisplayName();}</source-code>
          </source-codes>
        </operation>
        <operation id="of7ade7724dd04496a7561b4ecb60e74f734" name="getFirstStep" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        return new StepBean(user, step.getFirstStep());}

    /**
     * @return
     * @throws NoSuchAlgorithmException
     * @throws WdkModelException
     * @throws JSONException
     * @throws WdkUserException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.Step#deepClone()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oaa4e61565cf84c1a89da85ab852a12a3735" name="deepClone" type="StepBean" type-id="StepBean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        return new StepBean(user, step.deepClone());}</source-code>
          </source-codes>
        </operation>
        <operation id="odb8f57ed432f4f26b67d5ffddca15404735" name="getQuestion" type="QuestionBean" type-id="QuestionBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return new QuestionBean(step.getQuestion());}</source-code>
          </source-codes>
        </operation>
        <operation id="of3542e87410445c08866c3e23270d460735" name="getFilterName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getFilterName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o7becf86f4ac5436c94afc51876932451735" name="getSummaryUrlParams" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        StringBuffer sb = new StringBuffer();
        Map&lt;String, String&gt; paramValues = step.getParamValues();
        Map&lt;String, Param&gt; params = step.getQuestion().getParamMap();
        for (String paramName : paramValues.keySet()){
            Object value = paramValues.get(paramName);
            String paramValue = (value == null) ? "" : value.toString();

            // check if it's dataset param, if so remove user signature
            Param param = params.get(paramName);
            if (param instanceof DatasetParam){
                int pos = paramValue.indexOf(":");
                if (pos &gt;= 0)
                    paramValue = paramValue.substring(pos + 1).trim();}

            try{
                paramName = URLEncoder.encode("value(" + paramName + ")",
                        "UTF-8");
                paramValue = URLEncoder.encode(paramValue, "UTF-8");
                sb.append("&amp;" + paramName + "=" + paramValue);} catch (UnsupportedEncodingException ex){
                throw new WdkModelException(ex);}}
        return sb.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1f3635edf1054d799a6964b4d48fde03735" name="getQuestionUrlParams" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Question question;
        try{
            question = step.getQuestion();} catch (WdkModelException ex){
            return "";}
        StringBuffer sb = new StringBuffer();
        Map&lt;String, String&gt; paramValues = step.getParamValues();
        Map&lt;String, Param&gt; params = question.getParamMap();
        for (String paramName : paramValues.keySet()){
            String paramValue = paramValues.get(paramName).toString();

            // check if the parameter is multipick param
            Param param = params.get(paramName);

            // check if it's dataset param, if so remove user signature
            if (param instanceof DatasetParam){
                int pos = paramValue.indexOf(":");
                if (pos &gt;= 0)
                    paramValue = paramValue.substring(pos + 1).trim();}
            String[ values ={ paramValue};
            if (param instanceof FlatVocabParam){
                FlatVocabParam fvParam = (FlatVocabParam) param;
                if (fvParam.getMultiPick()) values = paramValue.split(",");}
            String wrapper = (param instanceof AbstractEnumParam) ? "array" : "value";
            // URL encode the values
            for (String value : values){
                
                try{
                    String pName = URLEncoder.encode(wrapper + "(" + paramName + ")", "UTF-8");
                    sb.append("&amp;" + pName + "=" + URLEncoder.encode(value.trim(), "UTF-8"));} catch (UnsupportedEncodingException ex){
                    throw new WdkModelException(ex);}}}
        return sb.toString();}

    /**
     * 
     * @see org.gusdb.wdk.model.user.Step#resetAnswerValue()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="occ5d0174d96b462a9a7bc8809f944f37735" name="resetAnswerValue" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        step.resetAnswerValue();}</source-code>
          </source-codes>
        </operation>
        <operation id="o572a24feed1a45fda14e4055ee6a6101735" name="getUser" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return user;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7b2535540af74ea48cd793922e900be7735" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getType();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5c3039843b4c44968156a4b4a94aa974735" name="getDisplayType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getDisplayType();}</source-code>
          </source-codes>
        </operation>
        <operation id="oc510fc1919204875b63dc01a979eb1a2735" name="getShortDisplayType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getShortDisplayType();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Step#getValidationMessage()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o948e9039124d4652b0f563ed2180b4e9735" name="getValidationMessage" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getValidationMessage();}

    /**
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws JSONException
     * @see org.gusdb.wdk.model.user.Step#validate()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o46ace99d620e43ebb00b3d6305651205735" name="validate" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException, JSONException{
        return step.validate();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Step#getAssignedWeight()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o5e9e956a802f4d5eab0008c4d2de071f736" name="getAssignedWeight" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getAssignedWeight();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Step#isRevisable()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o4e679dbd06c94c19aefbb8cf5fc7aecc736" name="isRevisable" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.isRevisable();}
    /**
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.user.Step#getChildrenCount()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o6bee29fdaa36424c979ef5013c34a399736" name="getAnswerParamCount" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        return step.getAnswerParamCount();}

    /**
     * @return
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.user.Step#getChildStepParam()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8e15c76095104fe69e9690acd90d0088736" name="getChildStepParam" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return step.getChildStepParam();}

    /**
     * @return
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.user.Step#getPreviousStepParam()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o2df674289e884c2a89aee9068a676318736" name="getPreviousStepParam" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return step.getPreviousStepParam();}

    /**
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @throws JSONException
     * @see org.gusdb.wdk.model.user.Step#getFrontId()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oeb3477440f1349f6b64b5680ff331d10736" name="getFrontId" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        return step.getFrontId();}</source-code>
          </source-codes>
        </operation>
        <operation id="od191e0acd01a45169b512f82967d9d1e736" name="toString" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.toString();}

    /**
     * @return
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.user.Step#isUncollapsible()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8e4ba0f5037744b39fdb8720f6fb6e9c736" name="isUncollapsible" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return step.isUncollapsible();}</source-code>
          </source-codes>
        </operation>
        <operation id="o665e831dbaaa4808af454cd255b9c051736" name="getException" type="Exception" type-id="Exception" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step.getException();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di105099999642342909" cid="C390" type="class" name="StrategyBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:36">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="af617b41c7f8a48c58d332e8d01b72d09927" name="user" type="UserBean" type-id="UserBean" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aad9fa0e409b04488aabe25828ad50b98927" name="strategy" type="Strategy" type-id="Strategy" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oe5610f026f4948209b74dd2b1de9a67c927" name="StrategyBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="user" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="strategy" type="Strategy" type-id="Strategy" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.user = user;
        this.strategy = strategy;}</source-code>
          </source-codes>
        </operation>
        <operation id="o976be9a31e414d4d9dcafe354f6a4753928" name="getUser" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return user;}</source-code>
          </source-codes>
        </operation>
        <operation id="o98611003068046d88be692a6c5b6e5dd928" name="getIsDeleted" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.isDeleted();}</source-code>
          </source-codes>
        </operation>
        <operation id="o387a8797fbde4411b313eee53abe950b928" name="getVersion" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getVersion();}</source-code>
          </source-codes>
        </operation>
        <operation id="o24200dac804344c99ceef75a052e081c928" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o8d93a8d6147e4467aa00c43c41f757e9928" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        strategy.setName(name);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe8f979ca177d4972a9a432e071d98c4e928" name="getSavedName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getSavedName();}</source-code>
          </source-codes>
        </operation>
        <operation id="oeb3859e0c6764050b6f98a6f507de3e0928" name="setSavedName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        strategy.setSavedName(name);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2efe7e33e47d4fa6aad08b736f3598dd928" name="setIsSaved" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="saved" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        strategy.setIsSaved(saved);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob91b1dcad40f40dba8943a602b2f27b7928" name="getIsSaved" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getIsSaved();}</source-code>
          </source-codes>
        </operation>
        <operation id="o6e4846a96ddc46ab9251a10e932e0821928" name="getLastRunTimeFormatted" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException, SQLException, JSONException{
        return formatDate(strategy.getLastRunTime());}</source-code>
          </source-codes>
        </operation>
        <operation id="o9e9bbff831f34729ab40c0741c711083928" name="getLastRunTime" type="Date" type-id="Date" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException, SQLException, JSONException{
        return strategy.getLastRunTime();}</source-code>
          </source-codes>
        </operation>
        <operation id="o348799ea0cc447268a95d79a4f40cf89928" name="getCreatedTimeFormatted" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return formatDate(strategy.getCreatedTime());}</source-code>
          </source-codes>
        </operation>
        <operation id="of7b04829095b4495988150ec71f13e9e928" name="getCreatedTime" type="Date" type-id="Date" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getCreatedTime();}</source-code>
          </source-codes>
        </operation>
        <operation id="oa6ea095b02a84981a3047ceeca9b1eb9928" name="getLastModifiedTimeFormatted" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return formatDate(strategy.getLastModifiedTime());}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Strategy#getLastModifiedTime()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o616cf37a153f494db828138cc063ca7b928" name="getLastModifiedTime" type="Date" type-id="Date" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getLastModifiedTime();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1081a8f04c8242b48baaf16be46f9b32928" name="getLatestStep" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        return new StepBean(user, strategy.getLatestStep());}</source-code>
          </source-codes>
        </operation>
        <operation id="ob2c5bd763dc84200aee0e10572672e9e928" name="getLatestStepId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getLatestStepId();}</source-code>
          </source-codes>
        </operation>
        <operation id="o86d8e615910440b19c1c8b54870945c5928" name="getStrategyId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getStrategyId();}</source-code>
          </source-codes>
        </operation>
        <operation id="of9451f57d8c74491aab090e6a3d23cc6928" name="getInternalId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getInternalId();}</source-code>
          </source-codes>
        </operation>
        <operation id="o13432e4d3930424fa0c37fb6c4a5de71928" name="getStep" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="index" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        return new StepBean(user, strategy.getStep(index));}</source-code>
          </source-codes>
        </operation>
        <operation id="ofb1af0aa87504719abe1db322a099905928" name="getAllSteps" type="StepBean[]" type-id="StepBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        StepBean latestStep = new StepBean(user, strategy.getLatestStep());
        return latestStep.getAllSteps();}

    // public void addStep(StepBean step) throws WdkUserException,
    // WdkModelException, SQLException, JSONException {
    // strategy.addStep(step.step);
    // }

    public</source-code>
          </source-codes>
        </operation>
        <operation id="o9838e37d51ef444ca8c14e289dde3eb8928" name="setLatestStep" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="step" type="StepBean" type-id="StepBean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        strategy.setLatestStep(step.step);}</source-code>
          </source-codes>
        </operation>
        <operation id="o86c84b1f708c41659e979b2b158eaa60928" name="getStepById" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="stepId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        Step target = strategy.getStepById(stepId);
        if (target != null){
            return new StepBean(user, target);}
        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o877403569aed49e1996a2dc7a9ddb010928" name="getLength" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        return getAllSteps().length;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5c32338508054e3da5d537eca7a95638928" name="update" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="overwrite" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException, JSONException,
            NoSuchAlgorithmException{
        strategy.update(overwrite);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3a02099de78a459f895ae1567330807f928" name="addStep" type="Map&lt;Integer, Integer&gt;" type-id="Map&lt;Integer, Integer&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="targetStepId" type="int" type-id="int" default-value="" />
            <parameter id="" name="step" type="StepBean" type-id="StepBean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException, JSONException,
            NoSuchAlgorithmException, SQLException{
        return strategy.addStep(targetStepId, step.step);}</source-code>
          </source-codes>
        </operation>
        <operation id="o5d23c84db938479d9d19b1d6d918feb3928" name="editOrInsertStep" type="Map&lt;Integer, Integer&gt;" type-id="Map&lt;Integer, Integer&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="targetStepId" type="int" type-id="int" default-value="" />
            <parameter id="" name="step" type="StepBean" type-id="StepBean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            JSONException, NoSuchAlgorithmException, SQLException{
        return strategy.editOrInsertStep(targetStepId, step.step);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe961a838eefb4e4dafaca0618a68442b928" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="branch" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException, WdkUserException,
            JSONException, NoSuchAlgorithmException, SQLException{
        return strategy.moveStep(moveFromId, moveToId, branch);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc5862c351e6541feb2a401ac2f0260a1928" name="deleteStep" type="Map&lt;Integer, Integer&gt;" type-id="Map&lt;Integer, Integer&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="stepId" type="int" type-id="int" default-value="" />
            <parameter id="" name="isBranch" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException, JSONException,
            NoSuchAlgorithmException, SQLException{
        return strategy.deleteStep(stepId, isBranch);}</source-code>
          </source-codes>
        </operation>
        <operation id="o76170e2a1a1146c6a510731f59ac0f44928" name="getImportId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException, JSONException,
            WdkModelException{
        return strategy.getSignature();}</source-code>
          </source-codes>
        </operation>
        <operation id="oc1f8ada4f8f7489cbbd67a24caac22ea928" name="getFirstStep" type="StepBean" type-id="StepBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        return new StepBean(user, strategy.getFirstStep());}</source-code>
          </source-codes>
        </operation>
        <operation id="o5bfee0f1e26446f687c78310955f6033928" name="getChecksum" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException, JSONException,
            WdkModelException, WdkUserException, SQLException{
        return strategy.getChecksum();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Strategy#getDescription()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="odc221090f9f9488ba19de1e884af2a2e929" name="getDescription" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getDescription();}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Strategy#setDescription()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oadc07f964fc64289b8c54090ee258294929" name="setDescription" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        strategy.setDescription(description);}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.Strategy#getSignature()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="od373a257ada54140bbcc85ca215dd067929" name="getSignature" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return strategy.getSignature();}</source-code>
          </source-codes>
        </operation>
        <operation id="o2dcbf489cab647cda964652527f5f2ef929" name="formatDate" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="date" type="Date" type-id="Date" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return formatter.format(date);}

    /**
     * @return
     * @throws JSONException
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     * @see org.gusdb.wdk.model.user.Strategy#isValid()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o888e45e6bfa94dfb927332a4823e96e7929" name="isValid" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        return strategy.isValid();}

    /**
     * @return
     * @throws JSONException 
     * @throws SQLException 
     * @throws WdkModelException 
     * @throws WdkUserException 
     * @see org.gusdb.wdk.model.user.Strategy#getDisplayType()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o415f02990ba94161b1a0bf3f71ace9f7929" name="getDisplayType" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException, SQLException, JSONException{
        return strategy.getDisplayType();}

    /**
     * @return
     * @throws JSONException 
     * @throws SQLException 
     * @throws WdkModelException 
     * @throws WdkUserException 
     * @see org.gusdb.wdk.model.user.Strategy#getEstimateSize()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oe5c1fe8fbf54476fb8c74ad8cc36bb67929" name="getEstimateSize" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException, SQLException, JSONException{
        return strategy.getEstimateSize();}

    /**
     * @return
     * @throws JSONException 
     * @throws SQLException 
     * @throws WdkModelException 
     * @throws WdkUserException 
     * @see org.gusdb.wdk.model.user.Strategy#getType()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o2c65f4db7f4143939dad1d64f59712ab929" name="getType" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException, SQLException, JSONException{
        return strategy.getType();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di788131516987992577" cid="C391" type="class" name="TableFieldBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:37">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a634c8a067b6b4543bf1fbb7e74966b5e481" name="field" type="TableField" type-id="TableField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o7a9e8be0ceb6408398d4a5cd83ae24f4481" name="TableFieldBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="TableField" type-id="TableField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		super(field);
		this.field = field;}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.gusdb.wdk.model.TableField#getAttributeFieldMap()
	 */</source-code>
          </source-codes>
        </operation>
        <operation id="o149e1c43eecf41c1a0e29d9723f99c4f481" name="getAttributeFieldMap" type="Map&lt;String, AttributeFieldBean&gt;" type-id="Map&lt;String, AttributeFieldBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		AttributeField[ fields = field.getAttributeFields();
		Map&lt;String, AttributeFieldBean&gt; fieldBeans = new LinkedHashMap&lt;String, AttributeFieldBean&gt;(
				fields.length);
		for (AttributeField attributeField : fields){
			fieldBeans.put(field.getName(), new AttributeFieldBean(
					attributeField));}
		return fieldBeans;}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.gusdb.wdk.model.TableField#getAttributeFields()
	 */</source-code>
          </source-codes>
        </operation>
        <operation id="o3b35b9f9295f4827937eda41e91f93c8481" name="getAttributeFields" type="AttributeFieldBean[]" type-id="AttributeFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		AttributeField[ fields = field.getAttributeFields();
		AttributeFieldBean[ fieldBeans = new AttributeFieldBean[fields.length;
		for (int i = 0; i &lt; fields.length; i++){
			fieldBeans[i = new AttributeFieldBean(fields[i);}
		return fieldBeans;}

	/**
	 * @return
	 */</source-code>
          </source-codes>
        </operation>
        <operation id="oa0c9237dc7a64c599407493e4baef338481" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
		return field.getDescription();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di837155148729775425" cid="C392" type="class" name="UserBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="af3c95645dfd44c0588359524b10f69d4912" name="user" type="User" type-id="User" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad7370da759b24bc8ad2bd48e043f3c04912" name="stepId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oe22ddb4cb4914105834cc0b289a7aa70912" name="UserBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}

    /**
     * 
     */
    public UserBean(User user){
        this.user = user;}

    public User getUser(){
        return user;}

    /**
     * @param wdkModel
     * @throws WdkUserException
     * @see org.gusdb.wdk.model.user.User#setWdkModel(org.gusdb.wdk.model.WdkModel)
     */
    public void setWdkModel(WdkModelBean wdkModel) throws WdkUserException{
        user.setWdkModel(wdkModel.getModel());}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getUserId()
     */
    public int getUserId(){
        return user.getUserId();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#addUserRole(java.lang.String)
     */
    public void addUserRole(String userRole){
        user.addUserRole(userRole);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getAddress()
     */
    public String getAddress(){
        return user.getAddress();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getCity()
     */
    public String getCity(){
        return user.getCity();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getCountry()
     */
    public String getCountry(){
        return user.getCountry();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getDepartment()
     */
    public String getDepartment(){
        return user.getDepartment();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getEmail()
     */
    public String getEmail(){
        return user.getEmail();}

    public void setEmail(String email){
        user.setEmail(email);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getFirstName()
     */
    public String getFirstName(){
        return user.getFirstName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getLastName()
     */
    public String getLastName(){
        return user.getLastName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getMiddleName()
     */
    public String getMiddleName(){
        return user.getMiddleName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getOrganization()
     */
    public String getOrganization(){
        return user.getOrganization();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getPhoneNumber()
     */
    public String getPhoneNumber(){
        return user.getPhoneNumber();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getState()
     */
    public String getState(){
        return user.getState();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getTitle()
     */
    public String getTitle(){
        return user.getTitle();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getUserRoles()
     */
    public String[ getUserRoles(){
        return user.getUserRoles();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getZipCode()
     */
    public String getZipCode(){
        return user.getZipCode();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#isGuest()
     */
    public boolean isGuest() throws WdkUserException{
        return user.isGuest();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#removeUserRole(java.lang.String)
     */
    public void removeUserRole(String userRole){
        user.removeUserRole(userRole);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setAddress(java.lang.String)
     */
    public void setAddress(String address){
        user.setAddress(address);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setCity(java.lang.String)
     */
    public void setCity(String city){
        user.setCity(city);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setCountry(java.lang.String)
     */
    public void setCountry(String country){
        user.setCountry(country);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setDepartment(java.lang.String)
     */
    public void setDepartment(String department){
        user.setDepartment(department);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setFirstName(java.lang.String)
     */
    public void setFirstName(String firstName){
        user.setFirstName(firstName);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setLastName(java.lang.String)
     */
    public void setLastName(String lastName){
        user.setLastName(lastName);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setMiddleName(java.lang.String)
     */
    public void setMiddleName(String middleName){
        user.setMiddleName(middleName);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setOrganization(java.lang.String)
     */
    public void setOrganization(String organization){
        user.setOrganization(organization);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setPhoneNumber(java.lang.String)
     */
    public void setPhoneNumber(String phoneNumber){
        user.setPhoneNumber(phoneNumber);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setState(java.lang.String)
     */
    public void setState(String state){
        user.setState(state);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setTitle(java.lang.String)
     */
    public void setTitle(String title){
        user.setTitle(title);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setZipCode(java.lang.String)
     */
    public void setZipCode(String zipCode){
        user.setZipCode(zipCode);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getSignature()
     */
    public String getSignature(){
        return user.getSignature();}

    public String getFrontAction(){
        return user.getFrontAction();}

    public Integer getFrontStrategy(){
        return user.getFrontStrategy();}

    public Integer getFrontStep(){
        return user.getFrontStep();}

    public void setFrontAction(String frontAction){
        user.setFrontAction(frontAction);}

    public void setFrontStrategy(int frontStrategy){
        user.setFrontStrategy(frontStrategy);}

    public void setFrontStep(int frontStep){
        user.setFrontStep(frontStep);}

    public void resetFrontAction(){
        user.resetFrontAction();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#changePassword(java.lang.String,
     * java.lang.String, java.lang.String)
     */
    public void changePassword(String oldPassword, String newPassword,
            String confirmPassword) throws WdkUserException, WdkModelException{
        user.changePassword(oldPassword, newPassword, confirmPassword);}

    //
    // //
    // *************************************************************************
    // // Copied from the original code - to be updated soon
    // //
    // *************************************************************************
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#addAnswer(org.gusdb.wdk.model.Answer)
    // */
    // public void addAnswer(AnswerBean answer) throws WdkUserException,
    // WdkModelException {
    // user.addAnswer(answer.answer);
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see
    // org.gusdb.wdk.model.User#addAnswerFuzzy(org.gusdb.wdk.model.Answer)
    // */
    // public void addAnswerFuzzy(AnswerBean answer) throws WdkUserException,
    // WdkModelException {
    // user.addAnswerFuzzy(answer.answer);
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#combineAnswers(int, int,
    // java.lang.String)
    // */
    // public UserAnswerBean combineUserAnswers(int firstAnswerID,
    // int secondAnswerID, String operation, int start, int end,
    // Map&lt;String, String&gt; operatorMap) throws WdkUserException,
    // WdkModelException {
    // return new UserAnswerBean(this.user.combineUserAnswers(firstAnswerID,
    // secondAnswerID, operation, start, end, operatorMap));
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#combineAnswers(java.lang.String)
    // */
    // public UserAnswerBean combineAnswers(String expression, int start, int
    // end,
    // Map&lt;String, String&gt; operatorMap) throws WdkUserException,
    // WdkModelException {
    // return new UserAnswerBean(this.user.combineUserAnswers(expression,
    // start, end, operatorMap));
    // }
    //
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#deleteAnswer(int)
    // */
    // public void deleteUserAnswer(int answerId) throws WdkUserException {
    // this.user.deleteUserAnswer(answerId);
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#clearAnswers()
    // */
    // public void clearUserAnswers() throws WdkUserException {
    // this.user.clearUserAnswers();
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#getAnswerByID(int)
    // */
    // public UserAnswerBean getUserAnswerByID(int answerID)
    // throws WdkUserException {
    // return new UserAnswerBean(this.user.getUserAnswerByID(answerID));
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#getAnswerByName(java.lang.String)
    // */
    // public UserAnswerBean getUserAnswerByName(String name)
    // throws WdkUserException {
    // return new UserAnswerBean(this.user.getUserAnswerByName(name));
    // }
    //
    // public int getUserAnswerIdByAnswer(AnswerBean answer)
    // throws WdkUserException {
    // return getUserAnswerByAnswerFuzzy(answer).getAnswerID();
    // }
    //
    // public UserAnswerBean getUserAnswerByAnswer(AnswerBean answer)
    // throws WdkUserException {
    // return new UserAnswerBean(user.getUserAnswerByAnswer(answer.answer));
    // }
    //
    // public UserAnswerBean getUserAnswerByAnswerFuzzy(AnswerBean answer)
    // throws WdkUserException {
    // return new UserAnswerBean(
    // user.getUserAnswerByAnswerFuzzy(answer.answer));
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#getAnswers()
    // */
    // public UserAnswerBean[] getUserAnswers() {
    // UserAnswer[] answers = user.getUserAnswers();
    // UserAnswerBean[] answerBeans = new UserAnswerBean[answers.length];
    // for (int i = 0; i &lt; answers.length; i++) {
    // answerBeans[i] = new UserAnswerBean(answers[i]);
    // }
    // return answerBeans;
    // }
    //
    // public int getAnswerCount() {
    // return user.getUserAnswers().length;
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#getRecordAnswerMap()
    // */
    // public Map&lt;String, UserAnswerBean[]&gt; getRecordAnswerMap() {
    // Map recUsrAnsMap = user.getRecordAnswerMap();
    // Map&lt;String, UserAnswerBean[]&gt; recUsrAnsBeanMap = new
    // LinkedHashMap&lt;String, UserAnswerBean[]&gt;();
    // for (Object r : recUsrAnsMap.keySet()) {
    // String rec = (String) r;
    // UserAnswer[] usrAns = (UserAnswer[]) recUsrAnsMap.get(rec);
    // UserAnswerBean[] answerBeans = new UserAnswerBean[usrAns.length];
    // for (int i = 0; i &lt; usrAns.length; i++) {
    // answerBeans[i] = new UserAnswerBean(usrAns[i]);
    // }
    // recUsrAnsBeanMap.put(rec, answerBeans);
    // }
    // return recUsrAnsBeanMap;
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.gusdb.wdk.model.User#renameAnswer(int, java.lang.String)
    // */
    // public void renameUserAnswer(int answerID, String name)
    // throws WdkUserException {
    // this.user.renameUserAnswer(answerID, name);
    // }

    public Map&lt;String, String&gt; getGlobalPreferences(){
        return user.getGlobalPreferences();}

    public Map&lt;String, String&gt; getProjectPreferences(){
        return user.getProjectPreferences();}

    public void setGlobalPreference(String prefName, String prefValue){
        user.setGlobalPreference(prefName, prefValue);}

    public void setProjectPreference(String prefName, String prefValue){
        user.setProjectPreference(prefName, prefValue);}

    public void unsetGlobalPreference(String prefName){
        user.unsetGlobalPreference(prefName);}

    public void unsetProjectPreference(String prefName){
        user.unsetProjectPreference(prefName);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#clearPreferences()
     */
    public void clearPreferences(){
        user.clearPreferences();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#save()
     */
    public void save() throws WdkUserException, WdkModelException{
        user.save();}

    // =========================================================================
    // Methods for dataset operations
    // =========================================================================

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#createDataset(java.lang.String,
     * java.lang.String, java.lang.String[])
     */
    public DatasetBean createDataset(RecordClassBean recordClass,
            String uploadFile, String strValues) throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, SQLException{
        Dataset dataset = user.createDataset(recordClass.recordClass,
                uploadFile, strValues);
        DatasetBean bean = new DatasetBean(dataset);
        return bean;}

    public DatasetBean createDataset(RecordClassBean recordClass,
            String uploadFile, List&lt;String[&gt; values) throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, SQLException{
        Dataset dataset = user.createDataset(recordClass.recordClass,
                uploadFile, values);
        DatasetBean bean = new DatasetBean(dataset);
        return bean;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getDataset(java.lang.String)
     */
    public DatasetBean getDataset(String datasetChecksum)
            throws WdkUserException, SQLException, WdkModelException{
        return new DatasetBean(user.getDataset(datasetChecksum));}

    // =========================================================================
    // Methods for Persistent history operations
    // =========================================================================

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#clearHistories()
     */
    public void deleteSteps() throws WdkUserException, SQLException,
            WdkModelException{
        user.deleteSteps();}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.user.User#createHistory(org.gusdb.wdk.model.Answer)
     */
    public StepBean createStep(QuestionBean question,
            Map&lt;String, String&gt; params, String filterName, boolean deleted,
            boolean validate, int assignedWeight) throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, JSONException,
            SQLException{
        Step step = user.createStep(question.question, params, filterName,
                deleted, validate, assignedWeight);
        return new StepBean(this, step);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#deleteHistory(int)
     */
    public void deleteStep(int displayId) throws WdkUserException,
            WdkModelException, NoSuchAlgorithmException, SQLException,
            JSONException{
        user.deleteStep(displayId);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getHistories()
     */
    public StepBean[ getSteps() throws WdkUserException, WdkModelException,
            SQLException, JSONException{
        Step[ steps = user.getSteps();
        StepBean[ beans = new StepBean[steps.length;
        for (int i = 0; i &lt; steps.length; i++){
            beans[i = new StepBean(this, steps[i);}
        return beans;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getHistories()
     */
    public StepBean[ getInvalidSteps() throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        Step[ steps = user.getInvalidSteps();
        StepBean[ beans = new StepBean[steps.length;
        for (int i = 0; i &lt; steps.length; i++){
            beans[i = new StepBean(this, steps[i);}
        return beans;}

    public void deleteInvalidSteps() throws WdkUserException,
            WdkModelException, SQLException, JSONException{
        user.deleteInvalidSteps();}

    public void deleteInvalidStrategies() throws WdkUserException,
            WdkModelException, SQLException, JSONException,
            NoSuchAlgorithmException{
        user.deleteInvalidStrategies();}

    public Map&lt;String, List&lt;StepBean&gt;&gt; getStepsByCategory()
            throws WdkUserException, WdkModelException, SQLException,
            JSONException, NoSuchAlgorithmException{
        Map&lt;String, List&lt;Step&gt;&gt; steps = user.getStepsByCategory();
        Map&lt;String, List&lt;StepBean&gt;&gt; category = new LinkedHashMap&lt;String, List&lt;StepBean&gt;&gt;();
        for (String type : steps.keySet()){
            List&lt;Step&gt; list = steps.get(type);
            List&lt;StepBean&gt; beans = new ArrayList&lt;StepBean&gt;();
            for (Step step : list){
                beans.add(new StepBean(this, step));}
            category.put(type, beans);}
        return category;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getHistories(java.lang.String)
     */
    public StepBean[ getSteps(String recordClassName) throws WdkUserException,
            WdkModelException, SQLException, JSONException,
            NoSuchAlgorithmException{
        Step[ steps = user.getSteps(recordClassName);
        StepBean[ beans = new StepBean[steps.length;
        for (int i = 0; i &lt; steps.length; i++){
            beans[i = new StepBean(this, steps[i);}
        return beans;}

    public StrategyBean getStrategy(int displayId) throws WdkUserException,
            WdkModelException, JSONException, SQLException,
            NoSuchAlgorithmException{
        return new StrategyBean(this, user.getStrategy(displayId));}

    public Map&lt;String, List&lt;StrategyBean&gt;&gt; getStrategiesByCategory()
            throws Exception{
        try{
            Map&lt;String, List&lt;Strategy&gt;&gt; strategies = user.getStrategiesByCategory();
            return convertMap(strategies);}
        catch (Exception ex){
            ex.printStackTrace();
            throw ex;}}

    private Map&lt;String, List&lt;StrategyBean&gt;&gt; convertMap(
            Map&lt;String, List&lt;Strategy&gt;&gt; strategies){
        Map&lt;String, List&lt;StrategyBean&gt;&gt; category = new LinkedHashMap&lt;String, List&lt;StrategyBean&gt;&gt;();
        for (String type : strategies.keySet()){
            List&lt;Strategy&gt; list = strategies.get(type);
            List&lt;StrategyBean&gt; beans = new ArrayList&lt;StrategyBean&gt;();
            for (Strategy strategy : list){
                beans.add(new StrategyBean(this, strategy));}
            category.put(type, beans);}
        return category;}

    public List&lt;StrategyBean&gt; getInvalidStrategies() throws WdkUserException,
            WdkModelException, JSONException, SQLException{
        // Strategy[] strategies = user.getInvalidStrategies();
        List&lt;StrategyBean&gt; beans = new ArrayList&lt;StrategyBean&gt;();
        // for (int i = 0; i &lt; strategies.length; i++) {
        // beans[i] = new StrategyBean(this, strategies[i]);
        // }
        return beans;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getStrategyCount()
     */
    public int getStrategyCount() throws WdkUserException, SQLException,
            WdkModelException{
        return user.getStrategyCount();}

    public void validateExpression(String expression) throws WdkModelException,
            NoSuchAlgorithmException, WdkUserException, SQLException,
            JSONException{
        user.validateExpression(expression);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#combineHistory(java.lang.String)
     */
    public StepBean combineStep(String expression, boolean useBooleanFilter)
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        return new StepBean(this, user.combineStep(expression,
                useBooleanFilter, false));}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getHistoryCount()
     */
    public int getStepCount() throws WdkUserException, WdkModelException{
        return user.getStepCount();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#getItemsPerPage()
     */
    public int getItemsPerPage(){
        return user.getItemsPerPage();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.User#setItemsPerPage(int)
     */
    public void setItemsPerPage(int itemsPerPage) throws WdkUserException,
            WdkModelException{
        user.setItemsPerPage(itemsPerPage);}

    /**
     * @param questionFullName
     * @param attrName
     * @param ascending
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException 
     * @throws JSONException 
     * @see org.gusdb.wdk.model.user.User#addSortingAttribute(java.lang.String,
     *      java.lang.String, boolean)
     */
    public String addSortingAttribute(String questionFullName, String attrName,
            boolean ascending) throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        return user.addSortingAttribute(questionFullName, attrName, ascending);}

    /**
     * @param questionFullName
     * @param sortingChecksum
     */
    public void applySortingChecksum(String questionFullName,
            String sortingChecksum){
        user.applySortingChecksum(questionFullName, sortingChecksum);}

    /**
     * @param questionFullName
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.user.User#getSortingAttributes(java.lang.String)
     */
    public Map&lt;String, Boolean&gt; getSortingAttributes(String questionFullName)
            throws WdkUserException, WdkModelException{
        return user.getSortingAttributes(questionFullName);}

    /**
     * @param sortingChecksum
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.user.User#getSortingAttributesByChecksum(java.lang.String)
     */
    public Map&lt;String, Boolean&gt; getSortingAttributesByChecksum(
            String sortingChecksum) throws WdkUserException, WdkModelException{
        return user.getSortingAttributesByChecksum(sortingChecksum);}

    /**
     * @param questionFullName
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @see org.gusdb.wdk.model.user.User#getSummaryAttributes(java.lang.String)
     */
    public String[ getSummaryAttributes(String questionFullName)
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException{
        return user.getSummaryAttributes(questionFullName);}

    /**
     * @param questionFullName
     * @see org.gusdb.wdk.model.user.User#resetSummaryAttribute(java.lang.String)
     */
    public void resetSummaryAttribute(String questionFullName){
        user.resetSummaryAttributes(questionFullName);}

    /**
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.user.User#createRemoteKey()
     */
    public String createRemoteKey() throws WdkUserException, WdkModelException{
        return user.createRemoteKey();}

    /**
     * @param remoteKey
     * @throws WdkUserException
     * @see org.gusdb.wdk.model.user.User#verifyRemoteKey(java.lang.String)
     */
    public void verifyRemoteKey(String remoteKey) throws WdkUserException{
        user.verifyRemoteKey(remoteKey);}

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    public String toString(){
        return this.user.toString();}

    public void addActiveStrategy(String strategyKey)
            throws NumberFormatException, WdkUserException, WdkModelException,
            JSONException, SQLException, NoSuchAlgorithmException{
        user.addActiveStrategy(strategyKey);}

    public void removeActiveStrategy(String strategyId) throws WdkUserException{
        user.removeActiveStrategy(strategyId);}

    public void replaceActiveStrategy(int oldStrategyId, int newStrategyId,
            Map&lt;Integer, Integer&gt; stepIdsMap) throws WdkUserException,
            WdkModelException, JSONException, SQLException,
            NoSuchAlgorithmException{
        user.replaceActiveStrategy(oldStrategyId, newStrategyId, stepIdsMap);}

    /**
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     * @see org.gusdb.wdk.model.user.User#deleteStrategies()
     */
    public void deleteStrategies() throws SQLException, WdkUserException,
            WdkModelException{
        user.deleteStrategies();}

    /**
     * @param strategyId
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.User#deleteStrategy(int)
     */
    public void deleteStrategy(int strategyId) throws WdkUserException,
            WdkModelException, SQLException{
        user.deleteStrategy(strategyId);}

    /**
     * @param rootAnswerChecksum
     * @return
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws NoSuchAlgorithmException
     * @throws SQLException
     * @throws JSONException
     * @see org.gusdb.wdk.model.user.User#importStrategyByAnswer(java.lang.String)
     */
    public StrategyBean importStrategy(String strategyKey)
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        Strategy strategy = user.importStrategy(strategyKey);
        return new StrategyBean(this, strategy);}

    /**
     * @param answer
     * @param saved
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @throws JSONException
     * @throws NoSuchAlgorithmException
     * @see org.gusdb.wdk.model.user.User#createStrategy(org.gusdb.wdk.model.user.Step,
     *      boolean)
     */
    public StrategyBean createStrategy(StepBean step, boolean saved)
            throws WdkUserException, WdkModelException, SQLException,
            JSONException, NoSuchAlgorithmException{
        return new StrategyBean(this, user.createStrategy(step.step, saved));}

    /**
     * @param answer
     * @param saved
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @throws JSONException
     * @throws NoSuchAlgorithmException
     * @see org.gusdb.wdk.model.user.User#createStrategy(org.gusdb.wdk.model.user.Step,
     *      boolean)
     */
    public StrategyBean createStrategy(StepBean step, boolean saved,
            boolean hidden) throws WdkUserException, WdkModelException,
            SQLException, JSONException, NoSuchAlgorithmException{
        return new StrategyBean(this, user.createStrategy(step.step, saved,
                hidden));}

    /**
     * @param questionFullName
     * @param summaryChecksum
     * @throws WdkModelException
     * @throws WdkUserException
     * @throws NoSuchAlgorithmException
     * @see org.gusdb.wdk.model.user.User#applySummaryChecksum(java.lang.String,
     *      java.lang.String)
     */
    public void applySummaryChecksum(String questionFullName,
            String summaryChecksum) throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException{
        user.applySummaryChecksum(questionFullName, summaryChecksum);}

    /**
     * @param questionFullName
     * @param summaryNames
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException 
     * @throws JSONException 
     * @see org.gusdb.wdk.model.user.User#setSummaryAttribute(java.lang.String,
     *      java.lang.String[])
     */
    public String setSummaryAttributes(String questionFullName,
            String[ summaryNames) throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, JSONException, SQLException{
        return user.setSummaryAttributes(questionFullName, summaryNames);}

    public boolean checkNameExists(StrategyBean strategy, String name,
            boolean saved) throws SQLException, WdkUserException,
            WdkModelException{
        return user.checkNameExists(strategy.strategy, name, saved);}

    public Map&lt;String, List&lt;StrategyBean&gt;&gt; getSavedStrategiesByCategory()
            throws Exception, NoSuchAlgorithmException, JSONException,
            SQLException{
        try{
            Map&lt;String, List&lt;Strategy&gt;&gt; strategies = user.getSavedStrategiesByCategory();
            return convertMap(strategies);}
        catch (Exception ex){
            ex.printStackTrace();
            throw ex;}}

    public Map&lt;String, List&lt;StrategyBean&gt;&gt; getUnsavedStrategiesByCategory()
            throws Exception{
        try{
            Map&lt;String, List&lt;Strategy&gt;&gt; strategies = user.getUnsavedStrategiesByCategory();
            return convertMap(strategies);}
        catch (Exception ex){
            logger.error(ex);
            ex.printStackTrace();
            throw ex;}}

    public Map&lt;String, List&lt;StrategyBean&gt;&gt; getRecentStrategiesByCategory()
            throws Exception{
        try{
            Map&lt;String, List&lt;Strategy&gt;&gt; strategies = user.getRecentStrategiesByCategory();
            return convertMap(strategies);}
        catch (Exception ex){
            ex.printStackTrace();
            throw ex;}}

    public Map&lt;String, List&lt;StrategyBean&gt;&gt; getActiveStrategiesByCategory()
            throws Exception{
        try{
            Map&lt;String, List&lt;Strategy&gt;&gt; strategies = user.getActiveStrategiesByCategory();
            return convertMap(strategies);}
        catch (Exception ex){
            ex.printStackTrace();
            throw ex;}}

    /**
     * @return { category/(type name)-&gt;{ activity-&gt;strategyBean } }
     * @throws Exception
     */
    public Map&lt;String, Map&lt;String, List&lt;StrategyBean&gt;&gt;&gt; getStrategiesByCategoryActivity()
            throws Exception{
        Map&lt;String, List&lt;StrategyBean&gt;&gt; activeStrats = getActiveStrategiesByCategory();
        Map&lt;String, List&lt;StrategyBean&gt;&gt; savedStrats = getSavedStrategiesByCategory();
        Map&lt;String, List&lt;StrategyBean&gt;&gt; recentStrats = getRecentStrategiesByCategory();
        Map&lt;String, Map&lt;String, List&lt;StrategyBean&gt;&gt;&gt; categories = new LinkedHashMap&lt;String, Map&lt;String, List&lt;StrategyBean&gt;&gt;&gt;();
        WdkModel wdkModel = user.getWdkModel();

        for (String rcName : activeStrats.keySet()){
            RecordClass recordClass = wdkModel.getRecordClass(rcName);
            String category = recordClass.getDisplayName();
            List&lt;StrategyBean&gt; strategies = activeStrats.get(rcName);
            if (strategies.size() == 0) continue;

            Map&lt;String, List&lt;StrategyBean&gt;&gt; activities = new LinkedHashMap&lt;String, List&lt;StrategyBean&gt;&gt;();
            activities.put("Opened", strategies);
            categories.put(category, activities);}

        for (String rcName : savedStrats.keySet()){
            RecordClass recordClass = wdkModel.getRecordClass(rcName);
            String category = recordClass.getDisplayName();
            List&lt;StrategyBean&gt; strategies = savedStrats.get(rcName);
            if (strategies.size() == 0) continue;

            Map&lt;String, List&lt;StrategyBean&gt;&gt; activities = categories.get(category);
            if (activities == null){
                activities = new LinkedHashMap&lt;String, List&lt;StrategyBean&gt;&gt;();
                categories.put(category, activities);}
            activities.put("Saved", strategies);}

        for (String rcName : recentStrats.keySet()){
            RecordClass recordClass = wdkModel.getRecordClass(rcName);
            String category = recordClass.getDisplayName();
            List&lt;StrategyBean&gt; strategies = recentStrats.get(rcName);
            if (strategies.size() == 0) continue;

            Map&lt;String, List&lt;StrategyBean&gt;&gt; activities = categories.get(category);
            if (activities == null){
                activities = new LinkedHashMap&lt;String, List&lt;StrategyBean&gt;&gt;();
                categories.put(category, activities);}
            activities.put("Recent", strategies);}
        return categories;}

    /**
     * @param displayId
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @throws JSONException
     * @throws NoSuchAlgorithmException
     * @see org.gusdb.wdk.model.user.User#getStep(int)
     */
    public StepBean getStep(int displayId) throws WdkUserException,
            WdkModelException, SQLException, JSONException,
            NoSuchAlgorithmException{
        return new StepBean(this, user.getStep(displayId));}

    /**
     * @param previousStep
     * @param childStep
     * @param operator
     * @param useBooleanFilter
     * @param filter
     * @return
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     * @throws SQLException
     * @throws JSONException
     * @see org.gusdb.wdk.model.user.User#createBooleanStep(org.gusdb.wdk.model.user.Step,
     *      org.gusdb.wdk.model.user.Step, org.gusdb.wdk.model.BooleanOperator,
     *      boolean, org.gusdb.wdk.model.AnswerFilterInstance)
     */
    public StepBean createBooleanStep(StepBean previousStep,
            StepBean childStep, String operator, boolean useBooleanFilter,
            String filterName) throws WdkModelException,
            NoSuchAlgorithmException, WdkUserException, SQLException,
            JSONException{
        Step step = user.createBooleanStep(previousStep.step, childStep.step,
                operator, useBooleanFilter, filterName);
        return new StepBean(this, step);}

    public void setViewResults(String strategyKey, int stepId,
            int viewPagerOffset){
        logger.debug("setting view steps: " + strategyKey + ", " + stepId
                + ", " + viewPagerOffset);
        user.setViewResults(strategyKey, stepId, viewPagerOffset);}

    public void resetViewResults(){
        user.resetViewResults();}

    public String getViewStrategyId(){
        return user.getViewStrategyKey();}

    public int getViewStepId(){
        return user.getViewStepId();}

    public Integer getViewPagerOffset(){
        return user.getViewPagerOffset();}

    public StrategyBean[ getActiveStrategies() throws WdkUserException,
            WdkModelException, JSONException, SQLException,
            NoSuchAlgorithmException{
        List&lt;StrategyBean&gt; strategies = new ArrayList&lt;StrategyBean&gt;();
        for (Strategy strategy : user.getActiveStrategies()){
            strategies.add(new StrategyBean(this, strategy));}
        StrategyBean[ array = new StrategyBean[strategies.size();
        strategies.toArray(array);
        return array;}

    /**
     * @param strategyKey
     * @return
     * @see org.gusdb.wdk.model.user.User#getStrategyOrder(java.lang.String)
     */
    public int getStrategyOrder(String strategyKey){
        return user.getStrategyOrder(strategyKey);}

    /**
     * @return
     * @see org.gusdb.wdk.model.user.User#getActiveStrategyIds()
     */
    public int[ getActiveStrategyIds(){
        return user.getActiveStrategyIds();}

    public void setStepId(String stepId){
        this.stepId = Integer.parseInt(stepId);}

    public StepBean getStepByCachedId() throws NoSuchAlgorithmException,
            WdkUserException, WdkModelException, SQLException, JSONException{
        return new StepBean(this, user.getStep(stepId));}

    public StrategyBean copyStrategy(StrategyBean strategy)
            throws NoSuchAlgorithmException, SQLException, WdkUserException,
            WdkModelException, JSONException{
        return new StrategyBean(this, user.copyStrategy(strategy.strategy));}

    public StrategyBean copyStrategy(StrategyBean strategy, int stepId)
            throws NoSuchAlgorithmException, SQLException, WdkModelException,
            JSONException, WdkUserException{
        return new StrategyBean(this, user.copyStrategy(strategy.strategy,
                stepId));}

    public void addToBasket(RecordClassBean recordClass, List&lt;String[&gt; ids)
            throws SQLException, WdkUserException, WdkModelException{
        BasketFactory factory = user.getWdkModel().getBasketFactory();
        factory.addToBasket(user, recordClass.recordClass, ids);}

    public void addToBasket(StepBean step) throws NoSuchAlgorithmException,
            WdkModelException, JSONException, WdkUserException, SQLException{
        BasketFactory factory = user.getWdkModel().getBasketFactory();
        factory.addToBasket(user, step.step);}

    public void removeFromBasket(RecordClassBean recordClass, List&lt;String[&gt; ids)
            throws SQLException, WdkUserException, WdkModelException{
        BasketFactory factory = user.getWdkModel().getBasketFactory();
        factory.removeFromBasket(user, recordClass.recordClass, ids);}

    public void removeFromBasket(StepBean step)
            throws NoSuchAlgorithmException, WdkModelException, JSONException,
            WdkUserException, SQLException{
        BasketFactory factory = user.getWdkModel().getBasketFactory();
        factory.removeFromBasket(user, step.step);}

    public void clearBasket(RecordClassBean recordClass) throws SQLException,
            WdkUserException, WdkModelException{
        BasketFactory factory = user.getWdkModel().getBasketFactory();
        factory.clearBasket(user, recordClass.recordClass);}

    public String getBasket(RecordClassBean recordClass)
            throws WdkUserException, WdkModelException, SQLException,
            NoSuchAlgorithmException, JSONException{
        BasketFactory basketFactory = user.getWdkModel().getBasketFactory();
        return basketFactory.getBasket(user, recordClass.recordClass);}

    public Map&lt;RecordClassBean, Integer&gt; getBasketCounts() throws SQLException{
        Map&lt;RecordClass, Integer&gt; counts = user.getBasketCounts();
        Map&lt;RecordClassBean, Integer&gt; beans = new LinkedHashMap&lt;RecordClassBean, Integer&gt;();
        for (RecordClass recordClass : counts.keySet()){
            RecordClassBean bean = new RecordClassBean(recordClass);
            int count = counts.get(recordClass);
            beans.put(bean, count);}
        return beans;}

    public int getBasketCount() throws SQLException{
        try{
            Map&lt;RecordClass, Integer&gt; baskets = user.getBasketCounts();
            int total = 0;
            for (int count : baskets.values()){
                total += count;}
            return total;}
        catch (SQLException ex){
            logger.error(ex);
            ex.printStackTrace();
            throw ex;}}

    /**
     * @param recordClass
     * @param pkValues
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @throws JSONException
     * @throws NoSuchAlgorithmException
     * @see org.gusdb.wdk.model.user.User#addToFavorite(org.gusdb.wdk.model.RecordClass,
     *      java.util.List)
     */
    public void addToFavorite(RecordClassBean recordClass,
            List&lt;Map&lt;String, Object&gt;&gt; pkValues) throws WdkUserException,
            WdkModelException, SQLException, NoSuchAlgorithmException,
            JSONException{
        user.addToFavorite(recordClass.recordClass, pkValues);}

    /**
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.User#clearFavorite()
     */
    public void clearFavorite() throws WdkUserException, WdkModelException,
            SQLException{
        user.clearFavorite();}

    /**
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     * @see org.gusdb.wdk.model.user.User#getFavoriteCount()
     */
    public int getFavoriteCount() throws SQLException, WdkUserException,
            WdkModelException{
        return user.getFavoriteCount();}

    /**
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException
     * @throws JSONException
     * @see org.gusdb.wdk.model.user.User#getFavorites()
     */
    public Map&lt;RecordClassBean, List&lt;FavoriteBean&gt;&gt; getFavorites()
            throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException, JSONException{
        Map&lt;RecordClass, List&lt;Favorite&gt;&gt; favorites = user.getFavorites();
        Map&lt;RecordClassBean, List&lt;FavoriteBean&gt;&gt; beans = new LinkedHashMap&lt;RecordClassBean, List&lt;FavoriteBean&gt;&gt;();
        for (RecordClass recordClass : favorites.keySet()){
            List&lt;FavoriteBean&gt; beanList = new ArrayList&lt;FavoriteBean&gt;();
            List&lt;Favorite&gt; list = favorites.get(recordClass);
            for (Favorite favorite : list){
                FavoriteBean bean = new FavoriteBean(favorite);
                beanList.add(bean);}
            beans.put(new RecordClassBean(recordClass), beanList);}
        return beans;}

    /**
     * @param recordClass
     * @param pkValues
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.User#removeFromFavorite(org.gusdb.wdk.model.RecordClass,
     *      java.util.List)
     */
    public void removeFromFavorite(RecordClassBean recordClass,
            List&lt;Map&lt;String, Object&gt;&gt; pkValues) throws WdkUserException,
            WdkModelException, SQLException{
        user.removeFromFavorite(recordClass.recordClass, pkValues);}

    /**
     * @param recordClass
     * @param pkValues
     * @param group
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.User#setFavoriteGroups(org.gusdb.wdk.model.RecordClass,
     *      java.util.List, java.lang.String)
     */
    public void setFavoriteGroups(RecordClassBean recordClass,
            List&lt;Map&lt;String, Object&gt;&gt; pkValues, String group)
            throws WdkUserException, WdkModelException, SQLException{
        user.setFavoriteGroups(recordClass.recordClass, pkValues, group);}

    /**
     * @param recordClass
     * @param pkValues
     * @param note
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.User#setFavoriteNotes(org.gusdb.wdk.model.RecordClass,
     *      java.util.List, java.lang.String)
     */
    public void setFavoriteNotes(RecordClassBean recordClass,
            List&lt;Map&lt;String, Object&gt;&gt; pkValues, String note)
            throws WdkUserException, WdkModelException, SQLException{
        user.setFavoriteNotes(recordClass.recordClass, pkValues, note);}

    /**
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     * @see org.gusdb.wdk.model.user.User#getFavoriteGroups()
     */
    public String[ getFavoriteGroups() throws WdkUserException,
            WdkModelException, SQLException{
        return user.getFavoriteGroups();}

    /**
     * @param records
     * @param recordClass
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public int getBasketCount(List&lt;String[&gt; records,
            RecordClassBean recordClass) throws WdkUserException,
            WdkModelException, SQLException{
        return user.getBasketCounts(records, recordClass.recordClass);}

    /**
     * @param records
     * @param recordClass
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public int getFavoriteCount(List&lt;Map&lt;String, Object&gt;&gt; records,
            RecordClassBean recordClass) throws WdkUserException,
            WdkModelException, SQLException{
        return user.getFavoriteCount(records, recordClass.recordClass);}

    private Question currentQuestion;

    public void setCurrentQuestion(QuestionBean question){
        this.currentQuestion = question.question;}

    public SummaryView getCurrentSummaryView() throws Exception{
        try{
            return user.getCurrentSummaryView(currentQuestion);} catch (Exception ex){
            ex.printStackTrace();
            throw ex;}}

    public void setCurrentSummaryView(QuestionBean question, SummaryView summaryView)
            throws WdkUserException, WdkModelException{
        user.setCurrentSummaryView(question.question, summaryView);}

    private RecordClass currentRecordClass;

    public void setCurrentRecordClass(RecordClassBean recordClass){
        this.currentRecordClass = recordClass.recordClass;}

    public RecordView getCurrentRecordView() throws Exception{
        try{
            return user.getCurrentRecordView(currentRecordClass);} catch (Exception ex){
            ex.printStackTrace();
            throw ex;}}

    public void setCurrentRecordView(RecordClassBean recordClass,
            RecordView recordView) throws WdkUserException, WdkModelException{
        user.setCurrentRecordView(recordClass.recordClass, recordView);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di871248469850738480" cid="C393" type="class" name="UserFactoryBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:53">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a42714d483ed244ed9b546c1d535d574a668" name="userFactory" type="UserFactory" type-id="UserFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o3c895322901344fb8a1f1d86c9a67595668" name="UserFactoryBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userFactory" type="UserFactory" type-id="UserFactory" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.userFactory = userFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="o83bddf3076774d3390f3cb673fa41404669" name="encrypt" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="str" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException{
        return UserFactory.encrypt(str);}</source-code>
          </source-codes>
        </operation>
        <operation id="o4d6c2df9434c46c794f3df3f3bc8b1df669" name="md5" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="str" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException{
        return UserFactory.md5(str);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.UserFactory#createGuestUser()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="off79451ca79b45829827463a29093b2a669" name="getGuestUser" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            NoSuchAlgorithmException, SQLException{
        return new UserBean(userFactory.createGuestUser());}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.UserFactory#createUser(java.lang.String,
     * java.lang.String, java.lang.String, java.lang.String, java.lang.String,
     * java.lang.String, java.lang.String, java.lang.String, java.lang.String,
     * java.lang.String, java.lang.String, java.lang.String, java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8d69dc8b2abd4d23bc229b9afc5fb749669" name="UserBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="organization" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            String department, String address, String city, String state,
            String zipCode, String phoneNumber, String country,
            Map&lt;String, String&gt; globalPreferences,
            Map&lt;String, String&gt; projectPreferences) throws WdkUserException,
            WdkModelException{
        User user = userFactory.createUser(email, lastName, firstName,
                middleName, title, organization, department, address, city,
                state, zipCode, phoneNumber, country, globalPreferences,
                projectPreferences);
        return new UserBean(user);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.UserFactory#getDefaultRole()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofda3baed82344444b7e10ee8cb1f10e7669" name="getDefaultRole" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return userFactory.getDefaultRole();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.UserFactory#getProjectId()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8bf79168e0ef42dd93b2722b73a32e24669" name="getProjectId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return userFactory.getProjectId();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.UserFactory#authenticate(java.lang.String,
     * java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4494fd8b0df049409be7d4ac50ead4c4669" name="login" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="guest" type="UserBean" type-id="UserBean" default-value="" />
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="password" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException,
            NoSuchAlgorithmException, SQLException, JSONException{
        User user = userFactory.login(guest.getUser(), email, password);
        return new UserBean(user);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.UserFactory#sendEmail(java.lang.String,
     * java.lang.String, java.lang.String, java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0ba56ea61df845d4afd85591c1a3304f669" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="subject" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            String content) throws WdkUserException, WdkModelException{
        Utilities.sendEmail(userFactory.getWdkModel(), email, reply, subject,
                content);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.user.UserFactory#resetPassword(org.gusdb.wdk.model
     * .user.User)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4d5b189cd29043db944f5cbd9b2e87fc669" name="resetPassword" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        userFactory.resetPassword(email);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.UserFactory#loadUser(java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob467cbbe2dfc449496f85889a5284f6d669" name="getUserByEmail" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="email" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            WdkUserException, SQLException{
        User user = userFactory.getUserByEmail(email);
        return new UserBean(user);}

    /**
     * @param signature
     * @return
     * @throws WdkUserException
     * @throws WdkModelException
     * @see org.gusdb.wdk.model.user.UserFactory#loadUserBySignature(java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o39acc73c1d7141a9a06c14f582b3d82b669" name="getUser" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="signature" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException{
        User user = userFactory.getUser(signature);
        return new UserBean(user);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.user.UserFactory#loadUser(int)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od968f85cc00741a49ac226e4d2fdf743669" name="getUser" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        User user = userFactory.getUser(userId);
        return new UserBean(user);}</source-code>
          </source-codes>
        </operation>
        <operation id="o19f09ce3eac54a6887fc8c57dcc43ee3669" name="setSignature" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="signature" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.signature = signature;}</source-code>
          </source-codes>
        </operation>
        <operation id="o97c8be48150244fbb3c1d6b2d0bc9d35669" name="getUser" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        return (signature == null) ? null : getUser(signature);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di175504087320290592" cid="C394" type="class" name="WdkModelBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:57">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a8d7b8a0d380f4260aee70bf08c86a904657" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="package" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad620728873f947d09743de0cddfd6102657" name="questionName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oc2ad7044da7d44069e605d6768c4ed7b657" name="WdkModelBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.wdkModel = wdkModel;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0bfe4fdd440842abba47d549d9b9ac5b657" name="getProperties" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.getProperties();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.WdkModel#getVersion()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1538b46bbcee4304a3c4440a4ebf3264657" name="getVersion" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.getVersion();}</source-code>
          </source-codes>
        </operation>
        <operation id="o65fb07e8f61f48d5bc361643915a0ff4657" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.getDisplayName();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5d13d149198547a3bdf2cc0f24333396657" name="getIntroduction" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.getIntroduction();}

    // to do: figure out how to do this without using getModel()</source-code>
          </source-codes>
        </operation>
        <operation id="obed0651c2f9b42ceb7a6c702a7bfbc8b657" name="getModel" type="WdkModel" type-id="WdkModel" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.wdkModel;}

    /**
     * used by the controller
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6a33ef559de94af5b69e0d39c9de82bc657" name="findRecordClass" type="RecordClassBean" type-id="RecordClassBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recClassRef" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        return new RecordClassBean(wdkModel.getRecordClass(recClassRef));}</source-code>
          </source-codes>
        </operation>
        <operation id="o704e341b2c0540dd90ae31f27c2772d8657" name="getWebsiteRootCategories" type="Map&lt;String, CategoryBean&gt;" type-id="Map&lt;String, CategoryBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, CategoryBean&gt; beans = new LinkedHashMap&lt;String, CategoryBean&gt;();
        Map&lt;String, SearchCategory&gt; roots = wdkModel.getRooCategories(SearchCategory.USED_BY_WEBSITE);
        for (SearchCategory category : roots.values()){
            CategoryBean bean = new CategoryBean(category);
            beans.put(category.getName(), bean);}
        return beans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1ae58520151c441cbd941036b3260a71657" name="getWebserviceRootCategories" type="Map&lt;String, CategoryBean&gt;" type-id="Map&lt;String, CategoryBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, CategoryBean&gt; beans = new LinkedHashMap&lt;String, CategoryBean&gt;();
        Map&lt;String, SearchCategory&gt; roots = wdkModel.getRooCategories(SearchCategory.USED_BY_WEBSERVICE);
        for (SearchCategory category : roots.values()){
            CategoryBean bean = new CategoryBean(category);
            beans.put(category.getName(), bean);}
        return beans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6a58e927346347018bc0353bc3084533657" name="getWebsiteQuestions" type="Map&lt;QuestionBean, CategoryBean&gt;" type-id="Map&lt;QuestionBean, CategoryBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        Map&lt;QuestionBean, CategoryBean&gt; questions = new LinkedHashMap&lt;QuestionBean, CategoryBean&gt;();
        Map&lt;String, CategoryBean&gt; categories = getWebsiteRootCategories();
        Stack&lt;CategoryBean&gt; stack = new Stack&lt;CategoryBean&gt;();
        stack.addAll(categories.values());
        while (!stack.isEmpty()){
            CategoryBean category = stack.pop();
            for (QuestionBean question : category.getWebsiteQuestions()){
                questions.put(question, category);}
            // add the children in reversed order to make sure they have the
            // correct order when popping out from stack.
            List&lt;CategoryBean&gt; children = new ArrayList&lt;CategoryBean&gt;(
                    category.getWebsiteChildren().values());
            for (int i = children.size() - 1; i &gt;= 0; i--){
                stack.push(children.get(i));}}
        return questions;}

    // getWebsiteQuestions does not include all expression questions included in an internal page
    // we need this for the searchesLookup table</source-code>
          </source-codes>
        </operation>
        <operation id="od36fbdf365e744fb8e8ddc8c353b16a6658" name="getAllQuestions" type="Map&lt;QuestionBean, CategoryBean&gt;" type-id="Map&lt;QuestionBean, CategoryBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException{
        Map&lt;QuestionBean, CategoryBean&gt; questions = new LinkedHashMap&lt;QuestionBean, CategoryBean&gt;();
        Map&lt;String, CategoryBean&gt; categories = getWebserviceRootCategories();
        Stack&lt;CategoryBean&gt; stack = new Stack&lt;CategoryBean&gt;();
        stack.addAll(categories.values());
        while (!stack.isEmpty()){
            CategoryBean category = stack.pop();
            for (QuestionBean question : category.getWebserviceQuestions()){
                questions.put(question, category);}
            // add the children in reversed order to make sure they have the
            // correct order when popping out from stack.
            List&lt;CategoryBean&gt; children = new ArrayList&lt;CategoryBean&gt;(
                    category.getWebserviceChildren().values());
            for (int i = children.size() - 1; i &gt;= 0; i--){
                stack.push(children.get(i));}}
        return questions;}

    /**
     * @return Map of questionSetName --&gt; {@link QuestionSetBean}
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe4ac6c52c93142f39cd6eada0dc835c3658" name="getQuestionSetsMap" type="Map&lt;String, QuestionSetBean&gt;" type-id="Map&lt;String, QuestionSetBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, QuestionSet&gt; qSets = wdkModel.getQuestionSets();
        Map&lt;String, QuestionSetBean&gt; qSetBeans = new LinkedHashMap&lt;String, QuestionSetBean&gt;();
        for (String qSetKey : qSets.keySet()){
            QuestionSetBean qSetBean = new QuestionSetBean(qSets.get(qSetKey));
            qSetBeans.put(qSetKey, qSetBean);}
        return qSetBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o98b70e4bf3c644b0943e295832928d94658" name="getQuestionSets" type="QuestionSetBean[]" type-id="QuestionSetBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, QuestionSetBean&gt; qSetMap = getQuestionSetsMap();
        QuestionSetBean[ qSetBeans = new QuestionSetBean[qSetMap.size();
        qSetMap.values().toArray(qSetBeans);
        return qSetBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="oac9136070a094f929a3a5798476f6e2e658" name="getRecordClasses" type="RecordClassBean[]" type-id="RecordClassBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{

        Vector&lt;RecordClassBean&gt; recordClassBeans = new Vector&lt;RecordClassBean&gt;();
        RecordClassSet sets[ = wdkModel.getAllRecordClassSets();
        for (int i = 0; i &lt; sets.length; i++){
            RecordClassSet nextSet = sets[i;
            RecordClass recordClasses[ = nextSet.getRecordClasses();
            for (int j = 0; j &lt; recordClasses.length; j++){
                RecordClass nextClass = recordClasses[j;
                RecordClassBean bean = new RecordClassBean(nextClass);
                recordClassBeans.addElement(bean);}}

        RecordClassBean[ returnedBeans = new RecordClassBean[recordClassBeans.size();
        for (int i = 0; i &lt; recordClassBeans.size(); i++){
            RecordClassBean nextReturnedBean = recordClassBeans.elementAt(i);
            returnedBeans[i = nextReturnedBean;}
        return returnedBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o06b854b5020a43b28485a92e19b6e9b3658" name="getRecordClassMap" type="Map&lt;String, RecordClassBean&gt;" type-id="Map&lt;String, RecordClassBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, RecordClassBean&gt; recordClassMap = new LinkedHashMap&lt;String, RecordClassBean&gt;();
        RecordClassSet[ rcsets = wdkModel.getAllRecordClassSets();
        for (RecordClassSet rcset : rcsets){
            RecordClass[ rcs = rcset.getRecordClasses();
            for (RecordClass rc : rcs){
                recordClassMap.put(rc.getFullName(), new RecordClassBean(rc));}}
        return recordClassMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa67f5f7552324b4fa6f93ce9a80aaa40658" name="getRecordClassTypes" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        RecordClassBean[ recClasses = getRecordClasses();
        Map&lt;String, String&gt; types = new LinkedHashMap&lt;String, String&gt;();
        for (RecordClassBean r : recClasses){
            types.put(r.getFullName(), r.getType());}
        return types;}</source-code>
          </source-codes>
        </operation>
        <operation id="o38fd4c1a83de4d65bed9f6e5afa61d20658" name="getXmlQuestionSets" type="XmlQuestionSetBean[]" type-id="XmlQuestionSetBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlQuestionSet[ qsets = wdkModel.getXmlQuestionSets();
        XmlQuestionSetBean[ qsetBeans = new XmlQuestionSetBean[qsets.length;
        for (int i = 0; i &lt; qsets.length; i++){
            qsetBeans[i = new XmlQuestionSetBean(qsets[i);}
        return qsetBeans;}

    /**
     * @return Map of questionSetName --&gt; {@link XmlQuestionSetBean}
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa674858a8bb74d9d9d8bf7dce845098c658" name="getXmlQuestionSetsMap" type="Map&lt;String, XmlQuestionSetBean&gt;" type-id="Map&lt;String, XmlQuestionSetBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlQuestionSetBean[ qSets = getXmlQuestionSets();
        Map&lt;String, XmlQuestionSetBean&gt; qSetsMap = new LinkedHashMap&lt;String, XmlQuestionSetBean&gt;();
        for (int i = 0; i &lt; qSets.length; i++){
            qSetsMap.put(qSets[i.getName(), qSets[i);}
        return qSetsMap;}</source-code>
          </source-codes>
        </operation>
        <operation id="o96cab7819a8d4dd1bfe1a47a590f5c2e658" name="getXmlRecordClassSets" type="XmlRecordClassSetBean[]" type-id="XmlRecordClassSetBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlRecordClassSet[ rcs = wdkModel.getXmlRecordClassSets();
        XmlRecordClassSetBean[ rcBeans = new XmlRecordClassSetBean[rcs.length;
        for (int i = 0; i &lt; rcs.length; i++){
            rcBeans[i = new XmlRecordClassSetBean(rcs[i);}
        return rcBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa7e97819b4bf4f499b576837d73bef39658" name="getUserFactory" type="UserFactoryBean" type-id="UserFactoryBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException{
        return new UserFactoryBean(wdkModel.getUserFactory());}

    /**
     * @param questionFullName
     * @return
     * @see org.gusdb.wdk.model.WdkModel#getQuestionDisplayName(java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6a8b2684f9ef4a21a45ae6a0d91bb611658" name="getQuestionDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionFullName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.getQuestionDisplayName(questionFullName);}</source-code>
          </source-codes>
        </operation>
        <operation id="o40d01b71d87f401cb0b394660f5f8179658" name="getProjectId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.getProjectId();}</source-code>
          </source-codes>
        </operation>
        <operation id="of1f9b7b8d8044856944931577c2d0fc2658" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.getProjectId();}

    /**
     * @param paramName
     * @return
     * @see org.gusdb.wdk.model.WdkModel#queryParamDisplayName(java.lang.String)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4324a7f690874c6686011fd284a8cbf3658" name="queryParamDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="paramName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.queryParamDisplayName(paramName);}

    /**
     * @return
     * @throws NoSuchAlgorithmException
     * @throws WdkModelException
     * @throws IOException
     * @see org.gusdb.wdk.model.WdkModel#getSecretKey()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe0a6f864265442adac4484fc253831cb658" name="getSecretKey" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkModelException, IOException{
        return wdkModel.getSecretKey();}</source-code>
          </source-codes>
        </operation>
        <operation id="o8939ecd061a34a3494b8e747cb429ce3658" name="getUseWeights" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.getUseWeights();}</source-code>
          </source-codes>
        </operation>
        <operation id="o024cd65719b7426f879073590e16c899658" name="getSystemUser" type="UserBean" type-id="UserBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NoSuchAlgorithmException,
            WdkUserException, WdkModelException, SQLException{
        return new UserBean(wdkModel.getSystemUser());}

    /**
     * @return
     * @see org.gusdb.wdk.model.WdkModel#getReleaseDate()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of1ac8419aef94a0e8209fe4125f1183b659" name="getReleaseDate" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return wdkModel.getReleaseDate();}</source-code>
          </source-codes>
        </operation>
        <operation id="o03f10ff5521d4db89b9b94a7f5ba827c659" name="getQuestion" type="QuestionBean" type-id="QuestionBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionFullName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        return new QuestionBean(wdkModel.getQuestion(questionFullName));}</source-code>
          </source-codes>
        </operation>
        <operation id="o85f49f3a91d547f3afde8eb007594c6f659" name="getParams" type="Map&lt;String, ParamBean&lt;?&gt;&gt;" type-id="Map&lt;String, ParamBean&lt;?&gt;&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        Map&lt;String, ParamBean&lt;?&gt;&gt; params = new LinkedHashMap&lt;String, ParamBean&lt;?&gt;&gt;();
        for (ParamSet paramSet : wdkModel.getAllParamSets()){
            for (Param param : paramSet.getParams()){
                ParamBean&lt;?&gt; bean;
                if (param instanceof AbstractEnumParam){
                    bean = new EnumParamBean((AbstractEnumParam) param);} else if (param instanceof AnswerParam){
                    bean = new AnswerParamBean((AnswerParam) param);} else if (param instanceof DatasetParam){
                    bean = new DatasetParamBean((DatasetParam) param);} else if (param instanceof TimestampParam){
                    bean = new TimestampParamBean((TimestampParam) param);} else if (param instanceof StringParam){
                    bean = new StringParamBean((StringParam) param);} else{
                    throw new WdkModelException("Unknown param type:"
                            + param.getClass().getName());}
                params.put(param.getFullName(), bean);}}
        return params;}</source-code>
          </source-codes>
        </operation>
        <operation id="o631a7e9389884ba2a80f9b3dc1e200da659" name="getRecordClass" type="RecordClassBean" type-id="RecordClassBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="rcName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        return new RecordClassBean(wdkModel.getRecordClass(rcName));}</source-code>
          </source-codes>
        </operation>
        <operation id="oe1f4f02bae7d46fab1dc47623434357c659" name="setQuestionName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.questionName = questionName;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob920c0c4c2a34e48980dc6cdcf560fe6659" name="getQuestion" type="QuestionBean" type-id="QuestionBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        try{
            return new QuestionBean(wdkModel.getQuestion(questionName));} catch (Exception ex){
            logger.error(ex);
            return null;}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di624355761465155633" cid="C395" type="class" name="XmlAnswerBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:58">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a434962ba7a514ec78113205eff4390e0422" name="answer" type="XmlAnswerValue" type-id="XmlAnswerValue" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oe0d4fb9eb7784461892f13af91ebc057422" name="XmlAnswerBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="answer" type="XmlAnswerValue" type-id="XmlAnswerValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.answer = answer;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAnswer#getEndIndex()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofad87ecc74c7481d9d19917294c1b267422" name="getEndIndex" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.answer.getEndIndex();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAnswer#getPageSize()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc2c1e2063f9c4a9391535f7de15aabdc422" name="getPageSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.answer.getPageSize();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAnswer#getQuestion()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od45981382a4242a8919ef0d9e512855e422" name="getQuestion" type="XmlQuestionBean" type-id="XmlQuestionBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new XmlQuestionBean(answer.getQuestion());}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAnswer#getRecordInstances()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o557f2dfccd0442758347b4e57752b6ce422" name="getRecordInstances" type="XmlRecordBean[]" type-id="XmlRecordBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlRecordInstance[ records = answer.getRecordInstances();
        XmlRecordBean[ recordBeans = new XmlRecordBean[records.length;
        for (int i = 0; i &lt; records.length; i++){
            recordBeans[i = new XmlRecordBean(records[i);}
        return recordBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o17f940f6f2bf4320a8129ea83d0a68d7422" name="getRecordInstanceMap" type="Map&lt;String, XmlRecordBean&gt;" type-id="Map&lt;String, XmlRecordBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        Map&lt;String, XmlRecordInstance&gt; records = answer.getRecordInstanceMap();
        Map&lt;String, XmlRecordBean&gt; recordBeans = new LinkedHashMap&lt;String, XmlRecordBean&gt;(
                records.size());
        for (String recordId : records.keySet()){
            recordBeans.put(recordId, new XmlRecordBean(records.get(recordId)));}
        return recordBeans;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAnswer#getResultSize()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6d0dc8641f73432ab0943177c9582cf0422" name="getResultSize" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.answer.getResultSize();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAnswer#getStartIndex()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0f80208ea86d4e30a9d7e0abb15a7395422" name="getStartIndex" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.answer.getStartIndex();}</source-code>
          </source-codes>
        </operation>
        <operation id="o38d9915250f44f56ad5e8d02b450a6a4422" name="getRecordClass" type="XmlRecordClassBean" type-id="XmlRecordClassBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new XmlRecordClassBean(answer.getQuestion().getRecordClass());}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di993412674455562615" cid="C396" type="class" name="XmlAttributeFieldBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:58">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab4ae3f6f521449ca91a2907ae5e32347897" name="field" type="XmlAttributeField" type-id="XmlAttributeField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oee92765c21104c24849f680ab7c34d51897" name="XmlAttributeFieldBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="XmlAttributeField" type-id="XmlAttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.field = field;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc0928419a44742d5abf6132543f61ea4897" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getDisplayName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getHelp()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o99731953cdb64568b1dc09667f128b79897" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getHelp();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getIsInternal()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8f2f960977fd41e8b43c4d95a4887691897" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.isInternal();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5b42fc815f4547a59fef6498499516a3897" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getTruncate()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oaae5df65729649a8b099d952fefd1e96897" name="getTruncateTo" type="Integer" type-id="Uml.Integer" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getTruncateTo();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeField#getType()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o62105bee7675474690d4bb9b99073f56897" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getType();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di880123785175044909" cid="C397" type="class" name="XmlAttributeValueBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:37:59">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a3b3766eb2851447d8c975859abd04637554" name="attribute" type="XmlAttributeValue" type-id="XmlAttributeValue" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ofa4efaf8c5224271bfff84b1111d4450554" name="XmlAttributeValueBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attribute" type="XmlAttributeValue" type-id="XmlAttributeValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.attribute = attribute;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeValue#getAttributeField()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa00482bc05964b19b8d45724564ecc65554" name="getAttributeField" type="XmlAttributeFieldBean" type-id="XmlAttributeFieldBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new XmlAttributeFieldBean(attribute.getAttributeField());}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeValue#getBriefValue()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9b5df69bea474253bdf6a8d82688650c554" name="getBriefValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attribute.getBriefValue();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeValue#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3f110203e672466eaaace243b23f10c0554" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attribute.getDisplayName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeValue#getHelp()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o92898fac7330459ea6cfb865933265c7554" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attribute.getHelp();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeValue#getIsInternal()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocf396b5911d64466bd6e6d79a6389cda554" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attribute.isInternal();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeValue#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6c5b9f2edefe48cf97f1105b0bc0467a554" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attribute.getName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeValue#getValue()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o952720c112bb41c2b5b9e7b8eb0edf31554" name="getValue" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attribute.getValue();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlAttributeValue#isSummary()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o76c304f571c844b9985993f16feb9bd5554" name="isSummary" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.attribute.isSummary();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di316948331822749927" cid="C398" type="class" name="XmlQuestionBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:00">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a67a84ded001040bea8ed6269b73b4676450" name="question" type="XmlQuestion" type-id="XmlQuestion" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oc8e9969eb8f04f489199e06bb5133d47450" name="XmlQuestionBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="question" type="XmlQuestion" type-id="XmlQuestion" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.question = question;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestion#getDescription()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oba2f1496af0b4f72a35e92598ab843fe450" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question.getDescription();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestion#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5b7f6c5f64844f6e9d0ad6082fb50991450" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question.getDisplayName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestion#getFullName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oed4cf5881b784d1fa003cf99721cbc22450" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question.getFullName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestion#getHelp()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa2f37a943a224f0fa535887316eac653450" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question.getHelp();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestion#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9f6d8376008c43a285eda38840e0e269450" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question.getName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestion#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o32e147b26d764023afad72d01ca69def450" name="getXmlDataURL" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.question.getXmlDataURL();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestion#getRecordClass()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc405ab8e417d49a8b82fd9b2c3991dda450" name="getRecordClass" type="XmlRecordClassBean" type-id="XmlRecordClassBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new XmlRecordClassBean(question.getRecordClass());}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestion#makeAnswer(java.util.Map, int,
     * int)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob195169321364eed9c2bb97f86cb1940450" name="makeAnswer" type="XmlAnswerBean" type-id="XmlAnswerBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="params" type="Map" type-id="Map" default-value="" />
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        XmlAnswerValue answer = question.makeAnswer(params, startIndex,
                endIndex);
        return new XmlAnswerBean(answer);}</source-code>
          </source-codes>
        </operation>
        <operation id="ofc9e31d61f0242acbbc4100d8dba1131450" name="getFullAnswer" type="XmlAnswerBean" type-id="XmlAnswerBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        try{
            XmlAnswerBean a = makeAnswer(null, 1, 3);
            int c = a.getResultSize();
            return makeAnswer(null, 1, c);} catch (WdkModelException ex){
            logger.error("Error on getting answer from xmlQuestion '"
                    + getFullName() + "': " + ex);
            ex.printStackTrace();
            throw ex;}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di902762131891334324" cid="C399" type="class" name="XmlQuestionSetBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:01">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7314e42c88724b11a557f102adb0daea121" name="questionSet" type="XmlQuestionSet" type-id="XmlQuestionSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o4e113fcafc604060b36aa3eea72be467121" name="XmlQuestionSetBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="questionSet" type="XmlQuestionSet" type-id="XmlQuestionSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.questionSet = questionSet;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestionSet#getDescription()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3287ee8dbf2f4ead84d4bdfa3bd90c44121" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.questionSet.getDescription();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestionSet#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3e42c5b67fb0452abe82d44ae033106d121" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.questionSet.getDisplayName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestionSet#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of8d6a0e33fb14063a261039c4a11607b121" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.questionSet.getName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestionSet#getQuestions()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4c312da1ec2a4df8a7e5cb034229c70d121" name="getQuestions" type="XmlQuestionBean[]" type-id="XmlQuestionBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlQuestion[ questions = questionSet.getQuestions();
        XmlQuestionBean[ questionBeans = new XmlQuestionBean[questions.length;
        for (int i = 0; i &lt; questions.length; i++){
            questionBeans[i = new XmlQuestionBean(questions[i);}
        return questionBeans;}

    /**
     * @return Map of questionName --&gt; {@link XmlQuestionBean}
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o555b0963627a4a8ba8a7a4cdc28710d3121" name="getQuestionsMap" type="Map&lt;String, XmlQuestionBean&gt;" type-id="Map&lt;String, XmlQuestionBean&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlQuestionBean[ qs = getQuestions();
        Map&lt;String, XmlQuestionBean&gt; qsMap = new LinkedHashMap&lt;String, XmlQuestionBean&gt;();
        for (int i = 0; i &lt; qs.length; i++){
            qsMap.put(qs[i.getName(), qs[i);}
        return qsMap;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlQuestionSet#isInternal()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe2ed7c409164454da28b53f5c9ba2fa9121" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.questionSet.isInternal();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di179280653606074083" cid="C400" type="class" name="XmlRecordBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a8829910f92194d55b4f1eb110ce86a1491" name="record" type="XmlRecordInstance" type-id="XmlRecordInstance" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o8082ab66dd7340fe85d7fd39fb7b585991" name="XmlRecordBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="record" type="XmlRecordInstance" type-id="XmlRecordInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.record = record;}</source-code>
          </source-codes>
        </operation>
        <operation id="obc04fb568bff48ad844efa0909464df191" name="getId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	return record.getId();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordInstance#getAttributes()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of1062c10e6fa42daaebf6faad0b2830e91" name="getAttributes" type="XmlAttributeValueBean[]" type-id="XmlAttributeValueBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlAttributeValue[ attrs = record.getAttributes();
        XmlAttributeValueBean[ attrBeans = new XmlAttributeValueBean[attrs.length;
        for (int i = 0; i &lt; attrs.length; i++){
            attrBeans[i = new XmlAttributeValueBean(attrs[i);}
        return attrBeans;}</source-code>
          </source-codes>
        </operation>
        <operation id="o958eba3276734742810a4d8988a66c8991" name="getAttributesMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
	XmlAttributeValueBean[ attrs = getAttributes();
	Map&lt;String, String&gt; attMap = new LinkedHashMap&lt;String, String&gt;();
	for (int i=0; i&lt;attrs.length; i++){
	    XmlAttributeValueBean att = attrs[i;
	    attMap.put(att.getName(), att.getValue());}
	return attMap;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordInstance#getNonSummaryAttributes()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa11348a9f2d44e8081a9ec692989116691" name="getNonSummaryAttributes" type="XmlAttributeValueBean[]" type-id="XmlAttributeValueBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlAttributeValue[ attrs = record.getNonSummaryAttributes();
        XmlAttributeValueBean[ attrBeans = new XmlAttributeValueBean[attrs.length;
        for (int i = 0; i &lt; attrs.length; i++){
            attrBeans[i = new XmlAttributeValueBean(attrs[i);}
        return attrBeans;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordInstance#getRecordClass()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2987dc415f5742788ec33d65c93e403f91" name="getRecordClass" type="XmlRecordClassBean" type-id="XmlRecordClassBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new XmlRecordClassBean(record.getRecordClass());}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordInstance#getSummaryAttributes()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o98269d28a037479fb1888f179d851c7692" name="getSummaryAttributes" type="XmlAttributeValueBean[]" type-id="XmlAttributeValueBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlAttributeValue[ attrs = record.getSummaryAttributes();
        XmlAttributeValueBean[ attrBeans = new XmlAttributeValueBean[attrs.length;
        for (int i = 0; i &lt; attrs.length; i++){
            attrBeans[i = new XmlAttributeValueBean(attrs[i);}
        return attrBeans;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordInstance#getTables()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofd687fe07a8645d2952ced57b56eea6392" name="getTables" type="XmlTableValueBean[]" type-id="XmlTableValueBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlTableValue[ tables = record.getTables();
        XmlTableValueBean[ tableBeans = new XmlTableValueBean[tables.length;
        for (int i = 0; i &lt; tables.length; i++){
            tableBeans[i = new XmlTableValueBean(tables[i);}
        return tableBeans;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di797379531657085225" cid="C401" type="class" name="XmlRecordClassBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a58adf282be814576b30dfffed8b97733652" name="recordClass" type="XmlRecordClass" type-id="XmlRecordClass" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o81730c26fd4f43f98122e20c9f734a8e652" name="XmlRecordClassBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClass" type="XmlRecordClass" type-id="XmlRecordClass" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClass = recordClass;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordClass#getAttributeFields()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4e85d5f6f5a74a8dbca961bab3abd6ab652" name="getAttributeFields" type="XmlAttributeFieldBean[]" type-id="XmlAttributeFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlAttributeField[ fields = recordClass.getAttributeFields();
        XmlAttributeFieldBean[ fieldBeans = new XmlAttributeFieldBean[fields.length;
        for (int i = 0; i &lt; fields.length; i++){
            fieldBeans[i = new XmlAttributeFieldBean(fields[i);}
        return fieldBeans;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordClass#getFullName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o80045b62b8ab45fb92587dc1e4550c26652" name="getFullName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.recordClass.getFullName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordClass#getTableFields()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe4357cc23b3947329fbf5587e142fb96652" name="getTableFields" type="XmlTableFieldBean[]" type-id="XmlTableFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlTableField[ fields = recordClass.getTableFields();
        XmlTableFieldBean[ fieldBeans = new XmlTableFieldBean[fields.length;
        for (int i = 0; i &lt; fields.length; i++){
            fieldBeans[i = new XmlTableFieldBean(fields[i);}
        return fieldBeans;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordClass#getType()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od6ac84d026ec465ab80c1a7cadd87c3e652" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.recordClass.getType();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di688057372682833024" cid="C402" type="class" name="XmlRecordClassSetBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa0f77dedcace415285b52ac2d6790b8e995" name="recordClassSet" type="XmlRecordClassSet" type-id="XmlRecordClassSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oe1964d5cdfa74dcea9dc3c43b4d56967995" name="XmlRecordClassSetBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="recordClassSet" type="XmlRecordClassSet" type-id="XmlRecordClassSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.recordClassSet = recordClassSet;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordClassSet#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob5d1987c969a43ca947a8b1679564d5b995" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.recordClassSet.getName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlRecordClassSet#getRecordClasses()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5762b787e46946f8b78a432f5712116a995" name="getRecordClasses" type="XmlRecordClassBean[]" type-id="XmlRecordClassBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlRecordClass[ rcs = recordClassSet.getRecordClasses();
        XmlRecordClassBean[ rcBeans = new XmlRecordClassBean[rcs.length;
        for (int i = 0; i &lt; rcs.length; i++){
            rcBeans[i = new XmlRecordClassBean(rcs[i);}
        return rcBeans;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di444016455844319305" cid="C403" type="class" name="XmlTableFieldBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:03">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a807778b6304943b49706a1a6ddd22edf645" name="field" type="XmlTableField" type-id="XmlTableField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o590649713ed0456dab8e079343b89215645" name="XmlTableFieldBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="field" type="XmlTableField" type-id="XmlTableField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.field = field;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getColumns()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe1a3bf700abb4f668adf4aa735364858645" name="getAttributeFields" type="XmlAttributeFieldBean[]" type-id="XmlAttributeFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlAttributeField[ fields = this.field.getAttributeFields();
        XmlAttributeFieldBean[ beans = new XmlAttributeFieldBean[fields.length;
        for (int i = 0; i &lt; fields.length; i++){
            beans[i = new XmlAttributeFieldBean(fields[i);}
        return beans;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od8f2e6f1b2cc4731b2316fec4acc4d7b645" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getDisplayName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getHelp()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o857e95348f9d4c58a02be93f8f95a299645" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getHelp();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getIsInternal()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe0801a439f2244c38fab29cc9e5ca489645" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.isInternal();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o616493d1109740d38e3d04f7a8f901d3646" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getTruncate()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oaf7965a6a9294022ab368215a9b2145b646" name="getTruncateTo" type="Integer" type-id="Uml.Integer" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getTruncateTo();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableField#getType()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8920160f53dd4085a1723f1d3b889fa0646" name="getType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.field.getType();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di708713927313771433" cid="C404" type="class" name="XmlTableValueBean" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:04">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a9ba6e72ea7b240d28a0c338dcbf7ddc5418" name="table" type="XmlTableValue" type-id="XmlTableValue" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o9ed18a580bc44643b4f5d4677a467547418" name="XmlTableValueBean" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="table" type="XmlTableValue" type-id="XmlTableValue" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.table = table;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableValue#getColumns()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2e190562a2b74142ac4338a1a2bd4ffc419" name="getAttributeFields" type="XmlAttributeFieldBean[]" type-id="XmlAttributeFieldBean[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        XmlTableFieldBean field = new XmlTableFieldBean(table.getTableField());
        return field.getAttributeFields();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableValue#getDisplayName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od7d6f444c7a444eb9159e61f1c936834419" name="getDisplayName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.table.getDisplayName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableValue#getHelp()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa3ace97b1d7b489580071217ff58eab6419" name="getHelp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.table.getHelp();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableValue#getIsInternal()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocdd5530d96ef4c839ee5fad2a6db5807419" name="isInternal" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.table.isInternal();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableValue#getName()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofde60545db534b3ea4833165f3362e38419" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.table.getName();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableValue#getRows()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1f75231fda884e6c8c08e5b6fb3e73d0419" name="getRows" type="List&lt;XmlAttributeValueBean[]&gt;" type-id="List&lt;XmlAttributeValueBean[]&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        List&lt;XmlAttributeValueBean[&gt; rows = new ArrayList&lt;XmlAttributeValueBean[&gt;();
        for (XmlRowValue row : table.getRows()){
            XmlAttributeValue[ columns = row.getColumns();
            XmlAttributeValueBean[ rowBean = new XmlAttributeValueBean[columns.length;
            for (int i = 0; i &lt; columns.length; i++){
                rowBean[i = new XmlAttributeValueBean(columns[i);}
            rows.add(rowBean);}
        return rows;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.xml.XmlTableValue#getTableField()
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6457df34e60849729aef372db81f075e419" name="getTableField" type="XmlTableFieldBean" type-id="XmlTableFieldBean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return new XmlTableFieldBean(table.getTableField());}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di528119411274310569" cid="C405" type="class" name="BackupUser" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:10">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a0f76f3336194489cba3cf0141f1eb258467" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a430a28f88f184820bf8b403163a37e8f467" name="userSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad0ce634136e34743b2934bde573a806c467" name="wdkSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a30bb29976e5940f2a6080c7aafac89c8467" name="backupSchema" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="oc92032cdd9a94eeca66c675cc352ec32467" name="main" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        BackupUser backup = new BackupUser(cmdName);
        try{
            backup.invoke(args);}
        catch (Exception ex){
            ex.printStackTrace();
            throw ex;}
        finally{
            logger.info("WDK User Backup done.");
            System.exit(0);}}

    private static final String userColumns = "user_id, email, passwd, "
            + "is_guest, signature, register_time, last_active, last_name, "
            + "first_name, middle_name, title, organization, department, "
            + "address, city, state, zip_code, phone_number, country, "
            + "prev_user_id";
    private static final String roleColumns = "user_id, user_role";
    private static final String prefColumns = "user_id, project_id, "
            + "preference_name, preference_value";
    private static final String stepColumns = "step_id, display_id, user_id, "
            + "answer_id, left_child_id, right_child_id, create_time, "
            + "last_run_time, estimate_size, answer_filter, custom_name, "
            + "is_deleted, is_valid, collapsed_name, is_collapsible, "
            + "display_params, prev_step_id, invalid_message, assigned_weight";
    private static final String strategyColumns = "strategy_id, display_id, "
            + "user_id, root_step_id, project_id, is_saved, create_time, "
            + "last_view_time, last_modify_time, description, signature, name, "
            + "saved_name, is_deleted, prev_strategy_id";
    private static final String userDatasetColumns = "user_dataset_id, dataset_id, "
            + "user_id, create_time, upload_file, prev_user_dataset_id";
    private static final String basketColumns = "user_id, project_id, "
            + "record_class, pk_column_1, pk_column_2, pk_column_3";
    private static final String favoriteColumns = "user_id, project_id, "
            + "record_class, pk_column_1, pk_column_2, pk_column_3, "
            + "record_note, record_group";
    private static final String datasetIndexColumns = "dataset_id, "
            + "dataset_checksum, record_class, summary, dataset_size, "
            + "PREV_DATASET_ID";
    private static final String datasetValueColumns = "dataset_id, pk_column_1,"
            + "            pk_column_2, pk_column_3";
    private static final String answerColumns = "answer_id, answer_checksum, "
            + "project_id, project_version, question_name, query_checksum, "
            + "old_query_checksum, params, result_message, prev_answer_id";</source-code>
          </source-codes>
        </operation>
        <operation id="o939012095a624eb2937880d6544c2203467" name="BackupUser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command != null) ? command : "wdkBackupUser", "This command "
                + "backs up expired guest user data to a given schema.");}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe0da5390231946948ad076c4d7011e38467" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "a ProjectId"
                + ", which should match the directory name under $GUS_HOME, "
                + "where model-config.xml is stored.");

        addSingleValueOption(ARG_BACKUP_SCHEMA, true, null, "the backup schema"
                + " where the data should be stored.");

        addSingleValueOption(ARG_CUTOFF_DATE, true, null, "Any guest user "
                + "created by this date will be backed up, and removed "
                + "from the live schema defined in the model-config.xml. "
                + "The data should be in this format: yyyy/mm/dd");}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ofdcb4e9e70624fd7994a2d49386004dd467" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        backupSchema = (String) getOptionValue(ARG_BACKUP_SCHEMA);

        String projectId = (String) getOptionValue(ARG_PROJECT_ID);
        String cutoffDate = (String) getOptionValue(ARG_CUTOFF_DATE);
        logger.info("Backing up guest user data... ");

        wdkModel = WdkModel.construct(projectId, gusHome);
        userSchema = wdkModel.getModelConfig().getUserDB().getUserSchema();
        wdkSchema = wdkModel.getModelConfig().getUserDB().getWdkEngineSchema();

        backupSchema = DBPlatform.normalizeSchema(backupSchema);
        userSchema = DBPlatform.normalizeSchema(userSchema);
        wdkSchema = DBPlatform.normalizeSchema(wdkSchema);

        backupGuestUsers(userSchema, wdkSchema, backupSchema, cutoffDate);}</source-code>
          </source-codes>
        </operation>
        <operation id="oedc586e7b57a40408a5aba718dec1e03467" name="backupGuestUsers" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="userSchema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="wdkSchema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="backupSchema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="cutoffDate" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        // copy tables from user schema
        copyUsers();
        copyRows(roleColumns, "user_roles");
        copyRows(prefColumns, "preferences");
        copyRows(basketColumns, "user_baskets");
        copyRows(favoriteColumns, "favorites");
        copyUserDatasetRows();
        copyStepRows();
        copyStrategyRows();

        // delete rows from user schema
        cutoffDate = "to_date('" + cutoffDate + "', 'yyyy/mm/dd')";
        String selectSql = "SELECT user_id FROM " + userSchema + "users "
                + " WHERE is_guest = 1 AND register_time &lt; " + cutoffDate;
        deleteRows(selectSql, "strategies");
        deleteRows(selectSql, "steps");
        deleteRows(selectSql, "user_datasets2");
        deleteRows(selectSql, "favorites");
        deleteRows(selectSql, "user_baskets");
        deleteRows(selectSql, "preferences");
        deleteRows(selectSql, "user_roles");
        deleteRows(selectSql, "users");

        // copy other data
        copyAnswerRows();
        deleteAnswerRows();

        copyDatasetIndexRows();
        copyDatasetValueRows();
        deleteDatasetValueRows();
        deleteDatasetIndexRows();}

    // &lt;ADD-AG 042111&gt;
    // -----------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="od7254f7e4b784582b1294d99d7fd6bfb467" name="executeByBatch" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="selectSql" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        Connection connection = null;
        PreparedStatement psInsert = null;
        ResultSet resultSet = null;

        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource, selectSql,
                    "wdk-backup-" + name);

            connection = dataSource.getConnection();
            psInsert = connection.prepareStatement(dmlSql);

            int count = 0;

            while (resultSet.next()){
                int userId = resultSet.getInt(1);

                psInsert.setInt(1, userId);
                psInsert.addBatch();

                count++;
                if (count % 1000 == 0){
                    psInsert.executeBatch();
                    logger.info("Rows processed for " + name + " = " + count
                            + ".");}}

            psInsert.executeBatch();
            logger.info("Total rows processed for " + name + " = " + count
                    + ".");}
        finally{
            SqlUtils.closeResultSet(resultSet);
            SqlUtils.closeStatement(psInsert);}}

    // &lt;/ADD-AG 042111&gt;
    // ----------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="oa9fae5004cd146d09bca259d9da59fd8467" name="copyUsers" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException{
        logger.debug("Copying from users...");

        String fromTable = userSchema + "users";
        String toTable = backupSchema + "users";
        String dmSql = "INSERT INTO " + toTable + " (" + userColumns + ")"
                + " SELECT " + userColumns + " FROM " + fromTable
                + " WHERE user_id  = ?";
        String selectSql = "SELECT user_id FROM " + fromTable
                + " MINUS SELECT user_id FROM " + toTable;

        // &lt;ADD-AG 042111&gt;
        executeByBatch(wdkModel, "users", dmSql, selectSql);}

    /**
     * TODO - this way of copying records will only copy the records of new
     * users, but the changes of the old users will be ignored. need to be fixed
     * in the future, probably by adding primairy key id column to the table;
     * 
     * @param columns
     * @param table
     * @throws WdkUserException
     * @throws WdkModelException
     * @throws SQLException
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="o95dd80ed41aa48729636143eabe373b9467" name="copyRows" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="columns" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="table" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException, SQLException{
        logger.debug("Copying from " + table + "...");

        String fromTable = userSchema + table;
        String toTable = backupSchema + table;
        String dmSql = "INSERT INTO " + toTable + " (" + columns + ")"
                + " SELECT " + columns + " FROM " + fromTable
                + " WHERE user_id = ?";
        // select users that are in the backup users with rows, exclude users
        // that already have rows backed up.
        String selectSql = "SELECT t.user_id                            "
                + "  FROM " + fromTable + " t,  " + backupSchema + "users u "
                + "  WHERE t.user_id = u.user_id "
                + " MINUS SELECT user_id FROM " + toTable;

        // &lt;ADD-AG 042111&gt;
        executeByBatch(wdkModel, table, dmSql, selectSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="od92a76f07079488983c61303cc15abb0467" name="copyUserDatasetRows" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        logger.debug("Copying from user_datasets2...");

        String fromTable = userSchema + "user_datasets2";
        String toTable = backupSchema + "user_datasets2";
        String dmSql = "INSERT INTO " + toTable + " (" + userDatasetColumns
                + ") SELECT " + userDatasetColumns + " FROM " + fromTable
                + " WHERE user_dataset_id = ? ";
        String selectSql = "SELECT d.user_dataset_id                        "
                + "    FROM " + fromTable + " d, " + backupSchema + "users u"
                + "    WHERE d.user_id = u.user_id "
                + "  MINUS SELECT user_dataset_id FROM " + toTable;

        // &lt;ADD-AG 042111&gt;
        executeByBatch(wdkModel, "user_datasets2", dmSql, selectSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="o9fe45c71b08a4c3093b226ea32e1202c467" name="copyStepRows" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException{
        logger.debug("Copying from steps...");

        String fromTable = userSchema + "steps";
        String toTable = backupSchema + "steps";
        String dmSql = "INSERT INTO " + toTable + " (" + stepColumns + ")"
                + " SELECT " + stepColumns + " FROM " + fromTable
                + " WHERE step_id = ? ";
        String selectSql = "SELECT s.step_id                               "
                + "    FROM " + fromTable + " s, " + backupSchema + "users u"
                + "    WHERE s.user_id = u.user_id "
                + "  MINUS SELECT step_id FROM " + toTable;

        // &lt;ADD-AG 042111&gt;
        executeByBatch(wdkModel, "steps", dmSql, selectSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="o150a5df9a4e34d31b1c288b527ae244e467" name="copyStrategyRows" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException{
        logger.debug("Copying from strategies...");

        String fromTable = userSchema + "strategies";
        String toTable = backupSchema + "strategies";
        String dmSql = "INSERT INTO " + toTable + " (" + strategyColumns + ")"
                + " SELECT " + strategyColumns + " FROM " + fromTable
                + " WHERE strategy_id = ? ";
        String selectSql = "SELECT s.strategy_id                 "
                + "     FROM " + fromTable + " s, " + backupSchema + "users u"
                + "     WHERE s.user_id = u.user_id "
                + "   MINUS SELECT strategy_id FROM " + toTable;

        // &lt;ADD-AG 042111&gt;
        executeByBatch(wdkModel, "strategies", dmSql, selectSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="o30a2540a1bd9434a93846b2104c54d59467" name="deleteRows" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="selectSql" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="tableName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException, SQLException{
        logger.debug("deleting from " + tableName + "...");

        String dmSql = "DELETE FROM " + userSchema + tableName
                + " WHERE user_id = ?";

        // &lt;ADD-AG 042311&gt;
        executeByBatch(wdkModel, tableName, dmSql, selectSql);}

    /**
     * copy answers that are not used by steps
     * 
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="o3d7adc7fbdef478c93927b1104988747467" name="copyAnswerRows" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException{
        logger.debug("copying answer rows...");

        // &lt;ADD-AG 042211&gt;
        // -----------------------------------------------------------
        String fromTable = wdkSchema + "answers";
        String toTable = backupSchema + "answers";
        String dmlSql = "INSERT INTO " + toTable + " (" + answerColumns + ") "
                + "SELECT " + answerColumns + " FROM " + fromTable
                + " WHERE answer_id = ?";

        String selectSql = "SELECT answer_id FROM " + fromTable
                + " MINUS SELECT answer_id FROM " + toTable;

        executeByBatch(wdkModel, "ANSWERS", dmlSql, selectSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6b228496d0c24b30a66e57129ed59147467" name="copyDatasetIndexRows" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        logger.debug("copying dataset index rows...");

        // &lt;ADD-AG 042311&gt;
        // -----------------------------------------------------------

        String fromTable = wdkSchema + "dataset_indices";
        String toTable = backupSchema + "dataset_indices";
        String dmlSql = "INSERT INTO " + toTable + "  (" + datasetIndexColumns
                + ") SELECT " + datasetIndexColumns + " FROM " + fromTable
                + " WHERE dataset_id  = ?";

        String selectSql = "SELECT dataset_id FROM " + fromTable
                + " MINUS SELECT dataset_id FROM " + toTable;

        executeByBatch(wdkModel, "DATASET_INDICES", dmlSql, selectSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="o3aa55f97bcaf4bfea9a6deade4f03354467" name="copyDatasetValueRows" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        logger.debug("copying dataset value rows...");

        // &lt;ADD-AG 042511&gt;
        // -----------------------------------------------------------
        String fromTable = wdkSchema + "dataset_values";
        String toTables = backupSchema + "dataset_values";
        String dmlSql = "INSERT INTO " + toTables + " (" + datasetValueColumns
                + ")     SELECT DISTINCT " + datasetValueColumns
                + "      FROM " + fromTable + " WHERE dataset_id = ?";

        String selectSql = "SELECT DISTINCT dataset_id FROM " + fromTable
                + " MINUS SELECT dataset_id FROM " + toTables;

        executeByBatch(wdkModel, "DATASET_VALUES", dmlSql, selectSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="o65be0293baab4890b50137bc5c58b513467" name="deleteAnswerRows" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException,
            SQLException{
        logger.debug("deleting answer rows...");

        // &lt;ADD-AG 042311&gt;
        // -----------------------------------------------------------
        String fromTable = wdkSchema + "answers";
        String dmlSql = "DELETE FROM " + fromTable + " WHERE answer_id  = ?";

        String selectSql = "SELECT answer_id FROM "
                + " ( (SELECT answer_id FROM " + fromTable + ")"
                + "   MINUS                         "
                + "   ( SELECT answer_id FROM " + userSchema + "steps    "
                + "     UNION SELECT answer_id FROM wdkuser.steps)       "
                + " )";

        executeByBatch(wdkModel, "ANSWERS", dmlSql, selectSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="o5afdc2a90ad84fc993e7b157acd23cc1467" name="deleteDatasetIndexRows" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        logger.debug("deleting dataset index rows...");

        // &lt;ADD-AG 042311&gt;
        // -----------------------------------------------------------

        String fromTable = wdkSchema + "dataset_indices";
        String dmlSql = "DELETE FROM " + fromTable + " WHERE dataset_id = ?";

        String selectSql = "SELECT dataset_id FROM " + ""
                + " ((SELECT dataset_id FROM " + fromTable + ")"
                + "  MINUS                      "
                + "  ( SELECT dataset_id FROM " + userSchema + "user_datasets2"
                + "    UNION SELECT dataset_id FROM wdkuser.user_datasets)"
                + " )";

        executeByBatch(wdkModel, "DATASET_INDICES", dmlSql, selectSql);}</source-code>
          </source-codes>
        </operation>
        <operation id="o1df14af44f75446d8fd79c05b38bc2a7467" name="deleteDatasetValueRows" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException,
            WdkModelException, SQLException{
        logger.debug("deleting dataset value rows...");

        // &lt;ADD-AG 042511&gt;
        // -----------------------------------------------------------
        String fromTable = wdkSchema + "dataset_values";
        String dmlSql = "DELETE FROM " + fromTable + " WHERE dataset_id = ?";

        String selectSql = "SELECT dataset_id FROM "
                + " ( (SELECT distinct dataset_id FROM " + fromTable + ")"
                + "   MINUS                     "
                + "   (SELECT dataset_id FROM " + userSchema + "user_datasets2"
                + "    UNION "
                + "    SELECT dataset_id FROM wdkuser.user_datasets)      "
                + " )";

        executeByBatch(wdkModel, "DATASET_VALUES", dmlSql, selectSql);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di104721026772460046" cid="C406" type="class" name="InvalidStepReporter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:14">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o35b6f984fb09461aa1ee9a40258eb364506" name="main" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        InvalidStepReporter reporter = new InvalidStepReporter(cmdName);
        try{
            reporter.invoke(args);} catch (Exception ex){
            ex.printStackTrace();
            throw ex;} finally{
            logger.info("report complete.");
            System.exit(0);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o553095a85c4d4ba1b844367f763572eb506" name="InvalidStepReporter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command == null) ? command : "wdkInvalidStepReport",
                "store model information into database");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#declareOptions()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oecd4b335d6bf4ab38b69942d8e49760a506" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "ProjectId, which "
                + "should match the directory name under $GUS_HOME, where "
                + "model-config.xml is stored.  This model-conig.xml file is "
                + "only used to find the login info for the User database.");

        addNonValueOption(ARG_ALREADY_INVALID, false, "Provide this flag to "
                + "get a report of Steps that are already marked as "
                + "invalid. Otherwise the report only considers steps "
                + "that are currently not marked as invalid");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#execute()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0a80bff05df6429bab6ffb22473bed83506" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        String projectId = (String) getOptionValue(ARG_PROJECT_ID);
        Boolean alreadyInvalid = (Boolean) getOptionValue(ARG_ALREADY_INVALID);
        WdkModel wdkModel = WdkModel.construct(projectId, gusHome);
        report(wdkModel, alreadyInvalid);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa4424536e2eb44fbb42f05977a4794c8506" name="report" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="alreadyInvalid" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        // not previously marked invalid
        String s = alreadyInvalid ? "" : "NOT ";
        System.out.println("=== Reporting on invalid steps that are " + s
                + "already marked invalid");

        String flag;
        if (alreadyInvalid) flag = "a.is_valid = 0";
        else flag = "(a.is_valid IS NULL OR a.is_valid != 0)";

        questionNames(wdkModel, flag);
        paramNames(wdkModel, flag);
        paramValues(wdkModel, "FlatVocabParam", flag);
        paramValues(wdkModel, "EnumParam", flag);}</source-code>
          </source-codes>
        </operation>
        <operation id="o0c1b85dfe3b84912b0efa2d183b04e73506" name="questionNames" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="flag" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String answer = userDB.getWdkEngineSchema() + "answers";
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();

        String sql = "SELECT count(*) count, a.project_id, a.question_name"
                + " FROM " + answer + " a,"
                + "  (SELECT project_id, question_name FROM " + answer
                + "   MINUS"
                + "   SELECT project_id, question_name FROM wdk_questions) d"
                + " WHERE a.project_id = d.project_id"
                + " AND a.question_name = d.question_name AND " + flag
                + " group by a.project_id, a.question_name"
                + " order by a.project_id, a.question_name";

        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                "wdk-invalid-report-questions");
        System.out.println("----------- Invalid Question Name ------------");
        System.out.println("");
        System.out.println("count\tproject_id\tquestion_name");
        try{
            while (resultSet.next()){
                String count = resultSet.getString("count");
                String project_id = resultSet.getString("project_id");
                String question_name = resultSet.getString("question_name");
                System.out.println(count + "\t" + project_id + "\t"
                        + question_name);}} finally{
            resultSet.close();}
        System.out.println("");
        System.out.println("");}</source-code>
          </source-codes>
        </operation>
        <operation id="o31e835045dbe4319bea24dd5755caee0506" name="paramNames" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="flag" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String answer = userDB.getWdkEngineSchema() + "answers";
        String step = userDB.getUserSchema() + "steps";
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();

        String sql = "SELECT count(*) count, a.project_id, a.question_name, "
                + "sp.param_name" + " FROM step_params sp, "
                + answer
                + " a, "
                + step
                + " s, wdk_questions wq,"
                + "      (SELECT a.project_id, a.question_name, sp.param_name "
                + "       FROM step_params sp, "
                + step
                + " s, "
                + answer
                + " a"
                + "       WHERE sp.step_id = s.step_id "
                + "         AND s.answer_id = a.answer_id "
                + "         AND "
                + flag
                + "       MINUS  "
                + "       SELECT q.project_id, q.question_name, p.param_name  "
                + "       FROM wdk_questions q, wdk_params p "
                + "       WHERE q.question_id = p.question_id) d     "
                + "    WHERE a.project_id = d.project_id  "
                + "      AND a.question_name = d.question_name  "
                + "      AND "
                + flag
                + "      AND s.answer_id = a.answer_id  "
                + "      AND sp.step_id = s.step_id  "
                + "      AND sp.param_name = d.param_name "
                + "      and a.project_id = wq.project_id "
                + "      and a.question_name = wq.question_name "
                + "      group by a.project_id, a.question_name, sp.param_name"
                + "      order by a.project_id, a.question_name, sp.param_name";

        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                "wdk-invalid-report-params");
        System.out.println("----------- Invalid Param Name ------------");
        System.out.println("");
        System.out.println("count\tproject_id\tquestion_name\tparam_name");
        try{
            while (resultSet.next()){
                String count = resultSet.getString("count");
                String project_id = resultSet.getString("project_id");
                String question_name = resultSet.getString("question_name");
                String param_name = resultSet.getString("param_name");
                System.out.println(count + "\t" + project_id + "\t"
                        + question_name + "\t" + param_name);}} finally{
            resultSet.close();}
        System.out.println("");
        System.out.println("");}</source-code>
          </source-codes>
        </operation>
        <operation id="o83cddc28781146bdac375fef5026421b506" name="paramValues" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="type" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="flag" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String answer = userDB.getWdkEngineSchema() + "answers";
        String step = userDB.getUserSchema() + "steps";
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();

        String sql = "SELECT count(*) count, a.project_id, a.question_name, "
                + "sp.param_name, d.param_value" + " FROM step_params sp, "
                + answer
                + "  a, "
                + step
                + "  s, wdk_questions wq, wdk_params wp, "
                + " (SELECT a.project_id, a.question_name,  "
                + "         sp.param_name, sp.param_value  "
                + "  FROM step_params sp, "
                + step
                + "  s, "
                + answer
                + "  a, "
                + "        wdk_questions q, wdk_params p  "
                + "  WHERE sp.step_id = s.step_id  "
                + "    AND s.answer_id = a.answer_id  "
                + "    AND "
                + flag
                + "    AND a.project_id = q.project_id  "
                + "    AND a.question_name = q.question_name  "
                + "    AND q.question_id = p.question_id  "
                + "    AND sp.param_name = p.param_name  "
                + "    AND p.param_type = '"
                + type
                + "'"
                + "  MINUS  "
                + "  SELECT q.project_id, q.question_name,  "
                + "         p.param_name, ep.param_value  "
                + "  FROM wdk_questions q, wdk_params p,  "
                + "       wdk_enum_params ep  "
                + "  WHERE q.question_id = p.question_id  "
                + "    AND p.param_id = ep.param_id) d  "
                + " WHERE a.project_id = d.project_id  "
                + " AND a.question_name = d.question_name  "
                + " AND s.answer_id = a.answer_id  "
                + " AND sp.step_id = s.step_id  "
                + " AND sp.param_name = d.param_name  "
                + " AND sp.param_value = d.param_value  "
                + " and a.project_id = wq.project_id "
                + " and a.question_name = wq.question_name "
                + " and wp.question_id = wq.question_id "
                + " and sp.param_name = wp.param_name "
                + " AND "
                + flag
                + " group by a.project_id, a.question_name, sp.param_name, d.param_value "
                + " order by a.project_id, a.question_name, sp.param_name, d.param_value ";

        System.out.println("----------- Invalid Param Value (" + type
                + ") ------------");
        System.out.println("");
        System.out.println("count\tproject_id\tquestion_name\tparam_name\tparam_value");

        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                "wdk-invalid-report-param-values");
        try{
            while (resultSet.next()){
                String count = resultSet.getString("count");
                String project_id = resultSet.getString("project_id");
                String question_name = resultSet.getString("question_name");
                String param_name = resultSet.getString("param_name");
                String param_value = resultSet.getString("param_value");
                System.out.println(count + "\t" + project_id + "\t"
                        + question_name + "\t" + param_name + "\t"
                        + param_value);}} finally{
            resultSet.close();}
        System.out.println("");
        System.out.println("");}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di541400669660287604" cid="C407" type="class" name="ModelCacher" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:20">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o04fb759ef9a443a9917d96ee6cb99403561" name="main" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        ModelCacher cacher = new ModelCacher(cmdName);
        try{
            cacher.invoke(args);}
        catch (Exception ex){
            ex.printStackTrace();
            throw ex;}
        finally{
            logger.info("model cacher done.");
            System.exit(0);}}

    /**
     * @param command
     * @param description
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ocf5c9922fd3346b89fd4cbdc2e78ce36561" name="ModelCacher" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command != null) ? command : "wdkCacheModel",
                "store model information into database");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#declareOptions()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oda4480ce75294273b05cb3a6703ae0c8561" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "A comma-separated"
                + " list of ProjectIds, which should match the directory name"
                + " under $GUS_HOME, where model-config.xml is stored.");
        addNonValueOption("create", false, "create the cache tables to store "
                + "model definition. It affects all projects.");
        addNonValueOption("drop", false, "drop the cache table for storing "
                + "model definition. It affects all projects.");
        addNonValueOption("expand", false, "load the model definition into "
                + "the cache tables.");
        addSingleValueOption("schema", false, null, "optional. the name of the"
                + " schema where the tables will be created/dropped/used.");
        addGroup(true, "create", "drop", "expand");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#execute()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o3cfef084f168424295546d21a8f460c1561" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        String strProject = (String) getOptionValue(ARG_PROJECT_ID);
        String[ projects = strProject.split(",");

        boolean create = (Boolean) getOptionValue("create");
        boolean drop = (Boolean) getOptionValue("drop");
        boolean expand = (Boolean) getOptionValue("expand");
        String schema = (String) getOptionValue("schema");
        if (schema == null) schema = "";
        schema = schema.trim();
        if (schema.length() &gt; 0 &amp;&amp; !schema.endsWith(".")) schema += ".";

        if (create){
            String projectId = projects[0;
            WdkModel wdkModel = WdkModel.construct(projectId, gusHome);
            createTables(wdkModel, schema);
            logger.info("created model cache tables");} else if (drop){
            String projectId = projects[0;
            WdkModel wdkModel = WdkModel.construct(projectId, gusHome);
            dropTables(wdkModel, schema);
            logger.info("dropped model cache tables");} else if (expand){
            for (String projectId : projects){
                logger.info("Expanding model for project " + projectId);
                WdkModel wdkModel = WdkModel.construct(projectId, gusHome);
                expand(wdkModel, schema);
                logger.info("=========================== done ============================");}} else{
            logger.error("No valid operation specified");
            throw new WdkModelException("No valid operation specified");}}</source-code>
          </source-codes>
        </operation>
        <operation id="od83eb22558c34e5ab7542815a3dd8f5f561" name="expand" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            NoSuchAlgorithmException, JSONException, WdkModelException,
            WdkUserException{
        // need to reset the cache first
        wdkModel.getResultFactory().getCacheFactory().resetCache(false, true);

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        String projectId = wdkModel.getProjectId();
        deleteCache(dataSource, projectId, schema);

        PreparedStatement psQuestion = null, psParam = null, psEnum = null;
        try{
            String sql = "INSERT INTO " + schema + "wdk_questions "
                    + "(question_id, question_name, project_id, "
                    + " question_checksum, query_checksum, record_class) "
                    + "VALUES (?, ?, ?, ?, ?, ?)";
            psQuestion = SqlUtils.getPreparedStatement(dataSource, sql);

            sql = "INSERT INTO " + schema + "wdk_params (param_id, "
                    + " question_id, param_name, param_type, record_class) "
                    + "VALUES (?, ?, ?, ?, ?)";
            psParam = SqlUtils.getPreparedStatement(dataSource, sql);

            sql = "INSERT INTO " + schema + "wdk_enum_params "
                    + "(param_id, param_value) VALUES (?, ?)";
            psEnum = SqlUtils.getPreparedStatement(dataSource, sql);

            int length = schema.length();
            String s = (length == 0) ? null : schema.substring(0, length - 1);

            for (QuestionSet questionSet : wdkModel.getAllQuestionSets()){
                for (Question question : questionSet.getQuestions()){
                    saveQuestion(question, psQuestion, psParam, psEnum, s);}}}
        finally{
            SqlUtils.closeStatement(psQuestion);
            SqlUtils.closeStatement(psParam);
            SqlUtils.closeStatement(psEnum);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o0ce28e05d59e4760a375e46cf239a3df561" name="dropTables" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        String[ sequences = new String[{ "wdk_questions_pkseq",
                "wdk_params_pkseq"};
        for (String sequence : sequences){
            try{
                SqlUtils.executeUpdate(wdkModel, dataSource, "DROP SEQUENCE "
                        + schema + sequence, "wdk-drop-sequence");}
            catch (Exception ex){
                ex.printStackTrace();}}
        String[ tables = new String[{ "wdk_enum_params", "wdk_params",
                "wdk_questions"};
        for (String table : tables){
            try{
                SqlUtils.executeUpdate(wdkModel, dataSource, "DROP TABLE "
                        + schema + table, "wdk-drop-table");}
            catch (Exception ex){
                ex.printStackTrace();}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o8eafbcf29eb047faaf12d72829eaff01561" name="createTables" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException, WdkUserException{
        DBPlatform platform = wdkModel.getUserPlatform();
        DataSource dataSource = platform.getDataSource();

        int length = schema.length();
        String s = (length == 0) ? null : schema.substring(0, length - 1);

        if (!platform.checkTableExists(s, "wdk_questions"))
            createQuestionTable(wdkModel, dataSource, schema);
        if (!platform.checkTableExists(s, "wdk_params"))
            createParamTable(wdkModel, dataSource, schema);
        if (!platform.checkTableExists(s, "wdk_enum_params"))
            createEnumParamTable(wdkModel, dataSource, schema);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6d337090cb4749899543ed08b7b0fcb3562" name="createQuestionTable" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        // create sequence
        String sql = "CREATE SEQUENCE " + schema + "wdk_questions_pkseq "
                + "INCREMENT BY 1 START WITH 1";
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, "wdk-create-sequence");

        // create table
        sql = "CREATE TABLE " + schema + "wdk_questions "
                + "(question_id NUMBER(12) NOT NULL, "
                + "question_name VARCHAR(200) NOT NULL, "
                + "project_id VARCHAR(50) NOT NULL, "
                + "question_checksum  VARCHAR(40) NOT NULL, "
                + "query_checksum  VARCHAR(40) NOT NULL, "
                + "record_class  VARCHAR(200) NOT NULL, "
                + "CONSTRAINT wdk_questions_pk PRIMARY KEY (question_id), "
                + "CONSTRAINT wdk_questions_uq1 "
                + "  UNIQUE (project_id, question_name) )";
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, "wdk-create-table");

        // create index
        sql = "CREATE INDEX " + schema + "wdk_questions_idx01 "
                + "ON wdk_questions (question_checksum)";
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, "wdk-create-index");}</source-code>
          </source-codes>
        </operation>
        <operation id="o92315307dbdc42c6ba1f90d2da880547562" name="createParamTable" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        // create sequence
        String sql = "CREATE SEQUENCE " + schema + "wdk_params_pkseq "
                + "INCREMENT BY 1 START WITH 1";
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, "wdk-create-sequence");

        // create table
        sql = "CREATE TABLE "
                + schema
                + "wdk_params ( "
                + "param_id NUMBER(12) NOT NULL, "
                + "question_id NUMBER(12) NOT NULL, "
                + "param_name VARCHAR(200) NOT NULL, "
                + "param_type VARCHAR(200) NOT NULL, "
                + "record_class VARCHAR(200), "
                + "CONSTRAINT wdk_params_pk PRIMARY KEY (param_id), "
                + "CONSTRAINT wdk_params_question_id_fk FOREIGN KEY (question_id) "
                + "  REFERENCES wdk_questions (question_id), "
                + "CONSTRAINT wdk_params_uq1 UNIQUE (question_id, param_name) )";
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, "wdk-create-table");

        // create index
        sql = "CREATE INDEX " + schema + "wdk_params_idx01 "
                + "ON wdk_params (param_type)";
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, "wdk-create-index");}</source-code>
          </source-codes>
        </operation>
        <operation id="off0d703261354cbd81c8242e08b0ff7c562" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        // create table
        String sql = "CREATE TABLE " + schema + "wdk_enum_params ( "
                + "param_id NUMBER(12) NOT NULL, "
                + "param_value  VARCHAR(1000) NOT NULL, "
                + "CONSTRAINT wdk_enum_params_fk01 FOREIGN KEY (param_id) "
                + "   REFERENCES wdk_params (param_id) )";
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, "wdk-create-table");

        // create index
        sql = "CREATE INDEX " + schema + "wdk_enum_params_idx01 "
                + "ON wdk_enum_params (param_id, param_value)";
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, "wdk-create-index");}</source-code>
          </source-codes>
        </operation>
        <operation id="o0091357d67a9459c9da39d1c234feaa8562" name="deleteCache" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        // delete enum_param values
        PreparedStatement psEnums = null, psParams = null, psQuestions = null;
        try{
            // delete enum params
            String sql = "DELETE FROM " + schema + "wdk_enum_params "
                    + "WHERE param_id IN "
                    + "(SELECT param_id FROM wdk_params p, wdk_questions q "
                    + " WHERE p.question_id = q.question_id "
                    + " AND project_id = ?)";
            psEnums = SqlUtils.getPreparedStatement(dataSource, sql);
            psEnums.setString(1, projectId);
            psEnums.executeUpdate();

            // delete params
            sql = "DELETE FROM " + schema + "wdk_params WHERE question_id IN "
                    + "(SELECT question_id FROM wdk_questions "
                    + "WHERE project_id = ?)";
            psParams = SqlUtils.getPreparedStatement(dataSource, sql);
            psParams.setString(1, projectId);
            psParams.executeUpdate();

            // delete questions
            sql = "DELETE FROM " + schema + "wdk_questions "
                    + "WHERE project_id = ?";
            psQuestions = SqlUtils.getPreparedStatement(dataSource, sql);
            psQuestions.setString(1, projectId);
            psQuestions.executeUpdate();}
        finally{
            SqlUtils.closeStatement(psEnums);
            SqlUtils.closeStatement(psParams);
            SqlUtils.closeStatement(psQuestions);}}

    private void saveQuestion(Question question, PreparedStatement psQuestion,
            PreparedStatement psParam, PreparedStatement psEnum,
            String schemaWithoutDot) throws NoSuchAlgorithmException,
            JSONException, WdkModelException, SQLException, WdkUserException {
        logger.debug("Caching question [" +</source-code>
          </source-codes>
        </operation>
        <operation id="o2cdd299e97ed437d83751a370e45e598562" name="question.getFullName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> + "]...");
        WdkModel wdkModel = question.getWdkModel();
        DBPlatform platform = wdkModel.getUserPlatform();

        int questionId = platform.getNextId(schemaWithoutDot, "wdk_questions");
        psQuestion.setInt(1, questionId);
        psQuestion.setString(2, question.getFullName());
        psQuestion.setString(3, wdkModel.getProjectId());
        psQuestion.setString(4, question.getQuery().getChecksum(false));
        psQuestion.setString(5, question.getQuery().getChecksum(true));
        psQuestion.setString(6, question.getRecordClass().getFullName());
        psQuestion.executeUpdate();

        // save the params
        for (Param param : question.getParams()){
            saveParam(wdkModel, question, param, questionId, psParam, psEnum,
                    schemaWithoutDot);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di892557716607671227" cid="C408" type="class" name="OrganismUpdater" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:23">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="obd930682ae434fe89af0e0cf093916c1673" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            SQLException, IOException, JSONException{
        if (args.length != 2){
            System.err.println("Usage: organismUpdater &lt;project_id&gt; &lt;map_file&gt;");
            System.exit(-1);}
        OrganismUpdater updater = new OrganismUpdater(args[0, args[1);
        updater.update();}

    private final String projectId;
    private final WdkModel wdkModel;
    private final String userSchema;
    private final String wdkSchema;
    private final Map&lt;String, String&gt; mappings;</source-code>
          </source-codes>
        </operation>
        <operation id="oc26a62450e3247c7ab8080d9b6f8f4e4673" name="OrganismUpdater" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="mapFile" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, IOException{
        this.projectId = projectId;
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        wdkModel = WdkModel.construct(projectId, gusHome);
        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        userSchema = userDB.getUserSchema();
        wdkSchema = userDB.getWdkEngineSchema();
        mappings = loadMapFile(mapFile);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa0ac698d79e24d839abd8e5363ae8e47673" name="loadMapFile" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="fileName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        BufferedReader reader = new BufferedReader(new FileReader(new File(
                fileName)));
        Map&lt;String, String&gt; mappings = new HashMap&lt;String, String&gt;();
        String line;
        while ((line = reader.readLine()) != null){
            line = line.trim();
            if (line.length() == 0) continue;
            String[ parts = line.split("=", 2);
            mappings.put(parts[0.trim(), parts[1.trim());}
        reader.close();
        return mappings;}</source-code>
          </source-codes>
        </operation>
        <operation id="o685531c96d2a4c4f872e8ac50f811627673" name="update" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, JSONException{
        Set&lt;String&gt; clobKeys = new HashSet&lt;String&gt;();
        updateStepParams(clobKeys);
        updateClobValues(clobKeys);}</source-code>
          </source-codes>
        </operation>
        <operation id="oafa71b9403074182abcb6eb9a8b42aa0673" name="updateStepParams" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="clobKeys" type="Set" type-id="Set" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            JSONException{
        logger.info("Checking step params...");

        DBPlatform platform = wdkModel.getUserPlatform();
        DataSource dataSource = platform.getDataSource();
        PreparedStatement psSelect = null, psUpdate = null;
        ResultSet resultSet = null;
        String select = "SELECT s.step_id, s.display_params            "
                + " FROM " + userSchema + "users u, " + userSchema
                + "steps s, " + wdkSchema + "answers a "
                + " WHERE u.is_guest = 0 AND u.user_id = s.user_id "
                + "   AND s.answer_id = a.answer_id AND a.project_id = ?";
        String update = "UPDATE " + userSchema + "steps "
                + " SET display_params = ? WHERE step_id = ?";
        try{
            psSelect = SqlUtils.getPreparedStatement(dataSource, select);
            psUpdate = SqlUtils.getPreparedStatement(dataSource, update);
            psSelect.setString(1, projectId);
            resultSet = psSelect.executeQuery();
            int count = 0;
            int stepCount = 0;
            while (resultSet.next()){
                stepCount++;
                if (stepCount % 1000 == 0){
                    logger.debug(stepCount + " steps read");}

                int stepId = resultSet.getInt("step_id");
                String content = platform.getClobData(resultSet,
                        "display_params");
                if (content == null || content.trim().length() == 0) continue;
                if (content.replaceAll("\\s", "").equals("{}")) continue;
                
                JSONObject jsParams = new JSONObject(content);
                if (changeParams(jsParams, clobKeys)){
                    content = jsParams.toString();
                    platform.setClobData(psUpdate, 1, content, false);
                    psUpdate.setInt(2, stepId);
                    psUpdate.addBatch();
                    count++;
                    if (count % 100 == 0) psUpdate.executeBatch();}
                if (count % 100 != 0) psUpdate.executeBatch();}}
        catch (SQLException ex){
            logger.error(ex);
            throw ex;}
        finally{
            SqlUtils.closeResultSet(resultSet);
            SqlUtils.closeStatement(psUpdate);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oefb0b1c973204542a8251b6bbadedb82673" name="changeParams" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="jsParams" type="JSONObject" type-id="JSONObject" default-value="" />
            <parameter id="" name="clobKeys" type="Set" type-id="Set" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException{
        boolean updated = false;
        for (String name : JSONObject.getNames(jsParams)){
            if (name.equals(PARAM_ORGANISM)){
                String organisms = jsParams.getString(name);
                if (organisms.startsWith("[C]")){ // compressed values
                    String clobKey = organisms.substring(3);
                    clobKeys.add(clobKey);} else{ // uncompressed values
                    StringBuilder buffer = new StringBuilder();
                    for (String organism : organisms.split("\\s*,\\s*")){
                        if (mappings.containsKey(organism)){
                            organism = mappings.get(organism);
                            updated = true;}
                        if (buffer.length() &gt; 0) buffer.append(',');
                        buffer.append(organism);}
                    jsParams.put(name, buffer.toString());}}}
        return updated;}</source-code>
          </source-codes>
        </operation>
        <operation id="o82b37f25d1d04cd99aefb5d150b7390a673" name="updateClobValues" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="clobKeys" type="Set" type-id="Set" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        logger.info("Checking clob values...");
        DBPlatform platform = wdkModel.getUserPlatform();
        DataSource dataSource = platform.getDataSource();
        PreparedStatement psSelect = null, psUpdate = null;
        String select = "SELECT clob_value FROM " + wdkSchema + "clob_values "
                + " WHERE clob_checksum = ?";
        String update = "UPDATE " + wdkSchema + "clob_values "
                + " SET clob_value = ? WHERE clob_checksum = ?";
        try{
            int count = 0;
            int clobCount = 0;
            psSelect = SqlUtils.getPreparedStatement(dataSource, select);
            psUpdate = SqlUtils.getPreparedStatement(dataSource, update);
            for (String clobKey : clobKeys){
                psSelect.setString(1, clobKey);
                ResultSet resultSet = psSelect.executeQuery();
                while (resultSet.next()){
                    String content = platform.getClobData(resultSet,
                            "clob_value");
                    StringBuilder buffer = new StringBuilder(content);
                    if (changeClobs(buffer)){
                        platform.setClobData(psUpdate, 1, buffer.toString(),
                                false);
                        psUpdate.setString(2, clobKey);
                        psUpdate.addBatch();
                        count++;
                        if (count % 100 == 0) psUpdate.executeBatch();}
                    if (count % 100 != 0) psUpdate.executeBatch();

                    clobCount++;
                    if (clobCount % 1000 == 0){
                        logger.debug(clobCount + " clobs read.");}}
                resultSet.close();}}
        catch (SQLException ex){
            throw ex;}
        finally{
            SqlUtils.closeStatement(psSelect);
            SqlUtils.closeStatement(psUpdate);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o02d0f2db7f134fb09c62bc6565b5b917673" name="changeClobs" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="content" type="StringBuilder" type-id="StringBuilder" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        boolean updated = false;
        StringBuilder buffer = new StringBuilder();
        for (String organism : content.toString().split("\\s*,\\s*")){
            if (mappings.containsKey(organism)){
                organism = mappings.get(organism);
                updated = true;}
            if (buffer.length() &gt; 0) buffer.append(',');
            buffer.append(organism);}
        if (updated) content.replace(0, content.length(), buffer.toString());
        return updated;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di542088659262185641" cid="C409" type="class" name="QuestionChecksumUpdater" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:25">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o1e5ad3f360b849ccba32ba7e092b1d12844" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        QuestionChecksumUpdater updater = new QuestionChecksumUpdater(cmdName);
        try{
            updater.invoke(args);} finally{
            logger.info("question checksum updated.");
            System.exit(0);}}

    /**
     * @param command
     * @param description
     */
    protected</source-code>
          </source-codes>
        </operation>
        <operation id="odb09d24e48a14d348ee735666359cb4b844" name="QuestionChecksumUpdater" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command == null) ? command : "answerChecksumUpdater",
                "Update the question checksum stored in answer table to the"
                        + " latest version from model");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#declareOptions()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o464597728f7741c89a6a1624619fbe56844" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "A comma-separated"
                + " list of ProjectIds, which should match the directory name "
                + "under $GUS_HOME, where model-config.xml is stored.");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#execute()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o1406a0276f6e4413b9ac6c5a5613ffc2844" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        String strProject = (String) getOptionValue(ARG_PROJECT_ID);
        String[ projects = strProject.split(",");
        for (String projectId : projects){
            logger.info("Updating question checksum for project " + projectId);
            WdkModel wdkModel = WdkModel.construct(projectId, gusHome);

            updateChecksum(wdkModel);
            // copyParams(wdkModel);
        }
    }

    public void updateChecksum(WdkModel wdkModel)
            throws NoSuchAlgorithmException, JSONException, WdkModelException,
            SQLException{
        PreparedStatement psUpdate = null;
        try{
            psUpdate = prepareUpdate(wdkModel);
            for (QuestionSet questionSet : wdkModel.getAllQuestionSets()){
                for (Question question : questionSet.getQuestions()){
                    String questionName = question.getFullName();
                    String checksum = question.getQuery().getChecksum(false);
                    psUpdate.setString(1, checksum);
                    psUpdate.setString(2, questionName);
                    psUpdate.setString(3, wdkModel.getProjectId());
                    psUpdate.addBatch();}}
            psUpdate.executeBatch();} finally{
            SqlUtils.closeStatement(psUpdate);}}

    private PreparedStatement prepareUpdate(WdkModel wdkModel)
            throws SQLException{
        StringBuffer sql = new StringBuffer("UPDATE ");
        sql.append(wdkModel.getModelConfig().getUserDB().getWdkEngineSchema());
        sql.append("answers SET old_query_checksum = query_checksum, ");
        sql.append(" query_checksum = ? WHERE question_name = ? ");
        sql.append(" AND project_id = ? AND old_query_checksum IS NULL");
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        return SqlUtils.getPreparedStatement(dataSource, sql.toString());}

    public void copyParams(WdkModel wdkModel) throws SQLException,
            WdkUserException, WdkModelException{
        PreparedStatement psUpdate = null;
        ResultSet rsHistory = null;
        DBPlatform platform = wdkModel.getUserPlatform();
        DataSource dataSource = platform.getDataSource();

        try{
            rsHistory = SqlUtils.executeQuery(wdkModel, dataSource, "SELECT "
                    + "     h.history_id, h.user_id, a.params "
                    + "FROM userlogins3.histories h, userlogins3.users u, "
                    + "     wdkstorage.answer a  "
                    + "WHERE u.is_guest = 0 AND u.user_id = h.user_id "
                    + "  AND h.answer_id = a.answer_id "
                    + "  AND length(h.display_params) = 0 ",
                    "wdk-select-history");
            psUpdate = SqlUtils.getPreparedStatement(dataSource, "UPDATE "
                    + "  userlogins3.histories SET display_params = ? "
                    + "WHERE user_id = ? AND history_id = ? ");

            int count = 0;
            while (rsHistory.next()){
                int historyId = rsHistory.getInt("history_id");
                int userId = rsHistory.getInt("user_id");
                String params = platform.getClobData(rsHistory, "params");

                platform.setClobData(psUpdate, 1, params, false);
                psUpdate.setInt(2, userId);
                psUpdate.setInt(3, historyId);
                psUpdate.executeUpdate();

                count++;
                if (count % 100 == 0)
                    logger.debug(count + " history params updated.");}
            logger.info("totally updated " + count + " history params.");} finally{
            SqlUtils.closeResultSet(rsHistory);
            SqlUtils.closeStatement(psUpdate);}}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di584862456223808728" cid="C410" type="class" name="StepCountUpdater" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:28">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a49ef4b48d74c4c07ac5714944dd7872b839" name="writer" type="PrintWriter" type-id="PrintWriter" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a8bdd079c44854c4094699218b386b48a840" name="completedSteps" type="Set&lt;Integer&gt;" type-id="Set&lt;Integer&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9eade75af851471c9aff418c7e1b68e7840" name="userIds" type="Stack&lt;Integer&gt;" type-id="Stack&lt;Integer&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a3db74afdde004e1f81d211012f53704c840" name="wdkModels" type="WdkModel[]" type-id="WdkModel[]" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a2e4b288b36a34fd4a7dc8da942f39302840" name="totalUsers" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o45117e2321e34a14babb87581c462cef839" name="main" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        StepCountUpdater updater = new StepCountUpdater(cmdName);
        try{
            updater.invoke(args);} catch (RuntimeException ex){
            ex.printStackTrace();
            throw ex;} catch (Exception ex){
            ex.printStackTrace();
            throw ex;} finally{
            logger.info("step count updater done.");
            System.exit(0);}}{</source-code>
          </source-codes>
        </operation>
        <operation id="o0ad094897fa042e5be4b7341c92ecf10840" name="StepCountUpdater" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command != null) ? command : "wdkUpdateStepCount",
                "Update the result count for valid steps");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#declareOptions()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of68c4b6d86d34a8e873edbdab312377f840" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "A comma-separated"
                + " list of ProjectIds, which should match the directory name"
                + " under $GUS_HOME, where model-config.xml is stored.");
        addSingleValueOption(ARG_COMPLETE_ID_FILE, true, null,
                "a file to store the step ids that have been processed.");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#execute()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o141e77d0e2c94ee694779557fdd2e542840" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String idFileName = (String) getOptionValue(ARG_COMPLETE_ID_FILE);
        File idFile = new File(idFileName);
        if (!idFile.exists()) idFile.createNewFile();

        loadCompletedSteps(idFile);
        loadModels();
        loadUserIds(wdkModels[0);

        this.writer = new PrintWriter(new FileWriter(idFile, true));

        StepRunner[ runners = new StepRunner[RUNNER_COUNT;
        try{
            for (int i = 0; i &lt; RUNNER_COUNT; i++){
                StepRunner runner = new StepRunner(this);
                runner.start();
                runners[i = runner;}
            boolean finished = false;
            while (!finished){
                finished = true;
                for (StepRunner runner : runners){
                    if (!runner.finished){
                        finished = false;
                        break;}}
                if (!finished) Thread.sleep(1000);}} finally{
            writer.close();}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob1bed730795848c7976fe541d2e312c0840" name="loadCompletedSteps" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="idFile" type="File" type-id="File" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws NumberFormatException,
            IOException{
        completedSteps = new HashSet&lt;Integer&gt;();
        BufferedReader reader = new BufferedReader(new FileReader(idFile));
        String line;
        while ((line = reader.readLine()) != null){
            line = line.trim();
            if (line.length() == 0) continue;
            completedSteps.add(Integer.parseInt(line));}
        reader.close();}</source-code>
          </source-codes>
        </operation>
        <operation id="ob6b25d74a0f4437fa593b97ffa6ce4fb840" name="loadUserIds" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkUserException, WdkModelException{
        ModelConfigUserDB userDb = wdkModel.getModelConfig().getUserDB();
        String userSchema = userDb.getUserSchema();
        String sql = "SELECT DISTINCT u.user_id FROM " + userSchema
                + "users u, " + userSchema + "steps s "
                + " WHERE u.is_guest = 0 AND u.user_id = s.user_id "
                + " AND s.is_deleted = 0";
        this.userIds = new Stack&lt;Integer&gt;();
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        ResultSet resultSet = null;
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                    "wdk-select-users");
            while (resultSet.next()){
                int userId = resultSet.getInt("user_id");
                userIds.push(userId);}} finally{
            SqlUtils.closeResultSet(resultSet);}
        this.totalUsers = userIds.size();}</source-code>
          </source-codes>
        </operation>
        <operation id="od835e0a4492f4828ac7eb2bf2515bbbb840" name="loadModels" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, WdkUserException,
            ParserConfigurationException, TransformerFactoryConfigurationError,
            TransformerException, IOException, SAXException, SQLException,
            JSONException, InstantiationException, IllegalAccessException,
            ClassNotFoundException{
        String projectIds = (String) getOptionValue(ARG_PROJECT_ID);
        String[ projects = projectIds.split(",");

        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);
        List&lt;WdkModel&gt; models = new ArrayList&lt;WdkModel&gt;();
        for (String projectId : projects){
            WdkModel wdkModel = WdkModel.construct(projectId, gusHome);
            models.add(wdkModel);}
        this.wdkModels = new WdkModel[models.size();
        models.toArray(this.wdkModels);}

    synchronized boolean isCompleted(int stepId){
        return completedSteps.contains(stepId);}

    synchronized int getUserId(){
        return</source-code>
          </source-codes>
        </operation>
        <operation id="ob65515d381eb46b7a5d7b19268bc100c840" name="userIds.isEmpty" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> ? 0 : userIds.pop();</source-code>
          </source-codes>
        </operation>
        <operation id="o6791697e15e3458fb7f2d2e8eb29e080840" name="writer.flush" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes />
        </operation>
        <operation id="o9af17bbd38844b45a6e376ddd1f4cb6e840" name="userIds.size" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes />
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di358997956444760321" cid="C411" type="class" name="StepRunner" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:28">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab8922e0482fe4e29bf211d2812990d3c839" name="updater" type="StepCountUpdater" type-id="StepCountUpdater" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a58e107a7cefd4f1bacf65a93db746d71839" name="finished" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="of0622e39225a4fb588c37d52ffd571e5839" name="StepRunner" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="updater" type="StepCountUpdater" type-id="StepCountUpdater" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.updater = updater;}

        @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o63fc80be1b464926b5ecf38d26f2ea3d839" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            while (true){
                int userId = updater.getUserId();
                if (userId == 0) break;

                String count = updater.getUserCount() + "/" + totalUsers;
                logger.info("process steps for user #" + userId + " - " + count);

                for (WdkModel wdkModel : updater.wdkModels){
                    try{
                        User user = wdkModel.getUserFactory().getUser(userId);
                        updateSteps(wdkModel, user);} catch (Exception ex){
                        ex.printStackTrace();
                        throw new RuntimeException(ex);}}}
            finished = true;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3c503a09a80b4390820cf40891f62a94839" name="updateSteps" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="user" type="User" type-id="User" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
                throws WdkUserException, NoSuchAlgorithmException,
                WdkModelException, SQLException, JSONException{
            Map&lt;Integer, Step&gt; steps = user.getStepsMap();
            for (Step step : steps.values()){
                int internalId = step.getInternalId();
                if (completedSteps.contains(internalId)) continue;

                // just need to process valid steps
                if (step.isValid()){
                    try{
                        step.getResultSize();} catch (Exception ex){
                        step.setValid(false);} finally{
                        step.update(false);}}
                updater.recordStep(internalId);}}}

    /**
     * @param command
     * @param description
     */
    public</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di699740363767007245" cid="C412" type="class" name="StepParamExpander" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:31">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o7ad0233b61e043a4951e4c70e05f9515623" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        StepParamExpander expender = new StepParamExpander(cmdName);
        try{
            expender.invoke(args);} catch (Exception ex){
            ex.printStackTrace();
            throw ex;} finally{
            logger.info("step params expanded.");
            System.exit(0);}}

    /**
     * @param command
     * @param description
     */
    protected</source-code>
          </source-codes>
        </operation>
        <operation id="o26c112322bbf49e9b24e4f3d350cb8a4623" name="StepParamExpander" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command != null) ? command : "stepParamExpander",
                "expand the param clob into its own rows in step_params table");}</source-code>
          </source-codes>
        </operation>
        <operation id="o815adb6a18d1427c9f1392a0fc3fd67d623" name="expand" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            NoSuchAlgorithmException, JSONException, WdkModelException,
            WdkUserException{

        ResultSet resultSet = null;
        PreparedStatement psInsert = null;
        try{
            createParamTable(wdkModel);

            String schema = wdkModel.getModelConfig().getUserDB()
                    .getUserSchema();
            resultSet = prepareSelect(wdkModel, schema);
            psInsert = prepareInsert(wdkModel);
            DBPlatform platform = wdkModel.getUserPlatform();

            int count = 0;
            while (resultSet.next()){
                int stepId = resultSet.getInt("step_id");
                String clob = platform.getClobData(resultSet, "display_params");

                if (clob == null)
                    continue;
                clob = clob.trim();
                if (!clob.startsWith("{"))
                    continue;

                List&lt;String[&gt; values = parseClob(wdkModel, clob);

                // insert the values
                for (String[ pair : values){
                    String paramName = pair[0.trim();
                    String paramValue = pair[1.trim();

                    psInsert.setInt(1, stepId);
                    psInsert.setString(2, paramName);
                    psInsert.setString(3, paramValue);
                    psInsert.addBatch();}
                psInsert.executeBatch();

                count++;
                if (count % 100 == 0)
                    logger.debug(count + " steps processed.");}
            logger.info("Totally processed " + count + " steps.");} finally{
            SqlUtils.closeResultSet(resultSet);
            SqlUtils.closeStatement(psInsert);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oc51b5f77f8c24003ae62fab77f295bed623" name="createParamTable" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException{
        DBPlatform platform = wdkModel.getUserPlatform();
        DataSource dataSource = platform.getDataSource();

        // check if table exists
        String schema = "";
        int length = schema.length();
        String s = (length == 0) ? null : schema.substring(0, length - 1);
        if (platform.checkTableExists(s, "step_params"))
            return;

        SqlUtils.executeUpdate(wdkModel, dataSource, "CREATE TABLE " + schema
                + "step_params ( step_id NUMBER(12) NOT NULL, "
                + " param_name VARCHAR(200) NOT NULL, "
                + " param_value VARCHAR(4000), migration NUMBER(12))",
                "wdk-create-table");

        SqlUtils.executeUpdate(wdkModel, dataSource, "CREATE INDEX " + schema
                + "step_params_idx02 ON step_params (step_id, param_name)",
                "wdk-create-indx");}</source-code>
          </source-codes>
        </operation>
        <operation id="oa65f4060c99a47639af14909fd98db68623" name="prepareSelect" type="ResultSet" type-id="ResultSet" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String user = userDB.getUserSchema() + "users";
        String step = userDB.getUserSchema() + "steps";
        String answer = userDB.getWdkEngineSchema() + "answers";
        StringBuffer sql = new StringBuffer("SELECT ");
        sql.append(" s.step_id, s.display_params FROM ");
        sql.append(step + " s, (SELECT DISTINCT s.step_id, a.question_name ");
        sql.append(" FROM " + step + " s, " + answer + " a, " + user + " u, ");
        sql.append("  (SELECT step_id FROM " + step);
        sql.append("   MINUS ");
        sql.append("   SELECT step_id FROM " + schema + "step_params) sm ");
        sql.append(" WHERE s.step_id = sm.step_id ");
        sql.append("   AND s.user_id = u.user_id AND u.is_guest = 0 ");
        sql.append("   AND s.answer_id = a.answer_id) sp ");
        sql.append(" WHERE s.step_id = sp.step_id ");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        return SqlUtils.executeQuery(wdkModel, dataSource, sql.toString(),
                "wdk-select-step-params");}</source-code>
          </source-codes>
        </operation>
        <operation id="o569ed34df58d4c548e656cd5eba11fd6623" name="prepareInsert" type="PreparedStatement" type-id="PreparedStatement" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException{
        String schema = "";
        StringBuffer sql = new StringBuffer("INSERT INTO ");
        sql.append(schema + "step_params ");
        sql.append(" (step_id, param_name, param_value) "
                + "  VALUES (?, ?, ?)");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        return SqlUtils.getPreparedStatement(dataSource, sql.toString());}</source-code>
          </source-codes>
        </operation>
        <operation id="oc35369ed1ede496d9a6dc4fa48c83ec3623" name="parseClob" type="List&lt;String[]&gt;" type-id="List&lt;String[]&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="clob" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws JSONException, NoSuchAlgorithmException, WdkModelException,
            WdkUserException, SQLException{
        StepFactory stepFactory = wdkModel.getStepFactory();
        QueryFactory queryFactory = wdkModel.getQueryFactory();
        Map&lt;String, String&gt; values = stepFactory.parseParamContent(clob);
        List&lt;String[&gt; newValues = new ArrayList&lt;String[&gt;();
        for (String paramName : values.keySet()){
            String value = values.get(paramName);
            String prefix = Utilities.PARAM_COMPRESSE_PREFIX;
            if (value.startsWith(prefix)){
                String checksum = value.substring(prefix.length()).trim();
                String decompressed = queryFactory.getClobValue(checksum);
                if (decompressed != null)
                    value = decompressed;}
            String[ terms = value.split(",");
            for (String term : terms){
                if (term.length() &gt; 4000)
                    term = term.substring(0, 4000);
                newValues.add(new String[{ paramName, term});}}
        return newValues;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#declareOptions()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe8727e49af574fbfaa77b525c59bb3e0623" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "ProjectId, which"
                + " should match the directory name under $GUS_HOME, where"
                + " model-config.xml is stored.");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#execute()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa88b8acbcded4ef39d52911ff88eda04623" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        String projectId = (String) getOptionValue(ARG_PROJECT_ID);

        WdkModel wdkModel = WdkModel.construct(projectId, gusHome);

        // expand step params
        logger.info("Expanding params...");
        expand(wdkModel);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di543982249521782026" cid="C413" type="class" name="StepValidator" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:42">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o22e937a11c114117a7f8b5e68f3977b5986" name="main" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        StepValidator validator = new StepValidator(cmdName);
        try{
            validator.invoke(args);}
        catch (Exception ex){
            ex.printStackTrace();
            throw ex;}
        finally{
            logger.info("step validator done.");
            System.exit(0);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o4d12750462d543e0b4ca736a6e4e5bca986" name="StepValidator" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command == null) ? command : "wdkValidateStep",
                "store model information into database");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#declareOptions()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7a1503c2bd8b4881b764a5e9914851fd986" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "a list of project "
                + "ids, The first one will be used to open connection, "
                + "therefore, the model-config.xml &amp; model.prop must be "
                + "present in $GUS_HOME/config. The validator will only "
                + "validate the strategies/steps of the given projects.");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#execute()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7ffb824f538b4f92af5137880ea9e338986" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        String projects = (String) getOptionValue(ARG_PROJECT_ID);
        logger.info("Validate steps &amp; answers for all projects: " + projects);

        String[ projectIds = projects.replace("'", "''").split("\\s*,\\s*");
        WdkModel wdkModel = WdkModel.construct(projectIds[0, gusHome);

        // parse project ids and add single quotes.
        StringBuilder buffer = new StringBuilder();
        for (String projectId : projectIds){
            if (buffer.length() &gt; 0) buffer.append(",");
            buffer.append("'").append(projectId).append("'");}
        projects = "(" + buffer.toString() + ")";

        dropDanglingSteps(wdkModel, projects);
        deleteInvalidParams(wdkModel);

        resetFlags(wdkModel, projects);
        detectQuestions(wdkModel, projects);
        detectParams(wdkModel, projects);
        detectEnumParams(wdkModel, projects);

        flagSteps(wdkModel, projects);
        flagDependentSteps(wdkModel, projects);}</source-code>
          </source-codes>
        </operation>
        <operation id="o6eb951e62d9240f489282389ce10ddfe986" name="resetFlags" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="projects" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        logger.debug("resetting is_valid flags...");
        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String userSchema = userDB.getUserSchema();
        String wdkSchema = userDB.getWdkEngineSchema();

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();

        // &lt;ADD-AG 042911&gt;
        resetByBatch(wdkModel, dataSource, "UPDATE " + wdkSchema + "answers "
                + " SET is_valid = NULL WHERE project_id IN " + projects,
                "wdk-reset-answer-flag");

        // &lt;ADD-AG 042911&gt;
        resetByBatch(wdkModel, dataSource, "UPDATE " + userSchema + "steps "
                + " SET is_valid = NULL WHERE answer_id IN "
                + " (SELECT answer_id FROM " + wdkSchema + "answers "
                + "  WHERE project_id IN " + projects + ")",
                "wdk-reset-step-flag");}</source-code>
          </source-codes>
        </operation>
        <operation id="oad812b9cc9fe4f8ca22b25080bf56099986" name="detectQuestions" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="projects" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        logger.debug("detecting invalid questions...");

        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String answer = userDB.getWdkEngineSchema() + "answers";
        DataSource source = wdkModel.getUserPlatform().getDataSource();

        // &lt;ADD-AG 042911&gt; ----------------------------------------------------
        String sql = "UPDATE " + answer
                + " SET is_valid = 0 WHERE answer_id IN "
                + "  (SELECT a.answer_id FROM " + answer + " a, "
                + "    (SELECT project_id, question_name FROM " + answer
                + "     MINUS "
                + "     SELECT project_id, question_name FROM wdk_questions) d"
                + "   WHERE a.project_id = d.project_id"
                + "     AND a.question_name = d.question_name"
                + "     AND a.project_id IN " + projects
                + "     AND a.is_valid IS NULL)";

        executeByBatch(wdkModel, source, sql, "ANSWER:wdk-invalidate-question",
                null, null);}</source-code>
          </source-codes>
        </operation>
        <operation id="obcdff59d7ccf44fca559e6c7d572278d986" name="detectParams" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="projects" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        logger.debug("detecting invalid params...");

        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String answer = userDB.getWdkEngineSchema() + "answers";
        String step = userDB.getUserSchema() + "steps";
        DataSource source = wdkModel.getUserPlatform().getDataSource();

        // &lt;ADD-AG 042911&gt; ----------------------------------------------------
        String sql = "UPDATE " + answer
                + " SET is_valid = 0 WHERE answer_id IN "
                + "(SELECT a.answer_id                 "
                + "    FROM step_params sp, " + answer + " a, " + step + " s, "
                + "     (SELECT a.project_id, a.question_name, sp.param_name "
                + "      FROM step_params sp, " + step + " s, " + answer + " a"
                + "      WHERE sp.step_id = s.step_id "
                + "        AND s.answer_id = a.answer_id "
                + "        AND a.is_valid IS NULL "
                + "      MINUS                  "
                + "      SELECT q.project_id, q.question_name, p.param_name "
                + "      FROM wdk_questions q, wdk_params p"
                + "      WHERE q.question_id = p.question_id) d "
                + "   WHERE a.project_id = d.project_id "
                + "     AND a.question_name = d.question_name "
                + "     AND a.project_id IN " + projects
                + "     AND a.answer_id = s.answer_id "
                + "     AND s.step_id = sp.step_id "
                + "     AND sp.param_name = d.param_name "
                + "     AND a.is_valid IS NULL)";

        executeByBatch(wdkModel, source, sql, "ANSWER:wdk-invalidate-param",
                null, null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o15b56419b49e452c90a4eac4780ef32a986" name="detectEnumParams" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="projects" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        logger.debug("detecting invalid enum params...");

        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String answer = userDB.getWdkEngineSchema() + "answers";
        String step = userDB.getUserSchema() + "steps";
        DataSource source = wdkModel.getUserPlatform().getDataSource();

        // &lt;ADD-AG 042911&gt; ----------------------------------------------------
        String sql = "UPDATE " + answer
                + " SET is_valid = 0 WHERE answer_id IN "
                + "(SELECT a.answer_id                 "
                + "    FROM step_params sp, " + answer + " a, " + step + " s, "
                + "     (SELECT a.project_id, a.question_name, "
                + "             sp.param_name, sp.param_value "
                + "      FROM step_params sp, " + step + " s, " + answer
                + "        a, wdk_questions q, wdk_params p "
                + "      WHERE sp.step_id = s.step_id "
                + "        AND s.answer_id = a.answer_id "
                + "        AND a.is_valid IS NULL "
                + "        AND a.project_id = q.project_id "
                + "        AND a.question_name = q.question_name "
                + "        AND q.question_id = p.question_id "
                + "        AND sp.param_name = p.param_name "
                + "        AND p.param_type IN ('EnumParam', 'FlatVocabParam')"
                + "      MINUS                  "
                + "      SELECT q.project_id, q.question_name, "
                + "             p.param_name, ep.param_value "
                + "      FROM wdk_questions q, wdk_params p, "
                + "           wdk_enum_params ep "
                + "      WHERE q.question_id = p.question_id "
                + "        AND p.param_id = ep.param_id) d "
                + "   WHERE a.project_id = d.project_id "
                + "     AND a.question_name = d.question_name "
                + "     AND a.project_id IN " + projects
                + "     AND a.answer_id = s.answer_id "
                + "     AND s.step_id = sp.step_id "
                + "     AND sp.param_name = d.param_name "
                + "     AND sp.param_value = d.param_value "
                + "     AND a.is_valid IS NULL)";

        executeByBatch(wdkModel, source, sql,
                "ANSWER:wdk-invalidate-enum-param", null, null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7ffb5bd7f6ba45f5a7f6b93f1d7cca6b986" name="flagSteps" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="projects" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        logger.debug("flagging invalid steps...");

        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String answer = userDB.getWdkEngineSchema() + "answers";
        String step = userDB.getUserSchema() + "steps";
        DataSource source = wdkModel.getUserPlatform().getDataSource();

        String sql = "UPDATE " + step + " SET is_valid = 0 "
                + "WHERE (is_valid IS NULL OR is_valid = 1) "
                + "  AND answer_id IN                         "
                + "    (SELECT answer_id FROM " + answer
                + "     WHERE is_valid = 0 AND project_id IN " + projects + ")";
        // mark invalid steps
        // &lt;ADD-AG 042911&gt;
        executeByBatch(wdkModel, source, sql, "STEP:wdk-invalidate-step", null,
                null);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7f484040feab4ea08510b455c37f7d11986" name="flagDependentSteps" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="projects" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException, SQLException{
        logger.debug("Flagging invalid dependent steps...");

        ModelConfigUserDB userDB = wdkModel.getModelConfig().getUserDB();
        String step = userDB.getUserSchema() + "steps";
        String answer = userDB.getWdkEngineSchema() + "answers";
        DataSource source = wdkModel.getUserPlatform().getDataSource();

        String tempTable = "wdk_part_steps";
   
        try{
        String sql = "CREATE TABLE " + tempTable + " NOLOGGING AS "
                + " (SELECT s.step_id, s.user_id, s.display_id, "
                + "         s.left_child_id, s.right_child_id, s.is_valid "
                + "  FROM " + step + " s, " + answer + " a                 "
                + "  WHERE s.answer_id = a.answer_id "
                + "    AND a.project_id IN " + projects
                + "    AND s.user_id IN  (SELECT user_id FROM " + step
                + "                     WHERE is_valid = 0) )";
        SqlUtils.executeUpdate(wdkModel, source, sql,
                "wdk-invalidate-create-part-steps");

        sql = "UPDATE " + step + " SET is_valid = 0 "
                + "WHERE step_id IN ( "
                + "    SELECT s.step_id "
                + "    FROM " + step + " s, " + answer + " a "
                + "    WHERE s.is_valid IS NULL "
                + "      AND s.answer_id = a.answer_id      "
                + "      AND a.project_id IN  " + projects
                + "      AND s.step_id IN                  "
                + "        (SELECT step_id FROM " + tempTable
                + "         START WITH is_valid = 0 "
                + "         CONNECT BY (prior display_id = right_child_id "
                + "                 OR prior display_id = left_child_id) "
                + "         AND prior user_id = user_id)"
                + "  )";

        // &lt;ADD-AG 042911&gt;
        executeByBatch(wdkModel, source, sql,
                "STEP:wdk-invalidate-parent-step", null, null);} finally{
             String sql = "DROP TABLE " + tempTable + " PURGE";
            SqlUtils.executeUpdate(wdkModel, source, sql,
                "wdk-invalidate-drop-part-steps");}}</source-code>
          </source-codes>
        </operation>
        <operation id="o65b449f57d98412ca7c40ab61da897c6987" name="deleteInvalidParams" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException, SQLException{
        logger.info("Deleting params which doesn't have a valid step...");
        String userSchema = wdkModel.getModelConfig().getUserDB().getUserSchema();

        StringBuilder sql = new StringBuilder("DELETE FROM ");
        sql.append("step_params WHERE step_id NOT IN ");
        sql.append("(SELECT step_id FROM " + userSchema + "steps)");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
                "wdk-delete-invalid-step-params");}</source-code>
          </source-codes>
        </operation>
        <operation id="o96236371cc944292854f2036e565379c987" name="dropDanglingSteps" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="projects" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException, SQLException,
            IOException{
        logger.info("drop dangling steps table and related resources...");

        String stepTable = "wdk_dangle_steps";
        String parentTable = "wdk_parent_steps";
        String strategyTable = "wdk_dangle_strategies";

        // drop the temp tables if exist
        DBPlatform platform = wdkModel.getUserPlatform();
        if (platform.checkTableExists(null, stepTable))
            platform.dropTable(null, stepTable, true);
        if (platform.checkTableExists(null, parentTable))
            platform.dropTable(null, parentTable, true);
        if (platform.checkTableExists(null, strategyTable))
            platform.dropTable(null, strategyTable, true);

        String schema = wdkModel.getModelConfig().getUserDB().getUserSchema();
        if (schema.length() &gt; 0 &amp;&amp; !schema.endsWith(".")) schema += ".";

        selectDanglingSteps(wdkModel, schema, stepTable, projects);
        selectParentSteps(wdkModel, schema, stepTable, parentTable);
        selectDanglingStrategies(wdkModel, schema, strategyTable, parentTable,
                projects);
        // save the dangling strategies into a file
        reportDanglingStrategies(wdkModel, strategyTable);
        deleteDanglingStrategies(wdkModel, schema, strategyTable);
        deleteDanglingSteps(wdkModel, schema, parentTable);

        // do not drop the temp tables immediately, need to investigate those
        // steps and strategies, and notify user.

        // DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        // SqlUtils.executeUpdate(wdkModel, dataSource, "DROP TABLE "
        // + parentTable + " PURGE", "wdk_drop_dangle_strategies");
        // SqlUtils.executeUpdate(wdkModel, dataSource, "DROP TABLE "
        // + stepTable + " PURGE", "wdk_drop_dangle_steps");
        // SqlUtils.executeUpdate(wdkModel, dataSource, "DROP TABLE "
        // + parentTable + " PURGE", "wdk_drop_parent_steps");
    }

    private void selectDanglingSteps(WdkModel wdkModel, String schema,
            String danglingTable, String projects) throws WdkUserException,
            WdkModelException, SQLException{
        logger.debug("looking for dangling steps...");

        String stepTable = schema + "steps";
        String wdkScheme = wdkModel.getModelConfig().getUserDB().getWdkEngineSchema();

        StringBuilder sql = new StringBuilder("CREATE TABLE ");
        sql.append(danglingTable + " AS ");
        sql.append("(SELECT s.step_id ");
        sql.append(" FROM " + stepTable + " s, " + wdkScheme + "answers a, ");
        sql.append("      ((SELECT s1.step_id ");
        sql.append("        FROM " + stepTable + " s1 ");
        sql.append("        LEFT JOIN " + stepTable + " s2 ");
        sql.append("          ON s1.user_id = s2.user_id");
        sql.append("          AND s1.left_child_id = s2.display_id ");
        sql.append("        WHERE s1.left_child_id IS NOT NULL ");
        sql.append("          AND s2.display_id IS NULL) ");
        sql.append("       UNION ");
        sql.append("       (SELECT s1.step_id  ");
        sql.append("        FROM " + stepTable + " s1 ");
        sql.append("        LEFT JOIN " + stepTable + " s2 ");
        sql.append("          ON s1.user_id = s2.user_id");
        sql.append("          AND s1.right_child_id = s2.display_id ");
        sql.append("        WHERE s1.right_child_id IS NOT NULL ");
        sql.append("          AND s2.display_id IS NULL) ");
        sql.append("      ) sd ");
        sql.append(" WHERE sd.step_id = s.step_id ");
        sql.append("   AND s.answer_id = a.answer_id");
        sql.append("   AND a.project_id IN " + projects + ")");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
                "wdk-create-dangling-step");}

    private void selectParentSteps(WdkModel wdkModel, String schema,
            String danglingTable, String parentTable) throws WdkUserException,
            WdkModelException, SQLException{
        logger.debug("looking for parents of dangling steps...");

        String stepTable = schema + "steps";

        StringBuilder sql = new StringBuilder("CREATE TABLE ");
        sql.append(parentTable + " AS ");
        sql.append("  (SELECT s.step_id, s.user_id, s.display_id ");
        sql.append("   FROM " + stepTable + " s ");
        sql.append("   START WITH s.step_id IN ");
        sql.append("     (SELECT step_id FROM " + danglingTable + ") ");
        sql.append("   CONNECT BY PRIOR s.user_id = s.user_id");
        sql.append("     AND (PRIOR s.display_id = s.left_child_id");
        sql.append("          OR PRIOR s.display_id = s.right_child_id) ");
        sql.append("  )");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
                "wdk-create-parent-step");}

    private void selectDanglingStrategies(WdkModel wdkModel, String schema,
            String strategyTable, String parentTable, String projects)
            throws WdkUserException, WdkModelException, SQLException{
        logger.debug("Selecting dangling strategies...");

        String stratTable = schema + "strategies";
        String stepTable = schema + "steps";

        StringBuilder sql = new StringBuilder("CREATE TABLE " + strategyTable);
        sql.append(" AS ((SELECT sr.strategy_id  ");
        sql.append("      FROM " + stratTable + " sr, wdk_parent_steps ps ");
        sql.append("      WHERE sr.user_id = ps.user_id ");
        sql.append("        AND sr.root_step_id = ps.display_id ");
        sql.append("        AND sr.project_id IN " + projects + ") ");
        sql.append("     UNION ");
        sql.append("     (SELECT sr.strategy_id ");
        sql.append("      FROM " + stratTable + " sr ");
        sql.append("      LEFT JOIN " + stepTable + " sp ");
        sql.append("        ON sr.user_id = sp.user_id ");
        sql.append("        AND sr.root_step_id = sp.display_id ");
        sql.append("      WHERE sp.display_id IS NULL");
        sql.append("        AND sr.project_id IN " + projects + ") ");
        sql.append("  )"); // &lt;MOD-AG 050511&gt;

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
                "wdk-create-dangling-strategies");}

    private void reportDanglingStrategies(WdkModel wdkModel,
            String strategyTable) throws WdkUserException, WdkModelException,
            SQLException, IOException{
        // determine the file name
        Calendar now = Calendar.getInstance();
        String name = "dangling-strategies_" + now.get(Calendar.YEAR) + "-"
                + now.get(Calendar.MONTH) + "-"
                + now.get(Calendar.DAY_OF_MONTH);
        File file = new File(name + ".log");
        int count = 0;
        while (file.exists()){
            count++;
            file = new File(name + "_" + count + ".log");}
        PrintWriter writer = new PrintWriter(new FileWriter(file, true));
        writer.println("user_id\temail\tstrategy_id\tproject\tis_saved\tcreate_time\tlast_modified\tname");

        String schema = wdkModel.getModelConfig().getUserDB().getUserSchema();
        String sql = "SELECT u.email, s.* FROM " + schema + "strategies s, "
                + schema + "users u, " + strategyTable + " d "
                + " WHERE d.strategy_id = s.strategy_id "
                + "   AND s.user_id = u.user_id "
                + " ORDER BY s.user_id ASC, s.strategy_id ASC";
        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();
        ResultSet resultSet = null;
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                    "wdk-get-dangling-strats", 100);
            while (resultSet.next()){
                writer.print(resultSet.getInt("user_id"));
                writer.print("\t");
                writer.print(resultSet.getString("email"));
                writer.print("\t");
                writer.print(resultSet.getInt("strategy_id"));
                writer.print("\t");
                writer.print(resultSet.getString("project_id"));
                writer.print("\t");
                writer.print(resultSet.getBoolean("is_saved"));
                writer.print("\t");
                writer.print(resultSet.getDate("create_time"));
                writer.print("\t");
                writer.print(resultSet.getDate("last_modify_time"));
                writer.print("\t");
                writer.println(resultSet.getString("name"));}}
        finally{
            SqlUtils.closeResultSet(resultSet);
            writer.flush();
            writer.close();
            System.out.println("Dangling strategies are saved at: "
                    + file.getAbsolutePath());}}

    private void deleteDanglingStrategies(WdkModel wdkModel, String schema,
            String strategyTable) throws WdkUserException, WdkModelException,
            SQLException{
        logger.debug("Deleting dangling strategies...");

        String stratTable = schema + "strategies";

        StringBuilder sql = new StringBuilder("DELETE FROM " + stratTable);
        sql.append(" WHERE strategy_id IN ");
        sql.append("(SELECT strategy_id FROM " + strategyTable + ")");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();

        // &lt;ADD-AG 050511&gt;
        executeByBatch(wdkModel, dataSource, sql.toString(),
                "STRATEGIES:wdk-delete-dangling-strategy", null, null);}

    private void deleteDanglingSteps(WdkModel wdkModel, String schema,
            String parentTable) throws WdkUserException, WdkModelException,
            SQLException{
        logger.debug("Deleting dangling steps...");

        String stepTable = schema + "steps";

        StringBuilder sql = new StringBuilder("DELETE FROM " + stepTable);
        sql.append(" WHERE step_id IN (SELECT step_id FROM " + parentTable
                + ")");

        DataSource dataSource = wdkModel.getUserPlatform().getDataSource();

        executeByBatch(wdkModel, dataSource, sql.toString(),
                "STEPS:wdk-delete-dangling-step", null, null); // &lt;ADD-AG
                                                               // 050511&gt;

        // SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
        // "wdk-delete-dangling-step");
    }

    // &lt;ADD-AG 042911&gt;
    // -----------------------------------------------------------

    private void executeByBatch(WdkModel wdkModel, DataSource dataSource,
            String sql, String name, String dmlSql, String selectSql)
            throws SQLException, WdkUserException, WdkModelException{

        if ((dmlSql == null) || (selectSql == null)){
            dmlSql = sql.substring(0, sql.indexOf("IN ", 0)) + " = ?";
            selectSql = sql.substring(sql.indexOf("IN ", 0) + 3).trim();
            if (selectSql.startsWith("(")) selectSql = selectSql.substring(1);
            if (selectSql.endsWith(")")) selectSql = selectSql.substring(0, selectSql.length() - 1);

            // logger.info("dmlSql= " + dmlSql);
            // logger.info("selectSql= " + selectSql);
        }

        Connection connection = null;
        PreparedStatement psInsert = null;
        ResultSet resultSet = null;

        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource, selectSql,
                    "wdk-backup-" + name);

            connection = dataSource.getConnection();
            psInsert = connection.prepareStatement(dmlSql);

            int count = 0;

            while (resultSet.next()){
                int userId = resultSet.getInt(1);

                psInsert.setInt(1, userId);
                psInsert.addBatch();

                count++;
                if (count % 1000 == 0){
                    psInsert.executeBatch();
                    logger.info("Rows processed for " + name + " = " + count
                            + ".");}}

            psInsert.executeBatch();
            logger.info("Total rows processed for " + name + " = " + count
                    + ".");}
        finally{
            SqlUtils.closeResultSet(resultSet);
            SqlUtils.closeStatement(psInsert);}}

    // ---------------------------------------------------------------------------

    private void resetByBatch(WdkModel wdkModel, DataSource dataSource,
            String sql, String name) throws SQLException, WdkUserException,
            WdkModelException{

        sql = sql + " AND is_valid is not NULL and rownum &lt; 1000";

        int rowsAffected = 1000;
        int totalAffected = 0;

        while (rowsAffected &gt; 0){
            rowsAffected = SqlUtils.executeUpdate(wdkModel, dataSource, sql,
                    name);

            totalAffected += rowsAffected;

            logger.info("Rows reset for " + name + " = " + totalAffected + ".");}}

    // &lt;/ADD-AG 042911&gt;
    // ----------------------------------------------------------}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di261947918917731133" cid="C414" type="class" name="StrategyFixer" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:44">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o309065eb116248dc90c054cba06214c8900" name="main" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String cmdName = System.getProperty("cmdName");
        StrategyFixer fixer = new StrategyFixer(cmdName);
        try{
            fixer.invoke(args);} finally{
            logger.info("strategy fixer finished.");
            System.exit(0);}}

    /**
     * @param command
     * @param description
     */
    protected</source-code>
          </source-codes>
        </operation>
        <operation id="o8d3ff09ddb384e698fc88ff73dee155c900" name="StrategyFixer" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="command" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        super((command == null) ? command : "strategyFixer",
                "generate unique strategy signature");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#declareOptions()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o49db6785aa7e46caa64631a5750b9dd9900" name="declareOptions" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        addSingleValueOption(ARG_PROJECT_ID, true, null, "A comma-separated"
                + " list of ProjectIds, which should match the directory name "
                + "under $GUS_HOME, where model-config.xml is stored.");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wsf.util.BaseCLI#execute()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o1f3c600f3e814e319c061b70d490d599900" name="execute" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        String gusHome = System.getProperty(Utilities.SYSTEM_PROPERTY_GUS_HOME);

        String strProject = (String) getOptionValue(ARG_PROJECT_ID);
        String[ projects = strProject.split(",");
        for (String projectId : projects){
            logger.info("Fixng strategies for project " + projectId);
            WdkModel wdkModel = WdkModel.construct(projectId, gusHome);
            generateSignatures(wdkModel);}}</source-code>
          </source-codes>
        </operation>
        <operation id="odfaf827b37274b6ca857a4566a0e3dae900" name="generateSignatures" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            NoSuchAlgorithmException, WdkModelException{
        String schema = wdkModel.getModelConfig().getUserDB().getUserSchema();

        StringBuffer sqlSelect = new StringBuffer(
                "SELECT strategy_id, user_id ");
        sqlSelect.append("FROM ").append(schema).append("strategies ");
        sqlSelect.append("WHERE signature IS NULL AND project_id = ?");

        StringBuffer sqlUpdate = new StringBuffer("UPDATE ");
        sqlUpdate.append(schema).append("strategies SET signature = ? ");
        sqlUpdate.append("WHERE strategy_id = ?");

        StepFactory factory = wdkModel.getStepFactory();
        ResultSet resultSet = null;
        PreparedStatement psSelect = null, psUpdate = null;
        DataSource src = wdkModel.getUserPlatform().getDataSource();
        try{
            psSelect = SqlUtils.getPreparedStatement(src, sqlSelect.toString());
            psUpdate = SqlUtils.getPreparedStatement(src, sqlUpdate.toString());

            psSelect.setString(1, wdkModel.getProjectId());
            resultSet = psSelect.executeQuery();
            while (resultSet.next()){
                int strategyId = resultSet.getInt("strategy_id");
                int userId = resultSet.getInt("user_id");
                String sig = factory.getStrategySignature(userId, strategyId);

                psUpdate.setString(1, sig);
                psUpdate.setInt(2, strategyId);
                psUpdate.executeUpdate();}} finally{
            SqlUtils.closeStatement(psUpdate);
            SqlUtils.closeStatement(psSelect);
            SqlUtils.closeResultSet(resultSet);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di343222946358986515" cid="C415" type="class" name="ArrayResultList" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:45">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations />
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di437867219682355269" cid="C416" type="class" name="CacheFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:54">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a32b6eff08e184aba9865c0276f5abe3757" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9c61320cacb048958400ed692a0b1ae857" name="platform" type="DBPlatform" type-id="DBPlatform" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad39ca41e7baa4df6beadf2ffe46ed62557" name="dataSource" type="DataSource" type-id="DataSource" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a791f50ada9e848da828a6f916f7c3e4159" name="checksum" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" default-value="query.getChecksum">
          <stereotypes />
        </attribute>
        <attribute id="ae9de7339a6e6420a9b7936107a7cc24959" name="queryName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" default-value="query.getFullName">
          <stereotypes />
        </attribute>
        <attribute id="a06138f6454184f1298fdb183dc885fc059" name="queryInfo" type="QueryInfo" type-id="QueryInfo" visibility="package" abstract="false" virtual="false" default-value="checkQueryInfo">
          <stereotypes />
        </attribute>
        <attribute id="a88519f9309e9493380e9b6345d7ae4bd59" name="psInsert" type="PreparedStatement" type-id="PreparedStatement" visibility="package" abstract="false" virtual="false" default-value="null">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o22d09c6835d94cd99b828b344af0cdc157" name="CacheFactory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="platform" type="DBPlatform" type-id="DBPlatform" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException{
        this.wdkModel = wdkModel;
        this.platform = platform;
        this.dataSource = platform.getDataSource();}</source-code>
          </source-codes>
        </operation>
        <operation id="o40639416bdcd44c29aaff62752b4d87a57" name="createCache" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // create index tables for query and query instance;
        createQueryTable();
        createQueryInstanceTable();

        // create the id sequence for the query &amp; instance index
        String sequenceName = TABLE_INSTANCE + DBPlatform.ID_SEQUENCE_SUFFIX;
        try{
            platform.createSequence(sequenceName, 1, 1);} catch (Exception ex){
            logger.error("Cannot create sequence [" + sequenceName + "]. "
                    + ex.getMessage());}

        sequenceName = TABLE_QUERY + DBPlatform.ID_SEQUENCE_SUFFIX;
        try{
            platform.createSequence(sequenceName, 1, 1);} catch (Exception ex){
            logger.error("Cannot create sequence [" + sequenceName + "]. "
                    + ex.getMessage());}}</source-code>
          </source-codes>
        </operation>
        <operation id="o00d7a4ce0d77461d8a4a801eafed7a3f58" name="resetCache" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="purge" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="forceDrop" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // drop cache tables and we are done
        dropCacheTables(purge, forceDrop);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe7c5d77912ba4690a067534d64af26ef58" name="recreateCache" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="purge" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="forceDrop" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // drop cache;
        dropCache(purge, forceDrop);
        // create them back
        createCache();}</source-code>
          </source-codes>
        </operation>
        <operation id="offe61c1e0c284407baaf4d933868d9ca58" name="dropCache" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="purge" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="forceDrop" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // drop cache tables
        dropCacheTables(purge, forceDrop);

        try{
            platform.dropTable(null, TABLE_INSTANCE, purge);} catch (Exception ex){
            logger.error("Cannot drop table [" + TABLE_INSTANCE + "]. "
                    + ex.getMessage());}
        String instanceSeq = TABLE_INSTANCE + DBPlatform.ID_SEQUENCE_SUFFIX;
        try{
            SqlUtils.executeUpdate(wdkModel, dataSource, "DROP SEQUENCE "
                    + instanceSeq, "wdk_cache_drop_seq");} catch (Exception ex){
            logger.error("Cannot drop sequence [" + instanceSeq + "]. "
                    + ex.getMessage());}

        // drop index tables and sequences
        try{
            platform.dropTable(null, TABLE_QUERY, purge);} catch (Exception ex){
            logger.error("Cannot drop table [" + TABLE_QUERY + "]. "
                    + ex.getMessage());}

        String querySeq = TABLE_QUERY + DBPlatform.ID_SEQUENCE_SUFFIX;
        try{
            SqlUtils.executeUpdate(wdkModel, dataSource, "DROP SEQUENCE "
                    + querySeq, "wdk_cache_drop_seq");} catch (Exception ex){
            logger.error("Cannot drop sequence [" + querySeq + "]. "
                    + ex.getMessage());}}</source-code>
          </source-codes>
        </operation>
        <operation id="odb6a56bfc5d145f5b6175f69cf0524e958" name="dropCache" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instanceId" type="int" type-id="int" default-value="" />
            <parameter id="" name="purge" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String whereClause = " WHERE " + COLUMN_INSTANCE_ID + " = "
                + instanceId;

        // get the query name from the id
        StringBuffer sql = new StringBuffer("SELECT ");
        sql.append(COLUMN_QUERY_NAME);
        sql.append(" FROM ");
        sql.append(TABLE_INSTANCE);
        sql.append(whereClause);

        Query query;
        try{
            String queryName = (String) SqlUtils.executeScalar(wdkModel,
                    dataSource, sql.toString(), "wdk_cache_select_query");
            query = (Query) wdkModel.resolveReference(queryName);} catch (Exception ex){
            // cannot get query name or resolve query, cancel remaining steps.
            logger.warn(ex);
            return;}

        // get cache table name
        String cacheTable;
        try{
            QueryInfo queryInfo = getQueryInfo(query);
            cacheTable = queryInfo.getCacheTable();} catch (Exception ex){
            logger.error("Cannot get cache table for query ["
                    + query.getFullName() + "]. " + ex.getMessage());
            return;}

        // no need to drop cache table, since it may be used by other queries
        // from the same question; just delete rows from instance table.
        sql = new StringBuffer("DELETE FROM ");
        sql.append(cacheTable);
        sql.append(whereClause);
        try{
            SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
                    "wdk_cache_delete_by_instance");} catch (Exception ex){
            logger.error("Cannot delete rows from [" + cacheTable + "]. "
                    + ex.getMessage());}

        // delete the instance index
        sql = new StringBuffer("DELETE FROM ");
        sql.append(TABLE_INSTANCE);
        sql.append(whereClause);
        try{
            SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
                    "wdk_cache_delete_instance_index");} catch (Exception ex){
            logger.error("Cannot delete rows from [" + TABLE_INSTANCE + "]. "
                    + ex.getMessage());}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1a5b18624a3347bfb4ad06fc678dbd4358" name="dropCache" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryName" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="purge" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkUserException, WdkModelException{
        String cacheTable;
        try{
            Query query = (Query) wdkModel.resolveReference(queryName);
            QueryInfo queryInfo = getQueryInfo(query);
            cacheTable = queryInfo.getCacheTable();} catch (Exception ex){
            logger.error("Cannot get cache table for query [" + queryName
                    + "]. " + ex.getMessage());
            return;}

        // drop the cacheTable
        try{
            platform.dropTable(null, cacheTable, purge);} catch (Exception ex){
            logger.error("Cannot drop table [" + cacheTable + "]. "
                    + ex.getMessage());}

        // delete instance index
        StringBuffer sqlInstance = new StringBuffer("DELETE FROM ");
        sqlInstance.append(TABLE_INSTANCE);
        sqlInstance.append(" WHERE ").append(COLUMN_QUERY_ID).append(" IN ");
        sqlInstance.append("(SELECT ").append(COLUMN_INSTANCE_ID);
        sqlInstance.append(" FROM ").append(TABLE_QUERY);
        sqlInstance.append(" WHERE ").append(COLUMN_TABLE_NAME).append(" = ?)");

        PreparedStatement stInstance = null;
        try{
            long start = System.currentTimeMillis();
            stInstance = SqlUtils.getPreparedStatement(dataSource,
                    sqlInstance.toString());
            stInstance.setString(1, cacheTable);
            stInstance.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sqlInstance.toString(),
                    "wdk_cache_delete_by_query", start);} catch (SQLException ex){
            logger.error("Cannot delete rows from [" + TABLE_INSTANCE + "]. "
                    + ex.getMessage());} finally{
            SqlUtils.closeStatement(stInstance);}

        // delete query index
        StringBuffer sqlQuery = new StringBuffer("DELETE FROM ");
        sqlQuery.append(TABLE_QUERY);
        sqlQuery.append(" WHERE ").append(COLUMN_TABLE_NAME);
        sqlQuery.append(" = '").append(cacheTable).append("'");

        try{
            SqlUtils.executeUpdate(wdkModel, dataSource, sqlQuery.toString(),
                    "wdk_cache_delete_query_index");} catch (Exception ex){
            logger.error("Cannot delete rows from [" + TABLE_QUERY + "]. "
                    + ex.getMessage());} finally{}}</source-code>
          </source-codes>
        </operation>
        <operation id="o64c75eb3c4324cdfbdb280b61107bad658" name="showCache" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkModelException,
            WdkUserException{
        // get query instance summary
        StringBuffer sqlInstance = new StringBuffer("SELECT ");
        sqlInstance.append("i.").append(COLUMN_QUERY_ID).append(", ");
        sqlInstance.append("q.").append(COLUMN_QUERY_NAME).append(", ");
        sqlInstance.append("q.").append(COLUMN_TABLE_NAME).append(", ");
        sqlInstance.append("count(*) AS instances FROM ");
        sqlInstance.append(TABLE_INSTANCE).append(" i, ");
        sqlInstance.append(TABLE_QUERY).append(" q ");
        sqlInstance.append(" WHERE q.").append(COLUMN_QUERY_ID);
        sqlInstance.append(" = i.").append(COLUMN_QUERY_ID);
        sqlInstance.append(" GROUP BY i.").append(COLUMN_QUERY_ID).append(", ");
        sqlInstance.append(" q.").append(COLUMN_QUERY_NAME).append(", ");
        sqlInstance.append(" q.").append(COLUMN_TABLE_NAME);
        ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource,
                sqlInstance.toString(), "wdk_cache_instance_summary");
        System.err.println("========================= Cache Stattistics =========================");
        int queryCount = 0;
        while (resultSet.next()){
            int queryId = resultSet.getInt(COLUMN_QUERY_ID);
            String queryName = resultSet.getString(COLUMN_QUERY_NAME);
            String cacheTable = resultSet.getString(COLUMN_TABLE_NAME);
            int instanceCount = resultSet.getInt("instances");

            String sqlSize = "SELECT count(*) FROM " + cacheTable;
            Object objSize = SqlUtils.executeScalar(wdkModel, dataSource,
                    sqlSize,  "wdk_cache_query_size");
            int size = Integer.parseInt(objSize.toString());

            System.err.println("CACHE [" + queryId + "] " + queryName + ": "
                    + instanceCount + " instances, total " + size + " rows");
            queryCount++;}
        System.err.println();
        System.err.println("Total: " + queryCount + " cache tables.");
        System.err.println("====================== End of Cache Stattistics ======================");
        SqlUtils.closeResultSet(resultSet);}</source-code>
          </source-codes>
        </operation>
        <operation id="o387084155fd94180ac2d917c8200971b58" name="createQueryTable" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // create the cache index table
        StringBuffer sql = new StringBuffer("CREATE TABLE ");
        sql.append(TABLE_QUERY).append(" ( ");
        sql.append(COLUMN_QUERY_ID).append(" ");
        sql.append(platform.getNumberDataType(12)).append(" NOT NULL, ");
        sql.append(COLUMN_QUERY_NAME).append(" ");
        sql.append(platform.getStringDataType(200)).append(" NOT NULL, ");
        sql.append(COLUMN_QUERY_CHECKSUM).append(" ");
        sql.append(platform.getStringDataType(40)).append(" NOT NULL, ");
        sql.append(COLUMN_TABLE_NAME).append(" ");
        sql.append(platform.getStringDataType(30)).append(" NOT NULL, ");
        sql.append(" CONSTRAINT PK_").append(COLUMN_QUERY_ID);
        sql.append(" PRIMARY KEY (").append(COLUMN_QUERY_ID).append("), ");
        sql.append(" CONSTRAINT UK_").append(COLUMN_QUERY_NAME);
        sql.append(" UNIQUE (").append(COLUMN_QUERY_NAME).append(", ");
        sql.append(COLUMN_QUERY_CHECKSUM).append(") )");
        try{
            SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),  "wdk_cache_create_table");} catch (Exception ex){
            logger.error("Cannot create table [" + TABLE_QUERY + "]. "
                    + ex.getMessage());}}</source-code>
          </source-codes>
        </operation>
        <operation id="o6e3fa6a8f3704e909ebcc2f3e869de4c58" name="createQueryInstanceTable" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // create the cache index table
        StringBuffer sql = new StringBuffer("CREATE TABLE ");
        sql.append(TABLE_INSTANCE).append(" ( ");

        // define columns
        sql.append(COLUMN_INSTANCE_ID).append(" ");
        sql.append(platform.getNumberDataType(12)).append(" NOT NULL, ");
        sql.append(COLUMN_QUERY_ID).append(" ");
        sql.append(platform.getNumberDataType(12)).append(" NOT NULL, ");
        sql.append(COLUMN_INSTANCE_CHECKSUM).append(" ");
        sql.append(platform.getStringDataType(40)).append(" NOT NULL, ");
        sql.append(COLUMN_PARAMS).append(" ");
        sql.append(platform.getClobDataType()).append(", ");
        sql.append(COLUMN_RESULT_MESSAGE).append(" ");
        sql.append(platform.getClobDataType());

        // define primary key
        sql.append(", CONSTRAINT PK_").append(COLUMN_INSTANCE_ID);
        sql.append(" PRIMARY KEY (").append(COLUMN_INSTANCE_ID).append("), ");

        // define foreign key to Query table
        sql.append(" CONSTRAINT FK_").append(COLUMN_QUERY_ID);
        sql.append(" FOREIGN KEY (").append(COLUMN_QUERY_ID).append(")");
        sql.append(" REFERENCES ").append(TABLE_QUERY);
        sql.append("(").append(COLUMN_QUERY_ID).append("), ");

        // define unique constraint to (query_id, instance_checksum) tuple
        sql.append(" CONSTRAINT UK_").append(COLUMN_QUERY_ID);
        sql.append(" UNIQUE (").append(COLUMN_QUERY_ID).append(", ");
        sql.append(COLUMN_INSTANCE_CHECKSUM).append(") )");
        try{
            SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(), "wdk_cache_create_table");} catch (Exception ex){
            logger.error("Cannot create table [" + TABLE_INSTANCE + "]. "
                    + ex.getMessage());}}</source-code>
          </source-codes>
        </operation>
        <operation id="o778cfa59c1f34321b3de906e1f1523ac58" name="dropCacheTables" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="purge" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="forceDrop" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // get a list of cache tables
        StringBuffer sql = new StringBuffer("SELECT DISTINCT ");
        sql.append(COLUMN_TABLE_NAME).append(" FROM ").append(TABLE_QUERY);

        ResultSet resultSet = null;
        Set&lt;String&gt; cacheTables = new LinkedHashSet&lt;String&gt;();
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource,
                    sql.toString(),  "wdk_cache_select_cache_table");
            while (resultSet.next()){
                cacheTables.add(resultSet.getString(COLUMN_TABLE_NAME));}} catch (Exception ex){
            logger.error("Cannot query on table [" + TABLE_QUERY + "]. "
                    + ex.getMessage());} finally{
            SqlUtils.closeResultSet(resultSet);}

        // drop the cache tables
        for (String cacheTable : cacheTables){
            try{
                platform.dropTable(null, cacheTable, purge);} catch (Exception ex){
                logger.error("Cannot drop table [" + cacheTable + "]. "
                        + ex.getMessage());}}

        // delete rows from cache index table
        try{
            SqlUtils.executeUpdate(wdkModel, dataSource, "DELETE FROM "
                    + TABLE_INSTANCE,  "wdk_cache_create_table");} catch (Exception ex){
            logger.error("Cannot delete rows from [" + TABLE_INSTANCE + "]. "
                    + ex.getMessage());}
        try{
            SqlUtils.executeUpdate(wdkModel, dataSource, "DELETE FROM "
                    + TABLE_QUERY, "wdk_cache_delete_by_query");} catch (Exception ex){
            logger.error("Cannot delete rows from [" + TABLE_QUERY + "]. "
                    + ex.getMessage());}

        if (forceDrop) dropDanglingTables();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5db8b04994a2472caac9ad8f0345bb2a59" name="dropDanglingTables" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        String schema = wdkModel.getModelConfig().getAppDB().getLogin();
        try{
            String[ tables = platform.queryTableNames(schema,
                    CACHE_TABLE_PREFIX + "%");
            logger.info("Dropping " + tables.length + " dangling tables...");
            for (String table : tables){
                try{
                    SqlUtils.executeUpdate(wdkModel, dataSource, "DROP TABLE "
                            + table, "wdk_cache_drop_table");} catch (Exception ex){
                    logger.error("Cannot drop table [" + table + "]. "
                            + ex.getMessage());}}} catch (Exception ex){
            logger.error(ex.getMessage());}}

    public synchronized QueryInfo getQueryInfo(Query query)
            throws WdkModelException, WdkUserException {(true);();(queryName, checksum);
        if (queryInfo != null) return queryInfo;
        try {
	        // cache table doesn't exist, create one
	        queryInfo = new QueryInfo();
	        queryInfo.setQueryId(platform.getNextId(null, TABLE_QUERY));
	        queryInfo.setCacheTable(CACHE_TABLE_PREFIX +</source-code>
          </source-codes>
        </operation>
        <operation id="o7eed2d1c95c24deb812a918355890d8c59" name="queryInfo.getQueryId" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">);
	        queryInfo.setQueryName(queryName);
	        queryInfo.setQueryChecksum(checksum);
	
	        StringBuffer sql = new StringBuffer("INSERT INTO ");
	        sql.append(TABLE_QUERY).append(" (");
	        sql.append(COLUMN_QUERY_ID).append(", ");
	        sql.append(COLUMN_QUERY_NAME).append(", ");
	        sql.append(COLUMN_QUERY_CHECKSUM).append(", ");
	        sql.append(COLUMN_TABLE_NAME).append(") ");
	        sql.append("VALUES (?, ?, ?, ?)");

            long start = System.currentTimeMillis();
            psInsert = SqlUtils.getPreparedStatement(dataSource, sql.toString());
            psInsert.setInt(1, queryInfo.getQueryId());
            psInsert.setString(2, queryInfo.getQueryName());
            psInsert.setString(3, queryInfo.getQueryChecksum());
            psInsert.setString(4, queryInfo.getCacheTable());
            psInsert.executeUpdate();
            SqlUtils.verifyTime(wdkModel, sql.toString(),"wdk_cache_insert instance", start);</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di452045258499025915" cid="C417" type="class" name="DBPlatform" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:58">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations />
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di844963376231046291" cid="C418" type="class" name="DisplayConnections" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:38:58">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="abe0842b65a6f4cc783e15245a71c6984122" name="platform" type="DBPlatform" type-id="DBPlatform" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o20668075e86741eb96056c4626745b36122" name="DisplayConnections" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="platform" type="DBPlatform" type-id="DBPlatform" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            this.platform = platform;}

        /*
         * (non-Javadoc)
         * 
         * @see java.lang.Runnable#run()
         */
        public</source-code>
          </source-codes>
        </operation>
        <operation id="oaba514d1099e48e39f0a3b4e2f78bff6122" name="run" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
            long interval = dbConfig.getShowConnectionsInterval();
            long duration = dbConfig.getShowConnectionsDuration();
            long startTime = System.currentTimeMillis();
            while (true){
                StringBuffer display = new StringBuffer();
                display.append("[").append(platform.name).append("]");
                display.append(" Connections: Active = ").append(
                        getActiveCount());
                display.append(", Idle = ").append(getIdleCount());

                logger.info(display);
                // System.out.println(display);
                long elapsed = (System.currentTimeMillis() - startTime) / 1000;
                if (elapsed &gt; duration) break;
                try{
                    Thread.sleep(interval * 1000);} catch (InterruptedException ex){
                    // ex.printStackTrace();
                }
            }
        }

    }

    public static final String ID_SEQUENCE_SUFFIX = "_pkseq";

    private static final Logger logger = Logger.getLogger(DBPlatform.class);

    private static List&lt;DBPlatform&gt; platforms = new ArrayList&lt;DBPlatform&gt;();

    // #########################################################################
    // Platform related helper functions
    // #########################################################################

    /**
     * normalize the schema name, if it not empty, a dot will be appended to the
     * end of it.
     * 
     * @param schema
     * @return
     */
    public static String normalizeSchema(String schema){
        if (schema == null) return "";
        schema = schema.trim().toLowerCase();
        if (schema.length() &gt; 0 &amp;&amp; !schema.endsWith(".")) schema += ".";
        return schema;}

    public static String normalizeString(String string){
        return string.replaceAll("'", "''");}

    public static void closeAllPlatforms() throws Exception{
        for (DBPlatform platform : platforms){
            platform.close();}}

    // #########################################################################
    // Member variables
    // #########################################################################

    protected DataSource dataSource;
    protected String defaultSchema;
    protected WdkModel wdkModel;

    private GenericObjectPool connectionPool;
    private String name;
    private ModelConfigDB dbConfig;
    private String validationQuery;

    // #########################################################################
    // the Abstract methods that are platform dependent
    // #########################################################################

    public abstract int getNextId(String schema, String table)
            throws SQLException, WdkModelException, WdkUserException;

    public abstract String getNextIdSqlExpression(String schema, String table);

    public abstract String getNumberDataType(int size);

    public abstract String getFloatDataType(int size);

    public abstract String getStringDataType(int size);

    public abstract String getBooleanDataType();

    public abstract String getClobDataType();

    public abstract String getDateDataType();

    public abstract String getMinusOperator();

    public abstract void createSequence(String sequence, int start,
            int increment) throws SQLException, WdkUserException,
            WdkModelException;

    public abstract int setClobData(PreparedStatement ps, int columnIndex,
            String content, boolean commit) throws SQLException;

    public abstract String getClobData(ResultSet rs, String columnName)
            throws SQLException;

    public abstract String getPagedSql(String sql, int startIndex, int endIndex);

    public abstract boolean checkTableExists(String schema, String tableName)
            throws SQLException, WdkModelException, WdkUserException;

    public abstract String convertBoolean(boolean value);

    public abstract void dropTable(String schema, String table, boolean purge)
            throws SQLException, WdkUserException, WdkModelException;

    public abstract void disableStatistics(Connection connection,
            String schema, String tableName) throws SQLException;

    /**
     * @param schema
     *            the schema cannot be empty. if you are searching in a local
     *            schema, it has to be the login user name.
     * @param pattern
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public abstract String[ queryTableNames(String schema, String pattern)
            throws SQLException, WdkUserException, WdkModelException;
    
    public abstract String getDummyTable();

    // #########################################################################
    // Common methods are platform independent
    // #########################################################################

    public DBPlatform(String validationQuery){
        this.validationQuery = validationQuery;
        platforms.add(this);}

    /**
     * @return the wdkModel
     */
    public WdkModel getWdkModel(){
        return wdkModel;}

    /**
     * @return the dbConfig
     */
    public ModelConfigDB getDbConfig(){
        return dbConfig;}

    public DataSource getDataSource(){
        return dataSource;}

    public int getActiveCount(){
        return connectionPool.getNumActive();}

    public int getIdleCount(){
        return connectionPool.getNumIdle();}

    /**
     * @return the defaultSchema
     */
    public String getDefaultSchema(){
        return normalizeSchema(defaultSchema);}

    /**
     * Initialize connection pool. The driver should have been registered by the
     * implementation.
     * 
     * @param connectionUrl
     * @param login
     * @param password
     * @param minIdle
     * @param maxidle
     * @param maxWait
     * @param maxActive
     */
    public void initialize(WdkModel wdkModel, String name,
            ModelConfigDB dbConfig){
        this.wdkModel = wdkModel;
        this.name = name;
        this.dbConfig = dbConfig;

        connectionPool = new GenericObjectPool(null);
        ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(
                dbConfig.getConnectionUrl(), dbConfig.getLogin(),
                dbConfig.getPassword());

        // create abandoned configuration
        boolean defaultReadOnly = false;
        boolean defaultAutoCommit = true;
        new PoolableConnectionFactory(connectionFactory, connectionPool, null,
                validationQuery, defaultReadOnly, defaultAutoCommit);

        // configure the connection pool
        connectionPool.setMaxWait(dbConfig.getMaxWait());
        connectionPool.setMaxIdle(dbConfig.getMaxIdle());
        connectionPool.setMinIdle(dbConfig.getMinIdle());
        connectionPool.setMaxActive(dbConfig.getMaxActive());

        // configure validationQuery tests
        connectionPool.setTestOnBorrow(true);
        connectionPool.setTestOnReturn(true);
        connectionPool.setWhenExhaustedAction(GenericObjectPool.WHEN_EXHAUSTED_GROW);

        PoolingDataSource dataSource = new PoolingDataSource(connectionPool);
        dataSource.setAccessToUnderlyingConnectionAllowed(true);
        this.dataSource = dataSource;
        this.defaultSchema = DBPlatform.normalizeSchema(dbConfig.getLogin());

        // start the connection monitor if needed
        if (dbConfig.isShowConnections())
            (new Thread(new DisplayConnections(this))).start();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.RDBMSPlatformI#close()
     */
    public void close() throws Exception{
        connectionPool.close();}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di399935205254322124" cid="C419" type="class" name="Oracle" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o66181760a6cd44e8ab067cc605f481ef465" name="Oracle" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws ClassNotFoundException, SQLException{
        super("SELECT 'ok' FROM dual");
        // register the driver
        Class.forName("oracle.jdbc.driver.OracleDriver");

        DriverManager.registerDriver(new OracleDriver());
        System.setProperty("jdbc.drivers", "oracle.jdbc.driver.OracleDriver");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#createSequence(java.lang.String,
     * int, int)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o925a99f5a7634b8dab24d1a3640fbc0b465" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="increment" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        StringBuffer sql = new StringBuffer("CREATE SEQUENCE ");
        sql.append(sequence);
        sql.append(" START WITH ").append(start);
        sql.append(" INCREMENT BY ").append(increment);
        SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
                "wdk_create_sequence");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getBooleanDataType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o245fc9b517f841b6a4172f48cd41ef01465" name="getBooleanDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "NUMBER(1)";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getNumberDataType(int)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o28c6e6b5d2b440ea8da70d2fdc7745ed465" name="getNumberDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="size" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "NUMBER(" + size + ")";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getStringDataType(int)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4565050294734fadb383864c8c1d10f5465" name="getStringDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="size" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "VARCHAR(" + size + ")";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getClobDataType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o589cf1d749bf41a19fe4d8c11ba3eae4465" name="getClobDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "CLOB";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getMinusOperator()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o86ffcf24cde14258a15c56fa8d486b04465" name="getMinusOperator" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "MINUS";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getNextId(java.lang.String,
     * java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o173d95007e7b4e3996feaa3144c7a407465" name="getNextId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="table" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException{
        schema = normalizeSchema(schema);

        StringBuffer sql = new StringBuffer("SELECT ");
        sql.append(schema).append(table).append(ID_SEQUENCE_SUFFIX);
        sql.append(".nextval FROM dual");
        BigDecimal id = (BigDecimal) SqlUtils.executeScalar(wdkModel,
                dataSource, sql.toString(), "wdk_select_next_id");
        return id.intValue();}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.dbms.DBPlatform#getNextIdSqlExpression(java.lang.
     * String, java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ofd1afa5591904b308374e5e225cfd923465" name="getNextIdSqlExpression" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="table" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        schema = normalizeSchema(schema);

        StringBuffer sql = new StringBuffer("");
        sql.append(schema).append(table).append(ID_SEQUENCE_SUFFIX);
        sql.append(".nextval");
        return sql.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getClobData(java.sql.ResultSet,
     * java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa3bd1705d48846208f22507ca8bb76aa465" name="getClobData" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="rs" type="ResultSet" type-id="ResultSet" default-value="" />
            <parameter id="" name="columnName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException{
        Clob messageClob = rs.getClob(columnName);
        if (messageClob == null) return null;
        return messageClob.getSubString(1, (int) messageClob.length());}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.dbms.DBPlatform#updateClobData(java.sql.PreparedStatement
     * , int, java.lang.String, boolean)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob0b05f5bbe8b4991a25efe35f108f1f6465" name="setClobData" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ps" type="PreparedStatement" type-id="PreparedStatement" default-value="" />
            <parameter id="" name="columnIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="content" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="commit" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        Connection connection = ((DelegatingConnection) ps.getConnection()).getInnermostDelegate();
        CLOB clob = CLOB.createTemporary(connection, false,
                CLOB.DURATION_SESSION);
        clob.setString(1, content);
        ps.setClob(columnIndex, clob);
        return commit ? ps.executeUpdate() : 0;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getPagedSql(java.lang.String,
     * int, int)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5f0caaed18cb4e01a2ebe0cac9c131bc466" name="getPagedSql" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buffer = new StringBuffer();
        // construct the outer query
        buffer.append("SELECT lb.* FROM (");
        // construct the inner nested query
        buffer.append("SELECT ub.*, rownum AS row_index FROM (");
        buffer.append(sql);
        buffer.append(") ub WHERE rownum &lt;= ").append(endIndex);
        buffer.append(") lb WHERE lb.row_index &gt;= ").append(startIndex);
        return buffer.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#isTableExist(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob5a55cebd2e147479fb3eaa8e037be4d466" name="checkTableExists" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="tableName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException, WdkUserException{
        StringBuffer sql = new StringBuffer("SELECT count(*) FROM ALL_TABLES ");
        sql.append("WHERE table_name = '");
        sql.append(tableName.toUpperCase()).append("'");

        if (schema == null) schema = defaultSchema;
        if (schema.charAt(schema.length() - 1) == '.')
            schema = schema.substring(0, schema.length() - 1);
        sql.append(" AND owner = '").append(schema.toUpperCase()).append("'");

        BigDecimal count = (BigDecimal) SqlUtils.executeScalar(wdkModel,
                dataSource, sql.toString(), "wdk_check_table_exist");
        return (count.longValue() &gt; 0);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getDateDataType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o599365854747468fbe314ca42027777b466" name="getDateDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "TIMESTAMP";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getFloatDataType(int)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o290fec20d19f4ed4ae3a6547994f601f466" name="getFloatDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="size" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "FLOAT(" + size + ")";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#convertBoolean(boolean)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o19eed4b61ee0469083f09e128fdd827e466" name="convertBoolean" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return value ? "1" : "0";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#dropTable(java.lang.String,
     * java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0674db46c685420895b0323b640b99fb466" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="purge" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        String name = "wdk_drop_table";
        String sql = "DROP TABLE ";
        if (schema != null) sql = schema;
        sql += table;
        if (purge){
            sql += " PURGE";
            name += "_purge";}
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, name);}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.dbms.DBPlatform#disableStatistics(java.lang.String,
     * java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa2f925f753b84d59b94508ecdfe26a5b466" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        schema = schema.toUpperCase();
        tableName = tableName.toUpperCase();
        CallableStatement stUnlock = null, stDelete = null, stLock = null;
        try{
            stUnlock = connection.prepareCall(tableName);
            stUnlock.executeUpdate("{call DBMS_STATS.unlock_table_stats('"
                    + schema + "', '" + tableName + "') }");
            stUnlock.executeUpdate();

            stDelete = connection.prepareCall(tableName);
            stDelete.executeUpdate("{call DBMS_STATS.DELETE_TABLE_STATS('"
                    + schema + "', '" + tableName + "') }");
            stDelete.executeUpdate();

            stLock = connection.prepareCall(tableName);
            stLock.executeUpdate("{call DBMS_STATS.LOCK_TABLE_STATS('" + schema
                    + "', '" + tableName + "') }");
            stLock.executeUpdate();} finally{
            if (stUnlock != null) stUnlock.close();
            if (stDelete != null) stDelete.close();
            if (stLock != null) stLock.close();}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getTables(java.lang.String,
     * java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6f2a59ac3edf4bed8ef2e382f01e697c466" name="queryTableNames" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="pattern" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        String sql = "SELECT table_name FROM all_tables WHERE owner = '"
                + schema.toUpperCase() + "' AND table_name LIKE '"
                + pattern.toUpperCase() + "'";
        ResultSet resultSet = null;
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                    "wdk_select_tables");
            List&lt;String&gt; tables = new ArrayList&lt;String&gt;();
            while (resultSet.next()){
                tables.add(resultSet.getString("table_name"));}
            String[ array = new String[tables.size();
            tables.toArray(array);
            return array;} finally{
            SqlUtils.closeResultSet(resultSet);}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o5e7dec45b5184e19879b6218460fee25466" name="getDummyTable" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return " FROM dual";}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di385758970126929163" cid="C420" type="class" name="PostgreSQL" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:05">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o002fc6c45156431e97801d31cc9f534e569" name="PostgreSQL" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, ClassNotFoundException{
        super("SELECT 'ok'");

        // register the driver
        Class.forName("org.postgresql.Driver");

        DriverManager.registerDriver(new org.postgresql.Driver());
        System.setProperty("jdbc.drivers", "org.postgresql.Driver");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#createSequence(java.lang.String,
     * int, int)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o98251d874cb44fd4803308206c3ef4b4569" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="increment" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        StringBuffer sql = new StringBuffer("CREATE SEQUENCE ");
        sql.append(sequence);
        sql.append(" START ");
        sql.append(start);
        sql.append(" INCREMENT ");
        sql.append(increment);
        SqlUtils.executeUpdate(wdkModel, dataSource, sql.toString(),
                "wdk_create_sequence");}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getBooleanDataType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oeedb53e73422452aac3073da30103e1f569" name="getBooleanDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "boolean";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getClobData(java.sql.ResultSet,
     * java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o3130a39bcefb4787b5053f3a7ecff274569" name="getClobData" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="rs" type="ResultSet" type-id="ResultSet" default-value="" />
            <parameter id="" name="columnName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException{
        return rs.getString(columnName);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getClobDataType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8e58defe8e6448cab26d077f7e797c9b570" name="getClobDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "text";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getMinusOperator()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o99bc084375ea465faf81ef00d0885092570" name="getMinusOperator" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "EXCEPT";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getNextId(java.lang.String,
     * java.lang.String)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="offe3d7098db5411093c3ba4bc1563908570" name="getNextId" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="table" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException,
            WdkModelException, WdkUserException{
        schema = normalizeSchema(schema);

        StringBuffer sql = new StringBuffer("SELECT nextval('");
        sql.append(schema).append(table).append(ID_SEQUENCE_SUFFIX);
        sql.append("')");
        long id = (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sql.toString(), "wdk_select_next_id");
        return (int) id;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getNextId(java.lang.String,
     * java.lang.String)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o47a7e75bc77745598a1bcf5040e6e5b2570" name="getNextIdSqlExpression" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="table" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        schema = normalizeSchema(schema);

        StringBuffer sql = new StringBuffer("nextval('");
        sql.append(schema).append(table).append(ID_SEQUENCE_SUFFIX);
        sql.append("')");
        return sql.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getNumberDataType(int)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o0563d3b70e104d33bf59885ec7911568570" name="getNumberDataType" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="size" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "NUMERIC(" + size + ")";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getPagedSql(java.lang.String,
     * int, int)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o362a2472e5e84f6ebfda382dc8723cd0570" name="getPagedSql" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="startIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="endIndex" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuffer buffer = new StringBuffer("SELECT f.* FROM ");
        buffer.append("(").append(sql).append(") f ");
        buffer.append(" LIMIT ").append(endIndex - startIndex + 1);
        buffer.append(" OFFSET ").append(startIndex - 1);
        return buffer.toString();}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getStringDataType(int)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oc40da3a68ff14888a8d96ae767926c99570" name="getStringDataType" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="size" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "VARCHAR(" + size + ")";}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.dbms.DBPlatform#updateClobData(java.sql.PreparedStatement
     * , int, java.lang.String, boolean)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o86542115d0aa42d080ba992fe3b8b659570" name="setClobData" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ps" type="PreparedStatement" type-id="PreparedStatement" default-value="" />
            <parameter id="" name="columnIndex" type="int" type-id="int" default-value="" />
            <parameter id="" name="content" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="commit" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        ps.setString(columnIndex, content);
        return commit ? ps.executeUpdate() : 0;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#isTableExisted(java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o04e6cf0288824d5d883e2b14f84d02be570" name="checkTableExists" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="tableName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkModelException, WdkUserException{
        if (schema == null || schema.length() == 0) schema = defaultSchema;
        if (schema.endsWith("."))
            schema = schema.substring(0, schema.length() - 1);
        tableName = tableName.toLowerCase();

        StringBuffer sql = new StringBuffer("SELECT count(*) FROM pg_tables ");
        sql.append("WHERE tablename = '").append(tableName).append("'");
        sql.append(" AND schemaname = '").append(schema).append("'");
        long count = (Long) SqlUtils.executeScalar(wdkModel, dataSource,
                sql.toString(), "wdk_check_table_exist");
        return (count &gt; 0);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getDateDataType()
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o156ea9b55f7b41ddb7605d3568b9203a570" name="getDateDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "TIMESTAMP";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getFloatDataType(int)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o96d40098d97e490b9f3a5b48ca81d33c570" name="getFloatDataType" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="size" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return "FLOAT(" + size + ")";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#convertBoolean(boolean)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0c3e5e8670154d8ba1875cfdc5da270a570" name="convertBoolean" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return value ? "TRUE" : "FALSE";}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#dropTable(java.lang.String,
     * java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o25f0cb4f4cbc4e048c23575c9fb05b86570" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="purge" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        String sql = "DROP TABLE ";
        if (schema != null) sql = schema;
        sql += table;
        // ignore purge option
        SqlUtils.executeUpdate(wdkModel, dataSource, sql, "wdk_drop_table");}

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.gusdb.wdk.model.dbms.DBPlatform#disableStatistics(java.lang.String,
     * java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o1086c24618c2446fb5ff129b220d973a570" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tableName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
    // do nothing in PSQL.}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.DBPlatform#getTables(java.lang.String,
     * java.lang.String)
     */
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o38b89322293a455c8be7ca397f0b8a5a570" name="queryTableNames" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="schema" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="pattern" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        String sql = "SELECT tablename FROM pg_tables WHERE schemaname = '"
                + schema + "' AND tablename LIKE '" + pattern + "'";
        ResultSet resultSet = null;
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                    "wdk_select_tables");
            List&lt;String&gt; tables = new ArrayList&lt;String&gt;();
            while (resultSet.next()){
                tables.add(resultSet.getString("tablename"));}
            String[ array = new String[tables.size();
            tables.toArray(array);
            return array;} finally{
            SqlUtils.closeResultSet(resultSet);}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7b836ea6abbf4052945842eb601e3dff570" name="getDummyTable" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return " ";}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di242024553861732653" cid="C421" type="class" name="QueryInfo" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:06">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ac808cf93775644a291f2461a51a551eb134" name="queryId" type="int" type-id="int" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0afab36575c0480d9a1530a5e26be44b134" name="queryName" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a799c838ce29c44a29dc1f85bb41fcaaa134" name="queryChecksum" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9ede333384d84d47b786da42ad2b7039134" name="cacheTable" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o16225a50015441c8955017aee6484648134" name="getQueryId" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queryId;}

    /**
     * @param queryId
     *            the queryId to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8a1fa992d74a424f8a6a7872b8154aa3134" name="setQueryId" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryId" type="int" type-id="int" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.queryId = queryId;}

    /**
     * @return the queryName
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ofaf9a5259edb4af48ab3712817bca61c135" name="getQueryName" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queryName;}

    /**
     * @param queryName
     *            the queryName to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o47e45b89b7084156b1a03e9502aaa526135" name="setQueryName" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.queryName = queryName;}

    /**
     * @return the cacheTable
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o63549e27a9e5411ab7e7497883ad8627135" name="getCacheTable" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return cacheTable;}

    /**
     * @param cacheTable
     *            the cacheTable to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oe9d1ed54172c462d98d79d8857635a3e135" name="setCacheTable" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cacheTable" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.cacheTable = cacheTable;}

    /**
     * @return the queryChecksum
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o18d8671fc313420a9286a24d2e976001135" name="getQueryChecksum" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return queryChecksum;}

    /**
     * @param queryChecksum
     *            the queryChecksum to set
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oa1349bc866e34daf9ac8fe325c63fe70135" name="setQueryChecksum" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="queryChecksum" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.queryChecksum = queryChecksum;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di792171179450045191" cid="C422" type="class" name="ResultFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:10">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a0d47da73d2a4489ebae606e5f2e36a28658" name="logger" type="Logger" type-id="Logger" visibility="private" abstract="false" virtual="false" default-value="Logger.getLogger">
          <stereotypes />
        </attribute>
        <attribute id="a8ebbbf9f5cbe4fa2bdc97bd26ebaea83658" name="platform" type="DBPlatform" type-id="DBPlatform" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ad4be372a8bae4064b5202eb65fcceb73658" name="cacheFactory" type="CacheFactory" type-id="CacheFactory" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aad68f228f202499f9ae6f02255de2036658" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o9d23563e00c648fcb2d3031a57b08393658" name="ResultFactory" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        this.platform = wdkModel.getQueryPlatform();
        this.cacheFactory = new CacheFactory(wdkModel, platform);
        this.wdkModel = platform.getWdkModel();}</source-code>
          </source-codes>
        </operation>
        <operation id="oe35a8fb2612e4432afc573ed661bf200658" name="getCacheFactory" type="CacheFactory" type-id="CacheFactory" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return cacheFactory;}</source-code>
          </source-codes>
        </operation>
        <operation id="o569df2511872494596fcdc43571fa55f658" name="getCachedResults" type="ResultList" type-id="ResultList" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instance" type="QueryInstance" type-id="QueryInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{

        // get the cached sql
        Query query = instance.getQuery();
        QueryInfo queryInfo = cacheFactory.getQueryInfo(query);
        StringBuffer sql = new StringBuffer("SELECT ");
        boolean firstColumn = true;
        for (Column column : query.getColumns()){
            if (firstColumn) firstColumn = false;
            else sql.append(", ");
            sql.append(column.getName());}
        sql.append(" FROM ").append(queryInfo.getCacheTable());
        sql.append(" WHERE ").append(CacheFactory.COLUMN_INSTANCE_ID);
        sql.append(" = ").append(instance.getInstanceId());

        // get the resultList
        try{
        	DataSource dataSource = platform.getDataSource();
        	ResultSet resultSet = SqlUtils.executeQuery(wdkModel, dataSource,
        			sql.toString(), query.getFullName() + "-cached");
        	return new SqlResultList(resultSet);}
        catch (SQLException e){
        	throw new WdkUserException("Unable to retrieve cached results.", e);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oc7b85270eed245cb946dd44be0a890db658" name="getInstanceId" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instance" type="QueryInstance" type-id="QueryInstance" default-value="" />
            <parameter id="" name="indexColumns" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
    	try{
	        Query query = instance.getQuery();
	        QueryInfo queryInfo = cacheFactory.getQueryInfo(query);
	        // get the query instance id; null if not exist
	        Integer instanceId = checkInstanceId(instance, queryInfo);
	        if (instanceId == null) // instance cache not exist, create it
	            instanceId = createCache(instance, queryInfo, indexColumns);
	        instance.setInstanceId(instanceId);
	        return instanceId;}
    	catch (SQLException e){
    		throw new WdkUserException("Unable to get instance ID.", e);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oe105bfd3ce9e46659ce069e6d81e8729658" name="getCacheTable" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instance" type="QueryInstance" type-id="QueryInstance" default-value="" />
            <parameter id="" name="indexColumn" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, WdkUserException{
        // make sure the instance is cached
        getInstanceId(instance, indexColumn);
        Query query = instance.getQuery();
        QueryInfo queryInfo = cacheFactory.getQueryInfo(query);
        return queryInfo.getCacheTable();}

    /**
     * look up the cache index table for the query instance; if the instance
     * doesn't exist, return null;
     * 
     * @param instance
     * @return
     * @throws SQLException
     * @throws WdkUserException
     * @throws JSONException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws SQLException
     * @throws JSONException
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="off5c6b4a34584c82b811aea694e76b3e659" name="checkInstanceId" type="Integer" type-id="Uml.Integer" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instance" type="QueryInstance" type-id="QueryInstance" default-value="" />
            <parameter id="" name="queryInfo" type="QueryInfo" type-id="QueryInfo" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
    		throws WdkUserException, WdkModelException{
        String checksum = instance.getChecksum();
        StringBuffer sql = new StringBuffer("SELECT ");
        sql.append(CacheFactory.COLUMN_INSTANCE_ID).append(", ");
        sql.append(CacheFactory.COLUMN_RESULT_MESSAGE);
        sql.append(" FROM ").append(CacheFactory.TABLE_INSTANCE);
        sql.append(" WHERE ").append(CacheFactory.COLUMN_QUERY_ID);
        sql.append(" = ").append(queryInfo.getQueryId());
        sql.append(" AND ").append(CacheFactory.COLUMN_INSTANCE_CHECKSUM);
        sql.append(" = '").append(checksum).append("'");

        DataSource dataSource = platform.getDataSource();
        ResultSet resultSet = null;
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource,
                    sql.toString(), "wdk_check_instance_exist");
            if (!resultSet.next()) return null;

            int instanceId = resultSet.getInt(CacheFactory.COLUMN_INSTANCE_ID);
            String message = platform.getClobData(resultSet,
                    CacheFactory.COLUMN_RESULT_MESSAGE);
            instance.setResultMessage(message);
            instance.setInstanceId(instanceId);
            return instanceId;}
        catch (SQLException e){
        	throw new WdkModelException("Unable to check instance ID.", e);}
        finally{
            SqlUtils.closeResultSet(resultSet);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o624e39da2b0249f7807d2fabe4dbda7d659" name="createCache" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instance" type="QueryInstance" type-id="QueryInstance" default-value="" />
            <parameter id="" name="queryInfo" type="QueryInfo" type-id="QueryInfo" default-value="" />
            <parameter id="" name="indexColumns" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException, WdkModelException{
        DataSource dataSource = platform.getDataSource();

        // start transaction
        Connection connection = dataSource.getConnection();
        connection.setAutoCommit(false);
        try{
            // add instance into cache index table, and get instanceId back
            // get a new id for the instance
            int instanceId = platform.getNextId(null,
                    CacheFactory.TABLE_INSTANCE);
            instance.setInstanceId(instanceId);

            // check whether need to create the cache;
            String cacheTable = queryInfo.getCacheTable();
            if (!platform.checkTableExists(null, cacheTable)){
                // create the cache using the result of the first query
                instance.createCache(connection, cacheTable, instanceId,
                        indexColumns);
                // disable the stats on the new cache table
                String schema = platform.getWdkModel().getModelConfig().getAppDB().getLogin();
                platform.disableStatistics(connection, schema, cacheTable);} else{// insert result into existing cache table
                instance.insertToCache(connection, cacheTable, instanceId);}

            // instance record is added after the cache is created to make sure
            // if there is something wrong with the query, nothing was cached.
            // check the id again, if it has been created, discard the newly
            // inserted data and use the old one.
            Integer newId = checkInstanceId(instance, queryInfo);
            if (newId == null){
                String checksum = instance.getChecksum();
                try{
                    addCacheInstance(connection, queryInfo, instance,
                            instanceId, checksum);} catch (SQLException ex){
                    // the row must be inserted by other process at the moment.
                    // If so, retrieve it; otherwise, throw error.
                    newId = checkInstanceId(instance, queryInfo);
                    if (newId == null) throw ex;}} else{
                instanceId = newId;}

            connection.commit();
            return instanceId;} catch (SQLException ex){
            ex.printStackTrace();
            logger.error("Failed to create cache for query ["
                    + instance.getQuery().getFullName() + "]");
            connection.rollback();
            throw ex;} catch (WdkUserException ex){
            connection.rollback();
            throw ex;} catch (WdkModelException ex){
            connection.rollback();
            throw ex;} finally{
            connection.setAutoCommit(true);
            connection.close();}}</source-code>
          </source-codes>
        </operation>
        <operation id="o293dbbcc59f5465b9e1ac810ea736825659" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="indexColumns" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException, WdkUserException,
            WdkModelException{
        // create index on query instance id
        StringBuffer sqlId = new StringBuffer("CREATE INDEX ");
        sqlId.append(cacheTable).append("_idx01 ON ").append(cacheTable);
        sqlId.append(" (").append(CacheFactory.COLUMN_INSTANCE_ID).append(")");

        // create index on other columns
        StringBuffer sqlOther = null;
        if (indexColumns != null){
            sqlOther = new StringBuffer("CREATE INDEX ");
            sqlOther.append(cacheTable).append("_idx02 ON ").append(cacheTable);
            sqlOther.append(" (");
            boolean firstColumn = true;
            for (String column : indexColumns){
                if (firstColumn) firstColumn = false;
                else sqlOther.append(", ");
                sqlOther.append(column);}
            sqlOther.append(")");}

        Statement stmt = null;
        try{
            long start = System.currentTimeMillis();
            stmt = connection.createStatement();

            stmt.execute(sqlId.toString());
            SqlUtils.verifyTime(wdkModel, sqlId.toString(), "wdk_create_cache_index01", start);
            if (indexColumns != null){
                start = System.currentTimeMillis();
                stmt.execute(sqlOther.toString());
                SqlUtils.verifyTime(wdkModel, sqlOther.toString(), "wdk_create_cache_index02", start);}} finally{
            if (stmt != null) stmt.close();}}</source-code>
          </source-codes>
        </operation>
        <operation id="o3275f159ddfd4b99aa6c969891208f00659" name="" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="instance" type="QueryInstance" type-id="QueryInstance" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> int instanceId, String checksum)
    		throws WdkModelException, WdkUserException, SQLException{
        StringBuffer sql = new StringBuffer("INSERT INTO ");
        sql.append(CacheFactory.TABLE_INSTANCE).append(" (");
        sql.append(CacheFactory.COLUMN_INSTANCE_ID).append(", ");
        sql.append(CacheFactory.COLUMN_QUERY_ID).append(", ");
        sql.append(CacheFactory.COLUMN_INSTANCE_CHECKSUM).append(", ");
        sql.append(CacheFactory.COLUMN_RESULT_MESSAGE);
        sql.append(") VALUES (?, ?, ?, ?)");

        PreparedStatement ps = null;
        try{
            ps = connection.prepareStatement(sql.toString());
            ps.setInt(1, instanceId);
            ps.setInt(2, queryInfo.getQueryId());
            ps.setString(3, checksum);
            platform.setClobData(ps, 4, instance.getResultMessage(), false);
            ps.executeUpdate();}
        finally{
            // close the statement manually, since we cannot close the
            // connection; it's not committed yet.
        	try{
        		if (ps != null) ps.close();}
        	catch (SQLException e){
        		logger.error("Unable to close PreparedStatement after update!");}}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di460434606320952627" cid="C423" type="class" name="SqlResultList" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:12">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a1eef4784b41544afa242e1e2eaeaf05b2" name="columns" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a9e1f69a6e45b4ba9ab35f03621c3bfa62" name="resultSet" type="ResultSet" type-id="ResultSet" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o42f23aee9969458986bc710ac465ae992" name="finalize" type="" type-id="" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws Throwable{
        SqlUtils.closeResultSet(resultSet);
        // TODO Auto-generated method stub
        super.finalize();}</source-code>
          </source-codes>
        </operation>
        <operation id="o90e26c508d34444ba57c30d1b20754c42" name="SqlResultList" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="resultSet" type="ResultSet" type-id="ResultSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        this.resultSet = resultSet;}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.ResultList#close()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oba73840860d9443e9af1f530bb993bdb2" name="close" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        SqlUtils.closeResultSet(resultSet);}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.ResultList#contains(java.lang.String)
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o8e2e99111dab4b24b6cb127fd91320c92" name="contains" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="columnName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        try{
            if (columns == null) columns = SqlUtils.getColumnNames(resultSet);
            return columns.contains(columnName);} catch (SQLException ex){
            throw new WdkModelException(ex);}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.ResultList#get(java.lang.String)
     */
    public Object get(String columnName){
        try{
            return resultSet.getObject(columnName);} catch (SQLException ex){
            logger.error("Cannot get value for column '" + columnName + "'");
            throw new WdkModelException(ex);}}

    /*
     * (non-Javadoc)
     * 
     * @see org.gusdb.wdk.model.dbms.ResultList#next()
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o05e48d012de64af68ed1c2b018f98de83" name="next" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        try{
            boolean hasNext = resultSet.next();
            if (!hasNext) close();
            return hasNext;} catch (SQLException ex){
            throw new WdkModelException(ex);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di914161945319836181" cid="C424" type="class" name="SqlUtils" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o3b8cace95633416f82b293953c6f72e8907" name="closeResultSet" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="resultSet" type="ResultSet" type-id="ResultSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        try{
            if (resultSet != null){
                // close the statement in any way
                Statement stmt = null;
                try{
                    try{
                        stmt = resultSet.getStatement();} finally{
                        resultSet.close();}} finally{
                    closeStatement(stmt);}}} catch (SQLException ex){
            throw new RuntimeException(ex);}}

    /**
     * Close the statement and underlying connection
     * 
     * @param stmt
     * @throws SQLException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o339193ad2ce0423491662782d331851a907" name="closeStatement" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="stmt" type="Statement" type-id="Statement" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        try{
            if (stmt != null){
                // close the connection in any way
                Connection connection = null;
                try{
                    try{
                        connection = stmt.getConnection();} finally{
                        stmt.close();}} finally{
                    if (connection != null) connection.close();}}} catch (SQLException ex){
            throw new RuntimeException(ex);}}</source-code>
          </source-codes>
        </operation>
        <operation id="oa5cddd8e55bc41cc9898ab62c1c6ac4d907" name="getPreparedStatement" type="PreparedStatement" type-id="PreparedStatement" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws SQLException{
        Connection connection = dataSource.getConnection();
        PreparedStatement ps = null;
        try{
            ps = connection.prepareStatement(sql);
            ps.setFetchSize(100);
            return ps;} catch (SQLException ex){
            logger.error("Failed to prepare query:\n" + sql);
            closeStatement(ps);

            if (ps == null &amp;&amp; connection != null) connection.close();
            throw ex;}}

    /**
     * execute the update, and returns the number of rows affected.
     * 
     * @param dataSource
     * @param sql
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="ob556e198232d4e51a00a3de3dc540c5b907" name="" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException, WdkUserException, WdkModelException{
        try{
            long start = System.currentTimeMillis();
            boolean result = stmt.execute();
            verifyTime(wdkModel, sql, name, start);
            return result;} catch (SQLException ex){
            logger.error("Failed to execute statement: \n" + sql);
            throw ex;}}

    /**
     * execute the update, and returns the number of rows affected.
     * 
     * @param dataSource
     * @param sql
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o6ab024c4d4b64431be13e3620819c0cd907" name="" type="" type-id="" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String name) throws SQLException, WdkUserException,
            WdkModelException{
        Connection connection = null;
        Statement stmt = null;
        try{
            long start = System.currentTimeMillis();
            connection = dataSource.getConnection();
            stmt = connection.createStatement();
            int result = stmt.executeUpdate(sql);
            verifyTime(wdkModel, sql, name, start);
            return result;} catch (SQLException ex){
            logger.error("Failed to run nonQuery:\n" + sql);
            throw ex;} finally{
            closeStatement(stmt);
            if (stmt == null &amp;&amp; connection != null) connection.close();}}

    /**
     * execute the update using an open connection, and returns the number of
     * rows affected. Use this if you have a connection you want to use again
     * such as one that is autocommit=false
     * 
     * @param connection
     * @param sql
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oe59161664df84f2ab375659686039869907" name="executeUpdate" type="int" type-id="int" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="connection" type="Connection" type-id="Connection" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            String sql, String name) throws SQLException, WdkUserException,
            WdkModelException{
        Statement stmt = null;
        try{
            long start = System.currentTimeMillis();
            stmt = connection.createStatement();
            int result = stmt.executeUpdate(sql);
            verifyTime(wdkModel, sql, name, start);
            return result;} catch (SQLException ex){
            logger.error("Failed to run nonQuery:\n" + sql);
            throw ex;} finally{
            // closeStatement(stmt);
            if (stmt != null) stmt.close();}}

    /**
     * Run a query and returns a resultSet. the calling code is responsible for
     * closing the resultSet using the helper method in SqlUtils.
     * 
     * @param dataSource
     * @param sql
     * @return
     * @throws SQLException
     * @throws WdkModelException
     * @throws WdkUserException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oad98cd03278e4a0db74bf8ba9107d835907" name="executeQuery" type="ResultSet" type-id="ResultSet" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String sql, String name)
            throws SQLException, WdkUserException, WdkModelException{
        return executeQuery(wdkModel, dataSource, sql, name, 100);}</source-code>
          </source-codes>
        </operation>
        <operation id="oc62a102f0b744a17b868ba16b34de3df907" name="executeQuery" type="ResultSet" type-id="ResultSet" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String sql, String name, int fetchSize)
            throws SQLException, WdkUserException, WdkModelException{
        ResultSet resultSet = null;
        Connection connection = null;
        try{
            long start = System.currentTimeMillis();
            connection = dataSource.getConnection();
            Statement stmt = connection.createStatement();
            stmt.setFetchSize(fetchSize);
            resultSet = stmt.executeQuery(sql);
            verifyTime(wdkModel, sql, name, start);
            return resultSet;} catch (SQLException ex){
            logger.error("Failed to run query:\n" + sql);
            if (resultSet == null &amp;&amp; connection != null) connection.close();
            closeResultSet(resultSet);
            throw ex;}}

    /**
     * Run the scalar value and returns a single value. If the query returns no
     * rows or more than one row, a WdkModelException will be thrown; if the
     * query returns a single row with many columns, the value in the first
     * column will be returned.
     * 
     * @param dataSource
     * @param sql
     * @return the first column of the first row in the result
     * @throws SQLException
     *             database or query failure
     * @throws WdkModelException
     * @throws WdkModelException
     *             query returns no row
     * @throws WdkUserException
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="oef604dd003654521ac9fed1aea82a925907" name="executeScalar" type="Object" type-id="Object" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
            <parameter id="" name="dataSource" type="DataSource" type-id="DataSource" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> String sql, String name)
            throws SQLException, WdkModelException, WdkUserException{
        ResultSet resultSet = null;
        try{
            resultSet = executeQuery(wdkModel, dataSource, sql, name);
            if (!resultSet.next())
                throw new WdkModelException("The SQL doesn't return any row:\n"
                        + sql);
            return resultSet.getObject(1);} finally{
            closeResultSet(resultSet);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o25cd60eee15d4984aad3ea7efa244ce4907" name="getColumnNames" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="resultSet" type="ResultSet" type-id="ResultSet" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws SQLException{
        Set&lt;String&gt; columns = new LinkedHashSet&lt;String&gt;();
        ResultSetMetaData metaData = resultSet.getMetaData();
        int count = metaData.getColumnCount();
        for (int i = 0; i &lt; count; i++){
            columns.add(metaData.getColumnName(i));}
        return columns;}

    /**
     * Escapes the input string for use in LIKE clauses to allow matching
     * special chars
     * 
     * @param value
     * @return the input value with special characters escaped
     */
    public</source-code>
          </source-codes>
        </operation>
        <operation id="o6a979dd367db433e9d78262adfa3cd65907" name="escapeWildcards" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="value" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return value.replaceAll("%", "{%}").replaceAll("_", "{_}");}</source-code>
          </source-codes>
        </operation>
        <operation id="od4cd028517ac4f4dbf5ff4eece4b1a3b907" name="" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="fromTime" type="long" type-id="long" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkUserException, WdkModelException{
        // verify the name
        if (name.length() &gt; 100 || name.indexOf('\n') &gt;= 0){
            StringWriter writer = new StringWriter();
            new Exception().printStackTrace(new PrintWriter(writer));
            logger.warn("The name of the sql is suspicious, name: '" + name
                    + "', trace:\n" + writer.toString());}

        double seconds = (System.currentTimeMillis() - fromTime) / 1000D;
        logger.trace("SQL [" + name + "] executed in " + seconds + " seconds.");
        logger.trace(sql);

        if (seconds &lt; 0){
            logger.error("code error, negative exec time:");
            new Exception().printStackTrace();}
        QueryMonitor monitor = wdkModel.getQueryMonitor();
        // convert the time to seconds
        // check if it is a slow query
        // check if it is a broken query
        boolean logged = false;
        if (seconds &gt;= monitor.getBrokenQueryThreshold()){
            if (!monitor.isIgnoredBrokenQuery(sql)){
                logger.warn("SUPER SLOW SQL [" + name + "]: " + seconds
                        + " seconds.\n" + sql);
                // also send email to admin
                String email = wdkModel.getModelConfig().getAdminEmail();
                if (email != null){
                    String subject = "[" + wdkModel.getProjectId()
                            + "] Super Slow Query [" + name + "] " + seconds
                            + " seconds";

                    Calendar cal = Calendar.getInstance();
                    SimpleDateFormat sdf = new SimpleDateFormat(
                            "yyyy-MM-dd HH:mm:ss");
                    String content = "&lt;p&gt;Recorded: "
                            + sdf.format(cal.getTime()) + "&lt;/p&gt;\n&lt;p&gt;" + sql
                            + "&lt;/p&gt;";
                    Utilities.sendEmail(wdkModel, email, email, subject,
                            content);}
                logged = true;}}
        if (!logged &amp;&amp; seconds &gt;= monitor.getSlowQueryThreshold()){
            if (!monitor.isIgnoredSlowQuery(sql))
                logger.warn("SLOW SQL [" + name + "]: " + seconds
                        + " seconds.\n" + sql);}}

    /**
     * private constructor, make sure SqlUtils cannot be instanced.
     */
    private</source-code>
          </source-codes>
        </operation>
        <operation id="o1a7abe4238d440f383273daf1df931a5907" name="SqlUtils" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di282487192709277103" cid="C425" type="class" name="AbstractAttributePlugin" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:20">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a735f756f2176421eb858e31ab85a0f66445" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a6172ca0ae3d64141891cc7e20cc27540445" name="display" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0e7c92c7b89e4dd2bf507403a72754bd445" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a74238885356e4436b1fe4b97c05626ea445" name="view" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="ac71547d2f80a4c579f107e70b4d038c6445" name="wdkModel" type="WdkModel" type-id="WdkModel" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a133e43e98d0f40339db530bc20b99fab445" name="properties" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a13d15c662be54a70a99ef9e7135e6f85445" name="attributeField" type="AttributeField" type-id="AttributeField" visibility="protected" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a93f3241abfb84610bd56e3a5f4832914445" name="step" type="Step" type-id="Step" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="odbafe70e606c402389427492cab958d9445" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}</source-code>
          </source-codes>
        </operation>
        <operation id="od4e4afc5d3bd49c194d9b74353844c2d445" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc4057be6fa4f4326817f6bf46557c933445" name="getDisplay" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return (display == null) ? name : display;}</source-code>
          </source-codes>
        </operation>
        <operation id="o30cc934c34494dcb9382413cddc0839e445" name="setDisplay" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="display" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.display = display;}

    /**
     * @return the description
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obf37cec030cf4e7e9d4eb0e7768a1756445" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.description;}

    /**
     * @param description the description to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o08625d748c1445a0a54f1da92b610583445" name="setDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.description = description;}

    /**
     * @return the view
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocf751ca96c544ac6b8fa04a8826735ad445" name="getView" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.view;}

    /**
     * @param view the view to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="offa685f6253b4133b10b6752820e4a43445" name="setView" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="view" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.view = view;}</source-code>
          </source-codes>
        </operation>
        <operation id="oac91cda1a02740f68936e0479d00ce1e445" name="setProperties" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="properties" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.properties = properties;}</source-code>
          </source-codes>
        </operation>
        <operation id="o04d2a9ab83534aa8beacd1ebcab3fddc445" name="setAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attribute" type="AttributeField" type-id="AttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.attributeField = attribute;}</source-code>
          </source-codes>
        </operation>
        <operation id="oacce4ff7ea9047f5860eb9a26d0462e8445" name="setStep" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="step" type="Step" type-id="Step" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.step = step;
        this.wdkModel = step.getUser().getWdkModel();}

    /**
     * @return the current step
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o84c8153d11ee43cc821844c4a4727cec445" name="getStep" type="Step" type-id="Step" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return step;}

    /**
     * @return the combined attribute sql and id sql. the returned columns
     *         include all primary key columns (they can be found in the
     *         PrimaryKeyAttributeField of the RecordClass), as well as a column
     *         for the associated attribute, the name of the column is defined
     *         as AbstractAttributePlugin.ATTRIBUTE_COLUMN.
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     * @throws SQLException
     * @throws JSONException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6718e0fa728744a2aa0c72a9126db4aa445" name="getAttributeSql" type="String" type-id="Uml.String" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException,
            NoSuchAlgorithmException, WdkUserException, SQLException,
            JSONException{
        // format the display of the attribute in sql
        Map&lt;String, String&gt; queries = new LinkedHashMap&lt;String, String&gt;();
        String column = formatColumn(attributeField, queries);

        RecordClass recordClass = step.getQuestion().getRecordClass();
        String[ pkColumns = recordClass.getPrimaryKeyAttributeField()
                .getColumnRefs();
        AnswerValue answerValue = step.getAnswerValue();
        String idSql = answerValue.getIdSql();

        // construct the select clause
        StringBuilder sql = new StringBuilder("SELECT ");
        for (String pkColumn : pkColumns){
            sql.append("idq.").append(pkColumn).append(", ");}
        sql.append(column).append(" AS ").append(ATTRIBUTE_COLUMN);

        // construct the from clause
        sql.append(" FROM (" + idSql + ") idq");
        for (String queryName : queries.keySet()){
            String sqlId = queries.get(queryName);
            SqlQuery query = (SqlQuery) wdkModel.resolveReference(queryName);
            String attrSql = answerValue.getAttributeSql(query);
            sql.append(", (" + attrSql + ") " + sqlId);}

        // construct the where clause
        boolean first = true;
        for (String sqlId : queries.values()){
            for (String pkColumn : pkColumns){
                if (first){
                    sql.append(" WHERE ");
                    first = false;} else sql.append(" AND ");
                sql.append("idq." + pkColumn + " = " + sqlId + "." + pkColumn);}}

        return sql.toString();}

    /**
     * @return the values of the associated attribute. the key of the map is the
     *         primary key of a Orecord instance.
     * @throws WdkModelException
     * @throws NoSuchAlgorithmException
     * @throws WdkUserException
     * @throws SQLException
     * @throws JSONException
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o537eeabc97b4426c9109e66230375e51445" name="getAttributeValues" type="Map&lt;PrimaryKeyAttributeValue, Object&gt;" type-id="Map&lt;PrimaryKeyAttributeValue, Object&gt;" visibility="protected" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">
            throws WdkModelException, NoSuchAlgorithmException,
            WdkUserException, SQLException, JSONException{
        Map&lt;PrimaryKeyAttributeValue, Object&gt; values = new LinkedHashMap&lt;PrimaryKeyAttributeValue, Object&gt;();
        RecordClass recordClass = step.getQuestion().getRecordClass();
        PrimaryKeyAttributeField pkField = recordClass
                .getPrimaryKeyAttributeField();
        String[ pkColumns = pkField.getColumnRefs();
        String sql = getAttributeSql();
        DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
        ResultSet resultSet = null;
        try{
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource, sql,
                    "wdk-attribute-plugin-combined", 5000);
            while (resultSet.next()){
                Map&lt;String, Object&gt; pkValues = new LinkedHashMap&lt;String, Object&gt;();
                for (String pkColumn : pkColumns){
                    pkValues.put(pkColumn, resultSet.getObject(pkColumn));}
                PrimaryKeyAttributeValue pkValue = new PrimaryKeyAttributeValue(
                        pkField, pkValues);
                Object value = resultSet.getObject(ATTRIBUTE_COLUMN);
                values.put(pkValue, value);}}
        finally{
            SqlUtils.closeResultSet(resultSet);}
        return values;}</source-code>
          </source-codes>
        </operation>
        <operation id="o00454191e84d448390d4216ac78d94af445" name="formatColumn" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attribute" type="AttributeField" type-id="AttributeField" default-value="" />
            <parameter id="" name="queries" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        // if column attribute can be formatted directly.
        if (attribute instanceof ColumnAttributeField){
            Column column = ((ColumnAttributeField) attribute).getColumn();
            String queryName = column.getQuery().getFullName();
            String sqlId = queries.get(queryName);
            if (sqlId == null){
                sqlId = "aq" + queries.size();
                queries.put(queryName, sqlId);}
            return sqlId + "." + column.getName();}

        // get the content of the attribute
        String content;
        if (attribute instanceof LinkAttributeField){
            content = ((LinkAttributeField) attribute).getDisplayText();} else if (attribute instanceof PrimaryKeyAttributeField){
            content = ((PrimaryKeyAttributeField) attribute).getText();} else if (attribute instanceof TextAttributeField){
            content = ((TextAttributeField) attribute).getText();} else{
            throw new WdkModelException("Attribute type not supported: "
                    + attribute.getName());}
        // escape the quotes
        content = content.trim().replaceAll("'", "''");

        // replace each attribute in the content
        StringBuilder builder = new StringBuilder("'");
        int pos = 0;
        Map&lt;String, AttributeField&gt; fields = step.getQuestion()
                .getAttributeFieldMap();
        Matcher matcher = AttributeField.MACRO_PATTERN.matcher(content);
        while (matcher.find()){
            String fieldName = matcher.group(1);
            AttributeField field = fields.get(fieldName);
            String fieldContent = formatColumn(field, queries);

            if (matcher.start() &gt; pos)
                builder.append(content.substring(pos, matcher.start()));
            builder.append("' || " + fieldContent + " || '");
            pos = matcher.end();}
        if (pos &lt; content.length() - 1) builder.append(content.substring(pos));
        return builder.append("'").toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di380661267740576489" cid="C426" type="class" name="AttributePluginReference" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:22">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a92c10866431a42269d32a053e71a0ebe567" name="name" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aad2824b23dd1415a8d0272e9fdae4a62567" name="display" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a496dcdad45d7421ea95ca17672229bd7567" name="description" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a5b078e87b8ed48afa1147030e74c2b5a567" name="implementation" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a211da38c8f534271806bc94dd8aca641567" name="view" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a999ee8288c8b40279cdb92df0902da3d567" name="attributeField" type="AttributeField" type-id="AttributeField" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0d2a99fe221f406eb84e729dd1a31510567" name="propertyMap" type="Map&lt;String, String&gt;" type-id="Map&lt;String, String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o050475ad750e44e4894575661328bd80567" name="getName" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return name;}

    /**
     * @param name
     *            the name to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o859e449134ab4785a03d327c93486b0f567" name="setName" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.name = name;}

    /**
     * @return the display
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o154d6b42273a4f809a80218984c3dff0567" name="getDisplay" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return display;}

    /**
     * @param display
     *            the display to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc11587634fbe4b759598429d06b927ca567" name="setDisplay" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="display" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.display = display;}

    /**
     * @return the description
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o027eda13f9e643f5893eb44ad40c2a00567" name="getDescription" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return this.description;}

    /**
     * @param description
     *            the description to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o981c74b1b7154cc8a833cf8ab3bfe83e567" name="setDescription" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="description" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.description = description;}

    /**
     * @param implementation
     *            the implementation to set
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0ca8a87289fd439dbe291cd8f4f7c030567" name="setImplementation" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="implementation" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.implementation = implementation;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe1e83f326191429a8a80e42d2eae41f3567" name="getView" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        return view;}</source-code>
          </source-codes>
        </operation>
        <operation id="o38e3ac2d969b49f2b3488d6ca59ed3a0567" name="setView" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="view" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.view = view;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa217318596084bc7b87172905274cf33567" name="setAttributeField" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeField" type="AttributeField" type-id="AttributeField" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.attributeField = attributeField;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6e3d901140714f70ad433c778788f698567" name="addProperty" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="property" type="WdkModelText" type-id="WdkModelText" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        this.propertyList.add(property);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oc41fb38900044057a1b6e1d5b2fb82e8567" name="excludeResources" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="projectId" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.excludeResources(projectId);

        // exclude properties
        propertyMap = new LinkedHashMap&lt;String, String&gt;();
        for (WdkModelText property : propertyList){
            if (property.include(projectId)){
                property.excludeResources(projectId);
                String name = property.getName();
                if (propertyMap.containsKey(name))
                    throw new WdkModelException("The property '" + name
                            + "' already exists in column plugin " + this.name);
                propertyMap.put(name, property.getText());}}
        propertyList = null;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob5e11983531a4f38b25cf9cd919f87a2567" name="resolveReferences" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="wdkModel" type="WdkModel" type-id="WdkModel" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws WdkModelException{
        super.resolveReferences(wdkModel);

        // make sure the implementation does implement AttributePlugin interface
        try{
            Class&lt;?&gt; pluginClass = Class.forName(implementation);
            Object plugin = pluginClass.newInstance();
            if (!(plugin instanceof AttributePlugin))
                throw new WdkModelException("The implementation '"
                        + implementation + "' of attribute plugin '" + name
                        + "' must implement interface "
                        + AttributePlugin.class.getCanonicalName());}
        catch (Exception ex){
            throw new WdkModelException(ex);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1757cff8ae0442288f5f57b3471708b5567" name="getPlugin" type="AttributePlugin" type-id="AttributePlugin" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined"> throws InstantiationException,
            IllegalAccessException, ClassNotFoundException{
        Class&lt;? extends AttributePlugin&gt; pluginClass = Class.forName(
                implementation).asSubclass(AttributePlugin.class);
        AttributePlugin plugin = pluginClass.newInstance();
        plugin.setName(name);
        plugin.setDisplay(display);
        plugin.setDescription(description);
        plugin.setView(view);
        plugin.setProperties(propertyMap);
        plugin.setAttributeField(attributeField);

        return plugin;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di406471867955471924" cid="C427" type="class" name="HistogramAttributePlugin" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:24">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a3180dbf7d8594dff872f1b9a42e370b8271" name="summaries" type="Map&lt;String, Integer&gt;" type-id="Map&lt;String, Integer&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="ob680143cef3f42bab70206578f00c536271" name="process" type="Map&lt;String, Object&gt;" type-id="Map&lt;String, Object&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        loadSummaries();
        
        Map&lt;String, Integer&gt; histogram = scaleHistogram(summaries);

        // compose the result
        Map&lt;String, Object&gt; result = new LinkedHashMap&lt;String, Object&gt;();
        result.put(ATTR_SUMMARY, summaries);
        result.put(ATTR_HISTOGRAM, histogram);
        result.put(ATTR_PLUGIN, this);
        return result;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8891770b797f4d3cb70638ffb02c56b9271" name="getDownloadContent" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        loadSummaries();
        
        StringBuilder builder = new StringBuilder();
        builder.append("&lt;table&gt;");
        builder.append("&lt;tr&gt;&lt;th&gt;" + attributeField.getDisplayName() + "&lt;/th&gt;&lt;th&gt;Record Count&lt;/th&gt;&lt;/tr&gt;");
        for(String attribute : summaries.keySet()){
            int count = summaries.get(attribute);
            builder.append("&lt;tr&gt;&lt;td&gt;" + attribute + "&lt;/td&gt;&lt;td&gt;" + count + "&lt;/td&gt;&lt;/tr&gt;");}
        builder.append("&lt;/table&gt;");
        return builder.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="odb14b2d067fb4cc68fab66aba982988d271" name="loadSummaries" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (summaries != null) return;
        
        summaries = new LinkedHashMap&lt;String, Integer&gt;();
        ResultSet resultSet = null;
        try{
            String attributeColumn = AbstractAttributePlugin.ATTRIBUTE_COLUMN;
            String attributeSql = getAttributeSql();
            String summarySql = composeSql(attributeColumn, attributeSql);
            DataSource dataSource = wdkModel.getQueryPlatform().getDataSource();
            resultSet = SqlUtils.executeQuery(wdkModel, dataSource, summarySql,
                    "wdk-attribute-histogram-" + attributeField.getName());
            while (resultSet.next()){
                String column = resultSet.getString(attributeColumn);
                if (column == null) column = "";
                int summary = resultSet.getInt(COLUMN_SUMMARY);
                summaries.put(column, summary);}}
        catch (Exception ex){
            logger.error(ex);
            throw new RuntimeException(ex);}
        finally{
            SqlUtils.closeResultSet(resultSet);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o4bdfe7cc135e4e76bda0bd69c7e986f1271" name="composeSql" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="attributeColumn" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="sql" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        StringBuilder groupSql = new StringBuilder("SELECT ");
        groupSql.append(attributeColumn + ", count(*) AS " + COLUMN_SUMMARY);
        groupSql.append(" FROM (" + sql + ")  GROUP BY " + attributeColumn);
        groupSql.append(" ORDER BY " + attributeColumn + " ASC");
        return groupSql.toString();}</source-code>
          </source-codes>
        </operation>
        <operation id="o339d47d7dd234561b422fb06acd70e33271" name="scaleHistogram" type="Map&lt;String, Integer&gt;" type-id="Map&lt;String, Integer&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="histogram" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // get the max bar length
        float maxBarLength = DEFAULT_MAX_BAR_LENGTH;
        String strMax = properties.get(PROP_MAX_BAR_LENGTH);
        if (strMax != null &amp;&amp; strMax.length() != 0)
            maxBarLength = Float.valueOf(strMax);

        // find the max length
        int maxLength = 0;
        for (int length : histogram.values()){
            if (maxLength &lt; length) maxLength = length;}

        float scale = maxBarLength / maxLength;
        Map&lt;String, Integer&gt; scaled = new LinkedHashMap&lt;String, Integer&gt;();
        for (String column : histogram.keySet()){
            int length = Math.max(1, Math.round(histogram.get(column) * scale));
            scaled.put(column, length);}
        return scaled;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di347076127452619210" cid="C428" type="class" name="WordCloudAttributePlugin" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:39:27">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a6a36c3088f81440ab1e7e0eb4786b870733" name="splitPattern" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="&quot;[^a-z0-9_]+&quot;">
          <stereotypes />
        </attribute>
        <attribute id="a68823647ddce47d79fded7b8c69fa7d7733" name="minWordLength" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="3">
          <stereotypes />
        </attribute>
        <attribute id="a2e88f79cd22248e39dcd087c07a07110733" name="excludeNumbers" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true">
          <stereotypes />
        </attribute>
        <attribute id="a450f0a4c33fd4a8fad7a083d0b41dec0733" name="commonWords" type="Set&lt;String&gt;" type-id="Set&lt;String&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="a0e207dada7f8446c87648c82a25cee1e733" name="tags" type="List&lt;WordTag&gt;" type-id="List&lt;WordTag&gt;" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
        <attribute id="aeecd7438ea234d289a92eab91d46c1a0733" name="content" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false">
          <stereotypes />
        </attribute>
      </attributes>
      <operations>
        <operation id="o0e9ae67256e14995b2f2a5efec779cfd733" name="process" type="Map&lt;String, Object&gt;" type-id="Map&lt;String, Object&gt;" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        loadTags();

        // compose the result
        Map&lt;String, Object&gt; result = new LinkedHashMap&lt;String, Object&gt;();
        result.put(ATTR_CONTENT, content.trim());
        result.put(ATTR_TAGS, tags);
        result.put(ATTR_PLUGIN, this);
        return result;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1978eff2bfbe4b8892a7196990e93070733" name="loadTags" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        if (tags != null) return;

        resolveProperties();
        StringBuilder content = new StringBuilder();
        try{
            Map&lt;String, WordTag&gt; tagMap = new HashMap&lt;String, WordTag&gt;();
            Map&lt;PrimaryKeyAttributeValue, Object&gt; values = getAttributeValues();
            for (Object value : values.values()){
                if (value == null) continue;
                content.append(" ").append(value);
                splitWords(value.toString(), tagMap);}
            this.content = content.toString();
            // the tags are sorted by count
            tags = processTags(tagMap);}
        catch (Exception ex){
            logger.error(ex);
            throw new RuntimeException(ex);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o69f196eb5d2c457aab61c7e40e57b831733" name="resolveProperties" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // get common words
        String[ words = COMMON_WORDS;
        if (properties.containsKey(PROP_COMMON_WORDS))
            words = properties.get(PROP_COMMON_WORDS).split(",");
        commonWords = new HashSet&lt;String&gt;();
        for (String word : words){
            commonWords.add(word);}

        // check if exclude numbers
        if (properties.containsKey(PROP_EXCLUDE_NUMBERS))
            excludeNumbers = Boolean.valueOf(properties
                    .get(PROP_EXCLUDE_NUMBERS));

        // if (properties.containsKey(PROP_MAX_WEIGHT))
        // maxWeight = Integer.valueOf(properties.get(PROP_MAX_WEIGHT));
        //
        // if (properties.containsKey(PROP_MIN_WEIGHT))
        // minWeight = Integer.valueOf(properties.get(PROP_MIN_WEIGHT));
        //
        if (properties.containsKey(PROP_MIN_WORD_LENGTH))
            minWordLength = Integer.valueOf(properties
                    .get(PROP_MIN_WORD_LENGTH));

        if (properties.containsKey(PROP_SPLIT_PATTERN))
            splitPattern = properties.get(PROP_SPLIT_PATTERN);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob8663e1fc59c4849bb47274e71d10e11733" name="splitWords" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="content" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="tags" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // break the words
        String[ words = content.trim().toLowerCase().split(splitPattern);
        for (String word : words){
            // exclude small words
            if (word.length() &lt; minWordLength) continue;
            // exclude common words
            if (commonWords.contains(word)) continue;
            // exclude numbers
            if (excludeNumbers &amp;&amp; word.matches(NUMBER_PATTERN)) continue;

            WordTag tag = tags.get(word);
            if (tag == null) tag = new WordTag(word);
            else tag.increment();
            tags.put(word, tag);
            // logger.debug("word count: '" + word + "' = " + count);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o34d9ba250bff40bc84ab52945e0ddbf5733" name="processTags" type="List&lt;WordTag&gt;" type-id="List&lt;WordTag&gt;" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="tags" type="Map" type-id="Map" default-value="" />
          </parameters>
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        // remove the plurals
        List&lt;WordTag&gt; list = new ArrayList&lt;WordTag&gt;();
        for (WordTag tag : tags.values()){
            boolean isPlural = false;
            // look for plural words
            String word = tag.getWord();
            if (word.endsWith("s")){
                String part = word.substring(0, word.length() - 1);
                if (!tags.containsKey(part) &amp;&amp; word.endsWith("es")){
                    part = word.substring(0, word.length() - 2);
                    if (!tags.containsKey(part) &amp;&amp; word.endsWith("ies"))
                        part = word.substring(0, word.length() - 3) + "y";}

                if (tags.containsKey(part)){
                    WordTag partTag = tags.get(part);
                    int count = tag.getCount() + partTag.getCount();
                    partTag.setCount(count);
                    isPlural = true;}}
            // only keep the tags that are not plural
            if (!isPlural) list.add(tag);}

        if (list.size() &gt; 1){
            // sort the tags by count, so that the follow-up computation of
            // weights and scores are easier.
            Collections.sort(list);
            // no need to compute weight and score, since everything will be
            // computed on the client side.

            // compute weights
            // computeWeight(list);
            // compute scores
            // computeScore(list);
            // } else if (list.size() == 1) {
            // WordTag tag = list.get(0);
            // tag.setWeight(maxWeight);
            // tag.setScore(1);}
        return list;}

    //
    // /**
    // * @param tags
    // * The tags have been sorted by the count.
    // */
    // private void computeWeight(List&lt;WordTag&gt; tags) {
    // int maxCount = tags.get(0).getCount();
    // int minCount = tags.get(tags.size() - 1).getCount();
    // float scale = (float) (maxWeight - minWeight) / (maxCount - minCount);
    // for (WordTag tag : tags) {
    // float weight = (tag.getCount() - minCount) * scale + minWeight;
    // tag.setWeight(weight);
    // }
    // }
    //
    // /**
    // * the scores are scaled into [0, 100];
    // *
    // * @param tags
    // */
    // private void computeScore(List&lt;WordTag&gt; tags) {
    // double maxValue = Math.log(tags.get(0).getCount());
    // double minValue = Math.log(tags.get(tags.size() - 1).getCount());
    // double scale = 100 / (maxValue - minValue);
    // for (WordTag tag : tags) {
    // double value = Math.log(tag.getCount());
    // int score = (int) Math.round((value - minValue) * scale);
    // tag.setScore(score);
    // }
    // }</source-code>
          </source-codes>
        </operation>
        <operation id="o32dcf36e2b4e467382d2bdcfa0dae140733" name="getDownloadContent" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters />
          <stereotypes />
          <source-codes>
            <source-code language="Undefined">{
        loadTags();

        StringBuilder builder = new StringBuilder();
        builder.append("&lt;table&gt;");
        builder.append("&lt;tr&gt;&lt;th&gt;Keyword&lt;/th&gt;&lt;th&gt;Occurrence&lt;/th&gt;&lt;tr&gt;");
        for (WordTag tag : tags){
            builder.append("&lt;tr&gt;&lt;td&gt;" + tag.getWord() + "&lt;/td&gt;&lt;td&gt;"
                    + tag.getCount() + "&lt;/td&gt;&lt;/tr&gt;");}
        builder.append("&lt;/table&gt;");
        return builder.toString();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di299770459860486898" cid="ELEM183" type="group" name="Group" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:30:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
    </item>
    <item id="di433836391352693097" cid="ELEM006" type="shape" name="Element6" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di438582201545759109" cid="ELEM005" type="shape" name="Element5" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF00AA00" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di295911666109927803" cid="ELEM183" type="group" name="Group" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:30:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
    </item>
    <item id="di864766390226560200" cid="ELEM006" type="shape" name="Element6" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di327883172792933896" cid="ELEM005" type="shape" name="Element5" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF00AA00" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di392143972678267399" cid="ELEM006" type="shape" name="Element6" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di937788006104129153" cid="ELEM005" type="shape" name="Element5" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF00AA00" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di475739910129613412" cid="ELEM183" type="group" name="Group" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:30:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
    </item>
    <item id="di943981306292528579" cid="ELEM183" type="group" name="Group" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:30:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
    </item>
    <item id="di468047860114023174" cid="ELEM006" type="shape" name="Element6" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di435540861976191908" cid="ELEM005" type="shape" name="Element5" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF00AA00" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di435200049143866507" cid="ELEM006" type="shape" name="Element6" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di919168535867001138" cid="ELEM005" type="shape" name="Element5" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:28:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
    </item>
    <item id="di636515684533134461" cid="ELEM183" type="group" name="Group" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:30:16">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
    </item>
    <item id="ddip818293798957713535_434264259883286327" cid="UC006" type="use-case" name="Create Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:13:02">
      <stereotypes />
      <tagged-values />
      <associated-diagrams>
        <diagram id="p226957974226589492" />
      </associated-diagrams>
      <owned-items />
      <style class="default" />
    </item>
    <item id="ddip226957974226589492_498006896496794833" cid="AN007" type="sequence-action" name="Action7" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 15:47:51">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <sequence-action type="call" message="updateStepDescendents()" is-asynchronous="false" />
    </item>
  </items>
  <models>
    <model id="p748111579681151053" name="Model 1" type="model" namespace="" order-index="1">
      <meta>
        <authors>
          <author> </author>
        </authors>
        <description />
        <creation-date>07/12/2012 12:33:28</creation-date>
        <change-date>01/01/0001 00:00:00</change-date>
        <revision-count>0</revision-count>
        <version />
      </meta>
      <abstract-items />
      <sub-models />
      <diagram type="uml-class" id="p278344682737482036" name="Class Diagram All" order-index="2" show-nullability="false">
        <style>
          <background-color index="1" color="#FFFFFFFF" />
          <background-color index="2" color="#FFFFFFFF" />
          <background-type type="vertical-linear" />
        </style>
        <meta>
          <authors>
            <author> </author>
          </authors>
          <description />
          <creation-date>07/12/2012 12:39:28</creation-date>
          <change-date>07/12/2012 12:39:28</change-date>
          <revision-count>0</revision-count>
          <version />
        </meta>
        <abstract-items />
        <layer name="Default" visible="true" enabled="true" locked="false">
          <item id="di679030777475998469" iid="d65f47005b1247fcbdf67d73667a1600" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="0" type="entity">
            <layout ax="10" ay="10" awidth="140" aheight="160" x="10" y="10" width="0" height="0" />
            <class />
          </item>
          <item id="di101955302201226563" iid="7fbc2467ea3e4f5290b3bcd52d82f9c4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="1" type="entity">
            <layout ax="160" ay="10" awidth="140" aheight="160" x="160" y="10" width="0" height="0" />
            <class />
          </item>
          <item id="di633467168882408572" iid="28ccbab1e0cb4857bb885a1a397d2730" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="2" type="entity">
            <layout ax="310" ay="10" awidth="140" aheight="160" x="310" y="10" width="0" height="0" />
            <class />
          </item>
          <item id="di312981370951211126" iid="00c583c1751d4dc9a9a0b122d7e05532" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="3" type="entity">
            <layout ax="460" ay="10" awidth="140" aheight="160" x="460" y="10" width="0" height="0" />
            <class />
          </item>
          <item id="di146237727409867470" iid="b0f025d4d30043b0a2b5cb884ffca2d5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="4" type="entity">
            <layout ax="610" ay="10" awidth="140" aheight="160" x="610" y="10" width="0" height="0" />
            <class />
          </item>
          <item id="di558828821601981958" iid="7b4a0cb1f0d84fd4b68cdae0296461dd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="5" type="entity">
            <layout ax="760" ay="10" awidth="140" aheight="160" x="760" y="10" width="0" height="0" />
            <class />
          </item>
          <item id="di973067721213334958" iid="2582729cd5fa4296b4d0ba5073521111" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="6" type="entity">
            <layout ax="10" ay="180" awidth="140" aheight="160" x="10" y="180" width="0" height="0" />
            <class />
          </item>
          <item id="di138251565897285800" iid="d9f588d129244e8caec43bf5ab229c39" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="7" type="entity">
            <layout ax="160" ay="180" awidth="140" aheight="160" x="160" y="180" width="0" height="0" />
            <class />
          </item>
          <item id="di624027824183952080" iid="4b5da1e530084bf59ddd5250a41115f9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="8" type="entity">
            <layout ax="310" ay="180" awidth="140" aheight="160" x="310" y="180" width="0" height="0" />
            <class />
          </item>
          <item id="di479398989219281280" iid="d5a3334ed6d1407c9640b4bfdad98ee8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="9" type="entity">
            <layout ax="460" ay="180" awidth="140" aheight="160" x="460" y="180" width="0" height="0" />
            <class />
          </item>
          <item id="di256900610845907431" iid="1683109343cf4d5db04fadec68ce7071" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="10" type="entity">
            <layout ax="610" ay="180" awidth="140" aheight="160" x="610" y="180" width="0" height="0" />
            <class />
          </item>
          <item id="di288578242453711888" iid="b61da0affc5d4ecdb12920551c2042c8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="11" type="entity">
            <layout ax="760" ay="180" awidth="140" aheight="160" x="760" y="180" width="0" height="0" />
            <class />
          </item>
          <item id="di588633462646231796" iid="9144b2eedeaa4d02b9c0e2f8258edd59" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="12" type="entity">
            <layout ax="10" ay="350" awidth="140" aheight="160" x="10" y="350" width="0" height="0" />
            <class />
          </item>
          <item id="di390808899121191578" iid="3f3f3b6bb197406e98f6b1f4a9fe056d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="13" type="entity">
            <layout ax="160" ay="350" awidth="140" aheight="160" x="160" y="350" width="0" height="0" />
            <class />
          </item>
          <item id="di905377597687198095" iid="bf6d57520f92425cbda09a1e605158bb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="14" type="entity">
            <layout ax="310" ay="350" awidth="140" aheight="160" x="310" y="350" width="0" height="0" />
            <class />
          </item>
          <item id="di639981053829874138" iid="e5f6fa2687b54d3eaefb2b67802e07b0" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="15" type="entity">
            <layout ax="460" ay="350" awidth="140" aheight="160" x="460" y="350" width="0" height="0" />
            <class />
          </item>
          <item id="di412273419667740386" iid="523445b650784217ab9577654e3f604a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="16" type="entity">
            <layout ax="610" ay="350" awidth="140" aheight="160" x="610" y="350" width="0" height="0" />
            <class />
          </item>
          <item id="di560914610904658306" iid="bee26f8adfbb4f39a05ac467d285574a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="17" type="entity">
            <layout ax="760" ay="350" awidth="140" aheight="160" x="760" y="350" width="0" height="0" />
            <class />
          </item>
          <item id="di772226955709176858" iid="18e090190d9a4f239c76f05f48b05018" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="18" type="entity">
            <layout ax="10" ay="520" awidth="140" aheight="160" x="10" y="520" width="0" height="0" />
            <class />
          </item>
          <item id="di907442539805502205" iid="692efc8275154b588127e33033e1ead3" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="19" type="entity">
            <layout ax="160" ay="520" awidth="140" aheight="160" x="160" y="520" width="0" height="0" />
            <class />
          </item>
          <item id="di604588006873279083" iid="57423b594f6a4b60899f29e182d41e52" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="20" type="entity">
            <layout ax="310" ay="520" awidth="140" aheight="160" x="310" y="520" width="0" height="0" />
            <class />
          </item>
          <item id="di173925527310573853" iid="dc105ef67c44445790754d519d4e642d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="21" type="entity">
            <layout ax="460" ay="520" awidth="140" aheight="160" x="460" y="520" width="0" height="0" />
            <class />
          </item>
          <item id="di956623095496810963" iid="5ce7be1f11d84cb58c2e0972161256e4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="22" type="entity">
            <layout ax="610" ay="520" awidth="140" aheight="160" x="610" y="520" width="0" height="0" />
            <class />
          </item>
          <item id="di939942112955934021" iid="99bdac3b0ee647d9a6308d937e57762c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="23" type="entity">
            <layout ax="760" ay="520" awidth="140" aheight="160" x="760" y="520" width="0" height="0" />
            <class />
          </item>
          <item id="di802961372643331929" iid="cea9085d7dbd4bd4b8494a7272727c6b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="24" type="entity">
            <layout ax="10" ay="690" awidth="140" aheight="160" x="10" y="690" width="0" height="0" />
            <class />
          </item>
          <item id="di581903952126930509" iid="c4af5db3fcbc4e1b88a9757fe2434e7a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="25" type="entity">
            <layout ax="160" ay="690" awidth="140" aheight="160" x="160" y="690" width="0" height="0" />
            <class />
          </item>
          <item id="di681578709362269999" iid="05bf3711858847ecb8cf34107c417ed9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="26" type="entity">
            <layout ax="310" ay="690" awidth="140" aheight="160" x="310" y="690" width="0" height="0" />
            <class />
          </item>
          <item id="di882359400499979161" iid="c412134866184b4a901d94d6eb9172dd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="27" type="entity">
            <layout ax="460" ay="690" awidth="140" aheight="160" x="460" y="690" width="0" height="0" />
            <class />
          </item>
          <item id="di396445018648243413" iid="8f1ca09bdcbd4bc28b73a83890fd3c9c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="28" type="entity">
            <layout ax="610" ay="690" awidth="140" aheight="160" x="610" y="690" width="0" height="0" />
            <class />
          </item>
          <item id="di612593100987235370" iid="7d44d8f2fd0b4a3cacca4eb7441dc8e0" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="29" type="entity">
            <layout ax="760" ay="690" awidth="140" aheight="160" x="760" y="690" width="0" height="0" />
            <class />
          </item>
          <item id="di591599673291789792" iid="83e08100474c44349a74279461952a04" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="30" type="entity">
            <layout ax="10" ay="860" awidth="140" aheight="160" x="10" y="860" width="0" height="0" />
            <class />
          </item>
          <item id="di145833528459039630" iid="b3668ec662bd42d092a005ae515d318e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="31" type="entity">
            <layout ax="160" ay="860" awidth="140" aheight="160" x="160" y="860" width="0" height="0" />
            <class />
          </item>
          <item id="di769886416728954682" iid="b041d5cda2004b08b6bc234443c4ede6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="32" type="entity">
            <layout ax="310" ay="860" awidth="140" aheight="160" x="310" y="860" width="0" height="0" />
            <class />
          </item>
          <item id="di289708538405327334" iid="5d9f51510645404fa5925d2f15a40469" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="33" type="entity">
            <layout ax="460" ay="860" awidth="140" aheight="160" x="460" y="860" width="0" height="0" />
            <class />
          </item>
          <item id="di652420346233593257" iid="cef264d5cc08461b9e5f4f2cc3eca8cd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="34" type="entity">
            <layout ax="610" ay="860" awidth="140" aheight="160" x="610" y="860" width="0" height="0" />
            <class />
          </item>
          <item id="di225058844914850965" iid="c3650a62415b4a3287e0502101821311" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="35" type="entity">
            <layout ax="760" ay="860" awidth="140" aheight="160" x="760" y="860" width="0" height="0" />
            <class />
          </item>
          <item id="di276509540673896782" iid="8ae4cb1c7eb44e7694b6a4f408a47493" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="36" type="entity">
            <layout ax="10" ay="1030" awidth="140" aheight="160" x="10" y="1030" width="0" height="0" />
            <class />
          </item>
          <item id="di614693273383621526" iid="7fba5882bad34517a69156545b67fe71" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="37" type="entity">
            <layout ax="160" ay="1030" awidth="140" aheight="160" x="160" y="1030" width="0" height="0" />
            <class />
          </item>
          <item id="di771981904978004388" iid="ab91de9d9b55451ba1df8e692c7c5ec2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="38" type="entity">
            <layout ax="310" ay="1030" awidth="140" aheight="160" x="310" y="1030" width="0" height="0" />
            <class />
          </item>
          <item id="di497088791191822498" iid="ccc972bca8424ad693e161f9e30bd114" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="39" type="entity">
            <layout ax="460" ay="1030" awidth="140" aheight="160" x="460" y="1030" width="0" height="0" />
            <class />
          </item>
          <item id="di706289683434874876" iid="bf137dd868584490a23a7ad2b69ebe2c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="40" type="entity">
            <layout ax="610" ay="1030" awidth="140" aheight="160" x="610" y="1030" width="0" height="0" />
            <class />
          </item>
          <item id="di318230204362045667" iid="3608240b52c343eb99323ef2c0a4723a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="41" type="entity">
            <layout ax="760" ay="1030" awidth="140" aheight="160" x="760" y="1030" width="0" height="0" />
            <class />
          </item>
          <item id="di205294143613050544" iid="5a7f347c2c1247fcb29960e5df22c8fd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="42" type="entity">
            <layout ax="10" ay="1200" awidth="140" aheight="160" x="10" y="1200" width="0" height="0" />
            <class />
          </item>
          <item id="di248295428150003419" iid="f4019b7eb39e4593b48d2ff2f34dc66c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="43" type="entity">
            <layout ax="160" ay="1200" awidth="140" aheight="160" x="160" y="1200" width="0" height="0" />
            <class />
          </item>
          <item id="di785380985160935449" iid="da5a3e7adc8c4eb5a5e1949e71380646" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="44" type="entity">
            <layout ax="310" ay="1200" awidth="140" aheight="160" x="310" y="1200" width="0" height="0" />
            <class />
          </item>
          <item id="di608213288223983542" iid="9d758d52f5a74a9e9fc331e86382be62" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="45" type="entity">
            <layout ax="460" ay="1200" awidth="140" aheight="160" x="460" y="1200" width="0" height="0" />
            <class />
          </item>
          <item id="di196583758920207168" iid="31c24b1c92fc42b3b8488aa055a73408" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="46" type="entity">
            <layout ax="610" ay="1200" awidth="140" aheight="160" x="610" y="1200" width="0" height="0" />
            <class />
          </item>
          <item id="di313902532412798213" iid="cf9e194160b54e06bf477a0e4c9cb09a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="47" type="entity">
            <layout ax="760" ay="1200" awidth="140" aheight="160" x="760" y="1200" width="0" height="0" />
            <class />
          </item>
          <item id="di827445554714885895" iid="e7e625025fa84e21b0f67a8b1242031f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="48" type="entity">
            <layout ax="10" ay="1370" awidth="140" aheight="160" x="10" y="1370" width="0" height="0" />
            <class />
          </item>
          <item id="di540687436327668413" iid="b6469006e1a349ac841b35e283459c22" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="49" type="entity">
            <layout ax="160" ay="1370" awidth="140" aheight="160" x="160" y="1370" width="0" height="0" />
            <class />
          </item>
          <item id="di307102424634614777" iid="c5b4ecd71e054057aa1cac1bd0b07a94" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="50" type="entity">
            <layout ax="310" ay="1370" awidth="140" aheight="160" x="310" y="1370" width="0" height="0" />
            <class />
          </item>
          <item id="di403513675669368114" iid="7a2a5645499b4fbaac550e1e0fb794a2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="51" type="entity">
            <layout ax="460" ay="1370" awidth="140" aheight="160" x="460" y="1370" width="0" height="0" />
            <class />
          </item>
          <item id="di518273085667052986" iid="e194e8dabe6d4143a5b7d444c34abc66" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="52" type="entity">
            <layout ax="610" ay="1370" awidth="140" aheight="160" x="610" y="1370" width="0" height="0" />
            <class />
          </item>
          <item id="di850420968107681926" iid="461174556f054ae9bca25396a8c3b6d5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="53" type="entity">
            <layout ax="760" ay="1370" awidth="140" aheight="160" x="760" y="1370" width="0" height="0" />
            <class />
          </item>
          <item id="di747576725598737874" iid="ec5ff09bfb01465cbee7d2470403457d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="54" type="entity">
            <layout ax="10" ay="1540" awidth="140" aheight="160" x="10" y="1540" width="0" height="0" />
            <class />
          </item>
          <item id="di727997256418440629" iid="70660a01cbcc440cb97ef8c4a8fae292" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="55" type="entity">
            <layout ax="160" ay="1540" awidth="140" aheight="160" x="160" y="1540" width="0" height="0" />
            <class />
          </item>
          <item id="di251154621520770601" iid="55a36aad102341d6bc1d984e8a0bf011" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="56" type="entity">
            <layout ax="310" ay="1540" awidth="140" aheight="160" x="310" y="1540" width="0" height="0" />
            <class />
          </item>
          <item id="di380945687256724796" iid="78c53969cdaf43d1b0b4437b6af327a2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="57" type="entity">
            <layout ax="460" ay="1540" awidth="140" aheight="160" x="460" y="1540" width="0" height="0" />
            <class />
          </item>
          <item id="di973559587783787860" iid="c539d9d09e3b4cd9a0d7b8cea76cb381" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="58" type="entity">
            <layout ax="610" ay="1540" awidth="140" aheight="160" x="610" y="1540" width="0" height="0" />
            <class />
          </item>
          <item id="di353745487256835871" iid="c26182a1d92d48fc899fb2d1871500af" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="59" type="entity">
            <layout ax="760" ay="1540" awidth="140" aheight="160" x="760" y="1540" width="0" height="0" />
            <class />
          </item>
          <item id="di580659253239705119" iid="49eb1340b31241cda7603e60a738a24c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="60" type="entity">
            <layout ax="10" ay="1710" awidth="140" aheight="160" x="10" y="1710" width="0" height="0" />
            <class />
          </item>
          <item id="di619946347591484897" iid="60ec7cf1775a417f94bae8ac2869d1cd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="61" type="entity">
            <layout ax="160" ay="1710" awidth="140" aheight="160" x="160" y="1710" width="0" height="0" />
            <class />
          </item>
          <item id="di625379968101075301" iid="bda78eec77ba4d0cbd5239c1834859ab" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="62" type="entity">
            <layout ax="310" ay="1710" awidth="140" aheight="160" x="310" y="1710" width="0" height="0" />
            <class />
          </item>
          <item id="di818267206356302371" iid="e9ebbe8b5fa9491499bd1e3b5d015e5a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="63" type="entity">
            <layout ax="460" ay="1710" awidth="140" aheight="160" x="460" y="1710" width="0" height="0" />
            <class />
          </item>
          <item id="di459994250301895059" iid="f9a3914696d148fca5348dd7efcf6e6e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="64" type="entity">
            <layout ax="610" ay="1710" awidth="140" aheight="160" x="610" y="1710" width="0" height="0" />
            <class />
          </item>
          <item id="di556175970157096008" iid="b400595e83f24eaab6bad669a0e0cc63" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="65" type="entity">
            <layout ax="760" ay="1710" awidth="140" aheight="160" x="760" y="1710" width="0" height="0" />
            <class />
          </item>
          <item id="di537316951269420378" iid="43878165d31b45daa1b1a0bcf4d79f4b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="66" type="entity">
            <layout ax="10" ay="1880" awidth="140" aheight="160" x="10" y="1880" width="0" height="0" />
            <class />
          </item>
          <item id="di884720072171674905" iid="9240bafe054d42b9b3b55410075c8cef" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="67" type="entity">
            <layout ax="160" ay="1880" awidth="140" aheight="160" x="160" y="1880" width="0" height="0" />
            <class />
          </item>
          <item id="di131361201648862088" iid="7b6f6e95602e408fa8908a932281c16a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="68" type="entity">
            <layout ax="310" ay="1880" awidth="140" aheight="160" x="310" y="1880" width="0" height="0" />
            <class />
          </item>
          <item id="di843772581538241156" iid="84af00ff7dd14b8791f1a7a9d05518bc" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="69" type="entity">
            <layout ax="460" ay="1880" awidth="140" aheight="160" x="460" y="1880" width="0" height="0" />
            <class />
          </item>
          <item id="di762629575240613502" iid="40211d7692f44077bf92ca8c86046326" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="70" type="entity">
            <layout ax="610" ay="1880" awidth="140" aheight="160" x="610" y="1880" width="0" height="0" />
            <class />
          </item>
          <item id="di402426693286643111" iid="c1321ac4d4654265b0b16b6955d4cc02" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="71" type="entity">
            <layout ax="760" ay="1880" awidth="140" aheight="160" x="760" y="1880" width="0" height="0" />
            <class />
          </item>
          <item id="di432938191289772659" iid="8a0f5f64f0434cf0ae6dcf8845a937e5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="72" type="entity">
            <layout ax="10" ay="2050" awidth="140" aheight="160" x="10" y="2050" width="0" height="0" />
            <class />
          </item>
          <item id="di972828919675813156" iid="4e3391097f8d4c2e9ad292126828a521" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="73" type="entity">
            <layout ax="160" ay="2050" awidth="140" aheight="160" x="160" y="2050" width="0" height="0" />
            <class />
          </item>
          <item id="di639261480157177736" iid="6b11b924e3c34fe3af730208c74d126c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="74" type="entity">
            <layout ax="310" ay="2050" awidth="140" aheight="160" x="310" y="2050" width="0" height="0" />
            <class />
          </item>
          <item id="di439238625143657694" iid="376e9b48252b465cab9f72183711b0f6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="75" type="entity">
            <layout ax="460" ay="2050" awidth="140" aheight="160" x="460" y="2050" width="0" height="0" />
            <class />
          </item>
          <item id="di461140408383851564" iid="b43117aab38f4783811f18e07798746f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="76" type="entity">
            <layout ax="610" ay="2050" awidth="140" aheight="160" x="610" y="2050" width="0" height="0" />
            <class />
          </item>
          <item id="di747009159167397305" iid="d7b4962e6f3b44a18c0d1c3ef9d881aa" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="77" type="entity">
            <layout ax="760" ay="2050" awidth="140" aheight="160" x="760" y="2050" width="0" height="0" />
            <class />
          </item>
          <item id="di114668429812028776" iid="575afddde8234b779785713d36b3ac5e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="78" type="entity">
            <layout ax="10" ay="2220" awidth="140" aheight="160" x="10" y="2220" width="0" height="0" />
            <class />
          </item>
          <item id="di143988146517197783" iid="23139b0c6a7b4562b35a16cbf8b14a2c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="79" type="entity">
            <layout ax="160" ay="2220" awidth="140" aheight="160" x="160" y="2220" width="0" height="0" />
            <class />
          </item>
          <item id="di848785778594118597" iid="5d6f975217d54f71ba077fb915d138bb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="80" type="entity">
            <layout ax="310" ay="2220" awidth="140" aheight="160" x="310" y="2220" width="0" height="0" />
            <class />
          </item>
          <item id="di647687675545681665" iid="fb59f9ee505046fca43b53b83860780d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="81" type="entity">
            <layout ax="460" ay="2220" awidth="140" aheight="160" x="460" y="2220" width="0" height="0" />
            <class />
          </item>
          <item id="di142561903670901247" iid="d0fd0c3c3e344bba8958909765fc7ba7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="82" type="entity">
            <layout ax="610" ay="2220" awidth="140" aheight="160" x="610" y="2220" width="0" height="0" />
            <class />
          </item>
          <item id="di881123676981734242" iid="cb8c424598324992924b5bb5c29808ed" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="83" type="entity">
            <layout ax="760" ay="2220" awidth="140" aheight="160" x="760" y="2220" width="0" height="0" />
            <class />
          </item>
          <item id="di636050527309270781" iid="59a55a331e6d4c199cae7d96bf916580" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="84" type="entity">
            <layout ax="10" ay="2390" awidth="140" aheight="160" x="10" y="2390" width="0" height="0" />
            <class />
          </item>
          <item id="di225363594424697498" iid="6775c9b69f754f0ca5238a3d6777af84" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="85" type="entity">
            <layout ax="160" ay="2390" awidth="140" aheight="160" x="160" y="2390" width="0" height="0" />
            <class />
          </item>
          <item id="di940015277815504329" iid="f9484fb185504d86917a0d2ebab1916f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="86" type="entity">
            <layout ax="310" ay="2390" awidth="140" aheight="160" x="310" y="2390" width="0" height="0" />
            <class />
          </item>
          <item id="di494206295440045751" iid="7c51b5af4fc840ce856ec434f1b945bd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="87" type="entity">
            <layout ax="460" ay="2390" awidth="140" aheight="160" x="460" y="2390" width="0" height="0" />
            <class />
          </item>
          <item id="di837278424433303236" iid="25bc9155dd1e4ad4bfdf4d0bdb98370b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="88" type="entity">
            <layout ax="610" ay="2390" awidth="140" aheight="160" x="610" y="2390" width="0" height="0" />
            <class />
          </item>
          <item id="di258546705435607308" iid="baeb510d66144eb6bb630b487f21d66a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="89" type="entity">
            <layout ax="760" ay="2390" awidth="140" aheight="160" x="760" y="2390" width="0" height="0" />
            <class />
          </item>
          <item id="di128246380242454050" iid="a11e4d60c04a4eae9a98c66fcfc48b0b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="90" type="entity">
            <layout ax="10" ay="2560" awidth="140" aheight="160" x="10" y="2560" width="0" height="0" />
            <class />
          </item>
          <item id="di717040889402816513" iid="33e3b056903c4807b9421fb98050e285" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="91" type="entity">
            <layout ax="160" ay="2560" awidth="140" aheight="160" x="160" y="2560" width="0" height="0" />
            <class />
          </item>
          <item id="di862656433512518275" iid="da70cd44778a4ad3a3d3d84c2b08fa94" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="92" type="entity">
            <layout ax="310" ay="2560" awidth="140" aheight="160" x="310" y="2560" width="0" height="0" />
            <class />
          </item>
          <item id="di695955599253465387" iid="0e049697e8fd4080bb09ad80a102a0f6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="93" type="entity">
            <layout ax="460" ay="2560" awidth="140" aheight="160" x="460" y="2560" width="0" height="0" />
            <class />
          </item>
          <item id="di522411218817322767" iid="53e6bcc8a0ff4cf696ec0c8e9c396377" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="94" type="entity">
            <layout ax="610" ay="2560" awidth="140" aheight="160" x="610" y="2560" width="0" height="0" />
            <class />
          </item>
          <item id="di157006475319332423" iid="85832c61ebc343f08f8d4724975b6e28" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="95" type="entity">
            <layout ax="760" ay="2560" awidth="140" aheight="160" x="760" y="2560" width="0" height="0" />
            <class />
          </item>
          <item id="di604873942426574797" iid="9eee921641c14eeaaabd2018e337a9eb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="96" type="entity">
            <layout ax="10" ay="2730" awidth="140" aheight="160" x="10" y="2730" width="0" height="0" />
            <class />
          </item>
          <item id="di689455376268510978" iid="b4de4de7c0c54a149db2ba1da94429e7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="97" type="entity">
            <layout ax="160" ay="2730" awidth="140" aheight="160" x="160" y="2730" width="0" height="0" />
            <class />
          </item>
          <item id="di592925825856745026" iid="7b5095c487ab428aaeca1676c8e31f0e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="98" type="entity">
            <layout ax="310" ay="2730" awidth="140" aheight="160" x="310" y="2730" width="0" height="0" />
            <class />
          </item>
          <item id="di244081208762036942" iid="0219efebe7264632bd3838b33fe50c24" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="99" type="entity">
            <layout ax="460" ay="2730" awidth="140" aheight="160" x="460" y="2730" width="0" height="0" />
            <class />
          </item>
          <item id="di408648982991094676" iid="a325c135873443c7bd3ec44601172789" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="100" type="entity">
            <layout ax="610" ay="2730" awidth="140" aheight="160" x="610" y="2730" width="0" height="0" />
            <class />
          </item>
          <item id="di139762628429990698" iid="5dde58a533d841448b4074e4c42f60ec" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="101" type="entity">
            <layout ax="760" ay="2730" awidth="140" aheight="160" x="760" y="2730" width="0" height="0" />
            <class />
          </item>
          <item id="di931814141114541126" iid="fb8b5e174986471e9e3d379d0c2fdc1f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="102" type="entity">
            <layout ax="10" ay="2900" awidth="140" aheight="160" x="10" y="2900" width="0" height="0" />
            <class />
          </item>
          <item id="di203642415645636077" iid="7dd1a098698c4c00a480fffc9396113d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="103" type="entity">
            <layout ax="160" ay="2900" awidth="140" aheight="160" x="160" y="2900" width="0" height="0" />
            <class />
          </item>
          <item id="di889645267406963407" iid="deac161818ce464485aa03c1ee4b6058" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="104" type="entity">
            <layout ax="310" ay="2900" awidth="140" aheight="160" x="310" y="2900" width="0" height="0" />
            <class />
          </item>
          <item id="di330118879681365192" iid="8a0a1c8c28734de0ab44226e5953dc6e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="105" type="entity">
            <layout ax="460" ay="2900" awidth="140" aheight="160" x="460" y="2900" width="0" height="0" />
            <class />
          </item>
          <item id="di653482070708380836" iid="b62a7c3473bc46fd9cad9548e0cbf2cd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="106" type="entity">
            <layout ax="610" ay="2900" awidth="140" aheight="160" x="610" y="2900" width="0" height="0" />
            <class />
          </item>
          <item id="di488951402706331728" iid="965647e5807a4e5a8d4685d04c869973" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="107" type="entity">
            <layout ax="760" ay="2900" awidth="140" aheight="160" x="760" y="2900" width="0" height="0" />
            <class />
          </item>
          <item id="di877077706344871162" iid="511f1aad17d14a029b57c81f8c326ef0" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="108" type="entity">
            <layout ax="10" ay="3070" awidth="140" aheight="160" x="10" y="3070" width="0" height="0" />
            <class />
          </item>
          <item id="di854697043562377900" iid="b23ee73100294daa9e8491d6e87b5f04" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="109" type="entity">
            <layout ax="160" ay="3070" awidth="140" aheight="160" x="160" y="3070" width="0" height="0" />
            <class />
          </item>
          <item id="di169805040163888136" iid="b04ecd07ca0d4960bd5021fe434e337f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="110" type="entity">
            <layout ax="310" ay="3070" awidth="140" aheight="160" x="310" y="3070" width="0" height="0" />
            <class />
          </item>
          <item id="di108038857148831517" iid="a8963a4993474356814c122a0b4b4049" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="111" type="entity">
            <layout ax="460" ay="3070" awidth="140" aheight="160" x="460" y="3070" width="0" height="0" />
            <class />
          </item>
          <item id="di795003144882606908" iid="6c0e6f66425c42ac9fdc391e3d3be3d0" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="112" type="entity">
            <layout ax="610" ay="3070" awidth="140" aheight="160" x="610" y="3070" width="0" height="0" />
            <class />
          </item>
          <item id="di429004277180121777" iid="62f3710e85ea4f428bbe88b7d1d68b4b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="113" type="entity">
            <layout ax="760" ay="3070" awidth="140" aheight="160" x="760" y="3070" width="0" height="0" />
            <class />
          </item>
          <item id="di118929849852979967" iid="b30c123354f640e59babd2ade36d877c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="114" type="entity">
            <layout ax="10" ay="3240" awidth="140" aheight="160" x="10" y="3240" width="0" height="0" />
            <class />
          </item>
          <item id="di418840859720731935" iid="025ef416489b4e1889fbb9e1318fb23f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="115" type="entity">
            <layout ax="160" ay="3240" awidth="140" aheight="160" x="160" y="3240" width="0" height="0" />
            <class />
          </item>
          <item id="di173648012514984180" iid="ca2ebd438f264ba5bd81499e096fcb30" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="116" type="entity">
            <layout ax="310" ay="3240" awidth="140" aheight="160" x="310" y="3240" width="0" height="0" />
            <class />
          </item>
          <item id="di754246436489272195" iid="50a08947a1094910b8a2c7f25f49e92f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="117" type="entity">
            <layout ax="460" ay="3240" awidth="140" aheight="160" x="460" y="3240" width="0" height="0" />
            <class />
          </item>
          <item id="di622350825673173344" iid="71069499f09846789d123c87c73462f6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="118" type="entity">
            <layout ax="610" ay="3240" awidth="140" aheight="160" x="610" y="3240" width="0" height="0" />
            <class />
          </item>
          <item id="di282330508165757305" iid="302973d801164cfbb69ba7ec4276ff70" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="119" type="entity">
            <layout ax="760" ay="3240" awidth="140" aheight="160" x="760" y="3240" width="0" height="0" />
            <class />
          </item>
          <item id="di170201102862401167" iid="c488707c4bad4eeeb174f334b20567f2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="120" type="entity">
            <layout ax="10" ay="3410" awidth="140" aheight="160" x="10" y="3410" width="0" height="0" />
            <class />
          </item>
          <item id="di813886031704162218" iid="7baf5b365b9842829d06d6f3340d60d5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="121" type="entity">
            <layout ax="160" ay="3410" awidth="140" aheight="160" x="160" y="3410" width="0" height="0" />
            <class />
          </item>
          <item id="di812204608951905551" iid="a8d369a2c6a147a18a24ee89507a624f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="122" type="entity">
            <layout ax="310" ay="3410" awidth="140" aheight="160" x="310" y="3410" width="0" height="0" />
            <class />
          </item>
          <item id="di768856499902228612" iid="3648015aab164a79bae3cd02a4aed5d6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="123" type="entity">
            <layout ax="460" ay="3410" awidth="140" aheight="160" x="460" y="3410" width="0" height="0" />
            <class />
          </item>
          <item id="di896172931623732485" iid="167a2bd49d69436398df9649332469a4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="124" type="entity">
            <layout ax="610" ay="3410" awidth="140" aheight="160" x="610" y="3410" width="0" height="0" />
            <class />
          </item>
          <item id="di589588157343111724" iid="9ceb7eeefc6f4030b5d42321848dc287" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="125" type="entity">
            <layout ax="760" ay="3410" awidth="140" aheight="160" x="760" y="3410" width="0" height="0" />
            <class />
          </item>
          <item id="di986138373394240083" iid="cdb5a1e3403a43058a93efc4fce6430b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="126" type="entity">
            <layout ax="10" ay="3580" awidth="140" aheight="160" x="10" y="3580" width="0" height="0" />
            <class />
          </item>
          <item id="di390158173105736248" iid="d31ab95373a2497d97a6357d44655a36" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="127" type="entity">
            <layout ax="160" ay="3580" awidth="140" aheight="160" x="160" y="3580" width="0" height="0" />
            <class />
          </item>
          <item id="di216488777438620645" iid="09fd1cdd20f948afa038324ad3818e53" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="128" type="entity">
            <layout ax="310" ay="3580" awidth="140" aheight="160" x="310" y="3580" width="0" height="0" />
            <class />
          </item>
          <item id="di637820792461195660" iid="92ad3f0cc04c45859baa3f9def10f89d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="129" type="entity">
            <layout ax="460" ay="3580" awidth="140" aheight="160" x="460" y="3580" width="0" height="0" />
            <class />
          </item>
          <item id="di580603527224524973" iid="b0ffde5f5ae04325b403b2a77caffbc1" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="130" type="entity">
            <layout ax="610" ay="3580" awidth="140" aheight="160" x="610" y="3580" width="0" height="0" />
            <class />
          </item>
          <item id="di857627810244573162" iid="1580440c4b554aaf88d2cd8d5d59b451" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="131" type="entity">
            <layout ax="760" ay="3580" awidth="140" aheight="160" x="760" y="3580" width="0" height="0" />
            <class />
          </item>
          <item id="di895949387854821510" iid="6622cb2811a649c69a6c3b8a465318ad" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="132" type="entity">
            <layout ax="10" ay="3750" awidth="140" aheight="160" x="10" y="3750" width="0" height="0" />
            <class />
          </item>
          <item id="di100769027111217018" iid="93a2fb5060164f01b0c0118fc8e986c9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="133" type="entity">
            <layout ax="160" ay="3750" awidth="140" aheight="160" x="160" y="3750" width="0" height="0" />
            <class />
          </item>
          <item id="di450000159146726131" iid="2bf515b54c0f4ac280afb3a74fbc9953" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="134" type="entity">
            <layout ax="310" ay="3750" awidth="140" aheight="160" x="310" y="3750" width="0" height="0" />
            <class />
          </item>
          <item id="di793586036550292473" iid="1bb488703a2748c691b367fea835470d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="135" type="entity">
            <layout ax="460" ay="3750" awidth="140" aheight="160" x="460" y="3750" width="0" height="0" />
            <class />
          </item>
          <item id="di399545469788939737" iid="f06434505a5440ee828ff70828facf12" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="136" type="entity">
            <layout ax="610" ay="3750" awidth="140" aheight="160" x="610" y="3750" width="0" height="0" />
            <class />
          </item>
          <item id="di492176797307403871" iid="f352881aea77463c9bb3a1601f777971" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="137" type="entity">
            <layout ax="760" ay="3750" awidth="140" aheight="160" x="760" y="3750" width="0" height="0" />
            <class />
          </item>
          <item id="di350002104403876638" iid="ed03aeaf23d341bcac14e6674779c251" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="138" type="entity">
            <layout ax="10" ay="3920" awidth="140" aheight="160" x="10" y="3920" width="0" height="0" />
            <class />
          </item>
          <item id="di336626907843097592" iid="fbdfb34c395e482aa543dca8a0d7641e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="139" type="entity">
            <layout ax="160" ay="3920" awidth="140" aheight="160" x="160" y="3920" width="0" height="0" />
            <class />
          </item>
          <item id="di213750408526775663" iid="7a66fc68e4ba401ea050c122a0a3c43c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="140" type="entity">
            <layout ax="310" ay="3920" awidth="140" aheight="160" x="310" y="3920" width="0" height="0" />
            <class />
          </item>
          <item id="di283948844495197363" iid="4f079334f7024f308825460c785eb1fc" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="141" type="entity">
            <layout ax="460" ay="3920" awidth="140" aheight="160" x="460" y="3920" width="0" height="0" />
            <class />
          </item>
          <item id="di363391809175729135" iid="af1b41eadb404beba69773e1fde58608" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="142" type="entity">
            <layout ax="610" ay="3920" awidth="140" aheight="160" x="610" y="3920" width="0" height="0" />
            <class />
          </item>
          <item id="di734593560779407928" iid="3a24ed1972e645a2b333acde638c93e9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="143" type="entity">
            <layout ax="760" ay="3920" awidth="140" aheight="160" x="760" y="3920" width="0" height="0" />
            <class />
          </item>
          <item id="di224826006748510187" iid="2af94e1ac83140188ee919b060dd3cb8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="144" type="entity">
            <layout ax="10" ay="4090" awidth="140" aheight="160" x="10" y="4090" width="0" height="0" />
            <class />
          </item>
          <item id="di372783418283730180" iid="fcf61481c6c842619d362948a07909a5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="145" type="entity">
            <layout ax="160" ay="4090" awidth="140" aheight="160" x="160" y="4090" width="0" height="0" />
            <class />
          </item>
          <item id="di135352552821134846" iid="00f09b9c45114eb5a764cd5a3a313df4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="146" type="entity">
            <layout ax="310" ay="4090" awidth="140" aheight="160" x="310" y="4090" width="0" height="0" />
            <class />
          </item>
          <item id="di585153777945676127" iid="90c009f32d6743478a768e153a1eb981" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="147" type="entity">
            <layout ax="460" ay="4090" awidth="140" aheight="160" x="460" y="4090" width="0" height="0" />
            <class />
          </item>
          <item id="di104773357669312869" iid="8473d9c89b2f47dab7c54cc2f7d4d590" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="148" type="entity">
            <layout ax="610" ay="4090" awidth="140" aheight="160" x="610" y="4090" width="0" height="0" />
            <class />
          </item>
          <item id="di808212830957383097" iid="d2e0600b65b44f71a7cebaeb44942d38" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="149" type="entity">
            <layout ax="760" ay="4090" awidth="140" aheight="160" x="760" y="4090" width="0" height="0" />
            <class />
          </item>
          <item id="di951136523757639480" iid="9eb2b4367cbf4a47a6f3e439ed6c229e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="150" type="entity">
            <layout ax="10" ay="4260" awidth="140" aheight="160" x="10" y="4260" width="0" height="0" />
            <class />
          </item>
          <item id="di552228453849446799" iid="63c3caad04f8402e9a024971d18b3bf2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="151" type="entity">
            <layout ax="160" ay="4260" awidth="140" aheight="160" x="160" y="4260" width="0" height="0" />
            <class />
          </item>
          <item id="di830146448139295683" iid="4d69544639d54d75acf8b52df95fdaae" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="152" type="entity">
            <layout ax="310" ay="4260" awidth="140" aheight="160" x="310" y="4260" width="0" height="0" />
            <class />
          </item>
          <item id="di943566254297198636" iid="880cedb5c2414094bd0523982bb19a3a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="153" type="entity">
            <layout ax="460" ay="4260" awidth="140" aheight="160" x="460" y="4260" width="0" height="0" />
            <class />
          </item>
          <item id="di902063284182754301" iid="fa38fbd8e81147fabdcc72fd81070c89" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="154" type="entity">
            <layout ax="610" ay="4260" awidth="140" aheight="160" x="610" y="4260" width="0" height="0" />
            <class />
          </item>
          <item id="di755734143812612138" iid="f3072391eb694ae4a5718057a8e42a18" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="155" type="entity">
            <layout ax="760" ay="4260" awidth="140" aheight="160" x="760" y="4260" width="0" height="0" />
            <class />
          </item>
          <item id="di201993737794723199" iid="91fc02e40d11499eafd20af948059d23" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="156" type="entity">
            <layout ax="10" ay="4430" awidth="140" aheight="160" x="10" y="4430" width="0" height="0" />
            <class />
          </item>
          <item id="di347445252153827864" iid="b4e213f4976f4340a7afc1433f3554f1" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="157" type="entity">
            <layout ax="160" ay="4430" awidth="140" aheight="160" x="160" y="4430" width="0" height="0" />
            <class />
          </item>
          <item id="di940576127462430446" iid="b0adcb79654f42bb8b3467b0519e9563" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="158" type="entity">
            <layout ax="310" ay="4430" awidth="140" aheight="160" x="310" y="4430" width="0" height="0" />
            <class />
          </item>
          <item id="di881181351820220251" iid="1c47f48877644af0bac929fc46cfc6b7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="159" type="entity">
            <layout ax="460" ay="4430" awidth="140" aheight="160" x="460" y="4430" width="0" height="0" />
            <class />
          </item>
          <item id="di220227949321361098" iid="7e708d5aba9e42d68c11c8209069eef8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="160" type="entity">
            <layout ax="610" ay="4430" awidth="140" aheight="160" x="610" y="4430" width="0" height="0" />
            <class />
          </item>
          <item id="di886391010701489971" iid="6c032438b21c4809a2613536d22e57dc" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="161" type="entity">
            <layout ax="760" ay="4430" awidth="140" aheight="160" x="760" y="4430" width="0" height="0" />
            <class />
          </item>
          <item id="di773942712609855855" iid="3e4b8aa7a0f04c0fb058cec7634471c6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="162" type="entity">
            <layout ax="10" ay="4600" awidth="140" aheight="160" x="10" y="4600" width="0" height="0" />
            <class />
          </item>
          <item id="di514939921578410621" iid="1c401a8ec45844d9a03b1a1650b7fdf8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="163" type="entity">
            <layout ax="160" ay="4600" awidth="140" aheight="160" x="160" y="4600" width="0" height="0" />
            <class />
          </item>
          <item id="di303785960546500669" iid="a6bd329078d04c1eae9b61856a8fd1ec" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="164" type="entity">
            <layout ax="310" ay="4600" awidth="140" aheight="160" x="310" y="4600" width="0" height="0" />
            <class />
          </item>
          <item id="di302630514680689234" iid="6a04a03e0374427aafae7a84b1f05584" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="165" type="entity">
            <layout ax="460" ay="4600" awidth="140" aheight="160" x="460" y="4600" width="0" height="0" />
            <class />
          </item>
          <item id="di595663806379243808" iid="bba5e022176c439bb92751c93aa16fd4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="166" type="entity">
            <layout ax="610" ay="4600" awidth="140" aheight="160" x="610" y="4600" width="0" height="0" />
            <class />
          </item>
          <item id="di891961067456110926" iid="51e4eb7916d442599b7aba4138735382" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="167" type="entity">
            <layout ax="760" ay="4600" awidth="140" aheight="160" x="760" y="4600" width="0" height="0" />
            <class />
          </item>
          <item id="di974547209434502044" iid="b04bc47127e24b7784d81259c7028e58" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="168" type="entity">
            <layout ax="10" ay="4770" awidth="140" aheight="160" x="10" y="4770" width="0" height="0" />
            <class />
          </item>
          <item id="di665050914324096126" iid="23d0d761d9144de3bd91a7eca956daca" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="169" type="entity">
            <layout ax="160" ay="4770" awidth="140" aheight="160" x="160" y="4770" width="0" height="0" />
            <class />
          </item>
          <item id="di232162879537394924" iid="64e7d2c53c36434ea56bf63a869a4b3c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="170" type="entity">
            <layout ax="310" ay="4770" awidth="140" aheight="160" x="310" y="4770" width="0" height="0" />
            <class />
          </item>
          <item id="di877344642142071705" iid="87e9f940bb25444c9614256ebd5f0576" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="171" type="entity">
            <layout ax="460" ay="4770" awidth="140" aheight="160" x="460" y="4770" width="0" height="0" />
            <class />
          </item>
          <item id="di992776042560171278" iid="0aa3b070a0e247c186e29eaa660e9ef1" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="172" type="entity">
            <layout ax="610" ay="4770" awidth="140" aheight="160" x="610" y="4770" width="0" height="0" />
            <class />
          </item>
          <item id="di181736443340629351" iid="da78332c8ae944f08a0ecc88ab157a6c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="173" type="entity">
            <layout ax="760" ay="4770" awidth="140" aheight="160" x="760" y="4770" width="0" height="0" />
            <class />
          </item>
          <item id="di573689594531325912" iid="af4d014625ab4a1a8134559809217936" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="174" type="entity">
            <layout ax="10" ay="4940" awidth="140" aheight="160" x="10" y="4940" width="0" height="0" />
            <class />
          </item>
          <item id="di105099999642342909" iid="d3834f06a4bd48b4adb7d8d0471341ea" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="175" type="entity">
            <layout ax="160" ay="4940" awidth="140" aheight="160" x="160" y="4940" width="0" height="0" />
            <class />
          </item>
          <item id="di788131516987992577" iid="5477579c30ed4a0c9f94781ff690f873" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="176" type="entity">
            <layout ax="310" ay="4940" awidth="140" aheight="160" x="310" y="4940" width="0" height="0" />
            <class />
          </item>
          <item id="di837155148729775425" iid="aa90c93deeb04b8990f6530a221e0e30" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="177" type="entity">
            <layout ax="460" ay="4940" awidth="140" aheight="160" x="460" y="4940" width="0" height="0" />
            <class />
          </item>
          <item id="di871248469850738480" iid="f44549d4d1ec4d8098c9785a419e6362" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="178" type="entity">
            <layout ax="610" ay="4940" awidth="140" aheight="160" x="610" y="4940" width="0" height="0" />
            <class />
          </item>
          <item id="di175504087320290592" iid="d9833e788aae4017a021edc0661631fb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="179" type="entity">
            <layout ax="760" ay="4940" awidth="140" aheight="160" x="760" y="4940" width="0" height="0" />
            <class />
          </item>
          <item id="di624355761465155633" iid="902f3e28001c48b0884693e6e89079ff" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="180" type="entity">
            <layout ax="10" ay="5110" awidth="140" aheight="160" x="10" y="5110" width="0" height="0" />
            <class />
          </item>
          <item id="di993412674455562615" iid="4e24a56847be4007a64a478ea70995d6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="181" type="entity">
            <layout ax="160" ay="5110" awidth="140" aheight="160" x="160" y="5110" width="0" height="0" />
            <class />
          </item>
          <item id="di880123785175044909" iid="4d34d80349df45db89f3e6d410b6a0d2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="182" type="entity">
            <layout ax="310" ay="5110" awidth="140" aheight="160" x="310" y="5110" width="0" height="0" />
            <class />
          </item>
          <item id="di316948331822749927" iid="29c64b2bb5fd4b67b21409641d386e55" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="183" type="entity">
            <layout ax="460" ay="5110" awidth="140" aheight="160" x="460" y="5110" width="0" height="0" />
            <class />
          </item>
          <item id="di902762131891334324" iid="200fbc8607834f58825c0e3f51257a54" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="184" type="entity">
            <layout ax="610" ay="5110" awidth="140" aheight="160" x="610" y="5110" width="0" height="0" />
            <class />
          </item>
          <item id="di179280653606074083" iid="34540661fa8c4505a1443944a924360f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="185" type="entity">
            <layout ax="760" ay="5110" awidth="140" aheight="160" x="760" y="5110" width="0" height="0" />
            <class />
          </item>
          <item id="di797379531657085225" iid="dfba2e94ac3e431f9040add9b9c7e710" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="186" type="entity">
            <layout ax="10" ay="5280" awidth="140" aheight="160" x="10" y="5280" width="0" height="0" />
            <class />
          </item>
          <item id="di688057372682833024" iid="f2ffaf8c9bcd43bfb90d099828c7cdd6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="187" type="entity">
            <layout ax="160" ay="5280" awidth="140" aheight="160" x="160" y="5280" width="0" height="0" />
            <class />
          </item>
          <item id="di444016455844319305" iid="87d007d35ed144848789c869a59e34ce" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="188" type="entity">
            <layout ax="310" ay="5280" awidth="140" aheight="160" x="310" y="5280" width="0" height="0" />
            <class />
          </item>
          <item id="di708713927313771433" iid="1212f1b500d34395ae805cd69f91137a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="189" type="entity">
            <layout ax="460" ay="5280" awidth="140" aheight="160" x="460" y="5280" width="0" height="0" />
            <class />
          </item>
          <item id="di528119411274310569" iid="156359b08c744e139d91bcf2789237ee" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="190" type="entity">
            <layout ax="610" ay="5280" awidth="140" aheight="160" x="610" y="5280" width="0" height="0" />
            <class />
          </item>
          <item id="di104721026772460046" iid="30e1dd79535c40efb0ec06620994d636" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="191" type="entity">
            <layout ax="760" ay="5280" awidth="140" aheight="160" x="760" y="5280" width="0" height="0" />
            <class />
          </item>
          <item id="di541400669660287604" iid="4e7ad65c96ad4309b13102f6494be30d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="192" type="entity">
            <layout ax="10" ay="5450" awidth="140" aheight="160" x="10" y="5450" width="0" height="0" />
            <class />
          </item>
          <item id="di892557716607671227" iid="e580c1a9f16b49808e0be559cbb1e49b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="193" type="entity">
            <layout ax="160" ay="5450" awidth="140" aheight="160" x="160" y="5450" width="0" height="0" />
            <class />
          </item>
          <item id="di542088659262185641" iid="80dde6b1dc7943a4814dc8c887fdf7f6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="194" type="entity">
            <layout ax="310" ay="5450" awidth="140" aheight="160" x="310" y="5450" width="0" height="0" />
            <class />
          </item>
          <item id="di584862456223808728" iid="ccb297463fbc4360b2b8e75df6ea01f7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="195" type="entity">
            <layout ax="460" ay="5450" awidth="140" aheight="160" x="460" y="5450" width="0" height="0" />
            <class />
          </item>
          <item id="di358997956444760321" iid="3b5e9089e3464d4aaaa7d6f39240b13e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="196" type="entity">
            <layout ax="610" ay="5450" awidth="140" aheight="160" x="610" y="5450" width="0" height="0" />
            <class />
          </item>
          <item id="di699740363767007245" iid="bf94e084fc0d43f591fb0a489a50deaa" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="197" type="entity">
            <layout ax="760" ay="5450" awidth="140" aheight="160" x="760" y="5450" width="0" height="0" />
            <class />
          </item>
          <item id="di543982249521782026" iid="a7dfe697295b433697ea9ec44b286adf" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="198" type="entity">
            <layout ax="10" ay="5620" awidth="140" aheight="160" x="10" y="5620" width="0" height="0" />
            <class />
          </item>
          <item id="di261947918917731133" iid="84be185b755a47b28876ef0232a77ba7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="199" type="entity">
            <layout ax="160" ay="5620" awidth="140" aheight="160" x="160" y="5620" width="0" height="0" />
            <class />
          </item>
          <item id="di343222946358986515" iid="b1eb49c6e4f244a098d0b1abc206d52a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="200" type="entity">
            <layout ax="310" ay="5620" awidth="140" aheight="160" x="310" y="5620" width="0" height="0" />
            <class />
          </item>
          <item id="di437867219682355269" iid="9a9b02de7e534bd08590c448c8fb5332" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="201" type="entity">
            <layout ax="460" ay="5620" awidth="140" aheight="160" x="460" y="5620" width="0" height="0" />
            <class />
          </item>
          <item id="di452045258499025915" iid="ee5ecec5bda741d8887ad93dabe85629" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="202" type="entity">
            <layout ax="610" ay="5620" awidth="140" aheight="160" x="610" y="5620" width="0" height="0" />
            <class />
          </item>
          <item id="di844963376231046291" iid="75a06ff87aca40178406d692023a0e1d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="203" type="entity">
            <layout ax="760" ay="5620" awidth="140" aheight="160" x="760" y="5620" width="0" height="0" />
            <class />
          </item>
          <item id="di399935205254322124" iid="12660d31106d4533921df7f0c3031c74" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="204" type="entity">
            <layout ax="10" ay="5790" awidth="140" aheight="160" x="10" y="5790" width="0" height="0" />
            <class />
          </item>
          <item id="di385758970126929163" iid="cd3744639b27457c94503c876e291efd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="205" type="entity">
            <layout ax="160" ay="5790" awidth="140" aheight="160" x="160" y="5790" width="0" height="0" />
            <class />
          </item>
          <item id="di242024553861732653" iid="f26b5614d5f146df87e79061e510f3ce" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="206" type="entity">
            <layout ax="310" ay="5790" awidth="140" aheight="160" x="310" y="5790" width="0" height="0" />
            <class />
          </item>
          <item id="di792171179450045191" iid="f04735ba729842e7bf195189e80bf0c2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="207" type="entity">
            <layout ax="460" ay="5790" awidth="140" aheight="160" x="460" y="5790" width="0" height="0" />
            <class />
          </item>
          <item id="di460434606320952627" iid="54ad8d50f5724f8d95c0ac12c36bee90" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="208" type="entity">
            <layout ax="610" ay="5790" awidth="140" aheight="160" x="610" y="5790" width="0" height="0" />
            <class />
          </item>
          <item id="di914161945319836181" iid="58ed6c2e77484d5c9c618cedcd40a1d9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="209" type="entity">
            <layout ax="760" ay="5790" awidth="140" aheight="160" x="760" y="5790" width="0" height="0" />
            <class />
          </item>
          <item id="di282487192709277103" iid="bba5b2cd5a12456f947aa2091366af41" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="210" type="entity">
            <layout ax="10" ay="5960" awidth="140" aheight="160" x="10" y="5960" width="0" height="0" />
            <class />
          </item>
          <item id="di380661267740576489" iid="2051c69064f74ce58fee35f0cc8603a4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="211" type="entity">
            <layout ax="160" ay="5960" awidth="140" aheight="160" x="160" y="5960" width="0" height="0" />
            <class />
          </item>
          <item id="di406471867955471924" iid="7eb0b579ef764920b327efbbad6b8737" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="212" type="entity">
            <layout ax="310" ay="5960" awidth="140" aheight="160" x="310" y="5960" width="0" height="0" />
            <class />
          </item>
          <item id="di347076127452619210" iid="98392a7113194693b4d987d227692226" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="213" type="entity">
            <layout ax="460" ay="5960" awidth="140" aheight="160" x="460" y="5960" width="0" height="0" />
            <class />
          </item>
        </layer>
      </diagram>
      <diagram type="uml-class" id="p943026018829253149" name="Class Diagram Steps" order-index="3" show-nullability="false">
        <style>
          <background-color index="1" color="#FFFFFFFF" />
          <background-color index="2" color="#FFFFFFFF" />
          <background-type type="solid" />
        </style>
        <meta>
          <authors>
            <author> </author>
          </authors>
          <description />
          <creation-date>07/12/2012 12:43:07</creation-date>
          <change-date>07/13/2012 10:23:40</change-date>
          <revision-count>0</revision-count>
          <version />
        </meta>
        <abstract-items>
          <item id="ddip943026018829253149_925155166219424221" cid="REL001" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:48:40">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="di225363594424697498" to="di837278424433303236">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="composition" visibility="private" />
            </relation>
          </item>
          <item id="ddip943026018829253149_104394084684373496" cid="REL002" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:49:06">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="di940015277815504329" to="di225363594424697498">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="aggregation" visibility="private" />
            </relation>
          </item>
          <item id="ddip943026018829253149_100091783212560943" cid="REL003" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:49:22">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="di494206295440045751" to="di225363594424697498">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="aggregation" visibility="private" />
            </relation>
          </item>
          <item id="ddip943026018829253149_206739681472581381" cid="REL004" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 12:50:21">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="di636050527309270781" to="di494206295440045751">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="composition" visibility="private" />
            </relation>
          </item>
          <item id="ddip943026018829253149_645654269845085518" cid="DEP006" type="dependency" name="rootStepId" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:56:24">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip943026018829253149_847305400986509011" cid="REL006" type="relationship" name="creates" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:01:50">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="di717040889402816513" to="di128246380242454050">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="yes" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip943026018829253149_368376177900970529" cid="DEP003" type="dependency" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:05:57">
            <stereotypes>
              <stereotype name="use" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip943026018829253149_922625868865131331" cid="REL008" type="relationship" name="creates" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:08:49">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="di837278424433303236" to="di258546705435607308">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="yes" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip943026018829253149_551709424289814889" cid="REL009" type="relationship" name="creates" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:08:59">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="di837278424433303236" to="di636050527309270781">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="yes" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip943026018829253149_299195197366005585" cid="DEP004" type="dependency" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:10:44">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip943026018829253149_218703407960807398" cid="CMT001" type="comment" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:14:51">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <comment>Map&lt;StepKey, StepNode&gt;</comment>
          </item>
          <item id="di509713408730015730" cid="CN001" type="comment-connector" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:15:07">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip943026018829253149_966718051224673725" cid="DEP005" type="dependency" name="childStep previousStep parentStep nextStep" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:55:26">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
        </abstract-items>
        <layer name="Default" visible="true" enabled="true" locked="false">
          <item id="di636050527309270781" iid="9b5e55195ff845718deffe157256b701" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="84" type="entity">
            <layout ax="220" ay="340" awidth="140" aheight="160" x="220" y="340" width="0" height="160" />
            <class />
          </item>
          <item id="di225363594424697498" iid="444bdf18a36a4ba8bef58fe624c452dc" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="85" type="entity">
            <layout ax="-120" ay="110" awidth="140" aheight="160" x="-120" y="110" width="0" height="0" />
            <class />
          </item>
          <item id="di940015277815504329" iid="81acb6d8d43c493793c01d10ee67feb7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="86" type="entity">
            <layout ax="-230" ay="340" awidth="140" aheight="160" x="-230" y="340" width="0" height="0" />
            <class />
          </item>
          <item id="di494206295440045751" iid="532a0d90c6c04e3f975a5ddd5d0a531e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="87" type="entity">
            <layout ax="-10" ay="340" awidth="140" aheight="160" x="-10" y="340" width="0" height="0" />
            <class />
          </item>
          <item id="di837278424433303236" iid="6467b93d6aa048d9a32564a3987c6cb6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="88" type="entity">
            <layout ax="-120" ay="-110" awidth="140" aheight="160" x="-120" y="-110" width="0" height="0" />
            <class />
          </item>
          <item id="di258546705435607308" iid="49b37639af22429cb03d4883d00b7a14" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="89" type="entity">
            <layout ax="220" ay="-110" awidth="140" aheight="160" x="220" y="-110" width="0" height="0" />
            <class />
          </item>
          <item id="di128246380242454050" iid="fdac7203ab4e4ea593e122210a6e6749" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="90" type="entity">
            <layout ax="-360" ay="-110" awidth="140" aheight="160" x="-360" y="-110" width="0" height="0" />
            <class />
          </item>
          <item id="di717040889402816513" iid="fb73ae3b63d347f38a2dfb1e7b6cb586" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:39:28" order-index="91" type="entity">
            <layout ax="-600" ay="-110" awidth="140" aheight="160" x="-600" y="-110" width="0" height="0" />
            <class />
          </item>
          <item id="ddip943026018829253149_925155166219424221" iid="5b4048e065c54150b31d5cdf29c6981e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:48:40" order-index="92" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-50" y1="110" x2="-50" y2="50" start-border-pos="0.125" end-border-pos="0.625">
              <points>
                <point x="-50" y="110" />
                <point x="-50" y="50" />
              </points>
            </layout>
            <relation from="di225363594424697498" from-iid="444bdf18a36a4ba8bef58fe624c452dc" to="di837278424433303236" to-iid="6467b93d6aa048d9a32564a3987c6cb6" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip943026018829253149_104394084684373496" iid="638bae637be04d7f844ef9efa025473c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:49:06" order-index="93" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-122" y1="340" x2="-88" y2="270" start-border-pos="0.19332298551287" end-border-pos="0.55667701448713">
              <points>
                <point x="-122" y="340" />
                <point x="-88" y="270" />
              </points>
            </layout>
            <relation from="di940015277815504329" from-iid="81acb6d8d43c493793c01d10ee67feb7" to="di225363594424697498" to-iid="444bdf18a36a4ba8bef58fe624c452dc" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip943026018829253149_100091783212560943" iid="114d821bcded49d6b8f55a2998a06ace" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:49:22" order-index="94" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="22" y1="340" x2="-12" y2="270" start-border-pos="0.05667701789311" end-border-pos="0.69332298210689">
              <points>
                <point x="22" y="340" />
                <point x="-12" y="270" />
              </points>
            </layout>
            <relation from="di494206295440045751" from-iid="532a0d90c6c04e3f975a5ddd5d0a531e" to="di225363594424697498" to-iid="444bdf18a36a4ba8bef58fe624c452dc" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip943026018829253149_206739681472581381" iid="9479e9cfb21042eeab0a8b135229940c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 12:50:21" order-index="95" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="220" y1="420" x2="130" y2="420" start-border-pos="0.875" end-border-pos="0.375">
              <points>
                <point x="220" y="420" />
                <point x="130" y="420" />
              </points>
            </layout>
            <relation from="di636050527309270781" from-iid="9b5e55195ff845718deffe157256b701" to="di494206295440045751" to-iid="532a0d90c6c04e3f975a5ddd5d0a531e" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip943026018829253149_847305400986509011" iid="36c5fef092244b589f1111b06f095a4d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:01:50" order-index="97" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-460" y1="-30" x2="-360" y2="-30" start-border-pos="0.375" end-border-pos="0.875">
              <points>
                <point x="-460" y="-30" />
                <point x="-360" y="-30" />
              </points>
            </layout>
            <relation from="di717040889402816513" from-iid="fb73ae3b63d347f38a2dfb1e7b6cb586" to="di128246380242454050" to-iid="fdac7203ab4e4ea593e122210a6e6749" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip943026018829253149_368376177900970529" iid="ae13496e141a461c83f0bb6cee7efec1" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:05:57" order-index="98" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-220" y1="-30" x2="-120" y2="-30" start-border-pos="0.375" end-border-pos="0.875">
              <points>
                <point x="-220" y="-30" />
                <point x="-120" y="-30" />
              </points>
            </layout>
            <relation from="di128246380242454050" from-iid="fdac7203ab4e4ea593e122210a6e6749" to="di837278424433303236" to-iid="6467b93d6aa048d9a32564a3987c6cb6" />
          </item>
          <item id="ddip943026018829253149_922625868865131331" iid="d01e616bd47947e984939e0c883c1a6d" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:08:49" order-index="99" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="20" y1="-30" x2="220" y2="-30" start-border-pos="0.375" end-border-pos="0.875">
              <points>
                <point x="20" y="-30" />
                <point x="220" y="-30" />
              </points>
            </layout>
            <relation from="di837278424433303236" from-iid="6467b93d6aa048d9a32564a3987c6cb6" to="di258546705435607308" to-iid="49b37639af22429cb03d4883d00b7a14" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip943026018829253149_551709424289814889" iid="b4cb88bfc16b4eac95daf23326d92c59" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:08:59" order-index="100" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="10" y1="50" x2="230" y2="340" start-border-pos="0.73293650831495" end-border-pos="0.0170634950910296">
              <points>
                <point x="10" y="50" />
                <point x="230" y="340" />
              </points>
            </layout>
            <relation from="di837278424433303236" from-iid="6467b93d6aa048d9a32564a3987c6cb6" to="di636050527309270781" to-iid="9b5e55195ff845718deffe157256b701" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip943026018829253149_299195197366005585" iid="6cc4eec4cefe4e03a8bf88d847286e7f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:10:44" order-index="101" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-90" y1="420" x2="-10" y2="420" start-border-pos="0.375" end-border-pos="0.875">
              <points>
                <point x="-90" y="420" />
                <point x="-10" y="420" />
              </points>
            </layout>
            <relation from="di940015277815504329" from-iid="81acb6d8d43c493793c01d10ee67feb7" to="di494206295440045751" to-iid="532a0d90c6c04e3f975a5ddd5d0a531e" />
          </item>
          <item id="ddip943026018829253149_218703407960807398" iid="0c6605e5f1b5416d86bb555d0dcbd4e6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:14:51" order-index="103" type="entity">
            <layout ax="-360" ay="170" awidth="180" aheight="40" x="-360" y="170" width="180" height="40" />
          </item>
          <item id="di509713408730015730" iid="6eb0de6798e148a5a496ee8fe7200ba1" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:15:07" order-index="104" type="comment-connector">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-180" y1="190" x2="-120" y2="190" start-border-pos="0.375" end-border-pos="0.875">
              <points>
                <point x="-180" y="190" />
                <point x="-120" y="190" />
              </points>
            </layout>
            <relation from="ddip943026018829253149_218703407960807398" from-iid="0c6605e5f1b5416d86bb555d0dcbd4e6" to="di225363594424697498" to-iid="444bdf18a36a4ba8bef58fe624c452dc" />
          </item>
          <item id="ddip943026018829253149_966718051224673725" iid="049c42f259df480f88e2f2d228c6e211" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:55:26" order-index="105" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="248" y1="340" x2="220" y2="372" start-border-pos="0.05" end-border-pos="0.8">
              <points>
                <point x="248" y="340" />
                <point x="248" y="290" />
                <point x="170" y="290" />
                <point x="170" y="372" />
                <point x="220" y="372" />
              </points>
            </layout>
            <relation from="di636050527309270781" from-iid="9b5e55195ff845718deffe157256b701" to="di636050527309270781" to-iid="9b5e55195ff845718deffe157256b701" />
          </item>
          <item id="ddip943026018829253149_645654269845085518" iid="f14e79805a184d299cd7618b18e2f6eb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:56:24" order-index="106" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="290" y1="50" x2="290" y2="340" start-border-pos="0.625" end-border-pos="0.125">
              <points>
                <point x="290" y="50" />
                <point x="290" y="340" />
              </points>
            </layout>
            <relation from="di258546705435607308" from-iid="49b37639af22429cb03d4883d00b7a14" to="di636050527309270781" to-iid="9b5e55195ff845718deffe157256b701" />
          </item>
        </layer>
      </diagram>
      <diagram type="uml-object" id="p795952820230698759" name="UI Steps" order-index="4" show-nullability="false">
        <style>
          <background-color index="1" color="#FFFFFFFF" />
          <background-color index="2" color="#FFFFFFFF" />
          <background-type type="solid" />
        </style>
        <meta>
          <authors>
            <author> </author>
          </authors>
          <description />
          <creation-date>07/12/2012 13:25:58</creation-date>
          <change-date>07/13/2012 09:30:50</change-date>
          <revision-count>0</revision-count>
          <version />
        </meta>
        <abstract-items>
          <item id="ddip795952820230698759_344456324448196566" cid="CMT004" type="comment" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:40:39">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <comment>Frontend View</comment>
          </item>
          <item id="ddip795952820230698759_142819086321901735" cid="CMT004" type="comment" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:40:39">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <comment>Backend View</comment>
          </item>
          <item id="ddip795952820230698759_468047860114023174" cid="CMT004" type="comment" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:40:39">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <comment>Relationship View</comment>
          </item>
          <item id="ddip795952820230698759_983522630395669007" cid="OBJ002" type="object" name="Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:18">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_105100069584588498" cid="OBJ003" type="object" name="PreviousStep" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:29">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_837571342246785651" cid="OBJ002" type="object" name="ParentStep" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:18">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF949494" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_294708368200837988" cid="OBJ003" type="object" name="ChildStep" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:29">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_204363629630323079" cid="REL018" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:59:31">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_294708368200837988" to="ddip795952820230698759_983522630395669007">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_786408932818066375" cid="OBJ002" type="object" name="NextStep" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:18">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_124569195134167658" cid="REL019" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:59:34">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_105100069584588498" to="ddip795952820230698759_983522630395669007">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_141956340161227285" cid="REL020" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:59:37">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_983522630395669007" to="ddip795952820230698759_786408932818066375">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_445740460105151255" cid="REL021" type="relationship" name="" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:59:42">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FFAAAAAA" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
            <relation from="ddip795952820230698759_983522630395669007" to="ddip795952820230698759_837571342246785651">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_651012474362099804" cid="OBJ002" type="object" name="Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:18">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_313983304398395699" cid="REL022" type="relationship" name="RootStep" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:00:30">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_651012474362099804" to="ddip795952820230698759_786408932818066375">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_707426198140628054" cid="OBJ002" type="object" name="Step" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:18">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFF0000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_273982462768890940" cid="OBJ003" type="object" name="PreviousStep" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:29">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_578547698464733705" cid="OBJ003" type="object" name="PreviousStep" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:29">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_653438193642321035" cid="OBJ002" type="object" name="NextStep" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:18">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_639097216741715304" cid="REL018" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:59:31">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_578547698464733705" to="ddip795952820230698759_707426198140628054">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_952927098553479874" cid="REL019" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:59:34">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_273982462768890940" to="ddip795952820230698759_707426198140628054">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_297821896361038049" cid="REL020" type="relationship" name="" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:59:37">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FFFF0000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
            <relation from="ddip795952820230698759_707426198140628054" to="ddip795952820230698759_653438193642321035">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_939750281718558769" cid="OBJ002" type="object" name="Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:18">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_620315367104420195" cid="REL022" type="relationship" name="RootStep" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:00:30">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_939750281718558769" to="ddip795952820230698759_850667747116793634">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_740421928691176178" cid="CMT001" type="comment" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 17:17:19">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <comment>Object associations</comment>
          </item>
          <item id="ddip795952820230698759_188227167424676713" cid="CMT001" type="comment" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 17:17:19">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <comment>Delete root step</comment>
          </item>
          <item id="ddip795952820230698759_738631814871874979" cid="OBJ003" type="object" name="PreviousStep" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:29">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_896023917588687868" cid="OBJ003" type="object" name="ChildStep'" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:29">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_506389802822551426" cid="OBJ003" type="object" name="ChildStep'" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 13:48:29">
            <stereotypes />
            <tagged-values />
            <documentation>
              <text>
                <content>
                  <p index="0">
                    <t />
                    <style font-name="Arial" font-size="12" font-bold="false" font-italic="false" font-underline="false" font-strikeout="false">
                      <text>
                        <solid-brush color="#FF000000" />
                      </text>
                    </style>
                  </p>
                </content>
              </text>
            </documentation>
            <cooperation>
              <participants />
              <comments />
            </cooperation>
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_850667747116793634" cid="OBJ003" type="object" name="RootStep'" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 13:48:29">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <object classifier-name="">
              <attributes />
            </object>
          </item>
          <item id="ddip795952820230698759_898634364317555351" cid="REL001" type="relationship" name="" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/13/2012 09:30:25">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_273982462768890940" to="ddip795952820230698759_850667747116793634">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_786150397732825941" cid="REL002" type="relationship" name="" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/13/2012 09:30:32">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_896023917588687868" to="ddip795952820230698759_850667747116793634">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="ddip795952820230698759_206434646361302623" cid="REL003" type="relationship" name="" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/13/2012 09:30:50">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="ddip795952820230698759_506389802822551426" to="ddip795952820230698759_786408932818066375">
              <start-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
              <end-role id="" name="" multiplicity="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
        </abstract-items>
        <layer name="Default" visible="true" enabled="true" locked="false">
          <item id="di754638583339604878" iid="a2532017a6f447d3bc578054228fc580" name="Element2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 17:16:29" order-index="21" type="drawing-shape">
            <layout ax="-990" ay="840" awidth="920" aheight="220" x="-990" y="840" width="140" height="220" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di810882829891248231" iid="1dcf05c6b8aa4dbb911461332521e96e" name="Element1" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 17:15:41" order-index="20" type="drawing-shape">
            <layout ax="-990" ay="480" awidth="920" aheight="230" x="-990" y="480" width="920" height="230" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di539786936803670771" iid="8c4e5c364ad04a6884a2c16c2e93de41" name="Element9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:33:54" order-index="8" type="drawing-shape">
            <layout ax="-990" ay="-280" awidth="920" aheight="210" x="-990" y="-280" width="920" height="210" />
            <drawing-shape type="Rectangle" />
            <style background-type="vertical-linear" background-color="#FFFFFFFF" background-color2="#FFFFFFFF" border-color="#FFFFFFFF" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di209229784962418977" iid="7eb01d66f9eb478dbac0e5293c4a9b3a" name="Text" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:26:12" order-index="0" type="drawing-shape">
            <layout ax="-950" ay="-160" awidth="100" aheight="40" x="-950" y="-160" width="100" height="40" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di187096828742293339" iid="860d666d010c40dfab3ad2a519715d5d" name="Element3" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:26:29" order-index="1" type="drawing-shape">
            <layout ax="-790" ay="-250" awidth="110" aheight="40" x="-790" y="-250" width="110" height="40" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="265af47abe7c4a73844ce8c7efa371ed" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-930" ay="-110" awidth="62" aheight="28" x="-930" y="-110" width="62" height="28" />
            <drawing-text>
              <text>Step 1</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="0a64fc34333e4991a9a3cb3f9223a152" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-770" ay="-110" awidth="62" aheight="28" x="-770" y="-110" width="62" height="28" />
            <drawing-text>
              <text>Step 2</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="ad9822e6418e4d9b9c1da3ba0e1f2365" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-590" ay="-110" awidth="62" aheight="28" x="-590" y="-110" width="62" height="28" />
            <drawing-text>
              <text>Step 3</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di209229784962418977" iid="65f1f28a0cb4456db4d3a9768d988331" name="Element2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:26:12" order-index="0" type="drawing-shape">
            <layout ax="-620" ay="-250" awidth="110" aheight="40" x="-620" y="-250" width="110" height="40" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di299770459860486898" iid="5919d24e28d445ba95c61051238c88bf" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:30:16" order-index="5" type="group">
            <layout ax="-760" ay="-160" awidth="50" aheight="30" x="-760" y="-160" width="140" height="160" />
            <group-items>
              <item id="di433836391352693097" iid="29911d6e47c844beb7c7baf6fe3f41de" name="Element6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:51" order-index="4" type="drawing-shape">
                <layout ax="-740" ay="-160" awidth="30" aheight="30" x="-740" y="-160" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
              <item id="di438582201545759109" iid="440cf99ce2ac4421b68a098438e2f057" name="Element5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:30" order-index="3" type="drawing-shape">
                <layout ax="-760" ay="-160" awidth="30" aheight="30" x="-760" y="-160" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF00AA00" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
            </group-items>
          </item>
          <item id="di295911666109927803" iid="879ea2316ac3427e9e8b4ef0a1366a50" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:30:16" order-index="5" type="group">
            <layout ax="-590" ay="-160" awidth="50" aheight="30" x="-590" y="-160" width="140" height="160" />
            <group-items>
              <item id="di433836391352693097" iid="e2719ac585da4ede88b4bfebf9eef8aa" name="Element6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:51" order-index="4" type="drawing-shape">
                <layout ax="-570" ay="-160" awidth="30" aheight="30" x="-570" y="-160" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
              <item id="di438582201545759109" iid="58bf3248184a442d9d662866ef1c0e0b" name="Element5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:30" order-index="3" type="drawing-shape">
                <layout ax="-590" ay="-160" awidth="30" aheight="30" x="-590" y="-160" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF00AA00" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
            </group-items>
          </item>
          <item id="di302518218648633701" iid="52c8de9bc37247f4b4636ecfc49ccc5a" name="Element7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:03" order-index="6" type="drawing-shape">
            <layout ax="-850" ay="-150" awidth="90" aheight="20" x="-850" y="-150" width="90" height="20" />
            <drawing-shape type="ArrowRight" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di302518218648633701" iid="43920d63b7994115801b6f68c7eaefa2" name="Element7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:03" order-index="6" type="drawing-shape">
            <layout ax="-710" ay="-150" awidth="120" aheight="20" x="-710" y="-150" width="120" height="20" />
            <drawing-shape type="ArrowRight" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di537375203145382035" iid="46c9b5af5de047d68586fa93403d616c" name="Element8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:56" order-index="7" type="drawing-shape">
            <layout ax="-740" ay="-210" awidth="20" aheight="50" x="-740" y="-210" width="20" height="50" />
            <drawing-shape type="ArrowDown" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di537375203145382035" iid="5224244a256346a5a410afcab57ed757" name="Element8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:56" order-index="7" type="drawing-shape">
            <layout ax="-570" ay="-210" awidth="20" aheight="50" x="-570" y="-210" width="20" height="50" />
            <drawing-shape type="ArrowDown" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di877234312739301701" iid="bce6bec046764d51ae499c4cc539b519" name="Element10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:35:04" order-index="9" type="drawing-text">
            <layout ax="-950" ay="-150" awidth="100" aheight="20" x="-950" y="-150" width="100" height="20" />
            <drawing-text>
              <text>Text Search</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di877234312739301701" iid="e2c88cdcc42b4534aad8c584ba6d3563" name="Element10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:35:04" order-index="9" type="drawing-text">
            <layout ax="-780" ay="-240" awidth="90" aheight="20" x="-780" y="-240" width="90" height="20" />
            <drawing-text>
              <text>Gene Type</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di877234312739301701" iid="b931ca9e092f460795a91d424338caac" name="Element10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:35:04" order-index="9" type="drawing-text">
            <layout ax="-620" ay="-240" awidth="110" aheight="20" x="-620" y="-240" width="110" height="20" />
            <drawing-text>
              <text>Exon Count</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di539786936803670771" iid="d81edfe4e349483493a6914305fee800" name="Element9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:33:54" order-index="8" type="drawing-shape">
            <layout ax="-990" ay="-20" awidth="920" aheight="210" x="-990" y="-20" width="920" height="210" />
            <drawing-shape type="Rectangle" />
            <style background-type="vertical-linear" background-color="#FFFFFFFF" background-color2="#FFFFFFFF" border-color="#FFFFFFFF" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di209229784962418977" iid="313727401eba4f11be81695d5534f178" name="Text" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:26:12" order-index="0" type="drawing-shape">
            <layout ax="-950" ay="100" awidth="100" aheight="40" x="-970" y="80" width="100" height="40" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di187096828742293339" iid="e210b619f25348e8b14373f6d50967f9" name="Element3" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:26:29" order-index="1" type="drawing-shape">
            <layout ax="-790" ay="10" awidth="110" aheight="40" x="-810" y="-10" width="110" height="40" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="2e97084705b14fae867848bb7b13fede" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-930" ay="150" awidth="62" aheight="28" x="-950" y="130" width="62" height="28" />
            <drawing-text>
              <text>Step #1</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="aa335a30a83b452e8cca7bd7bcbec41d" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-770" ay="150" awidth="62" aheight="28" x="-790" y="130" width="62" height="28" />
            <drawing-text>
              <text>Step #3</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="5e36ca32addc41c2afb10d8d3acfa5ba" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-590" ay="150" awidth="62" aheight="28" x="-590" y="150" width="62" height="28" />
            <drawing-text>
              <text>Step #5</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di209229784962418977" iid="9e369c6d4edc4281ae7a00ed057921d9" name="Element2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:26:12" order-index="0" type="drawing-shape">
            <layout ax="-620" ay="10" awidth="110" aheight="40" x="-640" y="-10" width="110" height="40" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di475739910129613412" iid="bad99e67b5964a4f97a17e0b65a624b2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:30:16" order-index="5" type="group">
            <layout ax="-760" ay="100" awidth="50" aheight="30" x="-780" y="80" width="140" height="160" />
            <group-items>
              <item id="di864766390226560200" iid="3065efb9d03841bca2869054826c8873" name="Element6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:51" order-index="4" type="drawing-shape">
                <layout ax="-740" ay="100" awidth="30" aheight="30" x="-740" y="100" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
              <item id="di327883172792933896" iid="5eef4b446d7b4809a1cd2a8c3b27843a" name="Element5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:30" order-index="3" type="drawing-shape">
                <layout ax="-760" ay="100" awidth="30" aheight="30" x="-760" y="100" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF00AA00" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
            </group-items>
          </item>
          <item id="di943981306292528579" iid="f7586f79b7ed4e8ba9c32546aeec9493" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:30:16" order-index="5" type="group">
            <layout ax="-590" ay="100" awidth="50" aheight="30" x="-610" y="80" width="140" height="160" />
            <group-items>
              <item id="di392143972678267399" iid="8786bb8f7c6147e38e50fb5a31d9333f" name="Element6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:51" order-index="4" type="drawing-shape">
                <layout ax="-570" ay="100" awidth="30" aheight="30" x="-570" y="100" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
              <item id="di937788006104129153" iid="07d6d431f7704c80a5f11b0c2852b4b6" name="Element5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:30" order-index="3" type="drawing-shape">
                <layout ax="-590" ay="100" awidth="30" aheight="30" x="-590" y="100" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF00AA00" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
            </group-items>
          </item>
          <item id="di302518218648633701" iid="ee6f19e4d3c844759aec7fccc678caa3" name="Element7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:03" order-index="6" type="drawing-shape">
            <layout ax="-850" ay="110" awidth="90" aheight="20" x="-870" y="90" width="90" height="20" />
            <drawing-shape type="ArrowRight" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di302518218648633701" iid="b865d5179ce54f5eb406a4b672cc79e5" name="Element7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:03" order-index="6" type="drawing-shape">
            <layout ax="-710" ay="110" awidth="120" aheight="20" x="-730" y="90" width="120" height="20" />
            <drawing-shape type="ArrowRight" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di537375203145382035" iid="dab0920bcc004f2a98cd6326822a34db" name="Element8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:56" order-index="7" type="drawing-shape">
            <layout ax="-740" ay="50" awidth="20" aheight="50" x="-760" y="30" width="20" height="50" />
            <drawing-shape type="ArrowDown" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di537375203145382035" iid="3c9678b53dc84bb493117970d16ab1e5" name="Element8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:56" order-index="7" type="drawing-shape">
            <layout ax="-570" ay="50" awidth="20" aheight="50" x="-590" y="30" width="20" height="50" />
            <drawing-shape type="ArrowDown" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di877234312739301701" iid="bb08c9caddb64d12a470e186995fae98" name="Element10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:35:04" order-index="9" type="drawing-text">
            <layout ax="-950" ay="110" awidth="100" aheight="20" x="-970" y="90" width="100" height="20" />
            <drawing-text>
              <text>Text Search</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di877234312739301701" iid="68840751fc7f42d79d37a7dfb417bf3c" name="Element10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:35:04" order-index="9" type="drawing-text">
            <layout ax="-780" ay="20" awidth="90" aheight="20" x="-800" y="0" width="90" height="20" />
            <drawing-text>
              <text>Gene Type</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di877234312739301701" iid="fb5c30d2649643a2b2ae363c6cb125fa" name="Element10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:35:04" order-index="9" type="drawing-text">
            <layout ax="-620" ay="20" awidth="110" aheight="20" x="-640" y="0" width="110" height="20" />
            <drawing-text>
              <text>Exon Count</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="49cd69c5973548489b66c4241c115a02" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-770" ay="-20" awidth="62" aheight="28" x="-770" y="-20" width="62" height="28" />
            <drawing-text>
              <text>Step #2</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="fe7e6bb68e87479abca5d5a21e90a1ce" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-590" ay="-20" awidth="62" aheight="28" x="-590" y="-20" width="62" height="28" />
            <drawing-text>
              <text>Step #4</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di611941439922219461" iid="1e030fde41474d7d8168a27ad3373023" name="Element11" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:38:29" order-index="10" type="drawing-text">
            <layout ax="-990" ay="-280" awidth="220" aheight="30" x="-990" y="-280" width="220" height="30" />
            <drawing-text>
              <text>Strategy: Genes By Text Search</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di553367640554356131" iid="21061b74c35f4385bbc1c4e55e0aa58c" name="Element12" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:40:07" order-index="11" type="drawing-text">
            <layout ax="-990" ay="-20" awidth="100" aheight="30" x="-990" y="-20" width="100" height="28" />
            <drawing-text>
              <text>Strategy #1</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="ddip795952820230698759_344456324448196566" iid="f10a45d52010469dbd4658b5eef6c234" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:40:39" order-index="12" type="entity">
            <layout ax="-210" ay="-280" awidth="140" aheight="30" x="-210" y="-280" width="0" height="30" />
          </item>
          <item id="ddip795952820230698759_142819086321901735" iid="8399ebae555f406094a6871912fa67bf" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:40:39" order-index="12" type="entity">
            <layout ax="-210" ay="-20" awidth="140" aheight="30" x="-210" y="-20" width="0" height="30" />
          </item>
          <item id="di539786936803670771" iid="821d637856b14e6cbd0f9eccdaecbad6" name="Element9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:33:54" order-index="8" type="drawing-shape">
            <layout ax="-990" ay="240" awidth="920" aheight="210" x="-990" y="240" width="920" height="210" />
            <drawing-shape type="Rectangle" />
            <style background-type="vertical-linear" background-color="#FFFFFFFF" background-color2="#FFFFFFFF" border-color="#FFFFFFFF" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di209229784962418977" iid="aec89709f7ac411f93c94df8219bf796" name="Text" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:26:12" order-index="0" type="drawing-shape">
            <layout ax="-950" ay="360" awidth="100" aheight="40" x="-990" y="320" width="100" height="40" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di187096828742293339" iid="b70f81ecde914fc7b95dcdd9e6d31674" name="Element3" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:26:29" order-index="1" type="drawing-shape">
            <layout ax="-790" ay="270" awidth="110" aheight="40" x="-830" y="230" width="110" height="40" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="b6cddca7b04747c9a6c601e5308e2d69" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-950" ay="410" awidth="90" aheight="30" x="-950" y="370" width="90" height="28" />
            <drawing-text>
              <text>Previous Step</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="3ce0418a967e4d8da703968c1d0d5104" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-780" ay="410" awidth="90" aheight="30" x="-780" y="410" width="90" height="28" />
            <drawing-text>
              <text>Current Step</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="f0ef753783de4a9c82a3b153a9f2bc02" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-590" ay="410" awidth="62" aheight="28" x="-610" y="390" width="62" height="28" />
            <drawing-text>
              <text>NextStep</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di209229784962418977" iid="3965f7357a8e4c4c8ae685340ff04b88" name="Element2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:26:12" order-index="0" type="drawing-shape">
            <layout ax="-620" ay="270" awidth="110" aheight="40" x="-660" y="230" width="110" height="40" />
            <drawing-shape type="Rectangle" />
            <style class="default" />
          </item>
          <item id="di636515684533134461" iid="a51b84250c1341cebd5a631ae2b616e1" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:30:16" order-index="5" type="group">
            <layout ax="-760" ay="360" awidth="50" aheight="30" x="-800" y="320" width="140" height="160" />
            <group-items>
              <item id="di468047860114023174" iid="9ae1e4ec6654456e80f1a9a378d2a21c" name="Element6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:51" order-index="4" type="drawing-shape">
                <layout ax="-740" ay="360" awidth="30" aheight="30" x="-740" y="360" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
              <item id="di435540861976191908" iid="4dd56b7a3f484ac5a2bc7f832b5925a4" name="Element5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:30" order-index="3" type="drawing-shape">
                <layout ax="-760" ay="360" awidth="30" aheight="30" x="-760" y="360" width="30" height="30" />
                <drawing-shape type="Ellipse" />
                <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF00AA00" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
              </item>
            </group-items>
          </item>
          <item id="di302518218648633701" iid="ce7f19b12a9e476cb37b4295ac2c92b0" name="Element7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:03" order-index="6" type="drawing-shape">
            <layout ax="-850" ay="370" awidth="90" aheight="20" x="-890" y="330" width="90" height="20" />
            <drawing-shape type="ArrowRight" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di302518218648633701" iid="a8193fab62664f8d9dc066f8d4ccb66b" name="Element7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:03" order-index="6" type="drawing-shape">
            <layout ax="-710" ay="370" awidth="120" aheight="20" x="-750" y="330" width="120" height="20" />
            <drawing-shape type="ArrowRight" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di537375203145382035" iid="b218c71c69e549608a189b1e030364a7" name="Element8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:56" order-index="7" type="drawing-shape">
            <layout ax="-740" ay="310" awidth="20" aheight="50" x="-780" y="270" width="20" height="50" />
            <drawing-shape type="ArrowDown" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di537375203145382035" iid="173e50c6f22544d5a076362499020407" name="Element8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:31:56" order-index="7" type="drawing-shape">
            <layout ax="-570" ay="310" awidth="20" aheight="50" x="-610" y="270" width="20" height="50" />
            <drawing-shape type="ArrowDown" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FF000000" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di877234312739301701" iid="e147ee2b552743d792a69d1db19f0f59" name="Element10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:35:04" order-index="9" type="drawing-text">
            <layout ax="-950" ay="370" awidth="100" aheight="20" x="-990" y="330" width="100" height="20" />
            <drawing-text>
              <text>Text Search</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di877234312739301701" iid="14a96653b4b9493ba7fd52878ade9e5c" name="Element10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:35:04" order-index="9" type="drawing-text">
            <layout ax="-780" ay="280" awidth="90" aheight="20" x="-820" y="240" width="90" height="20" />
            <drawing-text>
              <text>Gene Type</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di877234312739301701" iid="11001aa32a1b440aa654b20b3896053c" name="Element10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:35:04" order-index="9" type="drawing-text">
            <layout ax="-620" ay="280" awidth="110" aheight="20" x="-660" y="240" width="110" height="20" />
            <drawing-text>
              <text>Exon Count</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di188203337186148335" iid="d073e90822ec428c8734db3b2d93f80a" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-780" ay="240" awidth="90" aheight="30" x="-780" y="240" width="90" height="28" />
            <drawing-text>
              <text>Child Step</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="di553367640554356131" iid="08923bebe8a74190b848210c7e48157f" name="Element12" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:40:07" order-index="11" type="drawing-text">
            <layout ax="-990" ay="240" awidth="100" aheight="30" x="-990" y="240" width="100" height="28" />
            <drawing-text>
              <text>Strategy #1</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="ddip795952820230698759_468047860114023174" iid="b6f370e19a6d4817941971eef940d347" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:40:39" order-index="12" type="entity">
            <layout ax="-210" ay="240" awidth="140" aheight="30" x="-230" y="220" width="0" height="30" />
          </item>
          <item id="di435200049143866507" iid="2b9d12ddaa734117b736c4a0bd13afdc" name="Element6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:51" order-index="4" type="drawing-shape">
            <layout ax="-570" ay="360" awidth="30" aheight="30" x="-570" y="360" width="30" height="30" />
            <drawing-shape type="Ellipse" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di919168535867001138" iid="0fdc46aabf5d418680ed74d01785eb7e" name="Element5" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:28:30" order-index="3" type="drawing-shape">
            <layout ax="-590" ay="360" awidth="30" aheight="30" x="-590" y="360" width="30" height="30" />
            <drawing-shape type="Ellipse" />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FF000000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="di188203337186148335" iid="b0b3cbee1cc74b87b4a60057f611e3c4" name="Element4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:27:01" order-index="2" type="drawing-text">
            <layout ax="-520" ay="360" awidth="80" aheight="30" x="-520" y="360" width="80" height="28" />
            <drawing-text>
              <text>RootStep</text>
            </drawing-text>
            <style class="default" />
          </item>
          <item id="ddip795952820230698759_983522630395669007" iid="ad40fcded0f841c9921617186dea641c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:18" order-index="13" type="entity">
            <layout ax="-770" ay="640" awidth="110" aheight="40" x="-770" y="640" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_105100069584588498" iid="0dbfd87497f141b98fe9ae905dc87152" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:29" order-index="14" type="entity">
            <layout ax="-960" ay="640" awidth="110" aheight="40" x="-960" y="640" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_294708368200837988" iid="eef0b44ea98b47c6921d8002ea42e302" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:29" order-index="14" type="entity">
            <layout ax="-770" ay="520" awidth="110" aheight="40" x="-770" y="520" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_786408932818066375" iid="cea1f702958c494581dcdd6b4afe1300" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:18" order-index="13" type="entity">
            <layout ax="-570" ay="640" awidth="110" aheight="40" x="-570" y="640" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_837571342246785651" iid="dd34b321531b499b8078d4711b20fbf9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:18" order-index="13" type="entity">
            <layout ax="-770" ay="740" awidth="110" aheight="40" x="-770" y="740" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_204363629630323079" iid="ccc5557eced9400db604a5694ad47e95" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:59:31" order-index="15" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-715" y1="560" x2="-715" y2="640" start-border-pos="0.625" end-border-pos="0.125">
              <points>
                <point x="-715" y="560" />
                <point x="-715" y="640" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_294708368200837988" from-iid="eef0b44ea98b47c6921d8002ea42e302" to="ddip795952820230698759_983522630395669007" to-iid="ad40fcded0f841c9921617186dea641c" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_124569195134167658" iid="c5dbfe227f56423cb7d87c9d76108996" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:59:34" order-index="16" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-850" y1="660" x2="-770" y2="660" start-border-pos="0.375" end-border-pos="0.875">
              <points>
                <point x="-850" y="660" />
                <point x="-770" y="660" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_105100069584588498" from-iid="0dbfd87497f141b98fe9ae905dc87152" to="ddip795952820230698759_983522630395669007" to-iid="ad40fcded0f841c9921617186dea641c" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_141956340161227285" iid="88fe2a253c7143ea9d135cd950606213" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:59:37" order-index="17" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-660" y1="660" x2="-570" y2="660" start-border-pos="0.375" end-border-pos="0.875">
              <points>
                <point x="-660" y="660" />
                <point x="-570" y="660" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_983522630395669007" from-iid="ad40fcded0f841c9921617186dea641c" to="ddip795952820230698759_786408932818066375" to-iid="cea1f702958c494581dcdd6b4afe1300" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_445740460105151255" iid="c5395993de2343feb90656dbbe90eb9c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:59:42" order-index="18" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-715" y1="680" x2="-715" y2="740" start-border-pos="0.625" end-border-pos="0.125">
              <points>
                <point x="-715" y="680" />
                <point x="-715" y="740" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_983522630395669007" from-iid="ad40fcded0f841c9921617186dea641c" to="ddip795952820230698759_837571342246785651" to-iid="dd34b321531b499b8078d4711b20fbf9" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_651012474362099804" iid="ddb856e30e3f4db4b4460bf48f7768f0" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:18" order-index="13" type="entity">
            <layout ax="-330" ay="520" awidth="110" aheight="40" x="-330" y="520" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_313983304398395699" iid="ff737b7f8af24d708323034d1db303d0" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:00:30" order-index="19" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-315" y1="560" x2="-475" y2="640" start-border-pos="0.534090909090909" end-border-pos="0.215909090909091">
              <points>
                <point x="-315" y="560" />
                <point x="-475" y="640" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_651012474362099804" from-iid="ddb856e30e3f4db4b4460bf48f7768f0" to="ddip795952820230698759_786408932818066375" to-iid="cea1f702958c494581dcdd6b4afe1300" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_707426198140628054" iid="2b17c3d345a947b6860ffd5b1f37a8c4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:18" order-index="13" type="entity">
            <layout ax="-770" ay="1220" awidth="110" aheight="40" x="-790" y="1200" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_273982462768890940" iid="476931dbf75d466c9e9c18323aa4eed0" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:29" order-index="14" type="entity">
            <layout ax="-960" ay="990" awidth="110" aheight="40" x="-980" y="970" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_578547698464733705" iid="c260f130523c46eea31854e81332640f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:29" order-index="14" type="entity">
            <layout ax="-770" ay="1100" awidth="110" aheight="40" x="-790" y="1080" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_653438193642321035" iid="43470ca25c134251a2808a49a544ae4c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:18" order-index="13" type="entity">
            <layout ax="-510" ay="1220" awidth="110" aheight="40" x="-510" y="1220" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_639097216741715304" iid="342a2fb0eef14ee29cb643665a9891bc" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:59:31" order-index="15" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-715" y1="1140" x2="-715" y2="1220" start-border-pos="0.625" end-border-pos="0.125">
              <points>
                <point x="-715" y="1140" />
                <point x="-715" y="1220" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_578547698464733705" from-iid="c260f130523c46eea31854e81332640f" to="ddip795952820230698759_707426198140628054" to-iid="2b17c3d345a947b6860ffd5b1f37a8c4" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_952927098553479874" iid="0f53e8b344a64083a045af38243b7410" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:59:34" order-index="16" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-888" y1="1030" x2="-732" y2="1220" start-border-pos="0.662549382990057" end-border-pos="0.0874506170099432">
              <points>
                <point x="-888" y="1030" />
                <point x="-732" y="1220" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_273982462768890940" from-iid="476931dbf75d466c9e9c18323aa4eed0" to="ddip795952820230698759_707426198140628054" to-iid="2b17c3d345a947b6860ffd5b1f37a8c4" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_297821896361038049" iid="25933785041945018a2f8157df5ccfdb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:59:37" order-index="17" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="80,-10" x1="-660" y1="1240" x2="-510" y2="1240" start-border-pos="0.375" end-border-pos="0.875">
              <points>
                <point x="-660" y="1240" />
                <point x="-580" y="1240" />
                <point x="-510" y="1240" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_707426198140628054" from-iid="2b17c3d345a947b6860ffd5b1f37a8c4" to="ddip795952820230698759_653438193642321035" to-iid="43470ca25c134251a2808a49a544ae4c" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_939750281718558769" iid="1da4d01ef36d4176bab01eec3b8f9582" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:18" order-index="13" type="entity">
            <layout ax="-310" ay="870" awidth="110" aheight="40" x="-310" y="870" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_620315367104420195" iid="3bb5ff5a66374306a324aaa0c8ce8cfe" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:00:30" order-index="19" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-281" y1="910" x2="-430" y2="990" start-border-pos="0.565259760076349" end-border-pos="0.204545454545455">
              <points>
                <point x="-281" y="910" />
                <point x="-430" y="990" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_939750281718558769" from-iid="1da4d01ef36d4176bab01eec3b8f9582" to="ddip795952820230698759_850667747116793634" to-iid="cf206414998d43398925e56e9639e4ad" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_740421928691176178" iid="0f1eb6e4a2f248b1a63a8019d308eedf" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 17:17:19" order-index="22" type="entity">
            <layout ax="-990" ay="480" awidth="140" aheight="40" x="-990" y="480" width="0" height="40" />
          </item>
          <item id="ddip795952820230698759_188227167424676713" iid="24291480aaf3449f9820230b27c67a25" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 17:17:19" order-index="22" type="entity">
            <layout ax="-990" ay="840" awidth="140" aheight="40" x="-990" y="840" width="0" height="40" />
          </item>
          <item id="ddip795952820230698759_896023917588687868" iid="d3df22cb3cf74730a96ccc59f476291a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:29" order-index="14" type="entity">
            <layout ax="-520" ay="870" awidth="110" aheight="40" x="-520" y="870" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_506389802822551426" iid="402df2ee4ad840789288111c5ce4436c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:29" order-index="14" type="entity">
            <layout ax="-570" ay="520" awidth="110" aheight="40" x="-570" y="520" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_850667747116793634" iid="cf206414998d43398925e56e9639e4ad" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 13:48:29" order-index="14" type="entity">
            <layout ax="-520" ay="990" awidth="110" aheight="40" x="-520" y="990" width="110" height="40" />
          </item>
          <item id="ddip795952820230698759_898634364317555351" iid="36da991cc64043e093d3e6be99709c49" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/13/2012 09:30:25" order-index="23" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-850" y1="1010" x2="-520" y2="1010" start-border-pos="0.375" end-border-pos="0.875">
              <points>
                <point x="-850" y="1010" />
                <point x="-520" y="1010" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_273982462768890940" from-iid="476931dbf75d466c9e9c18323aa4eed0" to="ddip795952820230698759_850667747116793634" to-iid="cf206414998d43398925e56e9639e4ad" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_786150397732825941" iid="e3f6f455c59b4e5bb6b0beafe4da3a1a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/13/2012 09:30:32" order-index="24" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-465" y1="910" x2="-465" y2="990" start-border-pos="0.625" end-border-pos="0.125">
              <points>
                <point x="-465" y="910" />
                <point x="-465" y="990" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_896023917588687868" from-iid="d3df22cb3cf74730a96ccc59f476291a" to="ddip795952820230698759_850667747116793634" to-iid="cf206414998d43398925e56e9639e4ad" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
          <item id="ddip795952820230698759_206434646361302623" iid="c4d96bae6bf54f98b07f185fe4b7dc92" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/13/2012 09:30:50" order-index="25" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="-515" y1="560" x2="-515" y2="640" start-border-pos="0.625" end-border-pos="0.125">
              <points>
                <point x="-515" y="560" />
                <point x="-515" y="640" />
              </points>
            </layout>
            <relation from="ddip795952820230698759_506389802822551426" from-iid="402df2ee4ad840789288111c5ce4436c" to="ddip795952820230698759_786408932818066375" to-iid="cea1f702958c494581dcdd6b4afe1300" />
            <role-positions start-role="25,15" end-role="25,15" start-multiplicity="25,-15" end-multiplicity="25,-15" />
          </item>
        </layer>
      </diagram>
      <diagram type="uml-usecase" id="p818293798957713535" name="Use Case Diagram Strategy/Steps" order-index="5" show-nullability="false">
        <style>
          <background-color index="1" color="#FFFFFFFF" />
          <background-color index="2" color="#FFFFFFFF" />
          <background-type type="solid" />
        </style>
        <meta>
          <authors>
            <author> </author>
          </authors>
          <description />
          <creation-date>07/12/2012 14:02:01</creation-date>
          <change-date>07/12/2012 15:11:08</change-date>
          <revision-count>0</revision-count>
          <version />
        </meta>
        <abstract-items>
          <item id="ddip818293798957713535_395992504757792676" cid="UC001" type="use-case" name="Add Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:10:52">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_151088380843706174" cid="UC002" type="use-case" name="Insert Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:11:10">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_227799030621856726" cid="UC003" type="use-case" name="Revise Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:11:31">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_717805993420608477" cid="UC004" type="use-case" name="Delete Root" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:11:50">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_550943046348432900" cid="UC005" type="use-case" name="Delete Middle" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:12:13">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_301201879862097030" cid="UC006" type="use-case" name="Load Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:13:02">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_130368130629409668" cid="UC006" type="use-case" name="Update Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:13:02">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_604314664354342266" cid="UC007" type="use-case" name="New Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:45:05">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_274116062649249438" cid="UC008" type="use-case" name="Update Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:45:21">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_396456474550358700" cid="UC008" type="use-case" name="Delete Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:45:21">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_550598684489497636" cid="UC005" type="use-case" name="Revise Filter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:12:13">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_676830495252075656" cid="UC008" type="use-case" name="Rename Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:45:21">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_434898147746041333" cid="UC008" type="use-case" name="Convert To Nested" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:45:21">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_272643699807652446" cid="UC008" type="use-case" name="Delete Nested Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:45:21">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_617033653411847343" cid="UC009" type="use-case" name="Import Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:49:46">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_916515472783958759" cid="UC009" type="use-case" name="Rename Unsaved Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:49:46">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_562542665514448486" cid="UC009" type="use-case" name="Rename Saved Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:49:46">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_542071735669383989" cid="UC009" type="use-case" name="Save Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:49:46">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_801701952483009372" cid="UC009" type="use-case" name="Copy Unsaved Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:49:46">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_528742098463462205" cid="UC009" type="use-case" name="Copy Saved Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:49:46">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_459947748357008591" cid="UC009" type="use-case" name="Modify Saved Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:49:46">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_529603813156642488" cid="UC008" type="use-case" name="Import Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:45:21">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_618201566667001763" cid="UC008" type="use-case" name="Deep-clone Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:45:21">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_549626708561896229" cid="UC006" type="use-case" name="Delete Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:13:02">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_697216466512045660" cid="UC006" type="use-case" name="Load Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:13:02">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_599022867226989873" cid="UC006" type="use-case" name="Create Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:13:02">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_798418594284411226" cid="UC006" type="use-case" name="Update Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:13:02">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_384164887942094605" cid="UC006" type="use-case" name="Delete Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:13:02">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_983308991842467432" cid="INC006" type="include" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:01:54">
            <stereotypes>
              <stereotype name="include" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_633750494454722401" cid="INC005" type="include" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:01:33">
            <stereotypes>
              <stereotype name="include" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_195400055204596648" cid="EX001" type="extend" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:58:29">
            <stereotypes>
              <stereotype name="extend" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <extend extension-point="" />
          </item>
          <item id="ddip818293798957713535_857326499549121422" cid="EX002" type="extend" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:58:36">
            <stereotypes>
              <stereotype name="extend" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <extend extension-point="" />
          </item>
          <item id="ddip818293798957713535_539902018118744233" cid="EX003" type="extend" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:58:40">
            <stereotypes>
              <stereotype name="extend" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <extend extension-point="" />
          </item>
          <item id="ddip818293798957713535_536486733889438594" cid="EX004" type="extend" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:58:46">
            <stereotypes>
              <stereotype name="extend" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <extend extension-point="" />
          </item>
          <item id="ddip818293798957713535_861939524401465411" cid="INC003" type="include" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:58:51">
            <stereotypes>
              <stereotype name="include" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_802392002930469107" cid="EX005" type="extend" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:59:21">
            <stereotypes>
              <stereotype name="extend" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <extend extension-point="" />
          </item>
          <item id="ddip818293798957713535_156405643520733600" cid="EX007" type="extend" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:01:26">
            <stereotypes>
              <stereotype name="extend" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <extend extension-point="" />
          </item>
          <item id="ddip818293798957713535_448501375603027593" cid="INC007" type="include" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:02:27">
            <stereotypes>
              <stereotype name="include" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_850242085202720838" cid="INC008" type="include" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:02:45">
            <stereotypes>
              <stereotype name="include" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_989360025449967185" cid="UC009" type="use-case" name="List Strategies" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:49:46">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_245865111724273158" cid="UC009" type="use-case" name="Open Strategy" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 14:49:46">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_933314493768902576" cid="INC009" type="include" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:04:42">
            <stereotypes>
              <stereotype name="include" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip818293798957713535_547539171853325230" cid="INC010" type="include" name="" style-class="" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:04:54">
            <stereotypes>
              <stereotype name="include" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style background-type="vertical-linear" background-color="#FFD3D3D3" background-color2="#FFFFFFFF" border-color="#FFFF0000" border-width="1" shadow-type="smooth" shadow-offset="-2,-2" shadow-size="6,6" shadow-visible="true" shadow-color="#50000000" shadow-radius="6" gloss-effect="true" threed-gloss-effect="false" wrap-name-text="true" wrap-other-text="true" text-wrapping-threshold="0" padding="0" name-color="#FF000000" name-font="Microsoft Sans Serif;10;B" name-horizontal-alignment="center" name-vertical-alignment="center" part-header-color="#FF1E1E1E" part-header-font="Microsoft Sans Serif;9;I" part-header-horizontal-alignment="center" part-header-vertical-alignment="center" text-color="#FF000000" text-font="Microsoft Sans Serif;10;" text-horizontal-alignment="left" text-vertical-alignment="center" tagged-value-color="#FF1E1E1E" tagged-value-font="Microsoft Sans Serif;9;I" tagged-value-horizontal-alignment="center" tagged-value-vertical-alignment="center" stereotype-color="#FF1E1E1E" stereotype-font="Microsoft Sans Serif;9;I" stereotype-horizontal-alignment="center" stereotype-vertical-alignment="center" />
          </item>
          <item id="ddip818293798957713535_712516075830534288" cid="INC011" type="include" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:05:15">
            <stereotypes>
              <stereotype name="include" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
        </abstract-items>
        <layer name="Default" visible="true" enabled="true" locked="false">
          <item id="ddip818293798957713535_395992504757792676" iid="e20ab6a9d38e4bada047cde674b9c487" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:10:52" order-index="0" type="entity">
            <layout ax="400" ay="10" awidth="120" aheight="75" x="400" y="10" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_151088380843706174" iid="a18268959e4c4ce48146385b7376b878" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:11:10" order-index="1" type="entity">
            <layout ax="400" ay="110" awidth="120" aheight="75" x="400" y="110" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_227799030621856726" iid="8ae4aad89d81422fb8bb21fd7c98055b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:11:31" order-index="2" type="entity">
            <layout ax="400" ay="210" awidth="120" aheight="75" x="400" y="210" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_717805993420608477" iid="484b4e21dbdc421a8c45b4dbbc19b994" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:11:50" order-index="3" type="entity">
            <layout ax="400" ay="510" awidth="120" aheight="75" x="400" y="510" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_550943046348432900" iid="1dfdae2b6f2d4a1686931241d923df7a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:12:13" order-index="4" type="entity">
            <layout ax="400" ay="410" awidth="120" aheight="75" x="400" y="410" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_301201879862097030" iid="528066cf26ca42bcbbc95d428ce9d9e8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:13:02" order-index="5" type="entity">
            <layout ax="770" ay="110" awidth="120" aheight="75" x="770" y="110" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_130368130629409668" iid="42baf6f9d7bd4896b552a30a4784ae19" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:13:02" order-index="5" type="entity">
            <layout ax="770" ay="210" awidth="120" aheight="75" x="770" y="210" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_604314664354342266" iid="fb3ddee7b64b4e2486f85599f26b0089" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:45:05" order-index="6" type="entity">
            <layout ax="50" ay="10" awidth="120" aheight="75" x="50" y="10" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_274116062649249438" iid="e563161435f24bf48445a3c42b2eb647" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:45:21" order-index="7" type="entity">
            <layout ax="50" ay="110" awidth="120" aheight="75" x="50" y="110" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_550598684489497636" iid="0ed60ac64cdc4c63aebedf4d8d5054d6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:12:13" order-index="4" type="entity">
            <layout ax="400" ay="310" awidth="120" aheight="75" x="400" y="310" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_676830495252075656" iid="a00811b2c6f44c1f84ef6481c71dfdb3" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:45:21" order-index="7" type="entity">
            <layout ax="400" ay="610" awidth="120" aheight="75" x="400" y="610" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_434898147746041333" iid="a499fd44e1554514b2eaae6385103c67" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:45:21" order-index="7" type="entity">
            <layout ax="400" ay="710" awidth="120" aheight="75" x="400" y="710" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_272643699807652446" iid="f5e7eb4df09343a8930aeac71d84157b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:45:21" order-index="7" type="entity">
            <layout ax="50" ay="310" awidth="120" aheight="75" x="50" y="310" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_617033653411847343" iid="0a4343bbd5fd4cc5b369ea177cc7f29f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:49:46" order-index="8" type="entity">
            <layout ax="50" ay="410" awidth="120" aheight="75" x="50" y="410" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_916515472783958759" iid="a11f4ce6edae457f97d8931db3b3450a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:49:46" order-index="8" type="entity">
            <layout ax="50" ay="510" awidth="120" aheight="75" x="50" y="510" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_562542665514448486" iid="1edf9bfa6bf0429a8cb720fa91d9bc9c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:49:46" order-index="8" type="entity">
            <layout ax="50" ay="610" awidth="120" aheight="75" x="50" y="610" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_542071735669383989" iid="e11b8551c8d541e18ef9ec1cde13ba2f" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:49:46" order-index="8" type="entity">
            <layout ax="50" ay="710" awidth="120" aheight="75" x="50" y="710" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_801701952483009372" iid="4f83cfba0af747499e7ac71a7dcfba29" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:49:46" order-index="8" type="entity">
            <layout ax="50" ay="810" awidth="120" aheight="75" x="50" y="810" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_528742098463462205" iid="6090722ddf94484e9b1a50f9e8047430" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:49:46" order-index="8" type="entity">
            <layout ax="50" ay="910" awidth="120" aheight="75" x="50" y="910" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_459947748357008591" iid="be8a002b544f4352aeab47a205359163" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:49:46" order-index="8" type="entity">
            <layout ax="50" ay="1010" awidth="120" aheight="75" x="50" y="1010" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_529603813156642488" iid="ef8aba99d6a044a6ae0fda48f54eb7bf" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:45:21" order-index="7" type="entity">
            <layout ax="400" ay="810" awidth="120" aheight="75" x="400" y="810" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_618201566667001763" iid="1e2b681e623a4c51ac40562d9841e84a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:45:21" order-index="7" type="entity">
            <layout ax="400" ay="910" awidth="120" aheight="75" x="400" y="910" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_549626708561896229" iid="d7eef6b6ee4a4854853721a6c5d266e9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:13:02" order-index="5" type="entity">
            <layout ax="770" ay="310" awidth="120" aheight="75" x="770" y="310" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_697216466512045660" iid="0078b556099d4e7d934dfdb77b10c286" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:13:02" order-index="5" type="entity">
            <layout ax="770" ay="710" awidth="120" aheight="75" x="750" y="690" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_599022867226989873" iid="9419ddf9c89746a3be4cd021f4465feb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:13:02" order-index="5" type="entity">
            <layout ax="770" ay="610" awidth="120" aheight="75" x="750" y="590" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_798418594284411226" iid="bcdcd0fc84dd46829a83a88358e58dca" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:13:02" order-index="5" type="entity">
            <layout ax="770" ay="810" awidth="120" aheight="75" x="750" y="790" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_384164887942094605" iid="b4923ae665e645c3af2bf1366ec9bbfb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:13:02" order-index="5" type="entity">
            <layout ax="770" ay="910" awidth="120" aheight="75" x="750" y="890" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_195400055204596648" iid="2e6ecd6a55144be191c0dd274f72265b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:58:29" order-index="11" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="168" y1="138" x2="402" y2="58" start-border-pos="0.31952382405599" end-border-pos="0.933809534708659">
              <points>
                <point x="168" y="138" />
                <point x="402" y="58" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_274116062649249438" from-iid="e563161435f24bf48445a3c42b2eb647" to="ddip818293798957713535_395992504757792676" to-iid="e20ab6a9d38e4bada047cde674b9c487" />
          </item>
          <item id="ddip818293798957713535_857326499549121422" iid="cdad57fea71b42a0bb82458743064a1b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:58:36" order-index="12" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="170" y1="148" x2="400" y2="148" start-border-pos="0.376666666666667" end-border-pos="0.876666666666667">
              <points>
                <point x="170" y="148" />
                <point x="400" y="148" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_274116062649249438" from-iid="e563161435f24bf48445a3c42b2eb647" to="ddip818293798957713535_151088380843706174" to-iid="a18268959e4c4ce48146385b7376b878" />
          </item>
          <item id="ddip818293798957713535_539902018118744233" iid="5008268ac5744ad7aeb82ebf5cfe3f23" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:58:40" order-index="13" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="168" y1="158" x2="402" y2="238" start-border-pos="0.433809509277344" end-border-pos="0.81952382405599">
              <points>
                <point x="168" y="158" />
                <point x="402" y="238" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_274116062649249438" from-iid="e563161435f24bf48445a3c42b2eb647" to="ddip818293798957713535_227799030621856726" to-iid="8ae4aad89d81422fb8bb21fd7c98055b" />
          </item>
          <item id="ddip818293798957713535_536486733889438594" iid="5a6d15a00a0c4d8aa55eae22fb620f80" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:58:46" order-index="14" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="162" y1="166" x2="408" y2="329" start-border-pos="0.490952402750651" end-border-pos="0.762380981445313">
              <points>
                <point x="162" y="166" />
                <point x="408" y="329" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_274116062649249438" from-iid="e563161435f24bf48445a3c42b2eb647" to="ddip818293798957713535_550598684489497636" to-iid="0ed60ac64cdc4c63aebedf4d8d5054d6" />
          </item>
          <item id="ddip818293798957713535_802392002930469107" iid="e5d92259dc144964b9837d054ef7ecb9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:59:21" order-index="16" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="149" y1="176" x2="420" y2="519" start-border-pos="0.692447916666667" end-border-pos="0.0557291666666667">
              <points>
                <point x="149" y="176" />
                <point x="420" y="519" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_274116062649249438" from-iid="e563161435f24bf48445a3c42b2eb647" to="ddip818293798957713535_717805993420608477" to-iid="484b4e21dbdc421a8c45b4dbbc19b994" />
          </item>
          <item id="ddip818293798957713535_396456474550358700" iid="a9514d2b7c4e4a07866fb643154dd58b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:45:21" order-index="7" type="entity">
            <layout ax="50" ay="210" awidth="120" aheight="75" x="50" y="210" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_156405643520733600" iid="d930131b6f9d4e6aaea874e01a6f92cb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:01:26" order-index="17" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="155" y1="172" x2="414" y2="423" start-border-pos="0.714930566151937" end-border-pos="0.0326388676961263">
              <points>
                <point x="155" y="172" />
                <point x="414" y="423" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_274116062649249438" from-iid="e563161435f24bf48445a3c42b2eb647" to="ddip818293798957713535_550943046348432900" to-iid="1dfdae2b6f2d4a1686931241d923df7a" />
          </item>
          <item id="ddip818293798957713535_633750494454722401" iid="acf8f342cb644d9cb069ade06ddbb3a6" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:01:33" order-index="18" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="167" y1="36" x2="772" y2="37" start-border-pos="0.314952379862467" end-border-pos="0.818288288116455">
              <points>
                <point x="167" y="36" />
                <point x="460" y="-60" />
                <point x="772" y="37" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_604314664354342266" from-iid="fb3ddee7b64b4e2486f85599f26b0089" to="ddip818293798957713535_434264259883286327" to-iid="1de06c281bda41719013f3c11faee8c8" />
          </item>
          <item id="ddip818293798957713535_983308991842467432" iid="d7f3648a64e3484ca8c6492092426d90" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:01:54" order-index="19" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="159" y1="69" x2="771" y2="642" start-border-pos="0.732411193847656" end-border-pos="0.848303019205729">
              <points>
                <point x="159" y="69" />
                <point x="280" y="170" />
                <point x="280" y="570" />
                <point x="771" y="642" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_604314664354342266" from-iid="fb3ddee7b64b4e2486f85599f26b0089" to="ddip818293798957713535_599022867226989873" to-iid="9419ddf9c89746a3be4cd021f4465feb" />
          </item>
          <item id="ddip818293798957713535_448501375603027593" iid="6acb8c9036b043de96325c3d99579320" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:02:27" order-index="20" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="520" y1="48" x2="770" y2="48" start-border-pos="0.376666666666667" end-border-pos="0.876666666666667">
              <points>
                <point x="520" y="48" />
                <point x="770" y="48" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_395992504757792676" from-iid="e20ab6a9d38e4bada047cde674b9c487" to="ddip818293798957713535_434264259883286327" to-iid="1de06c281bda41719013f3c11faee8c8" />
          </item>
          <item id="ddip818293798957713535_850242085202720838" iid="5b0a95a743e64a4ba579b7f8bda75a60" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:02:45" order-index="21" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="512" y1="66" x2="785" y2="823" start-border-pos="0.491449279785156" end-border-pos="0.0384114583333333">
              <points>
                <point x="512" y="66" />
                <point x="690" y="180" />
                <point x="690" y="720" />
                <point x="785" y="823" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_395992504757792676" from-iid="e20ab6a9d38e4bada047cde674b9c487" to="ddip818293798957713535_798418594284411226" to-iid="bcdcd0fc84dd46829a83a88358e58dca" />
          </item>
          <item id="ddip818293798957713535_989360025449967185" iid="e61c54056a72405a8f4f8b47373a26bc" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:49:46" order-index="8" type="entity">
            <layout ax="50" ay="1110" awidth="120" aheight="75" x="50" y="1110" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_245865111724273158" iid="a7211d89970a4aff9296276653d66ae9" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:49:46" order-index="8" type="entity">
            <layout ax="50" ay="1210" awidth="120" aheight="75" x="50" y="1210" width="0" height="0" />
            <use-case />
          </item>
          <item id="ddip818293798957713535_933314493768902576" iid="b1013171afed4ea5b0ed541ffd31e401" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:04:42" order-index="22" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="518" y1="138" x2="772" y2="57" start-border-pos="0.322612609863281" end-border-pos="0.930720723470052">
              <points>
                <point x="518" y="138" />
                <point x="772" y="57" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_151088380843706174" from-iid="a18268959e4c4ce48146385b7376b878" to="ddip818293798957713535_434264259883286327" to-iid="1de06c281bda41719013f3c11faee8c8" />
          </item>
          <item id="ddip818293798957713535_547539171853325230" iid="4a06c4e60e374ed6ade39ea4f0ae2a75" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:04:54" order-index="23" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="518" y1="157" x2="772" y2="238" start-border-pos="0.430720723470052" end-border-pos="0.822612609863281">
              <points>
                <point x="518" y="157" />
                <point x="772" y="238" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_151088380843706174" from-iid="a18268959e4c4ce48146385b7376b878" to="ddip818293798957713535_130368130629409668" to-iid="42baf6f9d7bd4896b552a30a4784ae19" />
          </item>
          <item id="ddip818293798957713535_712516075830534288" iid="54fb4ac7de7e494da0c029b8b2d9f435" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:05:15" order-index="24" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" x1="509" y1="169" x2="777" y2="831" start-border-pos="0.733568064371745" end-border-pos="0.77313720703125">
              <points>
                <point x="509" y="169" />
                <point x="660" y="290" />
                <point x="660" y="760" />
                <point x="777" y="831" />
              </points>
            </layout>
            <relation from="ddip818293798957713535_151088380843706174" from-iid="a18268959e4c4ce48146385b7376b878" to="ddip818293798957713535_798418594284411226" to-iid="bcdcd0fc84dd46829a83a88358e58dca" />
          </item>
          <item id="ddip818293798957713535_434264259883286327" iid="1de06c281bda41719013f3c11faee8c8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 14:13:02" order-index="5" type="entity">
            <layout ax="770" ay="10" awidth="120" aheight="75" x="770" y="10" width="0" height="0" />
            <use-case />
          </item>
        </layer>
      </diagram>
      <diagram type="uml-sequence" id="p226957974226589492" name="Sequence Diagram - Create Step" order-index="7" show-nullability="false">
        <style>
          <background-color index="1" color="#FFFFFFFF" />
          <background-color index="2" color="#FFFFFFFF" />
          <background-type type="vertical-linear" />
        </style>
        <meta>
          <authors>
            <author> </author>
          </authors>
          <description />
          <creation-date>07/12/2012 15:11:08</creation-date>
          <change-date>07/12/2012 17:10:51</change-date>
          <revision-count>0</revision-count>
          <version />
        </meta>
        <abstract-items>
          <item id="ddip226957974226589492_762645105420352733" cid="AC001" type="actor" name="Web User" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:11:14">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_899122769570847667" cid="LL002" type="lifeline" name="User" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:11:47">
            <stereotypes>
              <stereotype name="entity" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <lifeline classifier-name="" is-active="false" is-multi-object="false" />
          </item>
          <item id="ddip226957974226589492_404701496890330674" cid="LL003" type="lifeline" name="StepFactory" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:12:07">
            <stereotypes>
              <stereotype name="entity" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <lifeline classifier-name="" is-active="false" is-multi-object="false" />
          </item>
          <item id="ddip226957974226589492_297605563290499480" cid="LL004" type="lifeline" name="ShowSummaryAction" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:12:42">
            <stereotypes>
              <stereotype name="control" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <lifeline classifier-name="" is-active="false" is-multi-object="false" />
          </item>
          <item id="ddip226957974226589492_829436876403329840" cid="AN001" type="sequence-action" name="Action1" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:13:39">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="execute()" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_137349167757029801" cid="AB001" type="activation-bar" name="ActivationBar1" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:13:41">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_908787803278231804" cid="AB002" type="activation-bar" name="ActivationBar2" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:13:41">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_425805598990112778" cid="LL006" type="lifeline" name="Question" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:15:34">
            <stereotypes>
              <stereotype name="entity" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <lifeline classifier-name="" is-active="false" is-multi-object="false" />
          </item>
          <item id="ddip226957974226589492_734646252507634194" cid="LL007" type="lifeline" name="AnswerValue" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:15:49">
            <stereotypes>
              <stereotype name="entity" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <lifeline classifier-name="" is-active="false" is-multi-object="false" />
          </item>
          <item id="ddip226957974226589492_201036378891232705" cid="LL008" type="lifeline" name="Step" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:16:42">
            <stereotypes>
              <stereotype name="entity" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <lifeline classifier-name="" is-active="false" is-multi-object="false" />
          </item>
          <item id="ddip226957974226589492_812330626288917719" cid="AN012" type="sequence-action" name="Action12" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:17:17">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="createStep()" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_509765023998801432" cid="AB005" type="activation-bar" name="ActivationBar5" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:17:20">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_271247960722072749" cid="AN013" type="sequence-action" name="Action13" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:17:32">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_915675249729585208" cid="AB008" type="activation-bar" name="ActivationBar8" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:17:59">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_989526133409636268" cid="AN014" type="sequence-action" name="Action14" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:17:56">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="createStep()" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_620470430179959714" cid="AN015" type="sequence-action" name="Action15" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:19:04">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="makeAnswer()" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_189343464411045430" cid="AB009" type="activation-bar" name="ActivationBar9" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:19:07">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_156985431733772211" cid="AN016" type="sequence-action" name="Action16" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:19:29">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="create" message="" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_988405015442615212" cid="AN037" type="sequence-action" name="Action37" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:42:06">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="create" message="new Step()" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_391394382790709789" cid="AN018" type="sequence-action" name="Action18" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:21:57">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="return" message="" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_410637743544852005" cid="AN020" type="sequence-action" name="Action20" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:24:27">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="get step id" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_586610206293205573" cid="AN021" type="sequence-action" name="Action21" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:26:27">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="get display id" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_362840012846785104" cid="AN022" type="sequence-action" name="Action22" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:27:01">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="insert row" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_165148274231675427" cid="LL009" type="lifeline" name="StepCache" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:28:24">
            <stereotypes>
              <stereotype name="entity" />
            </stereotypes>
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <lifeline classifier-name="" is-active="false" is-multi-object="false" />
          </item>
          <item id="ddip226957974226589492_866789008175406914" cid="AB012" type="activation-bar" name="ActivationBar12" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:30:40">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_838819983630572305" cid="AN026" type="sequence-action" name="Action26" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="P897e71d533484074936d1bb2154fee57" creation-date="07/12/2012 15:32:04">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="store access time" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_965739066297584328" cid="AB006" type="activation-bar" name="ActivationBar1" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 15:52:02">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_602352292765453492" cid="AN018" type="sequence-action" name="Action18" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 15:57:20">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="setPreviousStep()" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_887865028882836653" cid="AN002" type="sequence-action" name="Action2" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 15:46:41">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="addStep()" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_435604132646256336" cid="AB001" type="activation-bar" name="ActivationBar1" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 15:46:28">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_272739036559450741" cid="AN015" type="sequence-action" name="Action15" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 15:53:56">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="loadStep(previous)" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_128233062427306179" cid="AN014" type="sequence-action" name="Action14" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 15:53:14">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="loadStep(child)" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_848454157402578345" cid="AB009" type="activation-bar" name="ActivationBar8" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 15:57:23">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_595409715196889527" cid="AN019" type="sequence-action" name="Action19" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 15:57:55">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="old_prev.next_id=0, prev_id, prev.next" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_834498231857579624" cid="AN020" type="sequence-action" name="Action20" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 16:48:20">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="setChildStep()" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_593896409515305675" cid="AB010" type="activation-bar" name="ActivationBar9" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 16:48:22">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
          </item>
          <item id="ddip226957974226589492_973329719106127002" cid="AN023" type="sequence-action" name="Action23" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 17:06:35">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="call" message="old_child.parent_id=0, child_id, child.parent_id " is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_432884750512556938" cid="AN024" type="sequence-action" name="Action24" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 17:09:09">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="return" message="step" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_824379606624333267" cid="AN025" type="sequence-action" name="Action25" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 17:09:44">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="return" message="step" is-asynchronous="false" />
          </item>
          <item id="ddip226957974226589492_201172952745112899" cid="AN026" type="sequence-action" name="Action26" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="07/12/2012 17:10:51">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <sequence-action type="return" message="/showApplication.do" is-asynchronous="false" />
          </item>
        </abstract-items>
        <layer name="Default" visible="true" enabled="true" locked="false">
          <item id="ddip226957974226589492_762645105420352733" iid="d073c2b3a42d4fa9b1d80bf57bbef3a4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:11:14" order-index="0" type="lifeline">
            <layout ax="40" ay="50" awidth="140" aheight="890" x="40" y="50" width="140" height="890" />
          </item>
          <item id="ddip226957974226589492_899122769570847667" iid="58f612e6856b41db84a606e7e8e1525b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:11:47" order-index="1" presentation-style="stereotype" type="lifeline">
            <layout ax="320" ay="50" awidth="140" aheight="890" x="320" y="50" width="140" height="890" />
          </item>
          <item id="ddip226957974226589492_404701496890330674" iid="6f863c1dfeab404ea7a2fcc648efc54e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:12:07" order-index="2" presentation-style="stereotype" type="lifeline">
            <layout ax="460" ay="50" awidth="140" aheight="890" x="460" y="50" width="140" height="890" />
          </item>
          <item id="ddip226957974226589492_297605563290499480" iid="d1b85bb631c2405fa9d40ebbdfbb28cf" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:12:42" order-index="3" presentation-style="stereotype" type="lifeline">
            <layout ax="180" ay="50" awidth="140" aheight="890" x="180" y="50" width="143" height="890" />
          </item>
          <item id="ddip226957974226589492_829436876403329840" iid="3df4804a795f4557b22d6ce443a0d023" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:13:39" order-index="4" type="sequence-action">
            <layout x1="120" y1="177" x2="240" y2="177" ax="120" ay="162" awidth="120" aheight="20" x="120" y="162" width="120" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_137349167757029801" to="ddip226957974226589492_908787803278231804" />
          </item>
          <item id="ddip226957974226589492_137349167757029801" iid="a3cbd38efd374d77b21824854938e156" container="ddip226957974226589492_762645105420352733" container-iid="d073c2b3a42d4fa9b1d80bf57bbef3a4" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:13:41" order-index="5" type="entity">
            <layout ax="100" ay="177" awidth="20" aheight="753" x="100" y="177" width="20" height="753" />
          </item>
          <item id="ddip226957974226589492_908787803278231804" iid="8661c84fb1b34cc6a3d736027b193514" container="ddip226957974226589492_297605563290499480" container-iid="d1b85bb631c2405fa9d40ebbdfbb28cf" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:13:41" order-index="6" type="entity">
            <layout ax="240" ay="177" awidth="20" aheight="753" x="240" y="177" width="20" height="743" />
          </item>
          <item id="ddip226957974226589492_425805598990112778" iid="102d0593d2d4448badcfe1f20cd7320a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:15:34" order-index="7" presentation-style="stereotype" type="lifeline">
            <layout ax="600" ay="50" awidth="140" aheight="320" x="600" y="60" width="140" height="320" />
          </item>
          <item id="ddip226957974226589492_734646252507634194" iid="28ccae1b02a14745888a754738dfad44" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:15:49" order-index="8" presentation-style="stereotype" type="lifeline">
            <layout ax="740" ay="190" awidth="140" aheight="210" x="740" y="210" width="140" height="210" />
          </item>
          <item id="ddip226957974226589492_201036378891232705" iid="ded8117ac0c24657af407b22e37c0218" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:16:42" order-index="9" presentation-style="stereotype" type="lifeline">
            <layout ax="740" ay="425" awidth="140" aheight="515" x="740" y="420" width="140" height="515" />
          </item>
          <item id="ddip226957974226589492_812330626288917719" iid="69eeabdfe7af43b780fafa0b7f79bfa8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:17:17" order-index="10" type="sequence-action">
            <layout x1="260" y1="190" x2="380" y2="190" ax="260" ay="175" awidth="120" aheight="20" x="260" y="175" width="120" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_908787803278231804" to="ddip226957974226589492_509765023998801432" />
          </item>
          <item id="ddip226957974226589492_509765023998801432" iid="4fb3543170ed4a69bc036b4b11d44863" container="ddip226957974226589492_899122769570847667" container-iid="58f612e6856b41db84a606e7e8e1525b" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:17:20" order-index="11" type="entity">
            <layout ax="380" ay="190" awidth="20" aheight="720" x="380" y="190" width="20" height="720" />
          </item>
          <item id="ddip226957974226589492_989526133409636268" iid="bfb704498a4f46eca56ffabc49f79a14" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:17:56" order-index="12" type="sequence-action">
            <layout x1="400" y1="200" x2="520" y2="200" ax="400" ay="185" awidth="120" aheight="20" x="400" y="185" width="120" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_509765023998801432" to="ddip226957974226589492_915675249729585208" />
          </item>
          <item id="ddip226957974226589492_915675249729585208" iid="55a4592a6c4b4f97a1da8bcb45369d18" container="ddip226957974226589492_404701496890330674" container-iid="6f863c1dfeab404ea7a2fcc648efc54e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:17:59" order-index="13" type="entity">
            <layout ax="520" ay="200" awidth="20" aheight="690" x="520" y="200" width="20" height="690" />
          </item>
          <item id="ddip226957974226589492_620470430179959714" iid="6b52fbdac3864cb688aa58b31a5fcdfa" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:19:04" order-index="14" type="sequence-action">
            <layout x1="540" y1="210" x2="660" y2="210" ax="540" ay="195" awidth="120" aheight="20" x="540" y="195" width="120" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_915675249729585208" to="ddip226957974226589492_189343464411045430" />
          </item>
          <item id="ddip226957974226589492_189343464411045430" iid="d5fbc233c4db4c808f7bb1854b6a053f" container="ddip226957974226589492_425805598990112778" container-iid="102d0593d2d4448badcfe1f20cd7320a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:19:07" order-index="15" type="entity">
            <layout ax="660" ay="205" awidth="20" aheight="105" x="660" y="205" width="20" height="95" />
          </item>
          <item id="ddip226957974226589492_156985431733772211" iid="daa5222d48f54cdf8a877e6b9b3a88c3" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:19:29" order-index="16" type="sequence-action">
            <layout x1="680" y1="205" x2="740" y2="205" ax="680" ay="190" awidth="60" aheight="20" x="680" y="190" width="60" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_189343464411045430" to="ddip226957974226589492_734646252507634194" />
          </item>
          <item id="ddip226957974226589492_391394382790709789" iid="7363aa9f93ed474aa6d978e26b267b6c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:21:57" order-index="19" type="sequence-action">
            <layout x1="660" y1="310" x2="540" y2="310" ax="540" ay="295" awidth="120" aheight="20" x="540" y="295" width="120" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_189343464411045430" to="ddip226957974226589492_915675249729585208" />
          </item>
          <item id="ddip226957974226589492_410637743544852005" iid="e661ba8e7b3a49dba2f8d462072c020c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:24:27" order-index="21" type="sequence-action">
            <layout x1="540" y1="320" x2="540" y2="370" ax="540" ay="320" awidth="100" aheight="50" x="540" y="320" width="100" height="50" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_915675249729585208" to="ddip226957974226589492_915675249729585208" />
          </item>
          <item id="ddip226957974226589492_586610206293205573" iid="42fbfdc3da224ce3b3962bb545b5cd10" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:26:27" order-index="22" type="sequence-action">
            <layout x1="540" y1="380" x2="540" y2="430" ax="540" ay="380" awidth="100" aheight="50" x="540" y="380" width="100" height="50" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_915675249729585208" to="ddip226957974226589492_915675249729585208" />
          </item>
          <item id="ddip226957974226589492_362840012846785104" iid="8f902800b25b44c080a41cac1f93463a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:27:01" order-index="23" type="sequence-action">
            <layout x1="540" y1="460" x2="540" y2="510" ax="540" ay="460" awidth="100" aheight="50" x="540" y="460" width="100" height="50" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_915675249729585208" to="ddip226957974226589492_915675249729585208" />
          </item>
          <item id="ddip226957974226589492_165148274231675427" iid="a3de373778ac4ca9a117449e7ac5c7bd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:28:24" order-index="24" presentation-style="stereotype" type="lifeline">
            <layout ax="880" ay="50" awidth="140" aheight="890" x="880" y="50" width="140" height="890" />
          </item>
          <item id="ddip226957974226589492_866789008175406914" iid="e57c56ec29cd424ebc97ee962960382b" container="ddip226957974226589492_165148274231675427" container-iid="a3de373778ac4ca9a117449e7ac5c7bd" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:30:40" order-index="27" type="entity">
            <layout ax="940" ay="530" awidth="20" aheight="81" x="940" y="530" width="20" height="81" />
          </item>
          <item id="ddip226957974226589492_838819983630572305" iid="a739874d143b47c19d01c19b5e28d1eb" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:32:04" order-index="28" type="sequence-action">
            <layout x1="960" y1="540" x2="960" y2="590" ax="960" ay="540" awidth="100" aheight="50" x="960" y="540" width="100" height="50" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_866789008175406914" to="ddip226957974226589492_866789008175406914" />
          </item>
          <item id="ddip226957974226589492_988405015442615212" iid="3e680d9961ff42788b6d9ff64fd11a4a" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:42:06" order-index="31" type="sequence-action">
            <layout x1="540" y1="440" x2="740" y2="440" ax="540" ay="425" awidth="200" aheight="20" x="540" y="425" width="200" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_915675249729585208" to="ddip226957974226589492_201036378891232705" />
          </item>
          <item id="ddip226957974226589492_498006896496794833" iid="5bba584bdfeb4a0aa43ba4b2604d858c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:47:51" order-index="33" type="sequence-action">
            <layout x1="540" y1="560" x2="540" y2="870" ax="540" ay="560" awidth="130" aheight="310" x="540" y="560" width="130" height="310" message-x="20" message-y="-140" />
            <sequence-action from="ddip226957974226589492_915675249729585208" to="ddip226957974226589492_915675249729585208" />
          </item>
          <item id="ddip226957974226589492_887865028882836653" iid="fdbc1a6cc91c43548237566d369499b8" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:46:41" order-index="32" type="sequence-action">
            <layout x1="540" y1="530" x2="940" y2="530" ax="540" ay="515" awidth="400" aheight="20" x="540" y="515" width="400" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_915675249729585208" to="ddip226957974226589492_866789008175406914" />
          </item>
          <item id="ddip226957974226589492_965739066297584328" iid="80cda164c1f0449a942e5a33ab1233b5" container="ddip226957974226589492_404701496890330674" container-iid="6f863c1dfeab404ea7a2fcc648efc54e" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:52:02" order-index="34" type="entity">
            <layout ax="530" ay="587" awidth="20" aheight="263" x="520" y="587" width="20" height="173" />
          </item>
          <item id="ddip226957974226589492_128233062427306179" iid="5753b7e44ccd4a4aba20de0c9a21d7a7" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:53:14" order-index="35" type="sequence-action">
            <layout x1="550" y1="800" x2="550" y2="850" ax="550" ay="800" awidth="100" aheight="50" x="550" y="800" width="100" height="50" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_965739066297584328" to="ddip226957974226589492_965739066297584328" />
          </item>
          <item id="ddip226957974226589492_272739036559450741" iid="4cdea56fefee4d42a06fb6d3d7d3fc47" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:53:56" order-index="36" type="sequence-action">
            <layout x1="550" y1="600" x2="550" y2="650" ax="550" ay="600" awidth="100" aheight="50" x="550" y="600" width="100" height="50" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_965739066297584328" to="ddip226957974226589492_965739066297584328" />
          </item>
          <item id="ddip226957974226589492_602352292765453492" iid="aff62f6d94cd4aed8122b0d1a8d289c2" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:57:20" order-index="37" type="sequence-action">
            <layout x1="550" y1="680" x2="800" y2="680" ax="550" ay="665" awidth="250" aheight="20" x="550" y="665" width="250" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_965739066297584328" to="ddip226957974226589492_848454157402578345" />
          </item>
          <item id="ddip226957974226589492_848454157402578345" iid="fe93afbc8b9c43909403056d1e06ab4b" container="ddip226957974226589492_201036378891232705" container-iid="ded8117ac0c24657af407b22e37c0218" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:57:23" order-index="38" type="entity">
            <layout ax="800" ay="667" awidth="20" aheight="63" x="800" y="667" width="20" height="40" />
          </item>
          <item id="ddip226957974226589492_595409715196889527" iid="aefe7e021dbe4ccfbe5a3e90c84e8bc3" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 15:57:55" order-index="39" type="sequence-action">
            <layout x1="820" y1="680" x2="820" y2="730" ax="820" ay="680" awidth="100" aheight="50" x="820" y="680" width="100" height="50" message-x="70" message-y="-10" />
            <sequence-action from="ddip226957974226589492_848454157402578345" to="ddip226957974226589492_848454157402578345" />
          </item>
          <item id="ddip226957974226589492_834498231857579624" iid="1739c7f1038d4eae8d745886995c45e1" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 16:48:20" order-index="40" type="sequence-action">
            <layout x1="550" y1="758" x2="800" y2="758" ax="550" ay="743" awidth="250" aheight="20" x="550" y="743" width="250" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_965739066297584328" to="ddip226957974226589492_593896409515305675" />
          </item>
          <item id="ddip226957974226589492_593896409515305675" iid="43447c63456349c48f4fca30ae2f40a2" container="ddip226957974226589492_201036378891232705" container-iid="ded8117ac0c24657af407b22e37c0218" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 16:48:22" order-index="41" type="entity">
            <layout ax="800" ay="757" awidth="20" aheight="50" x="800" y="757" width="20" height="40" />
          </item>
          <item id="ddip226957974226589492_973329719106127002" iid="dbcdafb299fd4280ae28e09d926eb1ab" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 17:06:35" order-index="42" type="sequence-action">
            <layout x1="820" y1="757" x2="820" y2="807" ax="820" ay="757" awidth="100" aheight="50" x="820" y="757" width="100" height="50" message-x="90" message-y="-10" />
            <sequence-action from="ddip226957974226589492_593896409515305675" to="ddip226957974226589492_593896409515305675" />
          </item>
          <item id="ddip226957974226589492_432884750512556938" iid="9262a4a8c25f4e4d88d3849c59225c82" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 17:09:09" order-index="43" type="sequence-action">
            <layout x1="520" y1="890" x2="400" y2="890" ax="400" ay="875" awidth="120" aheight="20" x="400" y="875" width="120" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_915675249729585208" to="ddip226957974226589492_509765023998801432" />
          </item>
          <item id="ddip226957974226589492_824379606624333267" iid="30fab7713df047a794a0e6200effc4ea" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 17:09:44" order-index="44" type="sequence-action">
            <layout x1="380" y1="910" x2="260" y2="910" ax="260" ay="895" awidth="120" aheight="20" x="260" y="895" width="120" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_509765023998801432" to="ddip226957974226589492_908787803278231804" />
          </item>
          <item id="ddip226957974226589492_201172952745112899" iid="a6c069d6376d444d9044f209f00f696c" show-cid="false" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" creation-date="07/12/2012 17:10:51" order-index="45" type="sequence-action">
            <layout x1="240" y1="930" x2="120" y2="930" ax="120" ay="915" awidth="120" aheight="20" x="120" y="915" width="120" height="20" message-x="0" message-y="-10" />
            <sequence-action from="ddip226957974226589492_908787803278231804" to="ddip226957974226589492_137349167757029801" />
          </item>
        </layer>
      </diagram>
    </model>
  </models>
  <documents />
  <document-templates />
</sim-project>