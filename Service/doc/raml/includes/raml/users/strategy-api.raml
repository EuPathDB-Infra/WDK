#% RAML 1.0
# User Strategy API

get:
  description: |
    Returns an array of strategies, ordered by strategy ID.  Does not run steps or update their estimated size.  This endpoint is fast, to support a strategies listing display.  estimatedSize is absent if not known.
  responses:
    200:
      body:
        application/json:
          type: !include ../../../../../src/main/resources/schema/wdk/users/strategies/get-response.json

post:
  description: |
    Create a new strategy either from a provided tree of steps, or by duplicating an existing strategy.  In the former case, provide the tree of steps in the 'stepsTree' property, and do not provide the 'sourceStrategy' property. In the latter case, do the opposite. 

    **Using the stepsTree property**
    * Create a strategy from one or more steps.  The stepTree structure may have a single step, or a tree of steps.  (Use the steps endpoint to first create the steps that will be in the strategy. Use the PUT strategies/{id} endpoint to revise the tree after you create the strategy using this endpoint.)
    * Submitted steps must:
      * have the same owner and project as this strategy
      * not already belong to a strategy (ie, must not have an assigned strategy ID).
      * have only null as values for all step parameters
    * To add an existing strategy as a subtree in this step tree, use the strategies/{other-id}/duplicated-step-tree endpoint to get a valid step tree for use in the stepTree property. 

    **With Source Strategy**
    * This is to support importing another user's strategy as a new strategy for this user.
    * Input JSON is the same as when using the stepsTree property, but instead of the stepTree property, include the sourceStrategySignature property
    * Makes a copy of the strategy with the specified signature.  It will contain exact copies of each step (but with new step IDs) and a new strategy ID.
    * estimatedSize of each new step will be set as found in the orignal step

  body:
    application/json:
      type: !include ../../../../../src/main/resources/schema/wdk/users/strategies/post-request.json
  responses:
    200:
      body:
        application/json:
          type: !include ../../../../../src/main/resources/schema/includes/standard-post-response.json

patch:
  description: >
    Update the isDeleted status of one or more strategies.  Setting the flag to true deletes the strategy; setting it to false restores it.
  body:
    application/json:
      type:  !include ../../../../../src/main/resources/schema/wdk/users/strategies/patch-request.json
  responses:
    204:
      description: No Content

/{strategy-id}:
  get:
    description: |
      * Returns the full JSON for a strategy, including step JSON for every step in the strategy
      * Any steps that have null estimatedSize will be run and updated

    responses:
      200:
        body:
          application/json:
	    type: !include ../../../../../src/main/resources/schema/wdk/users/strategies/id/get-response.json

  patch:
    description: Update properties of the strategy other than those that impact the step's result.
    responses:
      200:
        body:
          application/json:
	    type: !include ../../../../../src/main/resources/schema/wdk/users/strategies/id/patch-request.json

  /step-tree
    put:
      description: |
        Update the step tree of the strategy.  The strategy's step tree is replaced in its entirety with the submitted step tree.  (A typical use of this endpoint is to iteratively build up a strategy with new steps or subtrees as requested by an end user.) 
          * All steps submitted must either already belong to this strategy, or belong to no strategy. Steps belonging to another strategy will cause an error.  Steps that do not already belong to this strategy will be assigned to it.
	  * All steps in the tree will be (re)assigned to this strategy, and their step parameters will be (re)set according to the shape of the step tree.
          * The step tree must be valid with respect to the record type of all input and output step parameters.
          * Steps that did belong to this strategy, but that are excluded from the provided step tree are removed from the strategy.
	    * The following properties will be set to null in these steps:
              * Strategy ID
              * Step parameter values
              * estimatedSize
              * lastRunTime
            * In theory any of these steps could be reused, even by another strat
            * If they are not reused, they will eventually be purged from the database (as "orphan" steps).
      body:
        application/json:
          type: !include ../../../../../src/main/resources/schema/wdk/users/strategies/id/put-request.json
      responses:
        204:
          description: No Content

  /duplicated-step-tree:
    post:
      description: |
        * Create a duplicate of this strategy's step tree, populated with new steps.
	* Use this endpoint to add this strategy's step tree as a subtree to another strategy (using a POST or PUT to that strategy).
	* Each of the new steps:
	  * is a duplicate of a step in the original tree (but with a new Step ID).
	  * does not yet have a strategy ID, estimatedSize or values set in its step params
      body:
        application/json:
          type: !include ../../../../../src/main/resources/schema/includes/empty-post-request.json
    responses:
      200:
        body:
          application/json:
	    type: !include ../../../../../src/main/resources/schema/wdk/includes/step-tree.json
      
