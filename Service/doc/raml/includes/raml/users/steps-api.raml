# Users Steps API

post:
  description: |
    * Creates a new search strategy step.  (See the strategy/ endpoint)
      * A Step is always created on its own, as yet unattached to a strategy.  (Adding a step to a strategy is handled by strategy/.  At that point, the step will be assigned its strategy ID.)
      * Creating a step for a search that has one or more parameters of type "input-step" (e.g., a transform search or combiner search) is handled specially.
    * If the associated search does not have input-step parameters
        * All parameters are validated.
        * If all are valid, the searchConfigComplete flag is set to true indicating that this is a runnable step
	* If validation of any param fails, no step is created and a 400/500 HTTP response will be returned
    * If the associated search does have input-step parameters:
        * In the request body, input-step parameter values must be set to an empty string, else will fail validation. (Input-step parameters are exclusively handled by /strategy)
        * The other parameters will be validated as usual.  
	* If validation of a param fails, no step is created and a 400/500 HTTP response will be returned
        * In the response, the searchConfigComplete flag will be set to false since input-step parameters are not populated, and the step is therefore not runnable.
    * Inputs:
      * query parameters:
         * an optional 'runStep' flag:
            * If searchConfigComplete == false and runStep=true, throw error 40x?
            * If searchConfigComplete == true and runStep=true, run the step and populate estimatedSize, last_run
      * JSON body includes:
        * a name for this step (optional- pulled from the search name if absent)
        * a searchConfig (specifies how to run the search)
    * Outputs:
        * JSON containing step ID + Location header with URL, OR
        * Error document telling where and why request failed
  queryParameters:
    runStep:
      description: Whether or not this step should be run immediately
      type: boolean
      required: false
      default: false
  body:
    application/json:
      type: !include ../../../../../src/main/resources/schema/wdk/users/steps/post-request.json
  responses:
    200:
      description: Success
      body:
        application/json:
          type: !include ../../../../../src/main/resources/schema/wdk/creation-post-response.json

/{step-id}:
  uriParameters:
    step-id:
      type: integer
      format: int64

  delete:
    description: Delete step.  Only allowed for steps that are not yet attached to a strategy.  Otherwise use strategy/ service.
    responses:
      204:
        description: No Content

  get:
    description: |
      * Returns full JSON of the step
          * This is to support the revise-a-search form (to fill in default values) and any display of the step's search configuration.
	  * The following are only validated when the step is run, so are not guaranteed to be valid at the time of this GET:
              * steps provided in input-step parameters are owned by the requester
              * datasets provided in input-dataset parameters are owned by the requester
          * Includes:
              * Name populated with default name if not sent in
              * Strategy ID (always null)
              * answerSpecComplete
              * estimatedSize (unpopulated since step has not yet run)
              * isValid (always true here since params had to have validated)
              * Newly populated dates (creation, last_run)
              * Step ID
    responses:
      200:
        description: Success
        body:
          application/json:
            type: !include ../../../../../src/main/resources/schema/wdk/users/steps/id/get-response.json

  patch:
    description: |
      * Used to modify the step (but not its searchConfig or placement within its strategy)
      * The only modifiable fields are:
          * name
          * isCollapsible
          * collapsedName
    body:
      application/json:
        type: !include ../../../../../src/main/resources/schema/wdk/users/steps/id/patch-request.json
    responses:
      204:
        description: No Content

  /answerSpec:
    put:
      description: |
        TODO: rename to /search-config
        update the searchConfig of a step (but do not re-run the step)
          * Any part of the searchConfig may be changed (to revise the step), except the following, which will cause validation failure:
              * The search name
              * input-step parameter values
          * The new searchConfig is validated
              * if validation fails, 400/500 response is returned and step is not updated
              * If validation passes:
                * estimatedSize is cleared for this and all downstream steps
      body:
        application/json:
          type: TODO
          example: TODO
      responses:
        204:
          description: No Content

  /answer:
    post:
      description: |
        GET by POST.  Get the formatted result of this step.
        * Input JSON is identical to value of the "formatting" property in answer service requests
            * If the body is empty, defaults are used, same as answer service
        * Preexisting answer spec of the step is used to create the answer
        * The output is same as the answer service (i.e. all normal reporters are supported)
        * Step status fields (estimatedSize, isValid, last_run) are updated
        * Steps having one or more input-step parameters but not having a strategy ID will  not part of a strategy will error as invalid answer spec (since answer params should have empty string values)
      body:
        application/json:
	  type: !include ../../../../../src/main/resources/schema/wdk/includes/answer-formatConfig-json-request.json
      responses:
        200:
          description: Success

  /answer/filter-summary/{name}:
    uriParameters:
      name:
        type: string
    get:
      description: >
        return data needed to display a filter's UI
      responses:
        200:
          description: Success

  /analyses:
    get:
      description: Retrieve a list of analyses that have been run on this step.
      responses:
        200:
          body:
            application/json:
              type: !include ../../../../../src/main/resources/schema/wdk/users/steps/analyses/get-response.json
              example: !include ../../example/users/steps/get-analyses-200.json
    post:
      description: Creates a new analysis (i.e. tab)
      body:
        application/json:
          example: !include ../../example/users-steps-analyses-post-request.json
      responses:
        200:
          body:
            application/json:
              type: !include ../../../../../src/main/resources/schema/wdk/users/steps/analyses/post-response.json
              example: !include ../../example/StepAnalysisInstanceSummary.example.json

    /{analysis-id}:
      uriParameters:
        analysis-id:
          description: Analysis instance id.
          type: integer
      delete:
        description: Deletes this analysis and associated run if present
      get:
        description: Returns the resource above for form population
      patch:
        description: >
          analysisType is not supported; if parameters is modified, then results
          are cleared
        body:
          application/json:
            example: !include ../../example/users-steps-analyses-patch-request.json
        responses:
          204:
            description: No Content
          422:
            description: Unprocessable entry
            body:
               application/json:
                  type: !include ../../../../../src/main/resources/schema/includes/string-array.json

      /result:
        get:
          description: >
            COMPLETE: return 200 + plugin-specific JSON object result, else 204:
            No Content or some other code meaning use view for the current
            status code rather than the custom component to display the result
          responses:
            200:
            204:
        post:
          description: |
            Kicks off a run

            HTTP codes based on status:
            ```none
            - RUNNING: return 202: Accepted
            - INVALID: 400 or 406
            - Any of the other statuses (below), run it, return 202: Accepted
                COMPLETE
                NOT_YET_RUN
                STEP_REVISED // new analysis, created as copy during step revise
                INTERRUPTED // server shutdown or other interruption
                ERROR // no longer running due to runtime error
                EXPIRED // plugin ran too long and was shut down
                OUT_OF_DATE // has been run but results cache purged
            ```
          responses:
            202:
              description: >
                status `RUNNING`, `COMPLETE`, `NOT_YET_RUN`, `STEP_REVISED`,
                `INTERRUPTED`, `ERROR`, `EXPIRED`, `OUT_OF_DATE`
            400:
              description: status `INVALID`
            406:
              description: status `INVALID`

        /status:
          get:
            responses:
              200:
                description: |
                  ```none
                  status: enum
                    NOT_YET_RUN  = user never submitted form and not auto-run
                    STEP_REVISED = new analysis, created as copy during step revise
                    INVALID      = made for a step it does not support; should never be run
                    RUNNING      = currently running (or interrupted but not yet 'fixed')
                    COMPLETE     = completed successfully
                    INTERRUPTED  = server shutdown or other interruption
                    ERROR        = no longer running due to runtime error
                    EXPIRED      = plugin ran too long and was shut down
                    OUT_OF_DATE  = has been run but results cache purged
                  ```
                body:
                  application/json:
                    type: !include ../../../../../src/main/resources/schema/wdk/users/steps/analyses/result/status/get-response.json

  /analysis-types:
    get:
      description: Get names, display names, and icons of available tools.
      responses:
        200:
          body:
            application/json:
              type: !include ../../../../../src/main/resources/schema/wdk/users/steps/analysis-types/get-response.json

    /{analysis-type-name}:
      uriParameters:
        analysis-type-name:
          type: string
      get:
        description: >
          Get (possibly dynamic) form creation information + default
          values.
        responses:
          200:
            body:
              application/json:
